<?xml version="1.0" encoding="UTF-8"?><ctl:package xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:ctl="http://www.occamlab.com/ctl" xmlns:ocp="http://www.occamlab.com/te/parsers" xmlns:tep="http://teamengine.sourceforge.net/parsers" xmlns:saxon="http://saxon.sf.net/" xmlns:wrs="http://www.opengis.net/cat/wrs/1.0" xmlns:rim="urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0" xmlns:csw="http://www.opengis.net/cat/csw/2.0.2" xmlns:ows="http://www.opengis.net/ows" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:dct="http://purl.org/dc/terms/" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xsd="http://www.w3.org/2001/XMLSchema">

    <ctl:package>

  <ctl:package xmlns:gml="http://www.opengis.net/gml">
	
    <ctl:function name="ctl:CallXMLValidatingParser">
		<ctl:param name="doc"/>
		<ctl:param name="instruction"/>
		<ctl:description>Invokes the XML Schema validator.</ctl:description>
		<ctl:java class="com.occamlab.te.parsers.XMLValidatingParser" method="checkXMLRules" initialized="true"/>
	</ctl:function>
    
    <ctl:function name="ctl:CallSchematronValidatingParser">
		<ctl:param name="doc"/>
		<ctl:param name="schema"/>
		<ctl:param name="phase"/>
		<ctl:description>Invokes the Schematon validator.</ctl:description>
		<ctl:java class="com.occamlab.te.parsers.SchematronValidatingParser" method="checkSchematronRules" initialized="true"/>
    </ctl:function>

  <ctl:function name="ctl:XMLValidator">
		<ctl:param name="doc"/>
		<ctl:param name="instruction"/>
		<ctl:return>A list of errors (NodeList of "error" elements).</ctl:return>
		<ctl:description>Invokes the XML Schema validator.</ctl:description>
		<ctl:java class="com.occamlab.te.parsers.XMLValidatingParser" method="validate" initialized="true"/>
  </ctl:function>

	<ctl:function name="ctl:SchematronValidator">
		<ctl:param name="doc"/>
		<ctl:param name="schema"/>
		<ctl:param name="phase"/>
		<ctl:return>A list of errors (NodeList of "error" elements).</ctl:return>
		<ctl:description>Invokes the Schematon validator.</ctl:description>
		<ctl:java class="com.occamlab.te.parsers.SchematronValidatingParser" method="validate" initialized="true"/>
	</ctl:function>
    
    <ctl:function name="ctl:version-as-integer">
      <ctl:param name="version-string">Version String</ctl:param>
      <ctl:description>Gets the integer value of a version number</ctl:description>
      <ctl:code>
         <xsl:variable name="major" select="substring-before($version-string, '.')"/>
         <xsl:variable name="minor" select="substring-before(substring-after($version-string, '.'), '.')"/>
         <xsl:variable name="patch" select="substring-after(substring-after($version-string, '.'), '.')"/>
         <xsl-value-of select="$major * 10000 + $minor * 100 + $patch"/>
      </ctl:code>
   </ctl:function>
   
   <ctl:function name="csw:disjoint-envelopes">
      <ctl:param name="env">The gml:Envelope specifying the area of interest</ctl:param>
      <ctl:param name="bbox">The ows:BoundingBox describing some csw:Record</ctl:param>
      <ctl:return>
      Returns '1' if the envelopes are disjoint or '0' if they are not (i.e. they 
      intersect). Returns '-1' if the CRS references do not match.
      </ctl:return>
      <ctl:description>Determines if two envelopes are disjoint. If not, they intersect.</ctl:description>
      <ctl:code>
         <xsl:variable name="minX1" select="xsd:decimal(substring-before($env//gml:lowerCorner, ' '))"/>
         <xsl:variable name="maxX1" select="xsd:decimal(substring-before($env//gml:upperCorner, ' '))"/>
         <xsl:variable name="minY1" select="xsd:decimal(substring-after($env//gml:lowerCorner, ' '))"/>
         <xsl:variable name="maxY1" select="xsd:decimal(substring-after($env//gml:upperCorner, ' '))"/>
         <xsl:variable name="minX2" select="xsd:decimal(substring-before($bbox//ows:LowerCorner, ' '))"/>
         <xsl:variable name="maxX2" select="xsd:decimal(substring-before($bbox//ows:UpperCorner, ' '))"/>
         <xsl:variable name="minY2" select="xsd:decimal(substring-after($bbox//ows:LowerCorner, ' '))"/>
         <xsl:variable name="maxY2" select="xsd:decimal(substring-after($bbox//ows:UpperCorner, ' '))"/>
         <xsl:choose>
            <xsl:when test="$env//@srsName != $bbox//@crs">-1</xsl:when>
            <xsl:when test="($minX2 gt $maxX1) or ($minY2 gt $maxY1) or ($maxX2 lt $minX1) or ($maxY2 lt $minY1)">1</xsl:when>
            <xsl:otherwise>0</xsl:otherwise>
         </xsl:choose>
      </ctl:code>
   </ctl:function>
   
   <ctl:function name="wrs:disjoint-envelopes">
      <ctl:param name="env">The gml:Envelope specifying the area of interest</ctl:param>
      <ctl:param name="bbox">The gml:Envelope describing some rim:RegistryObject</ctl:param>
      <ctl:return>
      Returns '1' if the envelopes are disjoint or '0' if they are not (i.e. they 
      intersect). Returns '-1' if the CRS references do not match.
      </ctl:return>
      <ctl:description>Determines if two envelopes are disjoint. If not, they intersect.</ctl:description>
      <ctl:code>
         <xsl:variable name="minX1" select="xsd:decimal(substring-before($env//gml:lowerCorner, ' '))"/>
         <xsl:variable name="maxX1" select="xsd:decimal(substring-before($env//gml:upperCorner, ' '))"/>
         <xsl:variable name="minY1" select="xsd:decimal(substring-after($env//gml:lowerCorner, ' '))"/>
         <xsl:variable name="maxY1" select="xsd:decimal(substring-after($env//gml:upperCorner, ' '))"/>
         <xsl:variable name="minX2" select="xsd:decimal(substring-before($bbox//gml:lowerCorner, ' '))"/>
         <xsl:variable name="maxX2" select="xsd:decimal(substring-before($bbox//gml:upperCorner, ' '))"/>
         <xsl:variable name="minY2" select="xsd:decimal(substring-after($bbox//gml:lowerCorner, ' '))"/>
         <xsl:variable name="maxY2" select="xsd:decimal(substring-after($bbox//gml:upperCorner, ' '))"/>
         <xsl:choose>
            <xsl:when test="$env//@srsName != $bbox//@srsName">-1</xsl:when>
            <xsl:when test="($minX2 gt $maxX1) or ($minY2 gt $maxY1) or ($maxX2 lt $minX1) or ($maxY2 lt $minY1)">1</xsl:when>
            <xsl:otherwise>0</xsl:otherwise>
         </xsl:choose>
      </ctl:code>
   </ctl:function>
   
   <ctl:function name="ctl:encode-basic-credentials">
    <ctl:param name="userid-basic"/>
    <ctl:param name="password-basic"/>
    <ctl:return>The base64-encoded value of the Authorization HTTP/1.1 request header (Basic credentials).</ctl:return>
    <ctl:description>Encodes the username and password as described in RFC 2617.</ctl:description>
    <ctl:code xmlns:b64="net.sf.saxon.value.Base64BinaryValue">
		<xsl:value-of select="concat('Basic ',b64:new(string-to-codepoints(concat($userid-basic,':',$password-basic))))"/>
    </ctl:code>
  </ctl:function>
</ctl:package>
   
  <ctl:test name="ctl:compare-images">
    <ctl:param name="img1-src"/>
    <ctl:param name="img2-src"/>
    <ctl:param name="img1-label"/>
    <ctl:param name="img2-label"/>
    <ctl:param name="text-label"/>
    <ctl:assertion>The received image must be similar to the reference image.</ctl:assertion>
    <ctl:comment>Prompts the user to assess the degree of similarity between a 
    received image and a reference image. Fails if the user chooses 'no', passes 
    if 'yes'.</ctl:comment>
    <ctl:code>
		<xsl:variable name="img-width">350</xsl:variable>
		<xsl:variable name="img-height">350</xsl:variable>
		<xsl:variable name="form-width">800</xsl:variable>
		<xsl:variable name="form-height">600</xsl:variable>		
		<xsl:variable name="form-values">
		  <ctl:form width="{$form-width}" height="{$form-height}">
		   <table border="2">
			  <tr>
				 <td>
					<b><xsl:value-of select="$img1-label"/></b>
				 </td>
				 <td>
					<b><xsl:value-of select="$img2-label"/></b>
				 </td>
			  </tr>
			  <tr>
				 <td>
					<img width="{$img-width}" height="{$img-height}">
					   <xsl:attribute name="src"><xsl:value-of select="$img1-src"/></xsl:attribute>
					</img>
				 </td>
				 <td>
					<img width="{$img-width}" height="{$img-height}">
					   <xsl:attribute name="src"><xsl:value-of select="$img2-src"/></xsl:attribute>
					</img>
				 </td>
			  </tr>
		   </table>
		   <p>
			   <xsl:value-of select="$text-label"/>
		   </p>
		   <p>
			  <input type="submit" name="submit" value="yes"/>
			  <input type="submit" name="submit" value="no"/>
		   </p>
		</ctl:form>
	  </xsl:variable>
	  <xsl:if test="not($form-values/values/value[@key='submit']='yes')">
		<ctl:message>[FAILURE] Images are dissimilar.</ctl:message>
		<ctl:fail/>
	  </xsl:if>
    </ctl:code>
  </ctl:test>
 
	<!-- Sample usage:
	<ctl:call-test name="ctl:SchematronValidatingParser">
		<ctl:with-param name="doc" select="$response"/>
		<ctl:with-param name="schema">sch/csw/2.0.2/CSWCapabilities.sch</ctl:with-param>
		<ctl:with-param name="phase">DefaultPhase</ctl:with-param>
	</ctl:call-test>
    -->
	<ctl:test name="ctl:SchematronValidatingParser">
			<ctl:param name="doc"/>
			<ctl:param name="schema"/>
			<ctl:param name="phase"/>
			<ctl:assertion>Validate an XML instance against a Schematron schema using the given phase.</ctl:assertion>
			<ctl:code>
				<xsl:choose>
					<xsl:when test="not($doc)">
						<ctl:message>Error: Null input document.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:variable name="results">
							<ctl:call-function name="ctl:SchematronValidator">
								<ctl:with-param name="doc"><xsl:copy-of select="$doc"/></ctl:with-param>
								<ctl:with-param name="schema" select="string($schema)"/>
								<ctl:with-param name="phase" select="string($phase)"/>
							</ctl:call-function>
						</xsl:variable>
						<xsl:if test="count($results/*) &gt; 0">
							<ctl:message>Total number of errors detected: <xsl:copy-of select="count($results/*)"/></ctl:message>
							<xsl:for-each select="$results/*">
								<ctl:message><xsl:value-of select="concat('Error ', position())"/>: <xsl:copy-of select="."/></ctl:message>
							</xsl:for-each>
							<ctl:fail/>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
	</ctl:test>	

	<!-- Sample usage:
	<ctl:call-test name="ctl:XMLValidatingParser">
			<ctl:with-param name="doc"><xsl:copy-of select="$response"/></ctl:with-param>
			<ctl:with-param name="instruction">
				<ctlp:schemas>
					<ctlp:schema type="resource">xsd/ogc/csw/2.0.2/csw-2.0.2.xsd</ctlp:schema>
				</ctlp:schemas>
			</ctl:with-param>
	</ctl:call-test>
    -->
  <ctl:test name="ctl:XMLValidatingParser">
    <ctl:param name="doc"/>
    <ctl:param name="instruction"/>
    <ctl:assertion>Validates the XML instance against the set of XML Schemas specified using the given instruction parameter.</ctl:assertion>
    <ctl:code>
		<xsl:choose>
			<xsl:when test="not($doc)">
				<ctl:message>Error: Null input document.</ctl:message>
				<ctl:fail/>
			</xsl:when>
			<xsl:otherwise>
				<xsl:variable name="results">
					<ctl:call-function name="ctl:XMLValidator">
						<ctl:with-param name="doc"><xsl:copy-of select="$doc"/></ctl:with-param>
						<ctl:with-param name="instruction"><xsl:copy-of select="$instruction"/></ctl:with-param>
					</ctl:call-function>
				</xsl:variable>
				<xsl:if test="count($results/*) &gt; 0">
					<ctl:message>Total number of errors detected: <xsl:copy-of select="count($results/*)"/></ctl:message>
					<xsl:for-each select="$results/*">
						<ctl:message><xsl:value-of select="concat('Error ', position())"/>: <xsl:copy-of select="."/></ctl:message>
					</xsl:for-each>
					<ctl:fail/>
				</xsl:if>
			</xsl:otherwise>
		</xsl:choose>
    </ctl:code>
  </ctl:test>
    
  <!-- Sample usage:
	<ctl:call-test name="ctl:XMLValidatingParser.CSW">
	    <ctl:with-param name="doc"><xsl:copy-of select="$response//content/*"/></ctl:with-param>
	</ctl:call-test>
    -->
	<ctl:test name="ctl:XMLValidatingParser.CSW">
			<ctl:param name="doc"/>
			<ctl:assertion>
            Validates a given XML document against the CSW 2.0.2 schema set.
            </ctl:assertion>
			<ctl:code>
				<ctl:call-test name="ctl:XMLValidatingParser">
					<ctl:with-param name="doc"><xsl:copy-of select="$doc"/></ctl:with-param>
					<ctl:with-param name="instruction">				
						<ocp:schemas>
							<ocp:schema type="resource">xsd/ogc/csw/2.0.2/csw-2.0.2.xsd</ocp:schema>
						</ocp:schemas>
					</ctl:with-param>
				</ctl:call-test>
			</ctl:code>
	</ctl:test>
    
	<ctl:parser name="tep:XMLValidatingParser.CSW">
		<ctl:java class="com.occamlab.te.parsers.XMLValidatingParser" method="parse" initialized="true">
			<ctl:with-param name="schemas_links">
				<ocp:schemas>
					<ocp:schemas>
							<ocp:schema type="resource">xsd/ogc/csw/2.0.2/csw-2.0.2.xsd</ocp:schema>
						</ocp:schemas>
				</ocp:schemas>
			</ctl:with-param>
		</ctl:java>
	</ctl:parser>
    
  <!-- Sample usage:
  <ctl:call-test name="ctl:XMLValidatingParser.WRS">
    <ctl:with-param name="doc"><xsl:copy-of select="$response//content/*"/></ctl:with-param>
  </ctl:call-test>
    -->
  <ctl:test name="ctl:XMLValidatingParser.WRS">
    <ctl:param name="doc"/>
    <ctl:assertion>
    A service response entity must validate against the WRS schemas.
    </ctl:assertion>
    <ctl:code>
        <ctl:call-test name="ctl:XMLValidatingParser">
            <ctl:with-param name="doc"><xsl:copy-of select="$doc"/></ctl:with-param>
            <ctl:with-param name="instruction">				
                <ocp:schemas>
                    <ocp:schema type="resource">xsd/ogc/wrs/1.0/wrs-1.0.0.xsd</ocp:schema>
                </ocp:schemas>
            </ctl:with-param>
        </ctl:call-test>
    </ctl:code>
  </ctl:test>

  <ctl:parser name="tep:XMLValidatingParser.WRS">
		<ctl:java class="com.occamlab.te.parsers.XMLValidatingParser" method="parse" initialized="true">
			<ctl:with-param name="schemas_links">
				<ocp:schemas>
					<ocp:schemas>
							<ocp:schema type="resource">xsd/ogc/wrs/1.0/wrs-1.0.0.xsd</ocp:schema>					
						</ocp:schemas>
				</ocp:schemas>
			</ctl:with-param>
		</ctl:java>
	</ctl:parser>

	<ctl:parser name="tep:XMLValidatingParser.OWS">
		<ctl:java class="com.occamlab.te.parsers.XMLValidatingParser" method="parse" initialized="true">
			<ctl:with-param name="schemas_links">
				<ocp:schemas>
					<ocp:schema type="resource">xsd/ogc/ows/1.0.0/ows-1.0.0.xsd</ocp:schema>
				</ocp:schemas>
			</ctl:with-param>
		</ctl:java>
	</ctl:parser>	
	
	<ctl:parser name="tep:XMLValidatingParser.XMLSchema">
		<ctl:java class="com.occamlab.te.parsers.XMLValidatingParser" method="parse" initialized="true">
			<ctl:with-param name="schemas_links">
				<ocp:schemas>
					<ocp:schema type="resource">xsd/w3c/xmlschema/1.0/XMLSchema.xsd</ocp:schema>
				</ocp:schemas>
			</ctl:with-param>
		</ctl:java>
	</ctl:parser>
    
    <!-- Sample usage:
	<tep:SchematronValidatingParser>
	    <ocp:schemas>
		    <ocp:schema type="resource" phase="Default">sch/csw/2.0.2/CSWCapabilities.sch</ocp:schema>
	    </ocp:schemas>
	</tep:SchematronValidatingParser>
    -->
	<ctl:parser name="tep:SchematronValidatingParser">
		<ctl:param name="schema_link"/>
		<ctl:java class="com.occamlab.te.parsers.SchematronValidatingParser" method="parse" initialized="true"/>
	</ctl:parser>		
	
	<!-- Sample usage:
	<tep:SchematronValidatingParser.CSWCapabilities />
    -->
	<ctl:parser name="tep:SchematronValidatingParser.CSWCapabilities">
		<ctl:java class="com.occamlab.te.parsers.SchematronValidatingParser" method="parse" initialized="true">
			<ctl:with-param name="schema_link">
					<ocp:schemas>
						<ocp:schema type="resource" phase="DefaultPhase">sch/csw/2.0.2/Capabilities.sch</ocp:schema>
					</ocp:schemas>
			</ctl:with-param>
		</ctl:java>
	</ctl:parser>
  
</ctl:package>
    <ctl:package xmlns:parsers="http://www.occamlab.com/te/parsers">

   <!-- include CSW test packages -->
   <ctl:package xmlns="http://www.occamlab.com/ctl" xmlns:p="http://teamengine.sourceforge.net/parsers">

    <ctl:test name="csw:GetCapabilities-GET">
      <param name="csw.capabilities.doc"/>
      <ctl:assertion>
      Run test group for GetCapabilities requests using the GET method.
      </ctl:assertion>
      <ctl:code>
        <xsl:variable name="csw.GetCapabilities.get.url">
		    <xsl:value-of select="$csw.capabilities.doc//ows:OperationsMetadata/ows:Operation[@name='GetCapabilities']/ows:DCP/ows:HTTP/ows:Get/@xlink:href"/>
		</xsl:variable>
        <ctl:message>Target endpoint is <xsl:value-of select="$csw.GetCapabilities.get.url"/></ctl:message>
        
  <ctl:call-test name="csw:csw-2.0.2-GetCapabilities-tc1.1">
    <ctl:with-param name="csw.GetCapabilities.get.url" select="$csw.GetCapabilities.get.url"/>
  </ctl:call-test>
  <ctl:call-test name="csw:csw-2.0.2-GetCapabilities-tc1.2">
    <ctl:with-param name="csw.GetCapabilities.get.url" select="$csw.GetCapabilities.get.url"/>
  </ctl:call-test>
  <ctl:call-test name="csw:csw-2.0.2-GetCapabilities-tc1.3">
    <ctl:with-param name="csw.GetCapabilities.get.url" select="$csw.GetCapabilities.get.url"/>
  </ctl:call-test>
  <ctl:call-test name="csw:csw-2.0.2-GetCapabilities-tc2.1">
    <ctl:with-param name="csw.GetCapabilities.get.url" select="$csw.GetCapabilities.get.url"/>
  </ctl:call-test>
  <ctl:call-test name="csw:csw-2.0.2-GetCapabilities-tc3.1">
    <ctl:with-param name="csw.GetCapabilities.get.url" select="$csw.GetCapabilities.get.url"/>
  </ctl:call-test>
  <ctl:call-test name="csw:csw-2.0.2-GetCapabilities-tc4.1">
    <ctl:with-param name="csw.GetCapabilities.get.url" select="$csw.GetCapabilities.get.url"/>
  </ctl:call-test>
  <ctl:call-test name="csw:csw-2.0.2-GetCapabilities-tc5.1">
    <ctl:with-param name="csw.GetCapabilities.get.url" select="$csw.GetCapabilities.get.url"/>
  </ctl:call-test>
  <ctl:call-test name="csw:csw-2.0.2-GetCapabilities-tc5.2">
    <ctl:with-param name="csw.GetCapabilities.get.url" select="$csw.GetCapabilities.get.url"/>
  </ctl:call-test>
  <ctl:call-test name="csw:csw-2.0.2-GetCapabilities-tc6.1">
    <ctl:with-param name="csw.GetCapabilities.get.url" select="$csw.GetCapabilities.get.url"/>
  </ctl:call-test>
  <ctl:call-test name="csw:csw-2.0.2-GetCapabilities-tc7.1">
    <ctl:with-param name="csw.GetCapabilities.get.url" select="$csw.GetCapabilities.get.url"/>
  </ctl:call-test>
  <ctl:call-test name="csw:csw-2.0.2-GetCapabilities-tc7.2">
    <ctl:with-param name="csw.GetCapabilities.get.url" select="$csw.GetCapabilities.get.url"/>
  </ctl:call-test>
  <ctl:call-test name="csw:csw-2.0.2-GetCapabilities-tc8.1">
    <ctl:with-param name="csw.GetCapabilities.get.url" select="$csw.GetCapabilities.get.url"/>
    <ctl:with-param name="csw.GetCapabilities.formats" select="$csw.capabilities.doc//ows:Operation[@name='GetCapabilities']/ows:Parameter[lower-case(@name)='acceptformats']"/>
  </ctl:call-test>
      </ctl:code>
    </ctl:test>
   
    <test name="csw:csw-2.0.2-GetCapabilities-tc1.1">
      <param name="csw.GetCapabilities.get.url"/>
      <assertion>
      All OGC web services must implement GetCapabilities using the GET method. 
      The response to a GetCapabilities request without the optional version 
      parameter must include a complete representation of the capabilities 
      document corresponding to the latest supported version.
      </assertion>
      <comment>Pass if the response is schema valid and has no missing elements.</comment>
      <link>OGC 05-008c1: 7.1 (p.10)</link>
		<code>
			<xsl:variable name="response">
				<request>
					<url>
						<xsl:value-of select="$csw.GetCapabilities.get.url"/>
					</url>
					<method>GET</method>
					<param name="service">CSW</param>
					<param name="request">GetCapabilities</param>
					<p:XMLValidatingParser.CSW/>
				</request>
			</xsl:variable>
			
            <xsl:choose>
              <xsl:when test="not($response/*)">
                  <ctl:message>FAILURE: Missing response entity.</ctl:message>
                  <ctl:fail/>
              </xsl:when>
              <xsl:otherwise>
                <ctl:call-test name="ctl:SchematronValidatingParser">
		            <ctl:with-param name="doc" select="$response"/>
		            <ctl:with-param name="schema">sch/csw/2.0.2/Capabilities.sch</ctl:with-param>
		            <ctl:with-param name="phase">DefaultPhase</ctl:with-param>
	            </ctl:call-test>
              </xsl:otherwise>
            </xsl:choose>
		</code>
	</test>
    
    <test name="csw:csw-2.0.2-GetCapabilities-tc1.2">
      <param name="csw.GetCapabilities.get.url"/>
      <assertion>
      The response to a GetCapabilities request with the ACCEPTVERSIONS parameter 
      must include a complete representation of the capabilities document corresponding 
      to the first supported version in the list.
      </assertion>
      <comment>Same pass criteria as for csw-2.0.2-GetCapabilities-tc1.1</comment>
      <link>OGC-05-008, 7.3.2</link>
		<code>
			<xsl:variable name="response">
				<request>
					<url>
						<xsl:value-of select="$csw.GetCapabilities.get.url"/>
					</url>
					<method>GET</method>
					<param name="SERVICE">CSW</param>
					<param name="REQUEST">GetCapabilities</param>
                    <param name="ACCEPTVERSIONS">2.0.2,2.0.0</param>
					<p:XMLValidatingParser.CSW/>
				</request>
			</xsl:variable>
			
            <xsl:choose>
              <xsl:when test="not($response/*)">
                  <ctl:message>FAILURE: Missing response entity.</ctl:message>
                  <ctl:fail/>
              </xsl:when>
              <xsl:otherwise>
                <ctl:call-test name="ctl:SchematronValidatingParser">
		            <ctl:with-param name="doc" select="$response"/>
		            <ctl:with-param name="schema">sch/csw/2.0.2/Capabilities.sch</ctl:with-param>
		            <ctl:with-param name="phase">DefaultPhase</ctl:with-param>
	            </ctl:call-test>
              </xsl:otherwise>
            </xsl:choose>
		</code>
	</test>
    
    <test name="csw:csw-2.0.2-GetCapabilities-tc1.3">
      <param name="csw.GetCapabilities.get.url"/>
      <assertion>
      The response to a GetCapabilities request containing an ACCEPTVERSIONS 
      parameter that DOES NOT list a supported version must include an exception 
      with exceptionCode="VersionNegotiationFailed".
      </assertion>
      <comment>
      Pass if all of the following conditions are true: (1) the response 
      entity has &lt;ows:ExceptionReport&gt; as the document element; and (2) 
      ows:Exception/@exceptionCode="VersionNegotiationFailed".
      </comment>
      <link>OGC-05-008, 7.3.2</link>
		<code>
			<xsl:variable name="response">
				<request>
					<url>
						<xsl:value-of select="$csw.GetCapabilities.get.url"/>
					</url>
					<method>GET</method>
					<param name="SERVICE">CSW</param>
					<param name="REQUEST">GetCapabilities</param>
                    <param name="ACCEPTVERSIONS">2006.10.29</param>
					<p:XMLValidatingParser.OWS/>
				</request>
			</xsl:variable>
			
            <xsl:choose>
              <xsl:when test="not($response/*)">
                  <ctl:message>FAILURE: Missing response entity.</ctl:message>
                  <ctl:fail/>
              </xsl:when>
              <xsl:otherwise>
                <ctl:call-test name="ctl:SchematronValidatingParser">
		            <ctl:with-param name="doc" select="$response"/>
		            <ctl:with-param name="schema">sch/ows/1.0.0/ExceptionReport.sch</ctl:with-param>
		            <ctl:with-param name="phase">VersionNegotiationFailedPhase</ctl:with-param>
	            </ctl:call-test>
              </xsl:otherwise>
            </xsl:choose>
		</code>
	</test>
    
    <test name="csw:csw-2.0.2-GetCapabilities-tc2.1">
      <param name="csw.GetCapabilities.get.url"/>
      <assertion>
      The response to a GetCapabilities request that omits a required parameter 
      name or value must include an exception with exceptionCode="MissingParameterValue".
      </assertion>
      <comment>
      Pass if all of the following conditions are true: (1) the response 
      entity has &lt;ows:ExceptionReport&gt; as the document element; and (2) 
      ows:Exception/@exceptionCode="MissingParameterValue".
      </comment>
      <link>OGC-05-008, 7.4.1</link>
		<code>
			<xsl:variable name="response">
				<request>
					<url>
						<xsl:value-of select="$csw.GetCapabilities.get.url"/>
					</url>
					<method>GET</method>
					<param name="request">GetCapabilities</param>
					<p:XMLValidatingParser.OWS/>
				</request>
			</xsl:variable>
			
            <xsl:choose>
              <xsl:when test="not($response/*)">
                  <ctl:message>FAILURE: Missing response entity.</ctl:message>
                  <ctl:fail/>
              </xsl:when>
              <xsl:otherwise>
                <ctl:call-test name="ctl:SchematronValidatingParser">
		            <ctl:with-param name="doc" select="$response"/>
		            <ctl:with-param name="schema">sch/ows/1.0.0/ExceptionReport.sch</ctl:with-param>
		            <ctl:with-param name="phase">MissingParameterValuePhase</ctl:with-param>
	            </ctl:call-test>
                <xsl:if test="not(lower-case($response//ows:Exception/@locator) = 'service')">
                  <ctl:message>
                  FAILURE: ows:Exception/@locator is absent or does not identify the missing 'service' parameter.
                  </ctl:message>
                  <ctl:fail/>
                </xsl:if>
              </xsl:otherwise>
            </xsl:choose>
		</code>
	</test>
    
    <test name="csw:csw-2.0.2-GetCapabilities-tc3.1">
      <param name="csw.GetCapabilities.get.url"/>
      <assertion>
      The response to a KVP request that includes an invalid parameter 
      value must include an exception with exceptionCode="InvalidParameterValue".
      </assertion>
      <comment>
      Pass if all of the following conditions are true: (1) the response 
      entity has &lt;ows:ExceptionReport&gt; as the document element; and (2) 
      ows:Exception/@exceptionCode="InvalidParameterValue".
      </comment>
      <link>OGC-05-008, 7.4.1</link>
		<code>
			<xsl:variable name="response">
				<request>
					<url>
						<xsl:value-of select="$csw.GetCapabilities.get.url"/>
					</url>
					<method>GET</method>
					<param name="service">FOO</param>
					<param name="request">GetCapabilities</param>
					<p:XMLValidatingParser.OWS/>
				</request>
			</xsl:variable>
			
            <xsl:choose>
              <xsl:when test="not($response/*)">
                  <ctl:message>FAILURE: Missing response entity.</ctl:message>
                  <ctl:fail/>
              </xsl:when>
              <xsl:otherwise>
                <ctl:call-test name="ctl:SchematronValidatingParser">
		            <ctl:with-param name="doc" select="$response"/>
		            <ctl:with-param name="schema">sch/ows/1.0.0/ExceptionReport.sch</ctl:with-param>
		            <ctl:with-param name="phase">InvalidParameterValuePhase</ctl:with-param>
	            </ctl:call-test>
                <xsl:if test="not(lower-case($response//ows:Exception/@locator) = 'service')">
                  <ctl:message>
                  FAILURE: ows:Exception/@locator is absent or does not identify the invalid 'service' parameter.
                  </ctl:message>
                  <ctl:fail/>
                </xsl:if>
              </xsl:otherwise>
            </xsl:choose>
		</code>
	</test>
    
	<test name="csw:csw-2.0.2-GetCapabilities-tc4.1">
      <param name="csw.GetCapabilities.get.url"/>
      <assertion>
      Parameter names in KVP strings shall be handled in a case-insensitive manner.
      </assertion>
      <comment>Same pass criteria as for csw-2.0.2-GetCapabilities-tc1.1</comment>
		<code>
			<xsl:variable name="response">
				<request>
					<url>
						<xsl:value-of select="$csw.GetCapabilities.get.url"/>
					</url>
					<method>GET</method>
					<param name="sErViCe">CSW</param>
					<param name="REQUEST">GetCapabilities</param>
                    <param name="version">2.0.2</param>
					<p:XMLValidatingParser.CSW/>
				</request>
			</xsl:variable>
			
            <xsl:choose>
              <xsl:when test="not($response/*)">
                  <ctl:message>FAILURE: Missing response entity.</ctl:message>
                  <ctl:fail/>
              </xsl:when>
              <xsl:otherwise>
                <ctl:call-test name="ctl:SchematronValidatingParser">
		            <ctl:with-param name="doc" select="$response"/>
		            <ctl:with-param name="schema">sch/csw/2.0.2/Capabilities.sch</ctl:with-param>
		            <ctl:with-param name="phase">DefaultPhase</ctl:with-param>
	            </ctl:call-test>
              </xsl:otherwise>
            </xsl:choose>
		</code>
	</test>
    
    <test name="csw:csw-2.0.2-GetCapabilities-tc5.1">
      <param name="csw.GetCapabilities.get.url"/>
      <assertion>
      Unrecognized query parameters must be ignored.
      </assertion>
      <comment>Same pass criteria as for csw-2.0.2-GetCapabilities-tc1.1.</comment>
		<code>
			<xsl:variable name="response">
				<request>
					<url>
						<xsl:value-of select="$csw.GetCapabilities.get.url"/>
					</url>
					<method>GET</method>
					<param name="service">CSW</param>
					<param name="request">GetCapabilities</param>
                    <param name="acceptversions">2.0.2</param>
                    <param name="date">2006-10-20</param>
					<p:XMLValidatingParser.CSW/>
				</request>
			</xsl:variable>
			
            <xsl:choose>
              <xsl:when test="not($response/*)">
                  <ctl:message>FAILURE: Missing response entity.</ctl:message>
                  <ctl:fail/>
              </xsl:when>
              <xsl:otherwise>
                <ctl:call-test name="ctl:SchematronValidatingParser">
		            <ctl:with-param name="doc" select="$response"/>
		            <ctl:with-param name="schema">sch/csw/2.0.2/Capabilities.sch</ctl:with-param>
		            <ctl:with-param name="phase">DefaultPhase</ctl:with-param>
	            </ctl:call-test>
              </xsl:otherwise>
            </xsl:choose>
		</code>
	</test>
    
    <test name="csw:csw-2.0.2-GetCapabilities-tc5.2">
      <param name="csw.GetCapabilities.get.url"/>
      <assertion>
      The response to a GetCapabilities request that includes an unsupported 
      AcceptFormats parameter value must include the default XML representation 
      of the capabilities document.
      </assertion>
		<code>
			<xsl:variable name="response">
				<request>
					<url>
						<xsl:value-of select="$csw.GetCapabilities.get.url"/>
					</url>
					<method>GET</method>
					<param name="service">CSW</param>
					<param name="request">GetCapabilities</param>
                    <param name="acceptformats">message/example</param>
					<p:XMLValidatingParser.CSW/>
				</request>
			</xsl:variable>
			
            <xsl:choose>
              <xsl:when test="not($response/*)">
                  <ctl:message>FAILURE: Missing response entity.</ctl:message>
                  <ctl:fail/>
              </xsl:when>
              <xsl:otherwise>
                <ctl:call-test name="ctl:SchematronValidatingParser">
		            <ctl:with-param name="doc" select="$response"/>
		            <ctl:with-param name="schema">sch/csw/2.0.2/Capabilities.sch</ctl:with-param>
		            <ctl:with-param name="phase">DefaultPhase</ctl:with-param>
	            </ctl:call-test>
              </xsl:otherwise>
            </xsl:choose>
		</code>
	</test>
    
    <test name="csw:csw-2.0.2-GetCapabilities-tc6.1">
      <param name="csw.GetCapabilities.get.url"/>
      <assertion>
      A response message containing an entity body must contain a Content-Type entity 
      header field that correctly indicates the media type of the message body.
      </assertion>
      <comment>Pass if the Content-Type entity header field indicates an XML media type.</comment>
      <link>OGC 05-008: 11.7 (p.61)</link>
		<code>
			<xsl:variable name="response">
				<request>
					<url>
						<xsl:value-of select="$csw.GetCapabilities.get.url"/>
					</url>
					<method>GET</method>
					<param name="service">CSW</param>
					<param name="request">GetCapabilities</param>
					<parsers:HTTPParser/>
				</request>
			</xsl:variable>
			
            <xsl:choose>
              <xsl:when test="not($response/*)">
                  <ctl:message>FAILURE: Missing response.</ctl:message>
                  <ctl:fail/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:variable name="content-type" select="$response//headers/header[@name='Content-Type']"/>
                <xsl:if test="matches($content-type,'.+/xml') != true()">
                    <ctl:message>FAILURE: Content-Type response header does not indicate an XML media type (<xsl:value-of select="$content-type"/>)</ctl:message>
                    <ctl:fail/>
                </xsl:if>
              </xsl:otherwise>
            </xsl:choose>
		</code>
	</test>
    
    <test name="csw:csw-2.0.2-GetCapabilities-tc7.1">
      <param name="csw.GetCapabilities.get.url"/>
      <assertion>
      The response to a GetCapabilities request that includes a sections parameter 
      with NO VALUE provided shall include an abbreviated capabilities document 
      that omits all optional sections.
      </assertion>
      <comment>Pass if the response is schema valid and omits all optional 
      top-level elements.</comment>
      <link>OGC 05-008: 7.3.3 (p.17)</link>
		<code>
			<xsl:variable name="response">
				<request>
					<url>
						<xsl:value-of select="$csw.GetCapabilities.get.url"/>
					</url>
					<method>GET</method>
					<param name="service">CSW</param>
					<param name="request">GetCapabilities</param>
                    <param name="sections"/>
					<p:XMLValidatingParser.CSW/>
				</request>
			</xsl:variable>
			
            <xsl:choose>
              <xsl:when test="not($response/*)">
                  <ctl:message>FAILURE: Missing response entity.</ctl:message>
                  <ctl:fail/>
              </xsl:when>
              <xsl:otherwise>
                <ctl:call-test name="ctl:SchematronValidatingParser">
		            <ctl:with-param name="doc" select="$response"/>
		            <ctl:with-param name="schema">sch/csw/2.0.2/Capabilities.sch</ctl:with-param>
		            <ctl:with-param name="phase">AbbreviatedContentPhase</ctl:with-param>
	            </ctl:call-test>
              </xsl:otherwise>
            </xsl:choose>
		</code>
	</test>
    
    <test name="csw:csw-2.0.2-GetCapabilities-tc7.2">
      <param name="csw.GetCapabilities.get.url"/>
      <assertion>
      The response to a GetCapabilities request that includes a sections parameter 
      listing optional elements shall include only the requested elements in the 
      response entity.
      </assertion>
      <comment>
      Pass if the response is schema valid and includes only the requested optional 
      elements.
      </comment>
      <link>OGC 05-008: 7.3.3 (p.17)</link>
		<code>
			<xsl:variable name="response">
				<request>
					<url>
						<xsl:value-of select="$csw.GetCapabilities.get.url"/>
					</url>
					<method>GET</method>
					<param name="service">CSW</param>
					<param name="request">GetCapabilities</param>
                    <param name="sections">OperationsMetadata,ServiceIdentification</param>
					<p:XMLValidatingParser.CSW/>
				</request>
			</xsl:variable>
			
            <xsl:choose>
              <xsl:when test="not($response/*)">
                  <ctl:message>FAILURE: Missing response entity.</ctl:message>
                  <ctl:fail/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:if test="not($response//ows:OperationsMetadata)">
                    <ctl:message>FAILURE: ows:OperationsMetadata element is missing</ctl:message>
                    <ctl:fail/>
                </xsl:if>
                <xsl:if test="not($response//ows:ServiceIdentification)">
                    <ctl:message>FAILURE: ows:ServiceIdentification element is missing</ctl:message>
                    <ctl:fail/>
                </xsl:if>
                <xsl:if test="$response//ows:ServiceProvider">
                    <ctl:message>FAILURE: ows:ServiceProvider element is included</ctl:message>
                    <ctl:fail/>
                </xsl:if>
              </xsl:otherwise>
            </xsl:choose>
		</code>
	</test>
    
    <ctl:test name="csw:csw-2.0.2-GetCapabilities-tc8.1">
      <ctl:param name="csw.GetCapabilities.get.url"/>
      <ctl:param name="csw.GetCapabilities.formats"/>
      <ctl:assertion>
      The response to a GetCapabilities request containing an AcceptFormats 
      parameter specifying a supported format must include a response entity 
      that corresponds to the requested media type.
      </ctl:assertion>
      <ctl:link>OGC 05-008, 7.3.5</ctl:link>
		<ctl:code>
          <xsl:for-each select="$csw.GetCapabilities.formats//ows:Value">
            <xsl:variable name="format" select="./text()"/>
            <xsl:variable name="response">
				<ctl:request>
					<ctl:url>
						<xsl:value-of select="$csw.GetCapabilities.get.url"/>
					</ctl:url>
					<ctl:method>GET</ctl:method>
					<ctl:param name="service">CSW</ctl:param>
					<ctl:param name="request">GetCapabilities</ctl:param>
                    <ctl:param name="acceptformats"><xsl:value-of select="$format"/></ctl:param>
					<parsers:HTTPParser/>
				</ctl:request>
			</xsl:variable>
            <xsl:variable name="content-type" select="$response//headers/header[@name='Content-Type']"/>
			<xsl:if test="not(starts-with($content-type, $format))">
				<ctl:message>FAILURE: Unexpected content type for response entity (Request: <xsl:value-of select="$format"/>, Response: <xsl:value-of select="$content-type"/>).</ctl:message>
				<ctl:fail/>
			</xsl:if>
          </xsl:for-each>
		</ctl:code>
	</ctl:test>
</ctl:package>
   <ctl:package xmlns="http://www.occamlab.com/ctl" xmlns:p="http://teamengine.sourceforge.net/parsers">

    <ctl:test name="csw:DescribeRecord-POST">
      <param name="csw.capabilities.doc"/>
      <ctl:assertion>
      A conforming implementation must support DescribeRecord XML requests using the POST method.
      </ctl:assertion>
      <ctl:code>
        <xsl:variable name="csw.DescribeRecord.post.url">
		    <xsl:value-of select="$csw.capabilities.doc//ows:OperationsMetadata/ows:Operation[@name='DescribeRecord']/ows:DCP/ows:HTTP/ows:Post/@xlink:href"/>
		</xsl:variable>
        <ctl:message>Target endpoint is <xsl:value-of select="$csw.DescribeRecord.post.url"/></ctl:message>
        
  <ctl:call-test name="csw:csw-2.0.2-DescribeRecord-tc1.1">
    <ctl:with-param name="csw.DescribeRecord.post.url" select="$csw.DescribeRecord.post.url"/>
  </ctl:call-test>
  <ctl:call-test name="csw:csw-2.0.2-DescribeRecord-tc2.1">
    <ctl:with-param name="csw.DescribeRecord.post.url" select="$csw.DescribeRecord.post.url"/>
  </ctl:call-test>
  <ctl:call-test name="csw:csw-2.0.2-DescribeRecord-tc3.1">
    <ctl:with-param name="csw.DescribeRecord.post.url" select="$csw.DescribeRecord.post.url"/>
  </ctl:call-test>
  <ctl:call-test name="csw:csw-2.0.2-DescribeRecord-tc4.1">
    <ctl:with-param name="csw.DescribeRecord.post.url" select="$csw.DescribeRecord.post.url"/>
  </ctl:call-test>
  <ctl:call-test name="csw:csw-2.0.2-DescribeRecord-tc5.1">
    <ctl:with-param name="csw.DescribeRecord.post.url" select="$csw.DescribeRecord.post.url"/>
  </ctl:call-test>
  <ctl:call-test name="csw:csw-2.0.2-DescribeRecord-tc6.1">
    <ctl:with-param name="csw.DescribeRecord.post.url" select="$csw.DescribeRecord.post.url"/>
  </ctl:call-test>
  <ctl:call-test name="csw:csw-2.0.2-DescribeRecord-tc7.1">
    <ctl:with-param name="csw.DescribeRecord.post.url" select="$csw.DescribeRecord.post.url"/>
  </ctl:call-test>

      </ctl:code>
    </ctl:test>
   
    <test name="csw:csw-2.0.2-DescribeRecord-tc1.1">
      <param name="csw.DescribeRecord.post.url"/>
      <assertion>
      The response to a DescribeRecord request that does not include any TypeName 
      elements and does not specify a schema language must produce a response that 
      describes all supported record types using the XML Schema language.
      </assertion>
      <comment>
      Pass if the response is valid and contains XML Schema components for all 
      supported record types.
      </comment>
      <link>csw-</link>
		<code>
			<xsl:variable name="response">
				<request>
					<url>
						<xsl:value-of select="$csw.DescribeRecord.post.url"/>
					</url>
					<method>POST</method>
					<body>
<csw:DescribeRecord service="CSW" version="2.0.2"/>
					</body>
					<p:XMLValidatingParser.CSW/>
				</request>
			</xsl:variable>
			
            <xsl:choose>
              <xsl:when test="not($response/*)">
                  <ctl:message>[FAILURE] Missing response entity.</ctl:message>
                  <ctl:fail/>
              </xsl:when>
              <xsl:otherwise>
                <ctl:call-test name="ctl:SchematronValidatingParser">
		            <ctl:with-param name="doc" select="$response"/>
		            <ctl:with-param name="schema">sch/csw/2.0.2/DescribeRecord.sch</ctl:with-param>
		            <ctl:with-param name="phase">DefaultPhase</ctl:with-param>
	            </ctl:call-test>
              </xsl:otherwise>
            </xsl:choose>
		</code>
	</test>
    
    <test name="csw:csw-2.0.2-DescribeRecord-tc2.1">
      <param name="csw.DescribeRecord.post.url"/>
      <assertion>
      The response to a DescribeRecord request containing TypeName elements must 
      include schema components for each requested record type.
      </assertion>
      <comment>
      Pass if the response is valid and contains XML Schema components (i.e., 
      element declarations or a schema containing element declarations) for 
      the record types in the correct target namespaces.
      </comment>
      <link>csw-</link>
		<code>
			<xsl:variable name="response">
				<request>
					<url>
						<xsl:value-of select="$csw.DescribeRecord.post.url"/>
					</url>
					<method>POST</method>
					<body>
<csw:DescribeRecord service="CSW" version="2.0.2" schemaLanguage="http://www.w3.org/XML/Schema">
    <csw:TypeName>csw:Record</csw:TypeName>
</csw:DescribeRecord>
					</body>
					<p:XMLValidatingParser.CSW/>
				</request>
			</xsl:variable>
			
            <xsl:choose>
              <xsl:when test="not($response/*)">
                  <ctl:message>[FAILURE] Missing response entity.</ctl:message>
                  <ctl:fail/>
              </xsl:when>
              <xsl:otherwise>
                <ctl:call-test name="ctl:SchematronValidatingParser">
		            <ctl:with-param name="doc" select="$response"/>
		            <ctl:with-param name="schema">sch/csw/2.0.2/DescribeRecord.sch</ctl:with-param>
		            <ctl:with-param name="phase">DefaultPhase</ctl:with-param>
	            </ctl:call-test>
                <xsl:variable name="element" select="$response//csw:SchemaComponent/xsd:element/@name = 'Record'"/>
                <xsl:variable name="schema" select="$response//csw:SchemaComponent/xsd:schema/xsd:element/@name = 'Record'"/>
                <xsl:if test="not($element or $schema)">
                  <ctl:message>[FAILURE] Missing element declaration for csw:Record</ctl:message>
                  <ctl:fail/>
                </xsl:if>
              </xsl:otherwise>
            </xsl:choose>
		</code>
	</test>
    
    <test name="csw:csw-2.0.2-DescribeRecord-tc3.1">
      <param name="csw.DescribeRecord.post.url"/>
      <assertion>
      The response to a DescribeRecord request that contains an unknown TypeName 
      element must not include any csw:SchemaComponent elements.
      </assertion>
      <comment>
      Pass if the response is valid and contains no csw:SchemaComponent elements.
      </comment>
      <link>csw-</link>
		<code>
			<xsl:variable name="response">
				<request>
					<url>
						<xsl:value-of select="$csw.DescribeRecord.post.url"/>
					</url>
					<method>POST</method>
					<body>
<csw:DescribeRecord service="CSW" version="2.0.2" schemaLanguage="http://www.w3.org/XML/Schema">
    <csw:TypeName>csw:DummyRecord</csw:TypeName>
</csw:DescribeRecord>
					</body>
					<p:XMLValidatingParser.CSW/>
				</request>
			</xsl:variable>
			
            <xsl:choose>
              <xsl:when test="not($response/*)">
                  <ctl:message>[FAILURE] Missing response entity.</ctl:message>
                  <ctl:fail/>
              </xsl:when>
              <xsl:otherwise>
                <ctl:call-test name="ctl:SchematronValidatingParser">
		            <ctl:with-param name="doc" select="$response"/>
		            <ctl:with-param name="schema">sch/csw/2.0.2/DescribeRecord.sch</ctl:with-param>
		            <ctl:with-param name="phase">NoSchemaComponentsPhase</ctl:with-param>
	            </ctl:call-test>
              </xsl:otherwise>
            </xsl:choose>
		</code>
	</test>
    
    <test name="csw:csw-2.0.2-DescribeRecord-tc4.1">
      <param name="csw.DescribeRecord.post.url"/>
      <assertion>
      A response message containing an entity body must contain a Content-Type entity 
      header field that correctly indicates the media type of the message body.
      </assertion>
      <comment>Pass if the Content-Type entity header field indicates an XML media type.</comment>
      <link>OGC 05-008: 11.7 (p.61)</link>
		<code>
			<xsl:variable name="response">
				<request>
					<url>
						<xsl:value-of select="$csw.DescribeRecord.post.url"/>
					</url>
					<method>POST</method>
					<body>
<csw:DescribeRecord service="CSW" version="2.0.2" schemaLanguage="http://www.w3.org/XML/Schema">
    <csw:TypeName>csw:Record</csw:TypeName>
</csw:DescribeRecord>
					</body>
					<parsers:HTTPParser/>
				</request>
			</xsl:variable>
			
            <xsl:choose>
              <xsl:when test="not($response/*)">
                  <ctl:message>[FAILURE] Missing response.</ctl:message>
                  <ctl:fail/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:variable name="content-type" select="$response//headers/header[@name='Content-Type']"/>
                <xsl:if test="matches($content-type,'.+/xml') != true()">
                    <ctl:message>[FAILURE] Content-Type response header does not indicate an XML media type (<xsl:value-of select="$content-type"/>)</ctl:message>
                    <ctl:fail/>
                </xsl:if>
              </xsl:otherwise>
            </xsl:choose>
		</code>
	</test>
    
    <test name="csw:csw-2.0.2-DescribeRecord-tc5.1">
      <param name="csw.DescribeRecord.post.url"/>
      <assertion>
      The response to a DescribeRecord request that specifies an unsupported 
      output format must include an exception report.
      </assertion>
      <comment>
      Pass if all of the following conditions are true: (1) the response 
      entity has &lt;ows:ExceptionReport&gt; as the document element; and (2) 
      ows:Exception/@exceptionCode="InvalidParameterValue" (@outputFormat).
      </comment>
      <link>csw-</link>
		<code>
			<xsl:variable name="response">
				<request>
					<url>
						<xsl:value-of select="$csw.DescribeRecord.post.url"/>
					</url>
					<method>POST</method>
					<body>
<csw:DescribeRecord service="CSW" version="2.0.2" schemaLanguage="http://www.w3.org/XML/Schema" outputFormat="text/sgml">
    <csw:TypeName>csw:Record</csw:TypeName>
</csw:DescribeRecord>
					</body>
					<p:XMLValidatingParser.CSW/>
				</request>
			</xsl:variable>
			
            <xsl:choose>
              <xsl:when test="not($response/*)">
                  <ctl:message>[FAILURE] Missing response entity.</ctl:message>
                  <ctl:fail/>
              </xsl:when>
              <xsl:otherwise>
                <ctl:call-test name="ctl:SchematronValidatingParser">
		            <ctl:with-param name="doc" select="$response"/>
		            <ctl:with-param name="schema">sch/ows/1.0.0/ExceptionReport.sch</ctl:with-param>
		            <ctl:with-param name="phase">InvalidParameterValuePhase</ctl:with-param>
	            </ctl:call-test>
                <xsl:if test="not(lower-case($response//ows:Exception/@locator) = 'outputformat')">
                  <ctl:message>
                  [FAILURE] ows:Exception/@locator is absent or does not identify the invalid 'outputFormat' attribute.
                  </ctl:message>
                  <ctl:fail/>
                </xsl:if>
              </xsl:otherwise>
            </xsl:choose>
		</code>
	</test>
    
    <test name="csw:csw-2.0.2-DescribeRecord-tc6.1">
      <param name="csw.DescribeRecord.post.url"/>
      <assertion>
      The response to a DescribeRecord request that specifies an unsupported 
      schema language must include an exception report.
      </assertion>
      <comment>
      Pass if all of the following conditions are true: (1) the response 
      entity has &lt;ows:ExceptionReport&gt; as the document element; and (2) 
      ows:Exception/@exceptionCode="InvalidParameterValue".
      </comment>
      <link>csw-</link>
		<code>
			<xsl:variable name="response">
				<request>
					<url>
						<xsl:value-of select="$csw.DescribeRecord.post.url"/>
					</url>
					<method>POST</method>
					<body>
<csw:DescribeRecord service="CSW" version="2.0.2" schemaLanguage="http://purl.oclc.org/dsdl/schematron">
    <csw:TypeName>csw:Record</csw:TypeName>
</csw:DescribeRecord>
					</body>
					<p:XMLValidatingParser.CSW/>
				</request>
			</xsl:variable>
			
            <xsl:choose>
              <xsl:when test="not($response/*)">
                  <ctl:message>[FAILURE] Missing response entity.</ctl:message>
                  <ctl:fail/>
              </xsl:when>
              <xsl:otherwise>
                <ctl:call-test name="ctl:SchematronValidatingParser">
		            <ctl:with-param name="doc" select="$response"/>
		            <ctl:with-param name="schema">sch/ows/1.0.0/ExceptionReport.sch</ctl:with-param>
		            <ctl:with-param name="phase">InvalidParameterValuePhase</ctl:with-param>
	            </ctl:call-test>
                <xsl:if test="not(lower-case($response//ows:Exception/@locator) = 'schemalanguage')">
                  <ctl:message>
                  [FAILURE] ows:Exception/@locator is absent or does not identify the invalid 'schemaLanguage' attribute.
                  </ctl:message>
                  <ctl:fail/>
                </xsl:if>
              </xsl:otherwise>
            </xsl:choose>
		</code>
	</test>
    
    <test name="csw:csw-2.0.2-DescribeRecord-tc7.1">
      <param name="csw.DescribeRecord.post.url"/>
      <assertion>
      The response to an invalid DescribeRecord request must include an exception report.
      </assertion>
      <comment>
      Pass if all of the following conditions are true: (1) the response 
      entity has &lt;ows:ExceptionReport&gt; as the document element; and (2) 
      ows:Exception/@exceptionCode="InvalidParameterValuePhase" (csw:TypeName not qualified).
      </comment>
      <link>csw-</link>
		<code>
			<xsl:variable name="response">
				<request>
					<url>
						<xsl:value-of select="$csw.DescribeRecord.post.url"/>
					</url>
					<method>POST</method>
					<body>
<csw:DescribeRecord service="CSW" version="2.0.2" schemaLanguage="http://www.w3.org/XML/Schema">
    <csw:TypeName>Record</csw:TypeName>
</csw:DescribeRecord>
					</body>
					<p:XMLValidatingParser.CSW/>
				</request>
			</xsl:variable>
			
            <xsl:choose>
              <xsl:when test="not($response/*)">
                  <ctl:message>[FAILURE] Missing or invalid response entity.</ctl:message>
                  <ctl:fail/>
              </xsl:when>
              <xsl:otherwise>
                <ctl:call-test name="ctl:SchematronValidatingParser">
		            <ctl:with-param name="doc" select="$response"/>
		            <ctl:with-param name="schema">sch/ows/1.0.0/ExceptionReport.sch</ctl:with-param>
		            <ctl:with-param name="phase">InvalidParameterValuePhase</ctl:with-param>
	            </ctl:call-test>
              </xsl:otherwise>
            </xsl:choose>
		</code>
	</test>
</ctl:package>
   <ctl:package xmlns="http://www.occamlab.com/ctl" xmlns:p="http://teamengine.sourceforge.net/parsers">

    <ctl:test name="csw:GetRecordById-GET">
      <param name="csw.capabilities.doc"/>
      <ctl:assertion>
      Run test group for GetRecordById requests using the GET method.
      </ctl:assertion>
      <ctl:code>
        <xsl:variable name="csw.GetRecordById.get.url">
		    <xsl:value-of select="$csw.capabilities.doc//ows:OperationsMetadata/ows:Operation[@name='GetRecordById']/ows:DCP/ows:HTTP/ows:Get/@xlink:href"/>
		</xsl:variable>
        <xsl:variable name="csw.GetRecords.post.url">
            <xsl:value-of select="$csw.capabilities.doc//ows:OperationsMetadata/ows:Operation[@name='GetRecords']/ows:DCP/ows:HTTP/ows:Post/@xlink:href"/>
	    </xsl:variable>
        <ctl:message>Target endpoint is <xsl:value-of select="$csw.GetRecordById.get.url"/></ctl:message>
        
  <ctl:call-test name="csw:csw-2.0.2-GetRecordById-tc1.1">
    <ctl:with-param name="csw.GetRecordById.get.url" select="$csw.GetRecordById.get.url"/>
    <ctl:with-param name="csw.GetRecords.post.url" select="$csw.GetRecords.post.url"/>
  </ctl:call-test>
  <ctl:call-test name="csw:csw-2.0.2-GetRecordById-tc1.2">
    <ctl:with-param name="csw.GetRecordById.get.url" select="$csw.GetRecordById.get.url"/>
    <ctl:with-param name="csw.GetRecords.post.url" select="$csw.GetRecords.post.url"/>
  </ctl:call-test>
  <ctl:call-test name="csw:csw-2.0.2-GetRecordById-tc2.1">
    <ctl:with-param name="csw.GetRecordById.get.url" select="$csw.GetRecordById.get.url"/>
    <ctl:with-param name="csw.GetRecords.post.url" select="$csw.GetRecords.post.url"/>
  </ctl:call-test>
  <ctl:call-test name="csw:csw-2.0.2-GetRecordById-tc2.2">
    <ctl:with-param name="csw.GetRecordById.get.url" select="$csw.GetRecordById.get.url"/>
    <ctl:with-param name="csw.GetRecords.post.url" select="$csw.GetRecords.post.url"/>
  </ctl:call-test>
  <ctl:call-test name="csw:csw-2.0.2-GetRecordById-tc3.1">
    <ctl:with-param name="csw.GetRecordById.get.url" select="$csw.GetRecordById.get.url"/>
  </ctl:call-test>
  <ctl:call-test name="csw:csw-2.0.2-GetRecordById-tc4.1">
    <ctl:with-param name="csw.GetRecordById.get.url" select="$csw.GetRecordById.get.url"/>
  </ctl:call-test>
  <ctl:call-test name="csw:csw-2.0.2-GetRecordById-tc5.1">
    <ctl:with-param name="csw.GetRecordById.get.url" select="$csw.GetRecordById.get.url"/>
  </ctl:call-test>
  <ctl:call-test name="csw:csw-2.0.2-GetRecordById-tc6.1">
    <ctl:with-param name="csw.GetRecordById.get.url" select="$csw.GetRecordById.get.url"/>
  </ctl:call-test>
      </ctl:code>
    </ctl:test>
   
    <test name="csw:csw-2.0.2-GetRecordById-tc1.1">
      <param name="csw.GetRecordById.get.url"/>
      <param name="csw.GetRecords.post.url"/>
      <assertion>
      All CSW-based catalogue services must implement getRecordById using the 
      GET method. A GetRecordById request without the ElementSetName parameter 
      must produce a response containing a summary view of all matching records. 
      </assertion>
      <comment>
      Pass if the response is schema valid and includes a csw:BriefRecord representation of all matching records.
      </comment>
      <link>ows-</link>
		<code>
            <xsl:variable name="response0">
				<ctl:request>
					<ctl:url>
						<xsl:value-of select="$csw.GetRecords.post.url"/>
					</ctl:url>
                    <ctl:method>POST</ctl:method>
					<ctl:body>
                      <csw:GetRecords xmlns:csw="http://www.opengis.net/cat/csw" service="CSW" version="2.0.2" resultType="results">
                        <csw:Query typeNames="csw:Record">
                          <csw:ElementSetName>brief</csw:ElementSetName>
                        </csw:Query>
                      </csw:GetRecords>
					</ctl:body>
					<p:XMLValidatingParser.CSW/>
				</ctl:request>
			</xsl:variable>
            <xsl:variable name="id.1">
              <xsl:value-of select="$response0//csw:SearchResults/*[1]/dc:identifier"/>
            </xsl:variable>
			<xsl:variable name="response">
				<ctl:request>
					<ctl:url>
						<xsl:value-of select="$csw.GetRecordById.get.url"/>
					</ctl:url>
					<ctl:method>GET</ctl:method>
					<ctl:param name="service">CSW</ctl:param>
                    <ctl:param name="version">2.0.2</ctl:param>
					<ctl:param name="request">GetRecordById</ctl:param>
                    <ctl:param name="id"><xsl:value-of select="encode-for-uri($id.1)"/></ctl:param>
					<p:XMLValidatingParser.CSW/>
				</ctl:request>
			</xsl:variable>
			
            <xsl:choose>
              <xsl:when test="not($response/*)">
                  <ctl:message>[FAILURE] Missing response entity.</ctl:message>
                  <ctl:fail/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:if test="$response//csw:SummaryRecord/dc:identifier != $id.1">
                  <ctl:message>
                  [FAILURE] Expected csw:SummaryRecord with dc:identifier = <xsl:value-of select="$id.1"/>.
                  </ctl:message>
				  <ctl:fail/>
			    </xsl:if>
              </xsl:otherwise>
            </xsl:choose>
		</code>
	</test>
    
    <test name="csw:csw-2.0.2-GetRecordById-tc1.2">
      <param name="csw.GetRecordById.get.url"/>
      <param name="csw.GetRecords.post.url"/>
      <assertion>
      The response to a GetRecordById request without the ElementSetName parameter 
      must produce a response containing a summary view of all matching records. 
      </assertion>
      <comment>
      Pass if the response is schema valid and includes only 1 csw:BriefRecord element.
      </comment>
      <link>ows-</link>
		<code>
            <xsl:variable name="response0">
				<ctl:request>
					<ctl:url>
						<xsl:value-of select="$csw.GetRecords.post.url"/>
					</ctl:url>
                    <ctl:method>POST</ctl:method>
					<ctl:body>
                      <csw:GetRecords xmlns:csw="http://www.opengis.net/cat/csw" service="CSW" version="2.0.2" resultType="results">
                        <csw:Query typeNames="csw:Record">
                          <csw:ElementSetName>brief</csw:ElementSetName>
                        </csw:Query>
                      </csw:GetRecords>
					</ctl:body>
					<p:XMLValidatingParser.CSW/>
				</ctl:request>
			</xsl:variable>
            <xsl:variable name="id.2">
              <xsl:value-of select="$response0//csw:SearchResults/*[2]/dc:identifier"/>
            </xsl:variable>
			<xsl:variable name="response">
				<ctl:request>
					<ctl:url>
						<xsl:value-of select="$csw.GetRecordById.get.url"/>
					</ctl:url>
					<ctl:method>GET</ctl:method>
					<ctl:param name="service">CSW</ctl:param>
                    <ctl:param name="version">2.0.2</ctl:param>
					<ctl:param name="request">GetRecordById</ctl:param>
                    <ctl:param name="id">urn:uuid:ce8627a0-685c-11db-bd13-0800200c9a66,<xsl:value-of select="escape-html-uri($id.2)"/></ctl:param>
					<p:XMLValidatingParser.CSW/>
				</ctl:request>
			</xsl:variable>
			
            <xsl:choose>
              <xsl:when test="not($response/*)">
                  <ctl:message>[FAILURE] Missing response entity.</ctl:message>
                  <ctl:fail/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:if test="count($response//csw:GetRecordByIdResponse/*) != 1">
                  <ctl:message>
                  [FAILURE] Expected one record in response.
                  </ctl:message>
				  <ctl:fail/>
			    </xsl:if>
                <xsl:if test="$response//csw:SummaryRecord/dc:identifier != $id.2">
                  <ctl:message>
                  [FAILURE] Expected csw:SummaryRecord with dc:identifier = <xsl:value-of select="$id.2"/>.
                  </ctl:message>
				  <ctl:fail/>
			    </xsl:if>
              </xsl:otherwise>
            </xsl:choose>
		</code>
	</test>
    
    <test name="csw:csw-2.0.2-GetRecordById-tc2.1">
      <param name="csw.GetRecordById.get.url"/>
      <param name="csw.GetRecords.post.url"/>
      <assertion>
      The response to a GetRecordById request containing the ElementSetName parameter 
      must produce a response containing the corresponding view of all matching 
      records. 
      </assertion>
      <comment>
      Pass if the response is schema valid and includes a csw:BriefRecord representation.
      </comment>
      <link>ows-</link>
		<code>
            <xsl:variable name="response0">
				<ctl:request>
					<ctl:url>
						<xsl:value-of select="$csw.GetRecords.post.url"/>
					</ctl:url>
                    <ctl:method>POST</ctl:method>
					<ctl:body>
                      <csw:GetRecords xmlns:csw="http://www.opengis.net/cat/csw" service="CSW" version="2.0.2" resultType="results">
                        <csw:Query typeNames="csw:Record">
                          <csw:ElementSetName>brief</csw:ElementSetName>
                        </csw:Query>
                      </csw:GetRecords>
					</ctl:body>
					<p:XMLValidatingParser.CSW/>
				</ctl:request>
			</xsl:variable>
            <xsl:variable name="id.3">
              <xsl:value-of select="$response0//csw:SearchResults/*[3]/dc:identifier"/>
            </xsl:variable>
			<xsl:variable name="response">
				<request>
					<url>
						<xsl:value-of select="$csw.GetRecordById.get.url"/>
					</url>
					<method>GET</method>
					<param name="Service">CSW</param>
                    <param name="Version">2.0.2</param>
					<param name="Request">GetRecordById</param>
                    <param name="ElementSetName">brief</param>
                    <param name="ID"><xsl:value-of select="encode-for-uri($id.3)"/></param>
					<p:XMLValidatingParser.CSW/>
				</request>
			</xsl:variable>
			
            <xsl:choose>
              <xsl:when test="not($response/*)">
                  <ctl:message>[FAILURE] Missing response entity.</ctl:message>
                  <ctl:fail/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:variable name="nBriefRecords" select="count($response/csw:GetRecordByIdResponse/csw:BriefRecord)"/>
                <xsl:variable name="nRecords" select="count($response/csw:GetRecordByIdResponse/*)"/>
                <xsl:if test="($nBriefRecords != $nRecords) and ($nRecords != 1)">
                  <ctl:message>[FAILURE] Expected one csw:BriefRecord element in response.</ctl:message>
				  <ctl:fail/>
			    </xsl:if>
              </xsl:otherwise>
            </xsl:choose>
		</code>
	</test>
    
    <test name="csw:csw-2.0.2-GetRecordById-tc2.2">
      <param name="csw.GetRecordById.get.url"/>
      <param name="csw.GetRecords.post.url"/>
      <assertion>
      The response to a GetRecordById request containing the ElementSetName parameter 
      must produce a response containing the corresponding view of all matching 
      records. 
      </assertion>
      <comment>
      Pass if the response is schema valid and includes a csw:Record representation.
      </comment>
      <link>ows-</link>
		<code>
            <xsl:variable name="response0">
				<ctl:request>
					<ctl:url>
						<xsl:value-of select="$csw.GetRecords.post.url"/>
					</ctl:url>
                    <ctl:method>POST</ctl:method>
					<ctl:body>
                      <csw:GetRecords xmlns:csw="http://www.opengis.net/cat/csw" service="CSW" version="2.0.2" resultType="results">
                        <csw:Query typeNames="csw:Record">
                          <csw:ElementSetName>brief</csw:ElementSetName>
                        </csw:Query>
                      </csw:GetRecords>
					</ctl:body>
					<p:XMLValidatingParser.CSW/>
				</ctl:request>
			</xsl:variable>
            <xsl:variable name="id.4">
              <xsl:value-of select="$response0//csw:SearchResults/*[4]/dc:identifier"/>
            </xsl:variable>
			<xsl:variable name="response">
				<request>
					<url>
						<xsl:value-of select="$csw.GetRecordById.get.url"/>
					</url>
					<method>GET</method>
					<param name="Service">CSW</param>
                    <param name="Version">2.0.2</param>
					<param name="Request">GetRecordById</param>
                    <param name="ElementSetName">full</param>
                    <param name="ID"><xsl:value-of select="encode-for-uri($id.4)"/></param>
					<p:XMLValidatingParser.CSW/>
				</request>
			</xsl:variable>
			
            <xsl:choose>
              <xsl:when test="not($response/*)">
                  <ctl:message>[FAILURE] Missing response entity.</ctl:message>
                  <ctl:fail/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:variable name="nFullRecords" select="count($response/csw:GetRecordByIdResponse/csw:Record)"/>
                <xsl:variable name="nRecords" select="count($response/csw:GetRecordByIdResponse/*)"/>
                <xsl:if test="($nFullRecords != $nRecords) and ($nRecords != 1)">
                  <ctl:message>[FAILURE] Expected one csw:Record element in response.</ctl:message>
				  <ctl:fail/>
			    </xsl:if>
              </xsl:otherwise>
            </xsl:choose>
		</code>
	</test>
    
    <test name="csw:csw-2.0.2-GetRecordById-tc3.1">
      <param name="csw.GetRecordById.get.url"/>
      <assertion>
      The response to a GetRecordById request containing no matching identifiers
      must be empty.
      </assertion>
      <comment>
      Pass if the response entity is schema valid and includes no records.
      </comment>
      <link>ows-</link>
		<code>
			<xsl:variable name="response">
				<request>
					<url>
						<xsl:value-of select="$csw.GetRecordById.get.url"/>
					</url>
					<method>GET</method>
					<param name="service">CSW</param>
                    <param name="version">2.0.2</param>
					<param name="request">GetRecordById</param>
                    <param name="id">urn:uuid:ce8627a0-685c-11db-bd13-0800200c9a66</param>
					<p:XMLValidatingParser.CSW/>
				</request>
			</xsl:variable>
			
            <xsl:choose>
              <xsl:when test="not($response/*)">
                  <ctl:message>[FAILURE] Missing response entity.</ctl:message>
                  <ctl:fail/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:if test="count($response/csw:GetRecordByIdResponse/*) != 0">
                  <ctl:message>
                  [FAILURE] Expected empty csw:GetRecordByIdResponse element.
                  </ctl:message>
				  <ctl:fail/>
			    </xsl:if>
              </xsl:otherwise>
            </xsl:choose>
		</code>
	</test>
    
    <test name="csw:csw-2.0.2-GetRecordById-tc4.1">
      <param name="csw.GetRecordById.get.url"/>
      <assertion>
      The response to a GetRecordById request missing the required Id parameter 
      must include an exception report. 
      </assertion>
      <comment>
      Pass if all of the following conditions are true: (1) the response is a 
      valid ows:ExceptionReport; (2) the reported exceptionCode is "MissingParameterValue".
      </comment>
		<code>
			<xsl:variable name="response">
				<request>
					<url>
						<xsl:value-of select="$csw.GetRecordById.get.url"/>
					</url>
					<method>GET</method>
					<param name="service">CSW</param>
                    <param name="version">2.0.2</param>
					<param name="request">GetRecordById</param>
					<p:XMLValidatingParser.OWS/>
				</request>
			</xsl:variable>
			
            <xsl:choose>
              <xsl:when test="not($response/*)">
                  <ctl:message>[FAILURE] Missing response entity.</ctl:message>
                  <ctl:fail/>
              </xsl:when>
              <xsl:otherwise>
                <ctl:call-test name="ctl:SchematronValidatingParser">
		            <ctl:with-param name="doc" select="$response"/>
		            <ctl:with-param name="schema">sch/ows/1.0.0/ExceptionReport.sch</ctl:with-param>
		            <ctl:with-param name="phase">MissingParameterValuePhase</ctl:with-param>
	            </ctl:call-test>
                <xsl:if test="not(lower-case($response//ows:Exception/@locator) = 'id')">
                  <ctl:message>
                  [WARNING] ows:Exception/@locator is absent or does not refer to the missing 'id' parameter.
                  </ctl:message>
                  <ctl:warning/>
                </xsl:if>
              </xsl:otherwise>
            </xsl:choose>
		</code>
	</test>
    
    <test name="csw:csw-2.0.2-GetRecordById-tc5.1">
      <param name="csw.GetRecordById.get.url"/>
      <assertion>
      The response to a GetRecordById request with an unsupported OutputFormat 
      parameter value must include an exception report. 
      </assertion>
      <comment>
      Pass if all of the following conditions are true: (1) the response is a 
      valid ows:ExceptionReport; (2) the reported exceptionCode is "InvalidParameterValue".
      </comment>
		<code>
			<xsl:variable name="response">
				<request>
					<url>
						<xsl:value-of select="$csw.GetRecordById.get.url"/>
					</url>
					<method>GET</method>
					<param name="Service">CSW</param>
                    <param name="Version">2.0.2</param>
					<param name="Request">GetRecordById</param>
                    <param name="OutputFormat">application/atom+xml</param>
                    <param name="id">urn:uuid:a06af396-3105-442d-8b40-22b57a90d2f2,urn:uuid:19887a8a-f6b0-4a63-ae56-7fba0e17801f,urn:uuid:ab42a8c4-95e8-4630-bf79-33e59241605a</param>
					<p:XMLValidatingParser.CSW/>
				</request>
			</xsl:variable>
			
            <xsl:choose>
              <xsl:when test="not($response/*)">
                  <ctl:message>[FAILURE] Missing response entity.</ctl:message>
                  <ctl:fail/>
              </xsl:when>
              <xsl:otherwise>
                <ctl:call-test name="ctl:SchematronValidatingParser">
		            <ctl:with-param name="doc" select="$response"/>
		            <ctl:with-param name="schema">sch/ows/1.0.0/ExceptionReport.sch</ctl:with-param>
		            <ctl:with-param name="phase">InvalidParameterValuePhase</ctl:with-param>
	            </ctl:call-test>
                <xsl:if test="not(lower-case($response//ows:Exception/@locator) = 'outputformat')">
                  <ctl:message>
                  [WARNING] ows:Exception/@locator is absent or does not refer to the invalid 'OutputFormat' parameter.
                  </ctl:message>
                  <ctl:warning/>
                </xsl:if>
              </xsl:otherwise>
            </xsl:choose>
		</code>
	</test>
    
    <test name="csw:csw-2.0.2-GetRecordById-tc6.1">
      <param name="csw.GetRecordById.get.url"/>
      <assertion>
      The response to a GetRecordById request with an unsupported OutputSchema 
      parameter value must include an exception report. 
      </assertion>
      <comment>
      Pass if all of the following conditions are true: (1) the response is a 
      valid ows:ExceptionReport; (2) the reported exceptionCode is "InvalidParameterValue".
      </comment>
		<code>
			<xsl:variable name="response">
				<request>
					<url>
						<xsl:value-of select="$csw.GetRecordById.get.url"/>
					</url>
					<method>GET</method>
					<param name="Service">CSW</param>
                    <param name="Version">2.0.2</param>
					<param name="Request">GetRecordById</param>
                    <param name="OutputSchema">http://www.w3.org/2005/Atom</param>
                    <param name="Id">urn:uuid:19887a8a-f6b0-4a63-ae56-7fba0e17801f</param>
					<p:XMLValidatingParser.CSW/>
				</request>
			</xsl:variable>
			
            <xsl:choose>
              <xsl:when test="not($response/*)">
                  <ctl:message>[FAILURE] Missing response entity.</ctl:message>
                  <ctl:fail/>
              </xsl:when>
              <xsl:otherwise>
                <ctl:call-test name="ctl:SchematronValidatingParser">
		            <ctl:with-param name="doc" select="$response"/>
		            <ctl:with-param name="schema">sch/ows/1.0.0/ExceptionReport.sch</ctl:with-param>
		            <ctl:with-param name="phase">InvalidParameterValuePhase</ctl:with-param>
	            </ctl:call-test>
                <xsl:if test="not(lower-case($response//ows:Exception/@locator) = 'outputschema')">
                  <ctl:message>
                  [WARNING] ows:Exception/@locator is absent or does not refer to the invalid 'OutputSchema' parameter.
                  </ctl:message>
                  <ctl:warning/>
                </xsl:if>
              </xsl:otherwise>
            </xsl:choose>
		</code>
	</test>
</ctl:package>
   <ctl:package xmlns="http://www.occamlab.com/ctl" xmlns:p="http://teamengine.sourceforge.net/parsers" xmlns:gml="http://www.opengis.net/gml" xmlns:ogc="http://www.opengis.net/ogc">

  <ctl:test name="csw:GetRecords-POST">
    <param name="csw.capabilities.doc"/>
    <ctl:assertion>
    A conforming implementation must satisfy all assertions for GetRecords XML requests using the POST method.
    </ctl:assertion>
    <ctl:code>
      <xsl:variable name="csw.GetRecords.post.url">
        <xsl:value-of select="$csw.capabilities.doc//ows:OperationsMetadata/ows:Operation[@name='GetRecords']/ows:DCP/ows:HTTP/ows:Post/@xlink:href"/>
	  </xsl:variable>
      <ctl:message>Target endpoint is <xsl:value-of select="$csw.GetRecords.post.url"/></ctl:message>
        
	  <ctl:call-test name="csw:csw-2.0.2-GetRecords-tc1.1">
		<ctl:with-param name="csw.GetRecords.post.url" select="$csw.GetRecords.post.url"/>
	  </ctl:call-test>  
	  <ctl:call-test name="csw:csw-2.0.2-GetRecords-tc2.1">
		<ctl:with-param name="csw.GetRecords.post.url" select="$csw.GetRecords.post.url"/>
	  </ctl:call-test>  
	  <ctl:call-test name="csw:csw-2.0.2-GetRecords-tc2.2">
		<ctl:with-param name="csw.GetRecords.post.url" select="$csw.GetRecords.post.url"/>
	  </ctl:call-test>
	  <ctl:call-test name="csw:csw-2.0.2-GetRecords-tc3.1">
		<ctl:with-param name="csw.GetRecords.post.url" select="$csw.GetRecords.post.url"/>
	  </ctl:call-test>
	  <ctl:call-test name="csw:csw-2.0.2-GetRecords-tc4.1">
		<ctl:with-param name="csw.GetRecords.post.url" select="$csw.GetRecords.post.url"/>
	  </ctl:call-test>
	  <ctl:call-test name="csw:csw-2.0.2-GetRecords-tc4.2">
		<ctl:with-param name="csw.GetRecords.post.url" select="$csw.GetRecords.post.url"/>
	  </ctl:call-test>
	  <ctl:call-test name="csw:csw-2.0.2-GetRecords-tc5.1">
		<ctl:with-param name="csw.GetRecords.post.url" select="$csw.GetRecords.post.url"/>
	  </ctl:call-test>
	  <ctl:call-test name="csw:csw-2.0.2-GetRecords-tc5.2">
		<ctl:with-param name="csw.GetRecords.post.url" select="$csw.GetRecords.post.url"/>
	  </ctl:call-test>
	  <ctl:call-test name="csw:csw-2.0.2-GetRecords-tc6.1">
		<ctl:with-param name="csw.GetRecords.post.url" select="$csw.GetRecords.post.url"/>
	  </ctl:call-test>
	  <ctl:call-test name="csw:csw-2.0.2-GetRecords-tc6.2">
		<ctl:with-param name="csw.GetRecords.post.url" select="$csw.GetRecords.post.url"/>
	  </ctl:call-test>
	  <ctl:call-test name="csw:csw-2.0.2-GetRecords-tc7.1">
		<ctl:with-param name="csw.GetRecords.post.url" select="$csw.GetRecords.post.url"/>
	  </ctl:call-test>
	  <ctl:call-test name="csw:csw-2.0.2-GetRecords-tc8.1">
		<ctl:with-param name="csw.GetRecords.post.url" select="$csw.GetRecords.post.url"/>
	  </ctl:call-test>
	  <ctl:call-test name="csw:csw-2.0.2-GetRecords-tc8.2">
		<ctl:with-param name="csw.GetRecords.post.url" select="$csw.GetRecords.post.url"/>
	  </ctl:call-test>
	  <ctl:call-test name="csw:csw-2.0.2-GetRecords-tc9.1">
		<ctl:with-param name="csw.GetRecords.post.url" select="$csw.GetRecords.post.url"/>
	  </ctl:call-test>
	  <ctl:call-test name="csw:csw-2.0.2-GetRecords-tc10.1">
		<ctl:with-param name="csw.GetRecords.post.url" select="$csw.GetRecords.post.url"/>
	  </ctl:call-test>
	  <ctl:call-test name="csw:csw-2.0.2-GetRecords-tc11.1">
		<ctl:with-param name="csw.GetRecords.post.url" select="$csw.GetRecords.post.url"/>
	  </ctl:call-test>
	  <ctl:call-test name="csw:csw-2.0.2-GetRecords-tc11.2">
		<ctl:with-param name="csw.GetRecords.post.url" select="$csw.GetRecords.post.url"/>
	  </ctl:call-test>
	  <ctl:call-test name="csw:csw-2.0.2-GetRecords-tc12.1">
		<ctl:with-param name="csw.GetRecords.post.url" select="$csw.GetRecords.post.url"/>
	  </ctl:call-test>
	  <ctl:call-test name="csw:csw-2.0.2-GetRecords-tc13.1">
		<ctl:with-param name="csw.GetRecords.post.url" select="$csw.GetRecords.post.url"/>
	  </ctl:call-test>
	  <ctl:call-test name="csw:csw-2.0.2-GetRecords-tc14.1">
		<ctl:with-param name="csw.GetRecords.post.url" select="$csw.GetRecords.post.url"/>
	  </ctl:call-test>
	  <ctl:call-test name="csw:csw-2.0.2-GetRecords-tc14.2">
		<ctl:with-param name="csw.GetRecords.post.url" select="$csw.GetRecords.post.url"/>
	  </ctl:call-test>
	  <ctl:call-test name="csw:csw-2.0.2-GetRecords-tc15.1">
		<ctl:with-param name="csw.GetRecords.post.url" select="$csw.GetRecords.post.url"/>
	  </ctl:call-test>
	  <ctl:call-test name="csw:csw-2.0.2-GetRecords-tc16.1">
		<ctl:with-param name="csw.GetRecords.post.url" select="$csw.GetRecords.post.url"/>
	  </ctl:call-test>
	  <ctl:call-test name="csw:csw-2.0.2-GetRecords-tc16.2">
		<ctl:with-param name="csw.GetRecords.post.url" select="$csw.GetRecords.post.url"/>
	  </ctl:call-test>
	  <ctl:call-test name="csw:csw-2.0.2-GetRecords-tc17.1">
		<ctl:with-param name="csw.GetRecords.post.url" select="$csw.GetRecords.post.url"/>
	  </ctl:call-test>
	  <ctl:call-test name="csw:csw-2.0.2-GetRecords-tc17.2">
		<ctl:with-param name="csw.GetRecords.post.url" select="$csw.GetRecords.post.url"/>
	  </ctl:call-test>
	  <ctl:call-test name="csw:csw-2.0.2-GetRecords-tc18.1">
		<ctl:with-param name="csw.GetRecords.post.url" select="$csw.GetRecords.post.url"/>
	  </ctl:call-test>
	  <ctl:call-test name="csw:csw-2.0.2-GetRecords-tc19.1">
		<ctl:with-param name="csw.GetRecords.post.url" select="$csw.GetRecords.post.url"/>
	  </ctl:call-test>
	  <ctl:call-test name="csw:csw-2.0.2-GetRecords-tc20.1">
		<ctl:with-param name="csw.GetRecords.post.url" select="$csw.GetRecords.post.url"/>
	  </ctl:call-test>
	  <ctl:call-test name="csw:csw-2.0.2-GetRecords-tc21.1">
		<ctl:with-param name="csw.GetRecords.post.url" select="$csw.GetRecords.post.url"/>
	  </ctl:call-test>
	  <ctl:call-test name="csw:csw-2.0.2-GetRecords-tc22.1">
		<ctl:with-param name="csw.GetRecords.post.url" select="$csw.GetRecords.post.url"/>
	  </ctl:call-test>
	  <ctl:call-test name="csw:csw-2.0.2-GetRecords-tc23.1">
		<ctl:with-param name="csw.GetRecords.post.url" select="$csw.GetRecords.post.url"/>
	  </ctl:call-test>
	  <ctl:call-test name="csw:csw-2.0.2-GetRecords-tc24.1">
		<ctl:with-param name="csw.GetRecords.post.url" select="$csw.GetRecords.post.url"/>
	  </ctl:call-test>
	  <ctl:call-test name="csw:csw-2.0.2-GetRecords-tc25.1">
		<ctl:with-param name="csw.GetRecords.post.url" select="$csw.GetRecords.post.url"/>
	  </ctl:call-test>
	  <ctl:call-test name="csw:csw-2.0.2-GetRecords-tc26.1">
		<ctl:with-param name="csw.GetRecords.post.url" select="$csw.GetRecords.post.url"/>
	  </ctl:call-test>
	  
    </ctl:code>
  </ctl:test>
   
    <test name="csw:csw-2.0.2-GetRecords-tc1.1">
      <param name="csw.GetRecords.post.url"/>
      <assertion>
      A GetRecords request that omits all optional elements must produce a response containing only a summary of the result set.
      </assertion>
      <comment>Pass if all of the following conditions are true: (1) the response 
      is schema valid; (2) the csw:SearchResults element is empty.</comment>
      <link>csw-</link>
		<code>
			<xsl:variable name="response">
				<request>
					<url>
						<xsl:value-of select="$csw.GetRecords.post.url"/>
					</url>
                    <method>POST</method>
					<body>
<csw:GetRecords service="CSW" version="2.0.2">
  <csw:Query typeNames="csw:Record">
    <csw:ElementSetName>brief</csw:ElementSetName>
  </csw:Query>
</csw:GetRecords>
					</body>
					<p:XMLValidatingParser.CSW/>
				</request>
			</xsl:variable>
			
            <xsl:choose>
              <xsl:when test="not($response/*)">
                  <ctl:message>[FAILURE] Missing or invalid response entity.</ctl:message>
                  <ctl:fail/>
              </xsl:when>
              <xsl:otherwise>
                <ctl:call-test name="ctl:SchematronValidatingParser">
		            <ctl:with-param name="doc" select="$response"/>
		            <ctl:with-param name="schema">sch/csw/2.0.2/GetRecords.sch</ctl:with-param>
		            <ctl:with-param name="phase">DefaultPhase</ctl:with-param>
	            </ctl:call-test>
              </xsl:otherwise>
            </xsl:choose>
		</code>
	</test>
    
    <test name="csw:csw-2.0.2-GetRecords-tc2.1">
      <param name="csw.GetRecords.post.url"/>
      <assertion>
      The response to a GetRecords request that specifies a "summary" view must 
      include the corresponding record representations not exeeding the value 
      of the default maxRecords attribute (10).
      </assertion>
      <comment>Pass if all of the following conditions are true: (1) the response 
      is schema valid; (2) the csw:SearchResults element contains exactly 10 
      csw:SummaryRecord child elements.</comment>
      <link>csw-</link>
		<code>
			<xsl:variable name="response">
				<request>
					<url>
						<xsl:value-of select="$csw.GetRecords.post.url"/>
					</url>
                    <method>POST</method>
					<body>
<csw:GetRecords service="CSW" version="2.0.2" resultType="results">
  <csw:Query typeNames="csw:Record">
    <csw:ElementSetName>summary</csw:ElementSetName>
  </csw:Query>
</csw:GetRecords>
					</body>
					<p:XMLValidatingParser.CSW/>
				</request>
			</xsl:variable>
			
            <xsl:choose>
              <xsl:when test="not($response/*)">
                  <ctl:message>[FAILURE] Missing or invalid response entity.</ctl:message>
                  <ctl:fail/>
              </xsl:when>
              <xsl:otherwise>
                <ctl:call-test name="ctl:SchematronValidatingParser">
		            <ctl:with-param name="doc" select="$response"/>
		            <ctl:with-param name="schema">sch/csw/2.0.2/GetRecords.sch</ctl:with-param>
		            <ctl:with-param name="phase">TenRecordsPhase</ctl:with-param>
	            </ctl:call-test>
                <xsl:if test="count($response/csw:GetRecordsResponse/csw:SearchResults/csw:SummaryRecord) != 10">
                  <ctl:message>[FAILURE] 10 csw:SummaryRecord elements expected in response.</ctl:message>
                  <ctl:fail/>
                </xsl:if>
              </xsl:otherwise>
            </xsl:choose>
		</code>
	</test>
    
    <test name="csw:csw-2.0.2-GetRecords-tc2.2">
      <param name="csw.GetRecords.post.url"/>
      <assertion>
      The response to a GetRecords request that specifies a "brief" view must 
      include the corresponding record representations not exeeding the value 
      of the default maxRecords attribute (10).
      </assertion>
      <comment>Pass if all of the following conditions are true: (1) the response 
      is schema valid; (2) the csw:SearchResults element contains exactly 10 
      csw:BriefRecord child elements.</comment>
      <link>csw-</link>
		<code>
			<xsl:variable name="response">
				<request>
					<url>
						<xsl:value-of select="$csw.GetRecords.post.url"/>
					</url>
                    <method>POST</method>
					<body>
<csw:GetRecords service="CSW" version="2.0.2" resultType="results">
  <csw:Query typeNames="csw:Record">
    <csw:ElementSetName>brief</csw:ElementSetName>
  </csw:Query>
</csw:GetRecords>
					</body>
					<p:XMLValidatingParser.CSW/>
				</request>
			</xsl:variable>
			
            <xsl:choose>
              <xsl:when test="not($response/*)">
                  <ctl:message>[FAILURE] Missing or invalid response entity.</ctl:message>
                  <ctl:fail/>
              </xsl:when>
              <xsl:otherwise>
                <ctl:call-test name="ctl:SchematronValidatingParser">
		            <ctl:with-param name="doc" select="$response"/>
		            <ctl:with-param name="schema">sch/csw/2.0.2/GetRecords.sch</ctl:with-param>
		            <ctl:with-param name="phase">TenRecordsPhase</ctl:with-param>
	            </ctl:call-test>
                <xsl:if test="count($response/csw:GetRecordsResponse/csw:SearchResults/csw:BriefRecord) != 10">
                  <ctl:message>[FAILURE] 10 csw:BriefRecord elements expected in response.</ctl:message>
                  <ctl:fail/>
                </xsl:if>
              </xsl:otherwise>
            </xsl:choose>
		</code>
	</test>
    
    <test name="csw:csw-2.0.2-GetRecords-tc3.1">
      <param name="csw.GetRecords.post.url"/>
      <assertion>
      The response to a GetRecords request that specifies an ad hoc view must 
      include the corresponding csw:Record representations not exeeding the value 
      of the default maxRecords attribute (10).
      </assertion>
      <comment>Pass if all of the following conditions are true: (1) the response 
      is schema valid; (2) the csw:SearchResults element contains exactly 10 
      csw:Record child elements, each containing only the requested elements.</comment>
		<code>
			<xsl:variable name="response">
				<request>
					<url>
						<xsl:value-of select="$csw.GetRecords.post.url"/>
					</url>
                    <method>POST</method>
					<body>
<csw:GetRecords service="CSW" version="2.0.2" resultType="results">
  <csw:Query typeNames="csw:Record">
    <csw:ElementName>dc:identifier</csw:ElementName>
    <csw:ElementName>dc:type</csw:ElementName>
    <csw:ElementName>dct:modified</csw:ElementName>
  </csw:Query>
</csw:GetRecords>
					</body>
					<p:XMLValidatingParser.CSW/>
				</request>
			</xsl:variable>
			
            <xsl:choose>
              <xsl:when test="not($response/*)">
                  <ctl:message>[FAILURE] Missing or invalid response entity.</ctl:message>
                  <ctl:fail/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:for-each select="$response//csw:Record/*">
                  <xsl:variable name="local-name" select="local-name(.)"/>
                  <xsl:if test="empty(index-of(('identifier', 'type', 'modified'), $local-name))">
                    <ctl:message>[FAILURE] Unexpected record property: <xsl:value-of select="$local-name"/> (<xsl:value-of select="../dc:identifier"/>)</ctl:message>
                    <ctl:fail/>
                  </xsl:if>
                </xsl:for-each>
              </xsl:otherwise>
            </xsl:choose>
		</code>
	</test>
    
    <test name="csw:csw-2.0.2-GetRecords-tc4.1">
      <param name="csw.GetRecords.post.url"/>
      <assertion>
      The response to a GetRecords request that specifies sorting criteria
      must include the corresponding record representations in the correct 
      sort order.
      </assertion>
      <comment>Pass if all of the following conditions are true: (1) the response 
      is schema valid; (2) the csw:SearchResults element contains exactly 10 
      csw:BriefRecord child elements; (3) the records are sorted by dc:identifier 
      in ascending order.</comment>
      <link>csw-</link>
		<code>
			<xsl:variable name="response">
				<request>
					<url>
						<xsl:value-of select="$csw.GetRecords.post.url"/>
					</url>
                    <method>POST</method>
					<body>
<csw:GetRecords service="CSW" version="2.0.2" resultType="results">
    <csw:Query typeNames="csw:Record">
      <csw:ElementSetName>brief</csw:ElementSetName>
      <ogc:SortBy>
        <ogc:SortProperty>
          <ogc:PropertyName>dc:identifier</ogc:PropertyName>
          <ogc:SortOrder>ASC</ogc:SortOrder>
        </ogc:SortProperty>
      </ogc:SortBy>
    </csw:Query>
</csw:GetRecords>
					</body>
					<p:XMLValidatingParser.CSW/>
				</request>
			</xsl:variable>
			
            <xsl:choose>
              <xsl:when test="not($response/*)">
                  <ctl:message>[FAILURE] Missing or invalid response entity.</ctl:message>
                  <ctl:fail/>
              </xsl:when>
              <xsl:otherwise>
                <ctl:call-test name="ctl:SchematronValidatingParser">
		            <ctl:with-param name="doc" select="$response"/>
		            <ctl:with-param name="schema">sch/csw/2.0.2/GetRecords.sch</ctl:with-param>
		            <ctl:with-param name="phase">TenRecordsPhase</ctl:with-param>
	            </ctl:call-test>
                <xsl:if test="count($response/csw:GetRecordsResponse/csw:SearchResults/csw:BriefRecord) != 10">
                  <ctl:message>[FAILURE] 10 csw:BriefRecord elements expected in response.</ctl:message>
                  <ctl:fail/>
                </xsl:if>
                <xsl:variable name="r1.id" select="$response//csw:SearchResults/*[1]/dc:identifier"/> 
                <xsl:variable name="r2.id" select="$response//csw:SearchResults/*[2]/dc:identifier"/>
                <xsl:variable name="r3.id" select="$response//csw:SearchResults/*[3]/dc:identifier"/>
                <xsl:if test="(compare($r1.id,$r2.id) ne -1) or (compare($r2.id,$r3.id) ne -1)">
                  <ctl:message>[FAILURE] Search results are not sorted correctly by dc:identifier in ascending order.</ctl:message>
                  <ctl:fail/>
                </xsl:if>
              </xsl:otherwise>
            </xsl:choose>
		</code>
	</test>
    
    <test name="csw:csw-2.0.2-GetRecords-tc4.2">
      <param name="csw.GetRecords.post.url"/>
      <assertion>
      The response to a GetRecords request that specifies an ad hoc view and 
      sorting criteria must include the corresponding csw:Record representations 
      in the correct sort order.
      </assertion>
      <comment>Pass if all of the following conditions are true: (1) the response 
      is schema valid; (2) the csw:SearchResults element contains exactly 10 
      csw:Record child elements, each containing only the requested elements; 
      (3) the records are sorted by dct:modified in descending order.</comment>
		<code>
			<xsl:variable name="response">
				<request>
					<url>
						<xsl:value-of select="$csw.GetRecords.post.url"/>
					</url>
                    <method>POST</method>
					<body>
<csw:GetRecords service="CSW" version="2.0.2" resultType="results">
    <csw:Query typeNames="csw:Record">
      <csw:ElementName>dc:identifier</csw:ElementName>
      <csw:ElementName>dc:type</csw:ElementName>
      <csw:ElementName>dct:modified</csw:ElementName>
      <ogc:SortBy>
        <ogc:SortProperty>
          <ogc:PropertyName>dct:modified</ogc:PropertyName>
          <ogc:SortOrder>DESC</ogc:SortOrder>
        </ogc:SortProperty>
      </ogc:SortBy>
    </csw:Query>
</csw:GetRecords>
					</body>
					<p:XMLValidatingParser.CSW/>
				</request>
			</xsl:variable>
			
            <xsl:choose>
              <xsl:when test="not($response/*)">
                  <ctl:message>[FAILURE] Missing or invalid response entity.</ctl:message>
                  <ctl:fail/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:for-each select="$response//csw:Record/*">
                  <xsl:variable name="local-name" select="local-name(.)"/>
                  <xsl:if test="empty(index-of(('identifier', 'type', 'modified'), $local-name))">
                    <ctl:message>[FAILURE] Unexpected record property: <xsl:value-of select="$local-name"/> (<xsl:value-of select="../dc:identifier"/>)</ctl:message>
                    <ctl:fail/>
                  </xsl:if>
                </xsl:for-each>
                <xsl:variable name="r1.modified" select="$response//csw:SearchResults/*[1]/dct:modified"/>
                <xsl:variable name="r2.modified" select="$response//csw:SearchResults/*[2]/dct:modified"/>
                <xsl:variable name="r3.modified" select="$response//csw:SearchResults/*[3]/dct:modified"/>
                <xsl:if test="not(xsd:date($r1.modified) gt xsd:date($r2.modified)) or not(xsd:date($r2.modified) gt xsd:date($r3.modified))">
                  <ctl:message>[FAILURE] Search results are not sorted correctly by dct:modified in descending order.</ctl:message>
                  <ctl:fail/>
                </xsl:if>
              </xsl:otherwise>
            </xsl:choose>
		</code>
	</test>
    
    <test name="csw:csw-2.0.2-GetRecords-tc5.1">
      <param name="csw.GetRecords.post.url"/>
      <assertion>
      The response to a GetRecords request that includes an ogc:Filter having a
      BBOX operator must include all matching record representations.
      </assertion>
      <comment>Pass if all of the following conditions are true: (1) the response 
      is schema valid; (2) the csw:SearchResults element contains 1-10 matching 
      csw:Record child elements.</comment>
      <link>csw-</link>
		<code>
			<xsl:variable name="response">
				<request>
					<url>
						<xsl:value-of select="$csw.GetRecords.post.url"/>
					</url>
                    <method>POST</method>
					<body>
<csw:GetRecords service="CSW" version="2.0.2" resultType="results">
    <csw:Query typeNames="csw:Record">
      <csw:ElementName>dc:identifier</csw:ElementName>
      <csw:ElementName>ows:BoundingBox</csw:ElementName>
      <csw:Constraint version="1.1.0">
        <ogc:Filter>
          <ogc:BBOX>
            <ogc:PropertyName>/ows:BoundingBox</ogc:PropertyName>
            <gml:Envelope srsName="urn:ogc:def:crs:EPSG:4326">
              <gml:lowerCorner>47.0 -4.5</gml:lowerCorner>
              <gml:upperCorner>52.0 1.0</gml:upperCorner>
            </gml:Envelope>
          </ogc:BBOX>
        </ogc:Filter>
      </csw:Constraint>
    </csw:Query>
</csw:GetRecords>
					</body>
					<p:XMLValidatingParser.CSW/>
				</request>
			</xsl:variable>
			
            <xsl:choose>
              <xsl:when test="not($response/*)">
                  <ctl:message>[FAILURE] Missing or invalid response entity.</ctl:message>
                  <ctl:fail/>
              </xsl:when>
              <xsl:otherwise>
                <ctl:call-test name="ctl:SchematronValidatingParser">
		            <ctl:with-param name="doc" select="$response"/>
		            <ctl:with-param name="schema">sch/csw/2.0.2/GetRecords.sch</ctl:with-param>
		            <ctl:with-param name="phase">OneToTenRecordsPhase</ctl:with-param>
	            </ctl:call-test>
                <xsl:if test="count($response//csw:SearchResults/csw:Record) != count($response//csw:SearchResults/*)">
                  <ctl:message>[FAILURE] Only csw:Record elements expected in response.</ctl:message>
                  <ctl:fail/>
                </xsl:if>
                <xsl:variable name="env">
                  <gml:Envelope srsName="urn:ogc:def:crs:EPSG:4326">
                    <gml:lowerCorner>47.0 -4.5</gml:lowerCorner>
                    <gml:upperCorner>52.0 1.0</gml:upperCorner>
                  </gml:Envelope>
                </xsl:variable>
                <xsl:for-each select="$response//csw:SearchResults/*">
                  <xsl:if test="csw:disjoint-envelopes($env,ows:BoundingBox) != 0">
                    <ctl:message>[FAILURE] Envelopes do NOT intersect or @srsName value does not match 'urn:x-ogc:def:crs:EPSG:6.11:4326'(<xsl:value-of select="dc:identifier"/>)</ctl:message>
                    <ctl:fail/>
                  </xsl:if>
                </xsl:for-each>
              </xsl:otherwise>
            </xsl:choose>
		</code>
	</test>
    
    <test name="csw:csw-2.0.2-GetRecords-tc5.2">
      <param name="csw.GetRecords.post.url"/>
      <assertion>
      The response to a GetRecords request that includes an ogc:Filter having a
      spatial operator that does not refer to a geometry-valued property must 
      include an exception report.
      </assertion>
      <comment>Pass if all of the following conditions are true: (1) the response 
      is a valid ows:ExceptionReport; (2) the reported exceptionCode is "InvalidParameterValuePhase".</comment>
      <link>csw-</link>
		<code>
			<xsl:variable name="response">
				<request>
					<url>
						<xsl:value-of select="$csw.GetRecords.post.url"/>
					</url>
                    <method>POST</method>
					<body>
<csw:GetRecords service="CSW" version="2.0.2" resultType="results">
    <csw:Query typeNames="csw:Record">
      <csw:ElementSetName>brief</csw:ElementSetName>
      <csw:Constraint version="1.1.0">
        <ogc:Filter>
          <ogc:BBOX>
            <ogc:PropertyName>dct:spatial</ogc:PropertyName>
            <gml:Envelope srsName="urn:ogc:def:crs:EPSG:4326">
              <gml:lowerCorner>47.0 -4.5</gml:lowerCorner>
              <gml:upperCorner>52.0 1.0</gml:upperCorner>
            </gml:Envelope>
          </ogc:BBOX>
        </ogc:Filter>
      </csw:Constraint>
    </csw:Query>
</csw:GetRecords>
					</body>
					<p:XMLValidatingParser.OWS/>
				</request>
			</xsl:variable>
			
            <xsl:choose>
              <xsl:when test="not($response/*)">
                  <ctl:message>[FAILURE] Missing or invalid response entity.</ctl:message>
                  <ctl:fail/>
              </xsl:when>
              <xsl:otherwise>
                <ctl:call-test name="ctl:SchematronValidatingParser">
		            <ctl:with-param name="doc" select="$response"/>
		            <ctl:with-param name="schema">sch/ows/1.0.0/ExceptionReport.sch</ctl:with-param>
		            <ctl:with-param name="phase">InvalidParameterValuePhase</ctl:with-param>
	            </ctl:call-test>
              </xsl:otherwise>
            </xsl:choose>
		</code>
	</test>
    
    <test name="csw:csw-2.0.2-GetRecords-tc6.1">
      <param name="csw.GetRecords.post.url"/>
      <assertion>
      The response to a GetRecords request that includes an ogc:Filter having a
      PropertyIsEqualTo predicate (case-sensitive by default) must include all 
      matching record representations.
      </assertion>
      <comment>Pass if all of the following conditions are true: (1) the response 
      is schema valid; (2) the csw:SearchResults element contains exactly one 
      matching csw:BriefRecord instance; (3) csw:SearchResults/@nextRecord="0" </comment>
		<code>
			<xsl:variable name="response">
				<request>
					<url>
						<xsl:value-of select="$csw.GetRecords.post.url"/>
					</url>
                    <method>POST</method>
					<body>
<csw:GetRecords service="CSW" version="2.0.2" resultType="results">
   <csw:Query typeNames="csw:Record">
     <csw:ElementSetName>brief</csw:ElementSetName>
     <csw:Constraint version="1.1.0">
       <ogc:Filter>
         <ogc:PropertyIsEqualTo>
           <ogc:PropertyName>dc:title</ogc:PropertyName>
           <ogc:Literal>Fuscé vitae ligulä</ogc:Literal>
         </ogc:PropertyIsEqualTo>
       </ogc:Filter>
     </csw:Constraint>
   </csw:Query>
</csw:GetRecords>
					</body>
					<p:XMLValidatingParser.CSW/>
				</request>
			</xsl:variable>
			
            <xsl:choose>
              <xsl:when test="not($response/*)">
                  <ctl:message>[FAILURE] Missing or invalid response entity.</ctl:message>
                  <ctl:fail/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:if test="$response//csw:SearchResults//dc:identifier != 'urn:uuid:e9330592-0932-474b-be34-c3a3bb67c7db'">
                  <ctl:message>[FAILURE] Expected record is missing (urn:uuid:e9330592-0932-474b-be34-c3a3bb67c7db).</ctl:message>
                  <ctl:fail/>
                </xsl:if>
                <xsl:if test="$response//csw:SearchResults/@nextRecord != 0">
                  <ctl:message>[FAILURE] Expected csw:SearchResults/@nextRecord = 0.</ctl:message>
                  <ctl:fail/>
                </xsl:if>
              </xsl:otherwise>
            </xsl:choose>
		</code>
	</test>
    
    <test name="csw:csw-2.0.2-GetRecords-tc6.2">
      <param name="csw.GetRecords.post.url"/>
      <assertion>
      The response to a GetRecords request that includes an ogc:Filter having a
      PropertyIsEqualTo predicate (case-insensitive) must include all matching 
      record representations.
      </assertion>
      <comment>Pass if all of the following conditions are true: (1) the response 
      is schema valid; (2) the csw:SearchResults element contains exactly one 
      matching csw:BriefRecord instance.</comment>
		<code>
			<xsl:variable name="response">
				<request>
					<url>
						<xsl:value-of select="$csw.GetRecords.post.url"/>
					</url>
                    <method>POST</method>
					<body>
<csw:GetRecords service="CSW" version="2.0.2" resultType="results">
    <csw:Query typeNames="csw:Record">
      <csw:ElementSetName>brief</csw:ElementSetName>
      <csw:Constraint version="1.1.0">
        <ogc:Filter>
          <ogc:PropertyIsEqualTo matchCase="false">
            <ogc:PropertyName>dc:subject</ogc:PropertyName>
            <ogc:Literal>pHYSIOGRAPHy</ogc:Literal>
          </ogc:PropertyIsEqualTo>
        </ogc:Filter>
      </csw:Constraint>
    </csw:Query>
</csw:GetRecords>
					</body>
					<p:XMLValidatingParser.CSW/>
				</request>
			</xsl:variable>
			
            <xsl:choose>
              <xsl:when test="not($response/*)">
                  <ctl:message>[FAILURE] Missing or invalid response entity.</ctl:message>
                  <ctl:fail/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:choose>
                  <xsl:when test="$response/csw:GetRecordsResponse/csw:SearchResults//dc:identifier='urn:uuid:ab42a8c4-95e8-4630-bf79-33e59241605a'"/>
                  <xsl:otherwise>
                    <ctl:message>[FAILURE] Expected record is missing (urn:uuid:ab42a8c4-95e8-4630-bf79-33e59241605a).</ctl:message>
                    <ctl:fail/>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:otherwise>
            </xsl:choose>
		</code>
	</test>
    
    <test name="csw:csw-2.0.2-GetRecords-tc7.1">
      <param name="csw.GetRecords.post.url"/>
      <assertion>
      The response to a GetRecords request that includes an unsupported function 
      must include an exception report.
      </assertion>
      <comment>Pass if all of the following conditions are true: (1) the response 
      is a valid ows:ExceptionReport; (2) the reported exceptionCode is "InvalidParameterValue" 
      (ogc:Function/@name).</comment>
      <link>csw-</link>
		<code>
			<xsl:variable name="response">
				<request>
					<url>
						<xsl:value-of select="$csw.GetRecords.post.url"/>
					</url>
                    <method>POST</method>
					<body>
<csw:GetRecords service="CSW" version="2.0.2" resultType="results">
    <csw:Query typeNames="csw:Record">
      <csw:ElementSetName>brief</csw:ElementSetName>
      <csw:Constraint version="1.1.0">
        <ogc:Filter>
          <ogc:PropertyIsEqualTo>
            <ogc:PropertyName>dc:title</ogc:PropertyName>
            <ogc:Function name="DummyFunction">
              <ogc:Literal>input.argument</ogc:Literal>
            </ogc:Function>
          </ogc:PropertyIsEqualTo>
        </ogc:Filter>
      </csw:Constraint>
    </csw:Query>
</csw:GetRecords>
					</body>
					<p:XMLValidatingParser.OWS/>
				</request>
			</xsl:variable>
			
            <xsl:choose>
              <xsl:when test="not($response/*)">
                  <ctl:message>[FAILURE] Missing or invalid response entity.</ctl:message>
                  <ctl:fail/>
              </xsl:when>
              <xsl:otherwise>
                <ctl:call-test name="ctl:SchematronValidatingParser">
		            <ctl:with-param name="doc" select="$response"/>
		            <ctl:with-param name="schema">sch/ows/1.0.0/ExceptionReport.sch</ctl:with-param>
		            <ctl:with-param name="phase">InvalidParameterValuePhase</ctl:with-param>
	            </ctl:call-test>
              </xsl:otherwise>
            </xsl:choose>
		</code>
	</test>
    
    <test name="csw:csw-2.0.2-GetRecords-tc8.1">
      <param name="csw.GetRecords.post.url"/>
      <assertion>
      The response to a GetRecords request that includes an ogc:Filter having a
      PropertyIsNotEqualTo predicate (case-sensitive by default) must exclude  
      matching record representations.
      </assertion>
      <comment>Pass if all of the following conditions are true: (1) the response 
      is schema valid; (2) the csw:SearchResults element does NOT contain any 
      records with a matching title.</comment>
		<code>
			<xsl:variable name="response">
				<request>
					<url>
						<xsl:value-of select="$csw.GetRecords.post.url"/>
					</url>
                    <method>POST</method>
					<body>
<csw:GetRecords service="CSW" version="2.0.2" resultType="results" maxRecords="100">
   <csw:Query typeNames="csw:Record">
     <csw:ElementSetName>brief</csw:ElementSetName>
     <csw:Constraint version="1.1.0">
       <ogc:Filter>
         <ogc:PropertyIsNotEqualTo>
           <ogc:PropertyName>dc:title</ogc:PropertyName>
           <ogc:Literal>Fuscé vitae ligulä</ogc:Literal>
         </ogc:PropertyIsNotEqualTo>
       </ogc:Filter>
     </csw:Constraint>
     <ogc:SortBy>
       <ogc:SortProperty>
         <ogc:PropertyName>dc:format</ogc:PropertyName>
         <ogc:SortOrder>DESC</ogc:SortOrder>
       </ogc:SortProperty>
     </ogc:SortBy>
   </csw:Query>
</csw:GetRecords>
					</body>
					<p:XMLValidatingParser.CSW/>
				</request>
			</xsl:variable>
			
            <xsl:choose>
              <xsl:when test="not($response/*)">
                  <ctl:message>[FAILURE] Missing or invalid response entity.</ctl:message>
                  <ctl:fail/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:for-each select="$response//csw:SearchResults/*">
                  <xsl:if test="dc:identifier = 'urn:uuid:e9330592-0932-474b-be34-c3a3bb67c7db'">
                    <ctl:message>[FAILURE] Unexpected record is included (urn:uuid:e9330592-0932-474b-be34-c3a3bb67c7db).</ctl:message>
                    <ctl:fail/>
                  </xsl:if>
                </xsl:for-each>
              </xsl:otherwise>
            </xsl:choose>
		</code>
	</test>
    
    <test name="csw:csw-2.0.2-GetRecords-tc8.2">
      <param name="csw.GetRecords.post.url"/>
      <assertion>
      The response to a GetRecords request that includes an ogc:Filter having a
      PropertyIsNotEqualTo predicate (case-insensitive) must exclude matching 
      record representations.
      </assertion>
      <comment>Pass if all of the following conditions are true: (1) the response 
      is schema valid; (2) the csw:SearchResults element does NOT contain any 
      records with a matching subject.</comment>
		<code>
			<xsl:variable name="response">
				<request>
					<url>
						<xsl:value-of select="$csw.GetRecords.post.url"/>
					</url>
                    <method>POST</method>
					<body>
<csw:GetRecords service="CSW" version="2.0.2" resultType="results" maxRecords="20">
    <csw:Query typeNames="csw:Record">
      <csw:ElementSetName>brief</csw:ElementSetName>
      <csw:Constraint version="1.1.0">
        <ogc:Filter>
          <ogc:PropertyIsNotEqualTo matchCase="false">
            <ogc:PropertyName>dc:subject</ogc:PropertyName>
            <ogc:Literal>pHYSIOGRAPHy</ogc:Literal>
          </ogc:PropertyIsNotEqualTo>
        </ogc:Filter>
      </csw:Constraint>
    </csw:Query>
</csw:GetRecords>
					</body>
					<p:XMLValidatingParser.CSW/>
				</request>
			</xsl:variable>
			
            <xsl:choose>
              <xsl:when test="not($response/*)">
                  <ctl:message>[FAILURE] Missing or invalid response entity.</ctl:message>
                  <ctl:fail/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:variable name="recordCount" select="count($response//csw:SearchResults/csw:BriefRecord)"/>
                <xsl:if test="$recordCount gt 20">
                  <ctl:message>[FAILURE] A maximum of 20 csw:BriefRecord elements expected in response (<xsl:value-of select="$recordCount"/> included)</ctl:message>
                  <ctl:fail/>
                </xsl:if>
                <xsl:for-each select="$response//csw:SearchResults/*">
                  <xsl:if test="compare(upper-case(dc:subject),'PHYSIOGRAPHY') = 0">
                    <ctl:message>[FAILURE] Unexpected record having dc:subject matching 'pHYSIOGRAPHy' (case-insensitive) - (<xsl:value-of select="dc:identifier"/>)</ctl:message>
                    <ctl:fail/>
                  </xsl:if>
                </xsl:for-each>
              </xsl:otherwise>
            </xsl:choose>
		</code>
	</test>
    
    <test name="csw:csw-2.0.2-GetRecords-tc9.1">
      <param name="csw.GetRecords.post.url"/>
      <assertion>
      The response to a GetRecords request that includes an ogc:Filter having a
      PropertyIsGreaterThan predicate must include matching record representations.
      </assertion>
      <comment>Pass if all of the following conditions are true: (1) the response 
      is schema valid; (2) the csw:SearchResults element contains 1-10 csw:Record 
      child elements having dct:modified values occurring after 2004-01-01.</comment>
		<code>
			<xsl:variable name="response">
				<request>
					<url>
						<xsl:value-of select="$csw.GetRecords.post.url"/>
					</url>
                    <method>POST</method>
					<body>
<csw:GetRecords service="CSW" version="2.0.2" resultType="results">
    <csw:Query typeNames="csw:Record">
      <csw:ElementName>dc:identifier</csw:ElementName>
      <csw:ElementName>dc:type</csw:ElementName>
      <csw:ElementName>dct:modified</csw:ElementName>
      <csw:Constraint version="1.1.0">
        <ogc:Filter>
          <ogc:PropertyIsGreaterThan>
            <ogc:PropertyName>dct:modified</ogc:PropertyName>
            <ogc:Literal>2004-01-01Z</ogc:Literal>
          </ogc:PropertyIsGreaterThan>
        </ogc:Filter>
      </csw:Constraint>
    </csw:Query>
</csw:GetRecords>
					</body>
					<p:XMLValidatingParser.CSW/>
				</request>
			</xsl:variable>
			
            <xsl:choose>
              <xsl:when test="not($response/*)">
                  <ctl:message>[FAILURE] Missing or invalid response entity.</ctl:message>
                  <ctl:fail/>
              </xsl:when>
              <xsl:otherwise>
                <ctl:call-test name="ctl:SchematronValidatingParser">
		            <ctl:with-param name="doc" select="$response"/>
		            <ctl:with-param name="schema">sch/csw/2.0.2/GetRecords.sch</ctl:with-param>
		            <ctl:with-param name="phase">OneToTenAdHocRecordsPhase</ctl:with-param>
	            </ctl:call-test>
                <xsl:for-each select="$response//csw:SearchResults/*">
                  <xsl:if test="xsd:date(dct:modified) le xsd:date('2004-01-01Z')">
                    <ctl:message>[FAILURE] Included record modified on or before 2004-01-01Z (<xsl:value-of select="dct:modified"/>)</ctl:message>
                    <ctl:fail/>
                  </xsl:if>
                </xsl:for-each>
              </xsl:otherwise>
            </xsl:choose>
		</code>
	</test>
    
    <test name="csw:csw-2.0.2-GetRecords-tc10.1">
      <param name="csw.GetRecords.post.url"/>
      <assertion>
      The response to a GetRecords request that includes an ogc:Filter having a
      PropertyIsLessThan predicate must include matching record representations.
      </assertion>
      <comment>Pass if all of the following conditions are true: (1) the response 
      is schema valid; (2) the csw:SearchResults element contains 1-10 csw:Record 
      child elements having dct:modified values occurring before 2006-05-01.</comment>
		<code>
			<xsl:variable name="response">
				<request>
					<url>
						<xsl:value-of select="$csw.GetRecords.post.url"/>
					</url>
                    <method>POST</method>
					<body>
<csw:GetRecords service="CSW" version="2.0.2" resultType="results">
    <csw:Query typeNames="csw:Record">
      <csw:ElementName>dc:identifier</csw:ElementName>
      <csw:ElementName>dc:type</csw:ElementName>
      <csw:ElementName>dct:modified</csw:ElementName>
      <csw:Constraint version="1.1.0">
        <ogc:Filter>
          <ogc:PropertyIsLessThan>
            <ogc:PropertyName>dct:modified</ogc:PropertyName>
            <ogc:Literal>2006-05-01Z</ogc:Literal>
          </ogc:PropertyIsLessThan>
        </ogc:Filter>
      </csw:Constraint>
    </csw:Query>
</csw:GetRecords>
					</body>
					<p:XMLValidatingParser.CSW/>
				</request>
			</xsl:variable>
			
            <xsl:choose>
              <xsl:when test="not($response/*)">
                  <ctl:message>[FAILURE] Missing or invalid response entity.</ctl:message>
                  <ctl:fail/>
              </xsl:when>
              <xsl:otherwise>
                <ctl:call-test name="ctl:SchematronValidatingParser">
		            <ctl:with-param name="doc" select="$response"/>
		            <ctl:with-param name="schema">sch/csw/2.0.2/GetRecords.sch</ctl:with-param>
		            <ctl:with-param name="phase">OneToTenAdHocRecordsPhase</ctl:with-param>
	            </ctl:call-test>
                <xsl:for-each select="$response//csw:SearchResults/*">
                  <xsl:if test="xsd:date(dct:modified) ge xsd:date('2006-05-01Z')">
                    <ctl:message>[FAILURE] Included record modified on or after 2006-05-01Z (<xsl:value-of select="dct:modified"/>)</ctl:message>
                    <ctl:fail/>
                  </xsl:if>
                </xsl:for-each>
              </xsl:otherwise>
            </xsl:choose>
		</code>
	</test>
    
    <test name="csw:csw-2.0.2-GetRecords-tc11.1">
      <param name="csw.GetRecords.post.url"/>
      <assertion>
      The response to a GetRecords request that includes an ogc:Filter having a
      PropertyIsLike predicate must include matching record representations.
      </assertion>
      <comment>Pass if the csw:SearchResults element contains only csw:SummaryRecord 
      instances having a dc:title value starting with the string "Lorem ipsum".</comment>
      <link>csw-</link>
		<code>
			<xsl:variable name="response">
				<request>
					<url>
						<xsl:value-of select="$csw.GetRecords.post.url"/>
					</url>
                    <method>POST</method>
					<body>
<csw:GetRecords service="CSW" version="2.0.2" resultType="results">
    <csw:Query typeNames="csw:Record">
      <csw:ElementSetName>summary</csw:ElementSetName>
      <csw:Constraint version="1.1.0">
        <ogc:Filter>
          <ogc:PropertyIsLike wildCard="*" singleChar="?" escapeChar="\">
            <ogc:PropertyName>dc:title</ogc:PropertyName>
            <ogc:Literal>Lorem ipsum*</ogc:Literal>
          </ogc:PropertyIsLike>
        </ogc:Filter>
      </csw:Constraint>
    </csw:Query>
</csw:GetRecords>
					</body>
					<p:XMLValidatingParser.CSW/>
				</request>
			</xsl:variable>
			
            <xsl:choose>
              <xsl:when test="not($response/*)">
                  <ctl:message>[FAILURE] Missing or invalid response entity.</ctl:message>
                  <ctl:fail/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:if test="count($response//csw:SearchResults/csw:SummaryRecord) lt 2">
                  <ctl:message>[FAILURE] At least two csw:SummaryRecord elements expected in response.</ctl:message>
                  <ctl:fail/>
                </xsl:if>
                <xsl:for-each select="$response//csw:SearchResults/*">
                  <xsl:if test="starts-with(dc:title,'Lorem ipsum') != true()">
                    <ctl:message>[FAILURE] Unexpected record is included (dc:title does not match expression "Lorem ipsum*")</ctl:message>
                    <ctl:fail/>
                  </xsl:if>
                </xsl:for-each>
              </xsl:otherwise>
            </xsl:choose>
		</code>
	</test>
    
    <test name="csw:csw-2.0.2-GetRecords-tc11.2">
      <param name="csw.GetRecords.post.url"/>
      <assertion>
      The response to a GetRecords request that includes an ogc:Filter having a
      PropertyIsLike predicate must include matching record representations.
      </assertion>
      <comment>Pass if the csw:SearchResults element contains only csw:SummaryRecord 
      instances having a dct:modified value satisfying the expression 200?-10-*.</comment>
      <link>csw-</link>
		<code>
			<xsl:variable name="response">
				<request>
					<url>
						<xsl:value-of select="$csw.GetRecords.post.url"/>
					</url>
                    <method>POST</method>
					<body>
<csw:GetRecords service="CSW" version="2.0.2" resultType="results">
    <csw:Query typeNames="csw:Record">
      <csw:ElementSetName>summary</csw:ElementSetName>
      <csw:Constraint version="1.1.0">
        <ogc:Filter>
          <ogc:PropertyIsLike wildCard="*" singleChar="?" escapeChar="\">
            <ogc:PropertyName>dct:modified</ogc:PropertyName>
            <ogc:Literal>200?-10-*</ogc:Literal>
          </ogc:PropertyIsLike>
        </ogc:Filter>
      </csw:Constraint>
    </csw:Query>
</csw:GetRecords>
					</body>
					<p:XMLValidatingParser.CSW/>
				</request>
			</xsl:variable>
			
            <xsl:choose>
              <xsl:when test="not($response/*)">
                  <ctl:message>[FAILURE] Missing or invalid response entity.</ctl:message>
                  <ctl:fail/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:if test="count($response//csw:SearchResults/csw:SummaryRecord) lt 1">
                  <ctl:message>[FAILURE] AT least one csw:SummaryRecord element expected in response.</ctl:message>
                  <ctl:fail/>
                </xsl:if>
                <xsl:for-each select="$response//csw:SearchResults/*">
                  <xsl:if test="matches(dct:modified,'200\d-10-.*') != true()">
                    <ctl:message>[FAILURE] Unexpected record is included (dct:modified does not match expression "200?-10-*")</ctl:message>
                    <ctl:fail/>
                  </xsl:if>
                </xsl:for-each>
              </xsl:otherwise>
            </xsl:choose>
		</code>
	</test>
    
    <test name="csw:csw-2.0.2-GetRecords-tc12.1">
      <param name="csw.GetRecords.post.url"/>
      <assertion>
      The response to a GetRecords request that includes an ogc:Filter having a
      PropertyIsLessThanOrEqualTo predicate must include matching record 
      representations.
      </assertion>
      <comment>Pass if all of the following conditions are true: (1) the response 
      is schema valid; (2) the csw:SearchResults element contains at least two 
      csw:Record elements having dct:modified values occurring on or before 
      2005-10-24.</comment>
		<code>
			<xsl:variable name="response">
				<request>
					<url>
						<xsl:value-of select="$csw.GetRecords.post.url"/>
					</url>
                    <method>POST</method>
					<body>
<csw:GetRecords service="CSW" version="2.0.2" resultType="results">
    <csw:Query typeNames="csw:Record">
      <csw:ElementName>dc:identifier</csw:ElementName>
      <csw:ElementName>dc:type</csw:ElementName>
      <csw:ElementName>dct:modified</csw:ElementName>
      <csw:Constraint version="1.1.0">
        <ogc:Filter>
          <ogc:PropertyIsLessThanOrEqualTo>
            <ogc:PropertyName>dct:modified</ogc:PropertyName>
            <ogc:Literal>2005-10-24Z</ogc:Literal>
          </ogc:PropertyIsLessThanOrEqualTo>
        </ogc:Filter>
      </csw:Constraint>
    </csw:Query>
</csw:GetRecords>
					</body>
					<p:XMLValidatingParser.CSW/>
				</request>
			</xsl:variable>
			
            <xsl:choose>
              <xsl:when test="not($response/*)">
                  <ctl:message>[FAILURE] Missing or invalid response entity.</ctl:message>
                  <ctl:fail/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:if test="count($response//csw:SearchResults/csw:Record) lt 2">
                  <ctl:message>[FAILURE] AT least two csw:Record elements expected in response.</ctl:message>
                  <ctl:fail/>
                </xsl:if>
                <xsl:for-each select="$response//csw:SearchResults/*">
                  <xsl:if test="xsd:date(dct:modified) gt xsd:date('2005-10-24Z')">
                    <ctl:message>[FAILURE] Included record modified after 2005-10-24Z (<xsl:value-of select="dct:modified"/>)</ctl:message>
                    <ctl:fail/>
                  </xsl:if>
                </xsl:for-each>
              </xsl:otherwise>
            </xsl:choose>
		</code>
	</test>
    
    <test name="csw:csw-2.0.2-GetRecords-tc13.1">
      <param name="csw.GetRecords.post.url"/>
      <assertion>
      The response to a GetRecords request that includes an ogc:Filter having a
      PropertyIsGreaterThanOrEqualTo predicate must include matching record 
      representations.
      </assertion>
      <comment>Pass if all of the following conditions are true: (1) the response 
      is schema valid; (2) the csw:SearchResults element contains at least two 
      csw:Record elements having dct:modified values occurring on or after 2006-03-26.</comment>
		<code>
			<xsl:variable name="response">
				<request>
					<url>
						<xsl:value-of select="$csw.GetRecords.post.url"/>
					</url>
                    <method>POST</method>
					<body>
<csw:GetRecords service="CSW" version="2.0.2" resultType="results">
    <csw:Query typeNames="csw:Record">
      <csw:ElementName>dc:identifier</csw:ElementName>
      <csw:ElementName>dc:type</csw:ElementName>
      <csw:ElementName>dct:modified</csw:ElementName>
      <csw:Constraint version="1.1.0">
        <ogc:Filter>
          <ogc:PropertyIsGreaterThanOrEqualTo>
            <ogc:PropertyName>dct:modified</ogc:PropertyName>
            <ogc:Literal>2006-03-26Z</ogc:Literal>
          </ogc:PropertyIsGreaterThanOrEqualTo>
        </ogc:Filter>
      </csw:Constraint>
    </csw:Query>
</csw:GetRecords>
					</body>
					<p:XMLValidatingParser.CSW/>
				</request>
			</xsl:variable>
			
            <xsl:choose>
              <xsl:when test="not($response/*)">
                  <ctl:message>[FAILURE] Missing or invalid response entity.</ctl:message>
                  <ctl:fail/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:if test="count($response//csw:SearchResults/csw:Record) lt 2">
                  <ctl:message>[FAILURE] AT least two csw:Record elements expected in response.</ctl:message>
                  <ctl:fail/>
                </xsl:if>
                <xsl:for-each select="$response//csw:SearchResults/*">
                  <xsl:if test="xsd:date(dct:modified) lt xsd:date('2006-03-26Z')">
                    <ctl:message>[FAILURE] Included record modified before 2006-03-26Z (<xsl:value-of select="dct:modified"/>)</ctl:message>
                    <ctl:fail/>
                  </xsl:if>
                </xsl:for-each>
              </xsl:otherwise>
            </xsl:choose>
		</code>
	</test>
    
    <test name="csw:csw-2.0.2-GetRecords-tc14.1">
      <param name="csw.GetRecords.post.url"/>
      <assertion>
      The response to a GetRecords request that includes an ogc:Filter having a
      Not logical predicate must include only matching record representations.
      </assertion>
      <comment>Pass if all of the following conditions are true: (1) the response 
      is schema valid; (2) the csw:SearchResults element contains 10-20 
      csw:SummaryRecord elements having titles that do not start with the string 
      "Lorem ipsum".</comment>
		<code>
			<xsl:variable name="response">
				<request>
					<url>
						<xsl:value-of select="$csw.GetRecords.post.url"/>
					</url>
                    <method>POST</method>
					<body>
<csw:GetRecords service="CSW" version="2.0.2" resultType="results" maxRecords="20">
    <csw:Query typeNames="csw:Record">
      <csw:ElementSetName>summary</csw:ElementSetName>
      <csw:Constraint version="1.1.0">
        <ogc:Filter>
          <ogc:Not>
          <ogc:PropertyIsLike wildCard="*" singleChar="?" escapeChar="\">
            <ogc:PropertyName>dc:title</ogc:PropertyName>
            <ogc:Literal>Lorem ipsum*</ogc:Literal>
          </ogc:PropertyIsLike>
          </ogc:Not>
        </ogc:Filter>
      </csw:Constraint>
    </csw:Query>
</csw:GetRecords>
					</body>
					<p:XMLValidatingParser.CSW/>
				</request>
			</xsl:variable>
			
            <xsl:choose>
              <xsl:when test="not($response/*)">
                  <ctl:message>[FAILURE] Missing or invalid response entity.</ctl:message>
                  <ctl:fail/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:variable name="summaryRecCount" select="count($response//csw:SearchResults/csw:SummaryRecord)"/>
                <xsl:if test="($summaryRecCount &lt; 10) or ($summaryRecCount &gt; 20)">
                  <ctl:message>[FAILURE] 10-20 csw:SummaryRecord elements expected in response (<xsl:value-of select="$summaryRecCount"/> included)</ctl:message>
                  <ctl:fail/>
                </xsl:if>
                <xsl:for-each select="$response//csw:SearchResults/*">
                  <xsl:if test="starts-with(dc:title,'Lorem ipsum') = true()">
                    <ctl:message>[FAILURE] Unexpected record is included (dc:title starts with "Lorem ipsum*")</ctl:message>
                    <ctl:fail/>
                  </xsl:if>
                </xsl:for-each>
              </xsl:otherwise>
            </xsl:choose>
		</code>
	</test>
    
    <test name="csw:csw-2.0.2-GetRecords-tc14.2">
      <param name="csw.GetRecords.post.url"/>
      <assertion>
      The response to a GetRecords request that includes an ogc:Filter having a
      Not logical predicate must include only matching record representations.
      </assertion>
      <comment>Pass if all of the following conditions are true: (1) the response 
      is schema valid; (2) the csw:SearchResults element contains 11-20 csw:Record 
      elements having extents that are either disjoint from the given bounding 
      box or have no ows:BoundingBox child element.</comment>
		<code>
			<xsl:variable name="response">
				<request>
					<url>
						<xsl:value-of select="$csw.GetRecords.post.url"/>
					</url>
                    <method>POST</method>
					<body>
<csw:GetRecords service="CSW" version="2.0.2" resultType="results" maxRecords="20">
    <csw:Query typeNames="csw:Record">
      <csw:ElementName>dc:identifier</csw:ElementName>
      <csw:ElementName>ows:BoundingBox</csw:ElementName>
      <csw:Constraint version="1.1.0">
        <ogc:Filter>
          <ogc:Not>
           <ogc:BBOX>
             <ogc:PropertyName>ows:BoundingBox</ogc:PropertyName>
             <gml:Envelope srsName="urn:ogc:def:crs:EPSG:4326">
               <gml:lowerCorner>60.0 12.0</gml:lowerCorner>
               <gml:upperCorner>70.0 20.0</gml:upperCorner>
             </gml:Envelope>
           </ogc:BBOX>
         </ogc:Not>
       </ogc:Filter>
     </csw:Constraint>
   </csw:Query>
</csw:GetRecords>
					</body>
					<p:XMLValidatingParser.CSW/>
				</request>
			</xsl:variable>
			
            <xsl:choose>
              <xsl:when test="not($response/*)">
                  <ctl:message>[FAILURE] Missing or invalid response entity.</ctl:message>
                  <ctl:fail/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:variable name="recordCount" select="count($response//csw:SearchResults/csw:Record)"/>
                <xsl:if test="($recordCount lt 11) or ($recordCount gt 20)">
                  <ctl:message>[FAILURE] 11-20 csw:Record elements expected in response (<xsl:value-of select="$recordCount"/> included)</ctl:message>
                  <ctl:fail/>
                </xsl:if>
                <xsl:variable name="env">
                  <gml:Envelope srsName="urn:ogc:def:crs:EPSG:4326">
                    <gml:lowerCorner>60.0 12.0</gml:lowerCorner>
                    <gml:upperCorner>70.0 20.0</gml:upperCorner>
                  </gml:Envelope>
                </xsl:variable>
                <xsl:for-each select="$response//csw:SearchResults/*">
                  <xsl:if test="ows:BoundingBox">
                      <xsl:if test="csw:disjoint-envelopes($env,ows:BoundingBox) != 1">
						<ctl:message>[FAILURE] Envelopes intersect (<xsl:value-of select="dc:identifier"/>)</ctl:message>
						<ctl:fail/>
					  </xsl:if>
				  </xsl:if>
                </xsl:for-each>
              </xsl:otherwise>
            </xsl:choose>
		</code>
	</test>
    
    <test name="csw:csw-2.0.2-GetRecords-tc15.1">
      <param name="csw.GetRecords.post.url"/>
      <assertion>
      The response to a GetRecords request that includes an invalid filter 
      expression must include an exception report.
      </assertion>
      <comment>Pass if all of the following conditions are true: (1) the response 
      is a valid ows:ExceptionReport; (2) the reported exceptionCode is "NoApplicableCode".</comment>
      <link>csw-</link>
		<code>
			<xsl:variable name="response">
				<request>
					<url>
						<xsl:value-of select="$csw.GetRecords.post.url"/>
					</url>
                    <method>POST</method>
					<body>
<csw:GetRecords service="CSW" version="2.0.2" resultType="hits">
    <csw:Query typeNames="csw:Record">
      <csw:ElementSetName>brief</csw:ElementSetName>
      <csw:Constraint version="1.1.0">
        <ogc:Filter xmlns:ogc="http://www.opengis.net/foo">
          <ogc:PropertyIsEqualTo>
            <ogc:PropertyName>dc:title</ogc:PropertyName>
            <ogc:Literal>Maecenas enim</ogc:Literal>
          </ogc:PropertyIsEqualTo>
        </ogc:Filter>
      </csw:Constraint>
    </csw:Query>
</csw:GetRecords>
					</body>
					<p:XMLValidatingParser.OWS/>
				</request>
			</xsl:variable>
			
            <xsl:choose>
              <xsl:when test="not($response/*)">
                  <ctl:message>[FAILURE] Missing or invalid response entity.</ctl:message>
                  <ctl:fail/>
              </xsl:when>
              <xsl:otherwise>
                <ctl:call-test name="ctl:SchematronValidatingParser">
		            <ctl:with-param name="doc" select="$response"/>
		            <ctl:with-param name="schema">sch/ows/1.0.0/ExceptionReport.sch</ctl:with-param>
		            <ctl:with-param name="phase">NoApplicableCodePhase</ctl:with-param>
	            </ctl:call-test>
              </xsl:otherwise>
            </xsl:choose>
		</code>
	</test>
    
    <test name="csw:csw-2.0.2-GetRecords-tc16.1">
      <param name="csw.GetRecords.post.url"/>
      <assertion>
      The response to a GetRecords request that includes an ogc:Filter having 
      the Or logical predicate must include only matching record representations.
      </assertion>
      <comment>Pass if all of the following conditions are true: (1) the response 
      is schema valid; (2) the csw:SearchResults element contains 1-10 
      csw:SummaryRecord elements that have dc:type = "urn:ogc:def:ebRIM-ObjectType:OGC:Image" 
      OR dc:format = "application/*xml".</comment>
		<code>
			<xsl:variable name="response">
				<request>
					<url>
						<xsl:value-of select="$csw.GetRecords.post.url"/>
					</url>
                    <method>POST</method>
					<body>
<csw:GetRecords service="CSW" version="2.0.2" resultType="results">
   <csw:Query typeNames="csw:Record">
     <csw:ElementSetName>summary</csw:ElementSetName>
     <csw:Constraint version="1.1.0">
       <ogc:Filter>
         <ogc:Or>
           <ogc:PropertyIsLike wildCard="*" singleChar="?" escapeChar="\">
             <ogc:PropertyName>dc:format</ogc:PropertyName>
             <ogc:Literal>application/*xml</ogc:Literal>
           </ogc:PropertyIsLike>
           <ogc:PropertyIsEqualTo>
             <ogc:PropertyName>dc:type</ogc:PropertyName>
             <ogc:Literal>urn:ogc:def:ebRIM-ObjectType:OGC:Image</ogc:Literal>
           </ogc:PropertyIsEqualTo>
         </ogc:Or>
       </ogc:Filter>
     </csw:Constraint>
   </csw:Query>
</csw:GetRecords>
					</body>
					<p:XMLValidatingParser.CSW/>
				</request>
			</xsl:variable>
			
            <xsl:choose>
              <xsl:when test="not($response/*)">
                  <ctl:message>[FAILURE] Missing or invalid response entity.</ctl:message>
                  <ctl:fail/>
              </xsl:when>
              <xsl:otherwise>
                <ctl:call-test name="ctl:SchematronValidatingParser">
		            <ctl:with-param name="doc" select="$response"/>
		            <ctl:with-param name="schema">sch/csw/2.0.2/GetRecords.sch</ctl:with-param>
		            <ctl:with-param name="phase">TypeFormatElementsPhase</ctl:with-param>
	            </ctl:call-test>
                <xsl:for-each select="$response//csw:SummaryRecord">
                  <xsl:if test="not(dc:format or dc:type)">
                    <ctl:message>[FAILURE] csw:Record is missing an expected property: dc:format or dc:type (<xsl:value-of select="dc:identifier"/>)</ctl:message>
                    <ctl:fail/>
                  </xsl:if>
                  <xsl:choose>
                    <xsl:when test="dc:format and dc:type">
                      <xsl:if test="(dc:type/text() != 'urn:ogc:def:ebRIM-ObjectType:OGC:Image') and (matches(dc:format/text(),'application/.*\+?xml') != true())">
                        <ctl:message>[FAILURE] dc:type != "urn:ogc:def:ebRIM-ObjectType:OGC:Image" AND dc:format does not match expression "application/*xml" (<xsl:value-of select="dc:identifier"/>)</ctl:message>
                        <ctl:fail/>
                      </xsl:if>
                    </xsl:when>
                    <xsl:when test="dc:format">
                      <xsl:if test="matches(dc:format/text(),'application/.*\+?xml') != true()">
                          <ctl:message>[FAILURE] dc:format does not match expression "application/*xml" (<xsl:value-of select="dc:identifier"/>)</ctl:message>
                          <ctl:fail/>
                        </xsl:if>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:if test="dc:type/text() != 'urn:ogc:def:ebRIM-ObjectType:OGC:Image'">
                          <ctl:message>[FAILURE] dc:type != "urn:ogc:def:ebRIM-ObjectType:OGC:Image" (<xsl:value-of select="dc:identifier"/>)</ctl:message>
                          <ctl:fail/>
                        </xsl:if>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:for-each>
              </xsl:otherwise>
            </xsl:choose>
		</code>
	</test>
    
    <test name="csw:csw-2.0.2-GetRecords-tc16.2">
      <param name="csw.GetRecords.post.url"/>
      <assertion>
      The response to a GetRecords request that includes an ogc:Filter having 
      the Or logical predicate must include only matching record representations.
      </assertion>
      <comment>Pass if all of the following conditions are true: (1) the response 
      is schema valid; (2) the csw:SearchResults element contains 1-10 csw:Record 
      child elements that have a matching extent OR were modified after 2006-01-01.</comment>
		<code>
			<xsl:variable name="response">
				<request>
					<url>
						<xsl:value-of select="$csw.GetRecords.post.url"/>
					</url>
                    <method>POST</method>
					<body>
<csw:GetRecords service="CSW" version="2.0.2" resultType="results">
   <csw:Query typeNames="csw:Record">
     <csw:ElementName>dc:identifier</csw:ElementName>
     <csw:ElementName>dct:modified</csw:ElementName>
     <csw:ElementName>ows:BoundingBox</csw:ElementName>
     <csw:Constraint version="1.1.0">
       <ogc:Filter>
         <ogc:Or>
           <ogc:BBOX>
             <ogc:PropertyName>ows:BoundingBox</ogc:PropertyName>
             <gml:Envelope srsName="urn:ogc:def:crs:EPSG:4326">
               <gml:lowerCorner>47.0 -4.5</gml:lowerCorner>
               <gml:upperCorner>52.0 1.0</gml:upperCorner>
             </gml:Envelope>
           </ogc:BBOX>
           <ogc:PropertyIsGreaterThan>
             <ogc:PropertyName>dct:modified</ogc:PropertyName>
             <ogc:Literal>2006-01-01Z</ogc:Literal>
           </ogc:PropertyIsGreaterThan>
         </ogc:Or>
       </ogc:Filter>
     </csw:Constraint>
   </csw:Query>
</csw:GetRecords>
					</body>
					<p:XMLValidatingParser.CSW/>
				</request>
			</xsl:variable>
			
            <xsl:choose>
              <xsl:when test="not($response/*)">
                  <ctl:message>[FAILURE] Missing or invalid response entity.</ctl:message>
                  <ctl:fail/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:variable name="env">
                  <gml:Envelope srsName="urn:ogc:def:crs:EPSG:4326">
                    <gml:lowerCorner>47.0 -4.5</gml:lowerCorner>
                    <gml:upperCorner>52.0 1.0</gml:upperCorner>
                  </gml:Envelope>
                </xsl:variable>
                <xsl:for-each select="$response//csw:Record">
                  <xsl:if test="not(dct:modified or ows:BoundingBox)">
                    <ctl:message>[FAILURE] csw:Record is missing an expected property: dct:modified or ows:BoundingBox (<xsl:value-of select="dc:identifier"/>)</ctl:message>
                    <ctl:fail/>
                  </xsl:if>
                  <xsl:choose>
                    <xsl:when test="dct:modified and ows:BoundingBox">
                      <xsl:if test="(xsd:date(dct:modified) le xsd:date('2006-01-01Z')) and (csw:disjoint-envelopes($env,ows:BoundingBox) != 0)">
                        <ctl:message>[FAILURE] Record modified on or before 2006-01-01Z AND envelopes do not intersect (<xsl:value-of select="dc:identifier"/>)</ctl:message>
                        <ctl:fail/>
                      </xsl:if>
                    </xsl:when>
                    <xsl:when test="dct:modified">
                      <xsl:if test="xsd:date(dct:modified) le xsd:date('2006-01-01Z')">
                          <ctl:message>[FAILURE] Record modified on or before 2006-01-01Z (<xsl:value-of select="dc:identifier"/>)</ctl:message>
                          <ctl:fail/>
                        </xsl:if>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:if test="csw:disjoint-envelopes($env,ows:BoundingBox) != 0">
                          <ctl:message>[FAILURE] envelopes do not intersect (<xsl:value-of select="dc:identifier"/>)</ctl:message>
                          <ctl:fail/>
                        </xsl:if>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:for-each>
              </xsl:otherwise>
            </xsl:choose>
		</code>
	</test>
    
    <test name="csw:csw-2.0.2-GetRecords-tc17.1">
      <param name="csw.GetRecords.post.url"/>
      <assertion>
      The response to a GetRecords request that includes an ogc:Filter having 
      the And logical predicate must include only matching record representations.
      </assertion>
      <comment>
      Pass if the csw:SearchResults element contains 1-10 csw:SummaryRecord 
      elements that have dc:format="image/*" AND are related to the given record.
      </comment>
		<code>
			<xsl:variable name="response">
				<request>
					<url>
						<xsl:value-of select="$csw.GetRecords.post.url"/>
					</url>
                    <method>POST</method>
					<body>
<csw:GetRecords service="CSW" version="2.0.2" resultType="results">
  <csw:Query typeNames="csw:Record">
    <csw:ElementSetName>summary</csw:ElementSetName>
    <csw:Constraint version="1.1.0">
      <ogc:Filter>
        <ogc:And>
          <ogc:PropertyIsLike wildCard="*" singleChar="?" escapeChar="\">
            <ogc:PropertyName>dc:format</ogc:PropertyName>
            <ogc:Literal>image/*</ogc:Literal>
          </ogc:PropertyIsLike>
          <ogc:PropertyIsEqualTo>
            <ogc:PropertyName>dc:relation</ogc:PropertyName>
            <ogc:Literal>urn:uuid:9a669547-b69b-469f-a11f-2d875366bbdc</ogc:Literal>
          </ogc:PropertyIsEqualTo>
        </ogc:And>
      </ogc:Filter>
    </csw:Constraint>
  </csw:Query>
</csw:GetRecords>
					</body>
					<p:XMLValidatingParser.CSW/>
				</request>
			</xsl:variable>
			
            <xsl:choose>
              <xsl:when test="not($response/*)">
                  <ctl:message>[FAILURE] Missing or invalid response entity.</ctl:message>
                  <ctl:fail/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:variable name="recordCount" select="count($response//csw:SearchResults/csw:SummaryRecord)"/>
                <xsl:if test="($recordCount lt 1) or ($recordCount gt 10)">
                  <ctl:message>[FAILURE] 1-10 csw:SummaryRecord elements expected in response (<xsl:value-of select="$recordCount"/> included)</ctl:message>
                  <ctl:fail/>
                </xsl:if>
                <xsl:for-each select="$response//csw:SearchResults/*">
                  <xsl:if test="dc:relation != 'urn:uuid:9a669547-b69b-469f-a11f-2d875366bbdc'">
                    <ctl:message>[FAILURE] Record not related to 'urn:uuid:9a669547-b69b-469f-a11f-2d875366bbdc' (<xsl:value-of select="dc:identifier"/>)</ctl:message>
                    <ctl:fail/>
                  </xsl:if>
                  <xsl:if test="matches(dc:format,'image/.*') != true()">
                    <ctl:message>[FAILURE] dc:format does not match expression "image/*" (<xsl:value-of select="dc:identifier"/>)</ctl:message>
                    <ctl:fail/>
                  </xsl:if>
                </xsl:for-each>
              </xsl:otherwise>
            </xsl:choose>
		</code>
	</test>
    
    <test name="csw:csw-2.0.2-GetRecords-tc17.2">
      <param name="csw.GetRecords.post.url"/>
      <assertion>
      The response to a GetRecords request that includes an ogc:Filter having 
      the And logical predicate must include only matching record representations.
      </assertion>
      <comment>
      Pass if the csw:SearchResults element contains 1-10 csw:Record elements 
      that have envelopes intersecting the given bounding box AND were modified 
      after 2006-01-01.
      </comment>
      <link>csw-</link>
		<code>
			<xsl:variable name="response">
				<request>
					<url>
						<xsl:value-of select="$csw.GetRecords.post.url"/>
					</url>
                    <method>POST</method>
					<body>
<csw:GetRecords service="CSW" version="2.0.2" resultType="results">
  <csw:Query typeNames="csw:Record">
    <csw:ElementName>dc:identifier</csw:ElementName>
    <csw:ElementName>dct:modified</csw:ElementName>
    <csw:ElementName>ows:BoundingBox</csw:ElementName>
    <csw:Constraint version="1.1.0">
      <ogc:Filter>
        <ogc:And>
          <ogc:BBOX>
            <ogc:PropertyName>ows:BoundingBox</ogc:PropertyName>
            <gml:Envelope srsName="urn:ogc:def:crs:EPSG:4326">
              <gml:lowerCorner>47.0 -4.5</gml:lowerCorner>
              <gml:upperCorner>52.0 1.0</gml:upperCorner>
            </gml:Envelope>
          </ogc:BBOX> 
          <ogc:PropertyIsGreaterThan>
            <ogc:PropertyName>dct:modified</ogc:PropertyName>
            <ogc:Literal>2006-01-01Z</ogc:Literal>
          </ogc:PropertyIsGreaterThan>
        </ogc:And>
      </ogc:Filter>
    </csw:Constraint>
  </csw:Query>
</csw:GetRecords>
					</body>
					<p:XMLValidatingParser.CSW/>
				</request>
			</xsl:variable>
         
            <xsl:choose>
              <xsl:when test="not($response/*)">
                  <ctl:message>[FAILURE] Missing or invalid response entity.</ctl:message>
                  <ctl:fail/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:variable name="recordCount" select="count($response//csw:SearchResults/csw:Record)"/>
                <xsl:if test="($recordCount &lt; 1) or ($recordCount &gt; 10)">
                  <ctl:message>[FAILURE] 1-10 csw:Record elements expected in response (<xsl:value-of select="$recordCount"/> included)</ctl:message>
                  <ctl:fail/>
                </xsl:if>
                <xsl:variable name="env">
                  <gml:Envelope srsName="urn:ogc:def:crs:EPSG:4326">
                    <gml:lowerCorner>47.0 -4.5</gml:lowerCorner>
                    <gml:upperCorner>52.0 1.0</gml:upperCorner>
                  </gml:Envelope>
                </xsl:variable>
                <xsl:for-each select="$response//csw:SearchResults/*">
                  <xsl:if test="xsd:date(dct:modified) le xsd:date('2006-01-01Z')">
                    <ctl:message>[FAILURE] dct:modified value on or before 2006-01-01Z (<xsl:value-of select="dc:identifier"/>)</ctl:message>
                    <ctl:fail/>
                  </xsl:if>
                  <xsl:if test="csw:disjoint-envelopes($env,ows:BoundingBox) != 0">
                    <ctl:message>[FAILURE] Envelopes do NOT intersect (<xsl:value-of select="dc:identifier"/>)</ctl:message>
                    <ctl:fail/>
                  </xsl:if>
                </xsl:for-each>
              </xsl:otherwise>
            </xsl:choose>
		</code>
	</test>
    
    <test name="csw:csw-2.0.2-GetRecords-tc18.1">
      <param name="csw.GetRecords.post.url"/>
      <assertion>
      The response to a GetRecords request that includes an ogc:Filter having 
      the And logical predicate must include the specified view of records that 
      satisfy all constraints.
      </assertion>
		<code>
			<xsl:variable name="response">
				<request>
					<url>
						<xsl:value-of select="$csw.GetRecords.post.url"/>
					</url>
                    <method>POST</method>
					<body>
<csw:GetRecords service="CSW" version="2.0.2" resultType="results">
  <csw:Query typeNames="csw:Record">
    <csw:ElementName>dc:identifier</csw:ElementName>
    <csw:ElementName>dc:type</csw:ElementName>
    <csw:ElementName>ows:BoundingBox</csw:ElementName>
    <csw:Constraint version="1.1.0">
      <ogc:Filter>
        <ogc:And>
          <ogc:Not>
            <ogc:BBOX>
              <ogc:PropertyName>ows:BoundingBox</ogc:PropertyName>
              <gml:Envelope srsName="urn:ogc:def:crs:EPSG:4326">
                <gml:lowerCorner>40.0 -9.0</gml:lowerCorner>
                <gml:upperCorner>50.0 -5.0</gml:upperCorner>
              </gml:Envelope>
            </ogc:BBOX>
          </ogc:Not>
          <ogc:PropertyIsEqualTo matchCase="false">
            <ogc:PropertyName>dc:type</ogc:PropertyName>
            <ogc:Literal>HTTP://purl.org/dc/dcmitype/dataset</ogc:Literal>
          </ogc:PropertyIsEqualTo>
        </ogc:And>
      </ogc:Filter>
    </csw:Constraint>
  </csw:Query>
</csw:GetRecords>
					</body>
					<p:XMLValidatingParser.CSW/>
				</request>
			</xsl:variable>
            <xsl:choose>
              <xsl:when test="not($response/*)">
                  <ctl:message>[FAILURE] Missing or invalid response entity.</ctl:message>
                  <ctl:fail/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:variable name="recordCount" select="count($response//csw:SearchResults/csw:Record)"/>
                <xsl:if test="($recordCount &lt; 1) or ($recordCount &gt; 10)">
                  <ctl:message>[FAILURE] 1-10 csw:Record elements expected in response (<xsl:value-of select="$recordCount"/> included)</ctl:message>
                  <ctl:fail/>
                </xsl:if>
                <xsl:variable name="env">
                  <gml:Envelope srsName="urn:ogc:def:crs:EPSG:4326">
                    <gml:lowerCorner>40.0 -9.0</gml:lowerCorner>
                    <gml:upperCorner>50.0 -5.0</gml:upperCorner>
                  </gml:Envelope>
                </xsl:variable>
                <xsl:for-each select="$response//csw:SearchResults/*">
                  <xsl:if test="compare(lower-case(dc:type),'http://purl.org/dc/dcmitype/dataset') != 0">
                    <ctl:message>[FAILURE] Unexpected record having dc:type not matching 'HTTP://purl.org/dc/dcmitype/dataset' (case-insensitive) - (<xsl:value-of select="dc:identifier"/>)</ctl:message>
                    <ctl:fail/>
                  </xsl:if>
                  <xsl:if test="ows:BoundingBox">
                      <xsl:if test="csw:disjoint-envelopes($env,ows:BoundingBox) != 1">
                        <ctl:message>[FAILURE] Envelopes intersect (<xsl:value-of select="dc:identifier"/>)</ctl:message>
                        <ctl:fail/>
                      </xsl:if>
				  </xsl:if>
                </xsl:for-each>
              </xsl:otherwise>
            </xsl:choose>
		</code>
	</test>
    
    <test name="csw:csw-2.0.2-GetRecords-tc19.1">
      <param name="csw.GetRecords.post.url"/>
      <assertion>
      The response to a GetRecords request that includes an ogc:Filter having a
      PropertyIsLike predicate must include the specified view of all matching 
      records. If a PropertyName value is not supplied, the predicate is evaluated 
      against all applicable record properties.
      </assertion>
		<code>
			<xsl:variable name="response">
				<request>
					<url>
						<xsl:value-of select="$csw.GetRecords.post.url"/>
					</url>
                    <method>POST</method>
					<body>
<csw:GetRecords service="CSW" version="2.0.2" resultType="results">
  <csw:Query typeNames="csw:Record">
    <csw:ElementSetName>full</csw:ElementSetName>
    <csw:Constraint version="1.1.0">
      <ogc:Filter>
        <ogc:PropertyIsLike wildCard="*" singleChar="." escapeChar="\">
          <ogc:PropertyName>csw:AnyText</ogc:PropertyName>
          <ogc:Literal>*lorem*</ogc:Literal>
        </ogc:PropertyIsLike>
      </ogc:Filter>
    </csw:Constraint>
  </csw:Query>
</csw:GetRecords>  
					</body>
					<p:XMLValidatingParser.CSW/>
				</request>
			</xsl:variable>
            <xsl:choose>
              <xsl:when test="not($response/*)">
                  <ctl:message>[FAILURE] Missing or invalid response entity.</ctl:message>
                  <ctl:fail/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:if test="count($response//csw:SearchResults/csw:Record) lt 5">
                  <ctl:message>[FAILURE] Expected at least 5 csw:Record elements with property values matching the expression "*lorem*".</ctl:message>
                  <ctl:fail/>
                </xsl:if>
              </xsl:otherwise>
            </xsl:choose>
		</code>
	</test>
    
    <test name="csw:csw-2.0.2-GetRecords-tc20.1">
      <param name="csw.GetRecords.post.url"/>
      <assertion>
      The csw:SummaryRecord view type cannot be queried. The response shall include 
      an exception having @exceptionCode = "InvalidParameterValue" [10.2.5.3.3].
      </assertion>
		<code>
			<xsl:variable name="response">
				<request>
					<url>
						<xsl:value-of select="$csw.GetRecords.post.url"/>
					</url>
                    <method>POST</method>
					<body>
<csw:GetRecords service="CSW" version="2.0.2" resultType="results">
  <csw:Query typeNames="csw:SummaryRecord">
    <csw:ElementSetName>summary</csw:ElementSetName>
    <csw:Constraint version="1.1.0">
      <ogc:Filter>
        <ogc:PropertyIsLike wildCard="*" singleChar="." escapeChar="\">
          <ogc:PropertyName>/dc:title</ogc:PropertyName>
          <ogc:Literal>*lorem*</ogc:Literal>
        </ogc:PropertyIsLike>
      </ogc:Filter>
    </csw:Constraint>
  </csw:Query>
</csw:GetRecords>  
					</body>
					<p:XMLValidatingParser.OWS/>
				</request>
			</xsl:variable>
            <xsl:choose>
              <xsl:when test="not($response/*)">
                  <ctl:message>[FAILURE] Missing or invalid response entity.</ctl:message>
                  <ctl:fail/>
              </xsl:when>
              <xsl:otherwise>
                  <ctl:call-test name="ctl:SchematronValidatingParser">
		            <ctl:with-param name="doc" select="$response"/>
		            <ctl:with-param name="schema">sch/ows/1.0.0/ExceptionReport.sch</ctl:with-param>
		            <ctl:with-param name="phase">InvalidParameterValuePhase</ctl:with-param>
	              </ctl:call-test>
              </xsl:otherwise>
            </xsl:choose>
		</code>
	</test>
    
    <test name="csw:csw-2.0.2-GetRecords-tc21.1">
      <param name="csw.GetRecords.post.url"/>
      <assertion>
      The csw:BriefRecord view type cannot be queried. The response shall include 
      an exception having @exceptionCode = "InvalidParameterValue" [10.2.5.3.4].
      </assertion>
		<code>
			<xsl:variable name="response">
				<request>
					<url>
						<xsl:value-of select="$csw.GetRecords.post.url"/>
					</url>
                    <method>POST</method>
					<body>
<csw:GetRecords service="CSW" version="2.0.2" resultType="results">
  <csw:Query typeNames="csw:BriefRecord">
    <csw:ElementSetName>brief</csw:ElementSetName>
    <csw:Constraint version="1.1.0">
      <ogc:Filter>
        <ogc:PropertyIsLike wildCard="*" singleChar="." escapeChar="\">
          <ogc:PropertyName>/dc:title</ogc:PropertyName>
          <ogc:Literal>*lorem*</ogc:Literal>
        </ogc:PropertyIsLike>
      </ogc:Filter>
    </csw:Constraint>
  </csw:Query>
</csw:GetRecords>  
					</body>
					<p:XMLValidatingParser.OWS/>
				</request>
			</xsl:variable>
            <xsl:choose>
              <xsl:when test="not($response/*)">
                  <ctl:message>[FAILURE] Missing or invalid response entity.</ctl:message>
                  <ctl:fail/>
              </xsl:when>
              <xsl:otherwise>
                  <ctl:call-test name="ctl:SchematronValidatingParser">
		            <ctl:with-param name="doc" select="$response"/>
		            <ctl:with-param name="schema">sch/ows/1.0.0/ExceptionReport.sch</ctl:with-param>
		            <ctl:with-param name="phase">InvalidParameterValuePhase</ctl:with-param>
	              </ctl:call-test>
              </xsl:otherwise>
            </xsl:choose>
		</code>
	</test>
    
    <test name="csw:csw-2.0.2-GetRecords-tc22.1">
      <param name="csw.GetRecords.post.url"/>
      <assertion>
      The response to a GetRecords request that includes the startPosition 
      parameter must include the corresponding slice of the result set.
      </assertion>
      <comment>Pass if all of the following conditions are true: (1) the response 
      is schema valid; (2) the csw:SearchResults element contains exactly 5 
      csw:SummaryRecord child elements; (3) csw:SearchResults/@nextRecord = 8.</comment>
      <link>csw-</link>
		<code>
			<xsl:variable name="response">
				<request>
					<url>
						<xsl:value-of select="$csw.GetRecords.post.url"/>
					</url>
                    <method>POST</method>
					<body>
<csw:GetRecords service="CSW" version="2.0.2" resultType="results" startPosition="3" maxRecords="5">
  <csw:Query typeNames="csw:Record">
    <csw:ElementSetName>summary</csw:ElementSetName>
  </csw:Query>
</csw:GetRecords>
					</body>
					<p:XMLValidatingParser.CSW/>
				</request>
			</xsl:variable>
			
            <xsl:choose>
              <xsl:when test="not($response/*)">
                  <ctl:message>[FAILURE] Missing or invalid response entity.</ctl:message>
                  <ctl:fail/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:variable name="nSummaryRecord" select="count($response//csw:SearchResults/csw:SummaryRecord)"/>
                <xsl:if test="nSummaryRecord != 5">
                  <ctl:message>[FAILURE] 5 csw:SummaryRecord elements expected (<xsl:value-of select="$nSummaryRecord"/> returned).</ctl:message>
                  <ctl:fail/>
                </xsl:if>
                <xsl:if test="$response//csw:SearchResults/@numberOfRecordsReturned != 5">
                  <ctl:message>[FAILURE] @numberOfRecordsReturned != 5.</ctl:message>
                  <ctl:fail/>
                </xsl:if>
                <xsl:if test="$response//csw:SearchResults/@nextRecord != 8">
                  <ctl:message>[FAILURE] @nextRecord != 8.</ctl:message>
                  <ctl:fail/>
                </xsl:if>
              </xsl:otherwise>
            </xsl:choose>
		</code>
	</test>
    
    <test name="csw:csw-2.0.2-GetRecords-tc23.1">
      <param name="csw.GetRecords.post.url"/>
      <assertion>
      The response to a GetRecords request that specifies maxRecords="0" must 
      not include any results.
      </assertion>
      <comment>Pass if all of the following conditions are true: 
      (1) the response is schema valid; 
      (2) the csw:SearchResults element is empty; 
      (3) csw:SearchResults/@numberOfRecordsMatched &gt; 10; 
      (4) csw:SearchResults/@nextRecord = 1
      </comment>
		<code>
			<xsl:variable name="response">
				<request>
					<url>
						<xsl:value-of select="$csw.GetRecords.post.url"/>
					</url>
                    <method>POST</method>
					<body>
<csw:GetRecords service="CSW" version="2.0.2" resultType="results" maxRecords="0">
    <csw:Query typeNames="csw:Record">
      <csw:ElementName>dc:identifier</csw:ElementName>
      <csw:ElementName>ows:BoundingBox</csw:ElementName>
      <csw:Constraint version="1.1.0">
        <ogc:Filter>
          <ogc:Not>
           <ogc:BBOX>
             <ogc:PropertyName>ows:BoundingBox</ogc:PropertyName>
             <gml:Envelope srsName="urn:ogc:def:crs:EPSG:4326">
               <gml:lowerCorner>60.0 12.0</gml:lowerCorner>
               <gml:upperCorner>70.0 20.0</gml:upperCorner>
             </gml:Envelope>
           </ogc:BBOX>
         </ogc:Not>
       </ogc:Filter>
     </csw:Constraint>
   </csw:Query>
</csw:GetRecords>
					</body>
					<p:XMLValidatingParser.CSW/>
				</request>
			</xsl:variable>
			
            <xsl:choose>
              <xsl:when test="not($response/*)">
                  <ctl:message>[FAILURE] Missing or invalid response entity.</ctl:message>
                  <ctl:fail/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:variable name="nRecords" select="count($response//csw:SearchResults/*)"/>
                <xsl:if test="$nRecords gt 0">
                  <ctl:message>[FAILURE] csw:SearchResults should be empty (<xsl:value-of select="$nRecords"/> included)</ctl:message>
                  <ctl:fail/>
                </xsl:if>
                <xsl:if test="xsd:integer($response//csw:SearchResults/@numberOfRecordsMatched) le 1">
                  <ctl:message>[FAILURE] Expected @numberOfRecordsMatched &gt; 1</ctl:message>
                  <ctl:fail/>
                </xsl:if>
                <xsl:if test="$response//csw:SearchResults/@nextRecord != 1">
                  <ctl:message>[FAILURE] Expected csw:SearchResults/@nextRecord = 1.</ctl:message>
                  <ctl:fail/>
                </xsl:if>
              </xsl:otherwise>
            </xsl:choose>
		</code>
	</test>
    
    <test name="csw:csw-2.0.2-GetRecords-tc24.1">
      <param name="csw.GetRecords.post.url"/>
      <assertion>
      The response to a GetRecords request that specifies resultType="validate"
      (asynchronous processing) must include an exception report with code 
      "wrs:NotSupported".
      </assertion>
		<code>
			<xsl:variable name="response">
				<request>
					<url>
						<xsl:value-of select="$csw.GetRecords.post.url"/>
					</url>
                    <method>POST</method>
					<body>
<csw:GetRecords service="CSW" version="2.0.2" resultType="validate">
  <csw:Query typeNames="csw:Record">
    <csw:ElementSetName>full</csw:ElementSetName>
    <csw:Constraint version="1.1.0">
      <ogc:Filter>
        <ogc:PropertyIsLike wildCard="*" singleChar="." escapeChar="\">
          <ogc:PropertyName>csw:AnyText</ogc:PropertyName>
          <ogc:Literal>*lorem*</ogc:Literal>
        </ogc:PropertyIsLike>
      </ogc:Filter>
    </csw:Constraint>
  </csw:Query>
</csw:GetRecords>  
					</body>
					<p:XMLValidatingParser.CSW/>
				</request>
			</xsl:variable>
            <xsl:choose>
              <xsl:when test="not($response/*)">
                  <ctl:message>[FAILURE] Missing or invalid response entity.</ctl:message>
                  <ctl:fail/>
              </xsl:when>
              <xsl:otherwise>
                <ctl:call-test name="ctl:SchematronValidatingParser">
		            <ctl:with-param name="doc" select="$response"/>
		            <ctl:with-param name="schema">sch/wrs/1.0.0/ExceptionReport.sch</ctl:with-param>
		            <ctl:with-param name="phase">WRSNotSupportedPhase</ctl:with-param>
	            </ctl:call-test>
              </xsl:otherwise>
            </xsl:choose>
		</code>
	</test>
    
    <test name="csw:csw-2.0.2-GetRecords-tc25.1">
      <param name="csw.GetRecords.post.url"/>
      <assertion>
      The response to a GetRecords request that specifies an unsupported 
      outputFormat value must include an exception report.
      </assertion>
      <comment>Pass if all of the following conditions are true: (1) the response 
      is a valid ows:ExceptionReport; (2) the reported exceptionCode is 
      "InvalidParameterValue".</comment>
		<code>
			<xsl:variable name="response">
				<request>
					<url>
						<xsl:value-of select="$csw.GetRecords.post.url"/>
					</url>
                    <method>POST</method>
					<body>
<csw:GetRecords service="CSW" version="2.0.2" resultType="results" outputFormat="application/xhtml+xml" maxRecords="5">
  <csw:Query typeNames="csw:Record">
    <csw:ElementSetName>summary</csw:ElementSetName>
  </csw:Query>
</csw:GetRecords>
					</body>
					<p:XMLValidatingParser.OWS/>
				</request>
			</xsl:variable>
			
            <xsl:choose>
              <xsl:when test="not($response/*)">
                  <ctl:message>[FAILURE] Missing or invalid response entity.</ctl:message>
                  <ctl:fail/>
              </xsl:when>
              <xsl:otherwise>
                <ctl:call-test name="ctl:SchematronValidatingParser">
		            <ctl:with-param name="doc" select="$response"/>
		            <ctl:with-param name="schema">sch/ows/1.0.0/ExceptionReport.sch</ctl:with-param>
		            <ctl:with-param name="phase">InvalidParameterValuePhase</ctl:with-param>
	            </ctl:call-test>
              </xsl:otherwise>
            </xsl:choose>
		</code>
	</test>
    
    <test name="csw:csw-2.0.2-GetRecords-tc26.1">
      <param name="csw.GetRecords.post.url"/>
      <assertion>
      The response to a GetRecords request that specifies an unsupported 
      outputSchema value must include an exception report.
      </assertion>
      <comment>Pass if all of the following conditions are true: (1) the response 
      is a valid ows:ExceptionReport; (2) the reported exceptionCode is 
      "InvalidParameterValue".</comment>
		<code>
			<xsl:variable name="response">
				<request>
					<url>
						<xsl:value-of select="$csw.GetRecords.post.url"/>
					</url>
                    <method>POST</method>
					<body>
<csw:GetRecords service="CSW" version="2.0.2" resultType="results" outputSchema="http://www.w3.org/2005/Atom" maxRecords="5">
  <csw:Query typeNames="csw:Record">
    <csw:ElementSetName>summary</csw:ElementSetName>
  </csw:Query>
</csw:GetRecords>
					</body>
					<p:XMLValidatingParser.OWS/>
				</request>
			</xsl:variable>
			
            <xsl:choose>
              <xsl:when test="not($response/*)">
                  <ctl:message>[FAILURE] Missing or invalid response entity.</ctl:message>
                  <ctl:fail/>
              </xsl:when>
              <xsl:otherwise>
                <ctl:call-test name="ctl:SchematronValidatingParser">
		            <ctl:with-param name="doc" select="$response"/>
		            <ctl:with-param name="schema">sch/ows/1.0.0/ExceptionReport.sch</ctl:with-param>
		            <ctl:with-param name="phase">InvalidParameterValuePhase</ctl:with-param>
	            </ctl:call-test>
              </xsl:otherwise>
            </xsl:choose>
		</code>
	</test>
	
</ctl:package>

   <ctl:test name="wrs:Level-0">
      <ctl:param name="wrs.capabilities.doc"/>
      <ctl:assertion>The implementation under test provides all mandatory CSW capabilities.</ctl:assertion>
      <ctl:code>
          <ctl:call-test name="csw:GetCapabilities-GET">
            <ctl:with-param name="csw.capabilities.doc" select="$wrs.capabilities.doc"/>
          </ctl:call-test>
          <ctl:call-test name="csw:DescribeRecord-POST">
            <ctl:with-param name="csw.capabilities.doc" select="$wrs.capabilities.doc"/>
          </ctl:call-test>
          <ctl:call-test name="csw:GetRecordById-GET">
            <ctl:with-param name="csw.capabilities.doc" select="$wrs.capabilities.doc"/>
          </ctl:call-test>
          <ctl:call-test name="csw:GetRecords-POST">
            <ctl:with-param name="csw.capabilities.doc" select="$wrs.capabilities.doc"/>
          </ctl:call-test>
      </ctl:code>
   </ctl:test>
</ctl:package>
    <ctl:package xmlns:parsers="http://www.occamlab.com/te/parsers">

   <!-- include test groups -->
   <ctl:package xmlns="http://www.occamlab.com/ctl" xmlns:p="http://teamengine.sourceforge.net/parsers">

    <ctl:test name="wrs:GetCapabilities-GET">
      <param name="wrs.capabilities.doc"/>
      <ctl:assertion>
      Run test group for GetCapabilities requests using the GET method.
      </ctl:assertion>
      <ctl:code>
        <xsl:variable name="wrs.GetCapabilities.get.url">
		    <xsl:value-of select="$wrs.capabilities.doc//ows:OperationsMetadata/ows:Operation[@name='GetCapabilities']/ows:DCP/ows:HTTP/ows:Get/@xlink:href"/>
		</xsl:variable>
        <ctl:message>Target endpoint is <xsl:value-of select="$wrs.GetCapabilities.get.url"/></ctl:message>
        
  <ctl:call-test name="wrs:wrs-1.0.0-GetCapabilities-tc1.1">
    <ctl:with-param name="wrs.GetCapabilities.get.url" select="$wrs.GetCapabilities.get.url"/>
  </ctl:call-test>
  <ctl:call-test name="wrs:wrs-1.0.0-GetCapabilities-tc1.2">
    <ctl:with-param name="wrs.GetCapabilities.get.url" select="$wrs.GetCapabilities.get.url"/>
  </ctl:call-test>
  <ctl:call-test name="wrs:wrs-1.0.0-GetCapabilities-tc1.3">
    <ctl:with-param name="wrs.GetCapabilities.get.url" select="$wrs.GetCapabilities.get.url"/>
  </ctl:call-test>
  <ctl:call-test name="wrs:wrs-1.0.0-GetCapabilities-tc2.1">
    <ctl:with-param name="wrs.GetCapabilities.get.url" select="$wrs.GetCapabilities.get.url"/>
  </ctl:call-test>
  <ctl:call-test name="wrs:wrs-1.0.0-GetCapabilities-tc3.1">
    <ctl:with-param name="wrs.GetCapabilities.get.url" select="$wrs.GetCapabilities.get.url"/>
  </ctl:call-test>
  <ctl:call-test name="wrs:wrs-1.0.0-GetCapabilities-tc4.1">
    <ctl:with-param name="wrs.GetCapabilities.get.url" select="$wrs.GetCapabilities.get.url"/>
  </ctl:call-test>
  <ctl:call-test name="wrs:wrs-1.0.0-GetCapabilities-tc5.1">
    <ctl:with-param name="wrs.GetCapabilities.get.url" select="$wrs.GetCapabilities.get.url"/>
  </ctl:call-test>
  <ctl:call-test name="wrs:wrs-1.0.0-GetCapabilities-tc5.2">
    <ctl:with-param name="wrs.GetCapabilities.get.url" select="$wrs.GetCapabilities.get.url"/>
  </ctl:call-test>
  <ctl:call-test name="wrs:wrs-1.0.0-GetCapabilities-tc6.1">
    <ctl:with-param name="wrs.GetCapabilities.get.url" select="$wrs.GetCapabilities.get.url"/>
  </ctl:call-test>
  <ctl:call-test name="wrs:wrs-1.0.0-GetCapabilities-tc7.1">
    <ctl:with-param name="wrs.GetCapabilities.get.url" select="$wrs.GetCapabilities.get.url"/>
  </ctl:call-test>
  <ctl:call-test name="wrs:wrs-1.0.0-GetCapabilities-tc7.2">
    <ctl:with-param name="wrs.GetCapabilities.get.url" select="$wrs.GetCapabilities.get.url"/>
  </ctl:call-test>
  <ctl:call-test name="wrs:wrs-1.0.0-GetCapabilities-tc8.1">
    <ctl:with-param name="wrs.GetCapabilities.get.url" select="$wrs.GetCapabilities.get.url"/>
    <ctl:with-param name="wrs.GetCapabilities.formats" select="$wrs.capabilities.doc//ows:Operation[@name='GetCapabilities']/ows:Parameter[lower-case(@name)='acceptformats']"/>
  </ctl:call-test>
      </ctl:code>
    </ctl:test>
   
    <test name="wrs:wrs-1.0.0-GetCapabilities-tc1.1">
      <param name="wrs.GetCapabilities.get.url"/>
      <assertion>
      All OGC web services must implement GetCapabilities using the GET method. 
      The response to a GetCapabilities request without the optional version 
      parameter must include a complete representation of the capabilities 
      document corresponding to the latest supported version.
      </assertion>
      <comment>Pass if the response is schema valid and has no missing elements.</comment>
      <link>OGC 05-008c1: 7.1 (p.10)</link>
		<code>
			<xsl:variable name="response">
				<request>
					<url>
						<xsl:value-of select="$wrs.GetCapabilities.get.url"/>
					</url>
					<method>GET</method>
					<param name="service">WRS</param>
					<param name="request">GetCapabilities</param>
					<p:XMLValidatingParser.WRS/>
				</request>
			</xsl:variable>
			
            <xsl:choose>
              <xsl:when test="not($response/*)">
                  <ctl:message>FAILURE: Missing response entity.</ctl:message>
                  <ctl:fail/>
              </xsl:when>
              <xsl:otherwise>
                <ctl:call-test name="ctl:SchematronValidatingParser">
		            <ctl:with-param name="doc" select="$response"/>
		            <ctl:with-param name="schema">sch/wrs/1.0.0/Capabilities.sch</ctl:with-param>
		            <ctl:with-param name="phase">DefaultPhase</ctl:with-param>
	            </ctl:call-test>
              </xsl:otherwise>
            </xsl:choose>
		</code>
	</test>
    
    <test name="wrs:wrs-1.0.0-GetCapabilities-tc1.2">
      <param name="wrs.GetCapabilities.get.url"/>
      <assertion>
      The response to a GetCapabilities request with the ACCEPTVERSIONS parameter 
      must include a complete representation of the capabilities document corresponding 
      to the first supported version in the list.
      </assertion>
      <comment>Same pass criteria as for wrs-1.0.0-GetCapabilities-tc1.1</comment>
      <link>OGC-05-008, 7.3.2</link>
		<code>
			<xsl:variable name="response">
				<request>
					<url>
						<xsl:value-of select="$wrs.GetCapabilities.get.url"/>
					</url>
					<method>GET</method>
					<param name="SERVICE">WRS</param>
					<param name="REQUEST">GetCapabilities</param>
                    <param name="ACCEPTVERSIONS">1.1.0,1.0.0</param>
					<p:XMLValidatingParser.WRS/>
				</request>
			</xsl:variable>
			
            <xsl:choose>
              <xsl:when test="not($response/*)">
                  <ctl:message>FAILURE: Missing response entity.</ctl:message>
                  <ctl:fail/>
              </xsl:when>
              <xsl:otherwise>
                <ctl:call-test name="ctl:SchematronValidatingParser">
		            <ctl:with-param name="doc" select="$response"/>
		            <ctl:with-param name="schema">sch/wrs/1.0.0/Capabilities.sch</ctl:with-param>
		            <ctl:with-param name="phase">DefaultPhase</ctl:with-param>
	            </ctl:call-test>
              </xsl:otherwise>
            </xsl:choose>
		</code>
	</test>
    
    <test name="wrs:wrs-1.0.0-GetCapabilities-tc1.3">
      <param name="wrs.GetCapabilities.get.url"/>
      <assertion>
      The response to a GetCapabilities request containing an ACCEPTVERSIONS 
      parameter that DOES NOT list a supported version must include an exception 
      with exceptionCode="VersionNegotiationFailed".
      </assertion>
      <comment>
      Pass if all of the following conditions are true: (1) the response 
      entity has &lt;ows:ExceptionReport&gt; as the document element; and (2) 
      ows:Exception/@exceptionCode="VersionNegotiationFailed".
      </comment>
      <link>OGC-05-008, 7.3.2</link>
		<code>
			<xsl:variable name="response">
				<request>
					<url>
						<xsl:value-of select="$wrs.GetCapabilities.get.url"/>
					</url>
					<method>GET</method>
					<param name="SERVICE">WRS</param>
					<param name="REQUEST">GetCapabilities</param>
                    <param name="ACCEPTVERSIONS">2007.10.29</param>
					<p:XMLValidatingParser.OWS/>
				</request>
			</xsl:variable>
			
            <xsl:choose>
              <xsl:when test="not($response/*)">
                  <ctl:message>FAILURE: Missing response entity.</ctl:message>
                  <ctl:fail/>
              </xsl:when>
              <xsl:otherwise>
                <ctl:call-test name="ctl:SchematronValidatingParser">
		            <ctl:with-param name="doc" select="$response"/>
		            <ctl:with-param name="schema">sch/ows/1.0.0/ExceptionReport.sch</ctl:with-param>
		            <ctl:with-param name="phase">VersionNegotiationFailedPhase</ctl:with-param>
	            </ctl:call-test>
              </xsl:otherwise>
            </xsl:choose>
		</code>
	</test>
    
    <test name="wrs:wrs-1.0.0-GetCapabilities-tc2.1">
      <param name="wrs.GetCapabilities.get.url"/>
      <assertion>
      The response to a GetCapabilities request that omits a required parameter 
      name or value must include an exception with exceptionCode="MissingParameterValue".
      </assertion>
      <comment>
      Pass if all of the following conditions are true: (1) the response 
      entity has &lt;ows:ExceptionReport&gt; as the document element; and (2) 
      ows:Exception/@exceptionCode="MissingParameterValue".
      </comment>
      <link>OGC-05-008, 7.4.1</link>
		<code>
			<xsl:variable name="response">
				<request>
					<url>
						<xsl:value-of select="$wrs.GetCapabilities.get.url"/>
					</url>
					<method>GET</method>
					<param name="request">GetCapabilities</param>
					<p:XMLValidatingParser.OWS/>
				</request>
			</xsl:variable>
			
            <xsl:choose>
              <xsl:when test="not($response/*)">
                  <ctl:message>FAILURE: Missing response entity.</ctl:message>
                  <ctl:fail/>
              </xsl:when>
              <xsl:otherwise>
                <ctl:call-test name="ctl:SchematronValidatingParser">
		            <ctl:with-param name="doc" select="$response"/>
		            <ctl:with-param name="schema">sch/ows/1.0.0/ExceptionReport.sch</ctl:with-param>
		            <ctl:with-param name="phase">MissingParameterValuePhase</ctl:with-param>
	            </ctl:call-test>
                <xsl:if test="not(lower-case($response//ows:Exception/@locator) = 'service')">
                  <ctl:message>
                  FAILURE: ows:Exception/@locator is absent or does not identify the missing 'service' parameter.
                  </ctl:message>
                  <ctl:fail/>
                </xsl:if>
              </xsl:otherwise>
            </xsl:choose>
		</code>
	</test>
    
    <test name="wrs:wrs-1.0.0-GetCapabilities-tc3.1">
      <param name="wrs.GetCapabilities.get.url"/>
      <assertion>
      The response to a KVP request that includes an invalid parameter 
      value must include an exception with exceptionCode="InvalidParameterValue".
      </assertion>
      <comment>
      Pass if all of the following conditions are true: (1) the response 
      entity has &lt;ows:ExceptionReport&gt; as the document element; and (2) 
      ows:Exception/@exceptionCode="InvalidParameterValue".
      </comment>
      <link>OGC-05-008, 7.4.1</link>
		<code>
			<xsl:variable name="response">
				<request>
					<url>
						<xsl:value-of select="$wrs.GetCapabilities.get.url"/>
					</url>
					<method>GET</method>
					<param name="service">FOO</param>
					<param name="request">GetCapabilities</param>
					<p:XMLValidatingParser.OWS/>
				</request>
			</xsl:variable>
			
            <xsl:choose>
              <xsl:when test="not($response/*)">
                  <ctl:message>FAILURE: Missing response entity.</ctl:message>
                  <ctl:fail/>
              </xsl:when>
              <xsl:otherwise>
                <ctl:call-test name="ctl:SchematronValidatingParser">
		            <ctl:with-param name="doc" select="$response"/>
		            <ctl:with-param name="schema">sch/ows/1.0.0/ExceptionReport.sch</ctl:with-param>
		            <ctl:with-param name="phase">InvalidParameterValuePhase</ctl:with-param>
	            </ctl:call-test>
                <xsl:if test="not(lower-case($response//ows:Exception/@locator) = 'service')">
                  <ctl:message>
                  FAILURE: ows:Exception/@locator is absent or does not identify the invalid 'service' parameter.
                  </ctl:message>
                  <ctl:fail/>
                </xsl:if>
              </xsl:otherwise>
            </xsl:choose>
		</code>
	</test>
    
	<test name="wrs:wrs-1.0.0-GetCapabilities-tc4.1">
      <param name="wrs.GetCapabilities.get.url"/>
      <assertion>
      Parameter names in KVP strings shall be handled in a case-insensitive manner.
      </assertion>
      <comment>Same pass criteria as for wrs-1.0.0-GetCapabilities-tc1.1</comment>
		<code>
			<xsl:variable name="response">
				<request>
					<url>
						<xsl:value-of select="$wrs.GetCapabilities.get.url"/>
					</url>
					<method>GET</method>
					<param name="sErViCe">WRS</param>
					<param name="REQUEST">GetCapabilities</param>
                    <param name="version">1.0.0</param>
					<p:XMLValidatingParser.WRS/>
				</request>
			</xsl:variable>
			
            <xsl:choose>
              <xsl:when test="not($response/*)">
                  <ctl:message>FAILURE: Missing response entity.</ctl:message>
                  <ctl:fail/>
              </xsl:when>
              <xsl:otherwise>
                <ctl:call-test name="ctl:SchematronValidatingParser">
		            <ctl:with-param name="doc" select="$response"/>
		            <ctl:with-param name="schema">sch/wrs/1.0.0/Capabilities.sch</ctl:with-param>
		            <ctl:with-param name="phase">DefaultPhase</ctl:with-param>
	            </ctl:call-test>
              </xsl:otherwise>
            </xsl:choose>
		</code>
	</test>
    
    <test name="wrs:wrs-1.0.0-GetCapabilities-tc5.1">
      <param name="wrs.GetCapabilities.get.url"/>
      <assertion>
      Unrecognized query parameters must be ignored.
      </assertion>
      <comment>Same pass criteria as for wrs-1.0.0-GetCapabilities-tc1.1.</comment>
		<code>
			<xsl:variable name="response">
				<request>
					<url>
						<xsl:value-of select="$wrs.GetCapabilities.get.url"/>
					</url>
					<method>GET</method>
					<param name="service">WRS</param>
					<param name="request">GetCapabilities</param>
                    <param name="acceptversions">1.0.0</param>
                    <param name="date">2007-10-20</param>
					<p:XMLValidatingParser.WRS/>
				</request>
			</xsl:variable>
			
            <xsl:choose>
              <xsl:when test="not($response/*)">
                  <ctl:message>FAILURE: Missing response entity.</ctl:message>
                  <ctl:fail/>
              </xsl:when>
              <xsl:otherwise>
                <ctl:call-test name="ctl:SchematronValidatingParser">
		            <ctl:with-param name="doc" select="$response"/>
		            <ctl:with-param name="schema">sch/wrs/1.0.0/Capabilities.sch</ctl:with-param>
		            <ctl:with-param name="phase">DefaultPhase</ctl:with-param>
	            </ctl:call-test>
              </xsl:otherwise>
            </xsl:choose>
		</code>
	</test>
    
    <test name="wrs:wrs-1.0.0-GetCapabilities-tc5.2">
      <param name="wrs.GetCapabilities.get.url"/>
      <assertion>
      The response to a GetCapabilities request that includes an unsupported 
      AcceptFormats parameter value must include the default XML representation 
      of the capabilities document.
      </assertion>
		<code>
			<xsl:variable name="response">
				<request>
					<url>
						<xsl:value-of select="$wrs.GetCapabilities.get.url"/>
					</url>
					<method>GET</method>
					<param name="service">WRS</param>
					<param name="request">GetCapabilities</param>
                    <param name="acceptformats">message/example</param>
					<p:XMLValidatingParser.WRS/>
				</request>
			</xsl:variable>
			
            <xsl:choose>
              <xsl:when test="not($response/*)">
                  <ctl:message>FAILURE: Missing response entity.</ctl:message>
                  <ctl:fail/>
              </xsl:when>
              <xsl:otherwise>
                <ctl:call-test name="ctl:SchematronValidatingParser">
		            <ctl:with-param name="doc" select="$response"/>
		            <ctl:with-param name="schema">sch/wrs/1.0.0/Capabilities.sch</ctl:with-param>
		            <ctl:with-param name="phase">DefaultPhase</ctl:with-param>
	            </ctl:call-test>
              </xsl:otherwise>
            </xsl:choose>
		</code>
	</test>
    
    <test name="wrs:wrs-1.0.0-GetCapabilities-tc6.1">
      <param name="wrs.GetCapabilities.get.url"/>
      <assertion>
      A response message containing an entity body must contain a Content-Type entity 
      header field that correctly indicates the media type of the message body.
      </assertion>
      <comment>Pass if the Content-Type entity header field indicates an XML media type.</comment>
      <link>OGC 05-008: 11.7 (p.61)</link>
		<code>
			<xsl:variable name="response">
				<request>
					<url>
						<xsl:value-of select="$wrs.GetCapabilities.get.url"/>
					</url>
					<method>GET</method>
					<param name="service">WRS</param>
					<param name="request">GetCapabilities</param>
					<parsers:HTTPParser/>
				</request>
			</xsl:variable>
			
            <xsl:choose>
              <xsl:when test="not($response/*)">
                  <ctl:message>FAILURE: Missing response.</ctl:message>
                  <ctl:fail/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:variable name="content-type" select="$response//headers/header[@name='Content-Type']"/>
                <xsl:if test="matches($content-type,'.+/xml') != true()">
                    <ctl:message>FAILURE: Content-Type response header does not indicate an XML media type (<xsl:value-of select="$content-type"/>)</ctl:message>
                    <ctl:fail/>
                </xsl:if>
              </xsl:otherwise>
            </xsl:choose>
		</code>
	</test>
    
    <test name="wrs:wrs-1.0.0-GetCapabilities-tc7.1">
      <param name="wrs.GetCapabilities.get.url"/>
      <assertion>
      The response to a GetCapabilities request that includes a sections parameter 
      with NO VALUE provided shall include an abbreviated capabilities document 
      that omits all optional sections.
      </assertion>
      <comment>Pass if the response is schema valid and omits all optional 
      top-level elements.</comment>
      <link>OGC 05-008: 7.3.3 (p.17)</link>
		<code>
			<xsl:variable name="response">
				<request>
					<url>
						<xsl:value-of select="$wrs.GetCapabilities.get.url"/>
					</url>
					<method>GET</method>
					<param name="service">WRS</param>
					<param name="request">GetCapabilities</param>
                    <param name="sections"/>
					<p:XMLValidatingParser.WRS/>
				</request>
			</xsl:variable>
			
            <xsl:choose>
              <xsl:when test="not($response/*)">
                  <ctl:message>FAILURE: Missing response entity.</ctl:message>
                  <ctl:fail/>
              </xsl:when>
              <xsl:otherwise>
                <ctl:call-test name="ctl:SchematronValidatingParser">
		            <ctl:with-param name="doc" select="$response"/>
		            <ctl:with-param name="schema">sch/wrs/1.0.0/Capabilities.sch</ctl:with-param>
		            <ctl:with-param name="phase">AbbreviatedContentPhase</ctl:with-param>
	            </ctl:call-test>
              </xsl:otherwise>
            </xsl:choose>
		</code>
	</test>
    
    <test name="wrs:wrs-1.0.0-GetCapabilities-tc7.2">
      <param name="wrs.GetCapabilities.get.url"/>
      <assertion>
      The response to a GetCapabilities request that includes a sections parameter 
      listing optional elements shall include only the requested elements in the 
      response entity.
      </assertion>
      <comment>
      Pass if the response is schema valid and includes only the requested optional 
      elements.
      </comment>
      <link>OGC 05-008: 7.3.3 (p.17)</link>
		<code>
			<xsl:variable name="response">
				<request>
					<url>
						<xsl:value-of select="$wrs.GetCapabilities.get.url"/>
					</url>
					<method>GET</method>
					<param name="service">WRS</param>
					<param name="request">GetCapabilities</param>
                    <param name="sections">OperationsMetadata,ServiceIdentification</param>
					<p:XMLValidatingParser.WRS/>
				</request>
			</xsl:variable>
			
            <xsl:choose>
              <xsl:when test="not($response/*)">
                  <ctl:message>FAILURE: Missing response entity.</ctl:message>
                  <ctl:fail/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:if test="not($response//ows:OperationsMetadata)">
                    <ctl:message>FAILURE: ows:OperationsMetadata element is missing</ctl:message>
                    <ctl:fail/>
                </xsl:if>
                <xsl:if test="not($response//ows:ServiceIdentification)">
                    <ctl:message>FAILURE: ows:ServiceIdentification element is missing</ctl:message>
                    <ctl:fail/>
                </xsl:if>
                <xsl:if test="$response//ows:ServiceProvider">
                    <ctl:message>FAILURE: ows:ServiceProvider element is included</ctl:message>
                    <ctl:fail/>
                </xsl:if>
              </xsl:otherwise>
            </xsl:choose>
		</code>
	</test>
    
    <ctl:test name="wrs:wrs-1.0.0-GetCapabilities-tc8.1">
      <ctl:param name="wrs.GetCapabilities.get.url"/>
      <ctl:param name="wrs.GetCapabilities.formats"/>
      <ctl:assertion>
      The response to a GetCapabilities request containing an AcceptFormats 
      parameter specifying a supported format must include a response entity 
      that corresponds to the requested media type.
      </ctl:assertion>
      <ctl:link>OGC 05-008, 7.3.5</ctl:link>
		<ctl:code>
          <xsl:for-each select="$wrs.GetCapabilities.formats//ows:Value">
            <xsl:variable name="format" select="./text()"/>
            <xsl:variable name="response">
				<ctl:request>
					<ctl:url>
						<xsl:value-of select="$wrs.GetCapabilities.get.url"/>
					</ctl:url>
					<ctl:method>GET</ctl:method>
					<ctl:param name="service">WRS</ctl:param>
					<ctl:param name="request">GetCapabilities</ctl:param>
                    <ctl:param name="acceptformats"><xsl:value-of select="$format"/></ctl:param>
					<parsers:HTTPParser/>
				</ctl:request>
			</xsl:variable>
            <xsl:variable name="content-type" select="$response//headers/header[@name='Content-Type']"/>
			<xsl:if test="not(starts-with($content-type, $format))">
				<ctl:message>FAILURE: Unexpected content type for response entity (Request: <xsl:value-of select="$format"/>, Response: <xsl:value-of select="$content-type"/>).</ctl:message>
				<ctl:fail/>
			</xsl:if>
          </xsl:for-each>
		</ctl:code>
	</ctl:test>
</ctl:package>
   <ctl:package xmlns="http://www.occamlab.com/ctl" xmlns:p="http://teamengine.sourceforge.net/parsers">

    <ctl:test name="wrs:DescribeRecord-POST">
      <param name="wrs.capabilities.doc"/>
      <ctl:assertion>
      A conforming implementation must support DescribeRecord XML requests using the POST method.
      </ctl:assertion>
      <ctl:code>
        <xsl:variable name="wrs.DescribeRecord.post.url">
		    <xsl:value-of select="$wrs.capabilities.doc//ows:OperationsMetadata/ows:Operation[@name='DescribeRecord']/ows:DCP/ows:HTTP/ows:Post/@xlink:href"/>
		</xsl:variable>
        <ctl:message>Target endpoint is <xsl:value-of select="$wrs.DescribeRecord.post.url"/></ctl:message>
        
  <ctl:call-test name="wrs:wrs-1.0.0-DescribeRecord-tc1.1">
    <ctl:with-param name="wrs.DescribeRecord.post.url" select="$wrs.DescribeRecord.post.url"/>
  </ctl:call-test>
  <ctl:call-test name="wrs:wrs-1.0.0-DescribeRecord-tc2.1">
    <ctl:with-param name="wrs.DescribeRecord.post.url" select="$wrs.DescribeRecord.post.url"/>
  </ctl:call-test>
  <ctl:call-test name="wrs:wrs-1.0.0-DescribeRecord-tc3.1">
    <ctl:with-param name="wrs.DescribeRecord.post.url" select="$wrs.DescribeRecord.post.url"/>
  </ctl:call-test>
  <ctl:call-test name="wrs:wrs-1.0.0-DescribeRecord-tc4.1">
    <ctl:with-param name="wrs.DescribeRecord.post.url" select="$wrs.DescribeRecord.post.url"/>
  </ctl:call-test>
  <ctl:call-test name="wrs:wrs-1.0.0-DescribeRecord-tc5.1">
    <ctl:with-param name="wrs.DescribeRecord.post.url" select="$wrs.DescribeRecord.post.url"/>
  </ctl:call-test>
  <ctl:call-test name="wrs:wrs-1.0.0-DescribeRecord-tc6.1">
    <ctl:with-param name="wrs.DescribeRecord.post.url" select="$wrs.DescribeRecord.post.url"/>
  </ctl:call-test>
  <ctl:call-test name="wrs:wrs-1.0.0-DescribeRecord-tc7.1">
    <ctl:with-param name="wrs.DescribeRecord.post.url" select="$wrs.DescribeRecord.post.url"/>
  </ctl:call-test>

      </ctl:code>
    </ctl:test>
   
    <test name="wrs:wrs-1.0.0-DescribeRecord-tc1.1">
      <param name="wrs.DescribeRecord.post.url"/>
      <assertion>
      The response to a DescribeRecord request that does not include any TypeName 
      elements and does not specify a schema language must produce a response that 
      describes all supported record types using the XML Schema language.
      </assertion>
      <comment>
      Pass if the response is valid and contains XML Schema components for all 
      supported record types.
      </comment>
		<code>
			<xsl:variable name="response">
				<request>
					<url>
						<xsl:value-of select="$wrs.DescribeRecord.post.url"/>
					</url>
					<method>POST</method>
					<body>
<csw:DescribeRecord service="WRS" version="1.0.0"/>
					</body>
					<p:XMLValidatingParser.WRS/>
				</request>
			</xsl:variable>
			
            <xsl:choose>
              <xsl:when test="not($response/*)">
                  <ctl:message>[FAILURE] Missing response entity.</ctl:message>
                  <ctl:fail/>
              </xsl:when>
              <xsl:otherwise>
                <ctl:call-test name="ctl:SchematronValidatingParser">
		            <ctl:with-param name="doc" select="$response"/>
		            <ctl:with-param name="schema">sch/wrs/1.0.0/DescribeRecord.sch</ctl:with-param>
		            <ctl:with-param name="phase">DefaultPhase</ctl:with-param>
	            </ctl:call-test>
              </xsl:otherwise>
            </xsl:choose>
		</code>
	</test>
    
    <test name="wrs:wrs-1.0.0-DescribeRecord-tc2.1">
      <param name="wrs.DescribeRecord.post.url"/>
      <assertion>
      The response to a DescribeRecord request containing TypeName elements must 
      include schema components for each requested record type.
      </assertion>
      <comment>
      Pass if the response is valid and contains XML Schema components (i.e., 
      element declarations or a schema containing element declarations) for 
      the record types in the correct target namespaces.
      </comment>
		<code>
			<xsl:variable name="response">
				<request>
					<url>
						<xsl:value-of select="$wrs.DescribeRecord.post.url"/>
					</url>
					<method>POST</method>
					<body>
<csw:DescribeRecord service="WRS" version="1.0.0" schemaLanguage="http://www.w3.org/XML/Schema">
    <wrs:TypeName>rim:RegistryObject</wrs:TypeName>
</csw:DescribeRecord>
					</body>
					<p:XMLValidatingParser.WRS/>
				</request>
			</xsl:variable>
			
            <xsl:choose>
              <xsl:when test="not($response/*)">
                  <ctl:message>[FAILURE] Missing response entity.</ctl:message>
                  <ctl:fail/>
              </xsl:when>
              <xsl:otherwise>
                <ctl:call-test name="ctl:SchematronValidatingParser">
		            <ctl:with-param name="doc" select="$response"/>
		            <ctl:with-param name="schema">sch/wrs/1.0.0/DescribeRecord.sch</ctl:with-param>
		            <ctl:with-param name="phase">DefaultPhase</ctl:with-param>
	            </ctl:call-test>
                <xsl:variable name="element" select="$response//csw:SchemaComponent/xsd:element/@name = 'RegistryObject'"/>
                <xsl:variable name="schema" select="$response//csw:SchemaComponent/xsd:schema/xsd:element/@name = 'RegistryObject'"/>
                <xsl:if test="not($element or $schema)">
                  <ctl:message>[FAILURE] Missing element declaration for rim:RegistryObject</ctl:message>
                  <ctl:fail/>
                </xsl:if>
              </xsl:otherwise>
            </xsl:choose>
		</code>
	</test>
    
    <test name="wrs:wrs-1.0.0-DescribeRecord-tc3.1">
      <param name="wrs.DescribeRecord.post.url"/>
      <assertion>
      The response to a DescribeRecord request that contains an unknown TypeName 
      element must not include any wrs:SchemaComponent elements.
      </assertion>
      <comment>
      Pass if the response is valid and contains no wrs:SchemaComponent elements.
      </comment>
		<code>
			<xsl:variable name="response">
				<request>
					<url>
						<xsl:value-of select="$wrs.DescribeRecord.post.url"/>
					</url>
					<method>POST</method>
					<body>
<csw:DescribeRecord service="WRS" version="1.0.0" schemaLanguage="http://www.w3.org/XML/Schema">
    <wrs:TypeName>rim:DummyRegistryObject</wrs:TypeName>
</csw:DescribeRecord>
					</body>
					<p:XMLValidatingParser.WRS/>
				</request>
			</xsl:variable>
			
            <xsl:choose>
              <xsl:when test="not($response/*)">
                  <ctl:message>[FAILURE] Missing response entity.</ctl:message>
                  <ctl:fail/>
              </xsl:when>
              <xsl:otherwise>
                <ctl:call-test name="ctl:SchematronValidatingParser">
		            <ctl:with-param name="doc" select="$response"/>
		            <ctl:with-param name="schema">sch/csw/2.0.2/DescribeRecord.sch</ctl:with-param>
		            <ctl:with-param name="phase">NoSchemaComponentsPhase</ctl:with-param>
	            </ctl:call-test>
              </xsl:otherwise>
            </xsl:choose>
		</code>
	</test>
    
    <test name="wrs:wrs-1.0.0-DescribeRecord-tc4.1">
      <param name="wrs.DescribeRecord.post.url"/>
      <assertion>
      A response message containing an entity body must contain a Content-Type entity 
      header field that correctly indicates the media type of the message body.
      </assertion>
      <comment>Pass if the Content-Type entity header field indicates an XML media type.</comment>
      <link>OGC 05-008: 11.7 (p.61)</link>
		<code>
			<xsl:variable name="response">
				<request>
					<url>
						<xsl:value-of select="$wrs.DescribeRecord.post.url"/>
					</url>
					<method>POST</method>
					<body>
<csw:DescribeRecord service="WRS" version="1.0.0" schemaLanguage="http://www.w3.org/XML/Schema">
    <wrs:TypeName>rim:RegistryObject</wrs:TypeName>
</csw:DescribeRecord>
					</body>
					<parsers:HTTPParser/>
				</request>
			</xsl:variable>
			
            <xsl:choose>
              <xsl:when test="not($response/*)">
                  <ctl:message>[FAILURE] Missing response.</ctl:message>
                  <ctl:fail/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:variable name="content-type" select="$response//headers/header[@name='Content-Type']"/>
                <xsl:if test="matches($content-type,'.+/xml') != true()">
                    <ctl:message>[FAILURE] Content-Type response header does not indicate an XML media type (<xsl:value-of select="$content-type"/>)</ctl:message>
                    <ctl:fail/>
                </xsl:if>
              </xsl:otherwise>
            </xsl:choose>
		</code>
	</test>
    
    <test name="wrs:wrs-1.0.0-DescribeRecord-tc5.1">
      <param name="wrs.DescribeRecord.post.url"/>
      <assertion>
      The response to a DescribeRecord request that specifies an unsupported 
      output format must include an exception report.
      </assertion>
      <comment>
      Pass if all of the following conditions are true: (1) the response 
      entity has &lt;ows:ExceptionReport&gt; as the document element; and (2) 
      ows:Exception/@exceptionCode="InvalidParameterValue" (@outputFormat).
      </comment>
      <link>csw-</link>
		<code>
			<xsl:variable name="response">
				<request>
					<url>
						<xsl:value-of select="$wrs.DescribeRecord.post.url"/>
					</url>
					<method>POST</method>
					<body>
<csw:DescribeRecord service="WRS" version="1.0.0" schemaLanguage="http://www.w3.org/XML/Schema" outputFormat="text/sgml">
    <wrs:TypeName>rim:RegistryObject</wrs:TypeName>
</csw:DescribeRecord>
					</body>
					<p:XMLValidatingParser.WRS/>
				</request>
			</xsl:variable>
			
            <xsl:choose>
              <xsl:when test="not($response/*)">
                  <ctl:message>[FAILURE] Missing response entity.</ctl:message>
                  <ctl:fail/>
              </xsl:when>
              <xsl:otherwise>
                <ctl:call-test name="ctl:SchematronValidatingParser">
		            <ctl:with-param name="doc" select="$response"/>
		            <ctl:with-param name="schema">sch/ows/1.0.0/ExceptionReport.sch</ctl:with-param>
		            <ctl:with-param name="phase">InvalidParameterValuePhase</ctl:with-param>
	            </ctl:call-test>
                <xsl:if test="not(lower-case($response//ows:Exception/@locator) = 'outputformat')">
                  <ctl:message>
                  [FAILURE] ows:Exception/@locator is absent or does not identify the invalid 'outputFormat' attribute.
                  </ctl:message>
                  <ctl:fail/>
                </xsl:if>
              </xsl:otherwise>
            </xsl:choose>
		</code>
	</test>
    
    <test name="wrs:wrs-1.0.0-DescribeRecord-tc6.1">
      <param name="wrs.DescribeRecord.post.url"/>
      <assertion>
      The response to a DescribeRecord request that specifies an unsupported 
      schema language must include an exception report.
      </assertion>
      <comment>
      Pass if all of the following conditions are true: (1) the response 
      entity has &lt;ows:ExceptionReport&gt; as the document element; and (2) 
      ows:Exception/@exceptionCode="InvalidParameterValue".
      </comment>
      <link>csw-</link>
		<code>
			<xsl:variable name="response">
				<request>
					<url>
						<xsl:value-of select="$wrs.DescribeRecord.post.url"/>
					</url>
					<method>POST</method>
					<body>
<csw:DescribeRecord service="WRS" version="1.0.0" schemaLanguage="http://purl.oclc.org/dsdl/schematron">
    <wrs:TypeName>rim:RegistryObject</wrs:TypeName>
</csw:DescribeRecord>
					</body>
					<p:XMLValidatingParser.WRS/>
				</request>
			</xsl:variable>
			
            <xsl:choose>
              <xsl:when test="not($response/*)">
                  <ctl:message>[FAILURE] Missing response entity.</ctl:message>
                  <ctl:fail/>
              </xsl:when>
              <xsl:otherwise>
                <ctl:call-test name="ctl:SchematronValidatingParser">
		            <ctl:with-param name="doc" select="$response"/>
		            <ctl:with-param name="schema">sch/ows/1.0.0/ExceptionReport.sch</ctl:with-param>
		            <ctl:with-param name="phase">InvalidParameterValuePhase</ctl:with-param>
	            </ctl:call-test>
                <xsl:if test="not(lower-case($response//ows:Exception/@locator) = 'schemalanguage')">
                  <ctl:message>
                  [FAILURE] ows:Exception/@locator is absent or does not identify the invalid 'schemaLanguage' attribute.
                  </ctl:message>
                  <ctl:fail/>
                </xsl:if>
              </xsl:otherwise>
            </xsl:choose>
		</code>
	</test>
    
    <test name="wrs:wrs-1.0.0-DescribeRecord-tc7.1">
      <param name="wrs.DescribeRecord.post.url"/>
      <assertion>
      The response to an invalid DescribeRecord request must include an exception report.
      </assertion>
      <comment>
      Pass if all of the following conditions are true: (1) the response 
      entity has &lt;ows:ExceptionReport&gt; as the document element; and (2) 
      ows:Exception/@exceptionCode="InvalidParameterValuePhase" (wrs:TypeName not qualified).
      </comment>
      <link>csw-</link>
		<code>
			<xsl:variable name="response">
				<request>
					<url>
						<xsl:value-of select="$wrs.DescribeRecord.post.url"/>
					</url>
					<method>POST</method>
					<body>
<csw:DescribeRecord service="WRS" version="1.0.0" schemaLanguage="http://www.w3.org/XML/Schema">
    <wrs:TypeName>RegistryObject</wrs:TypeName>
</csw:DescribeRecord>
					</body>
					<p:XMLValidatingParser.WRS/>
				</request>
			</xsl:variable>
			
            <xsl:choose>
              <xsl:when test="not($response/*)">
                  <ctl:message>[FAILURE] Missing or invalid response entity.</ctl:message>
                  <ctl:fail/>
              </xsl:when>
              <xsl:otherwise>
                <ctl:call-test name="ctl:SchematronValidatingParser">
		            <ctl:with-param name="doc" select="$response"/>
		            <ctl:with-param name="schema">sch/ows/1.0.0/ExceptionReport.sch</ctl:with-param>
		            <ctl:with-param name="phase">InvalidParameterValuePhase</ctl:with-param>
	            </ctl:call-test>
              </xsl:otherwise>
            </xsl:choose>
		</code>
	</test>
</ctl:package>
   <ctl:package xmlns="http://www.occamlab.com/ctl" xmlns:p="http://teamengine.sourceforge.net/parsers" xmlns:csw="http://www.opengis.net/cat/csw/1.0.0">

    <ctl:test name="wrs:GetRecordById-GET">
      <param name="wrs.capabilities.doc"/>
      <ctl:assertion>
      Run test group for GetRecordById requests using the GET method.
      </ctl:assertion>
      <ctl:code>
        <xsl:variable name="wrs.GetRecordById.get.url">
		    <xsl:value-of select="$wrs.capabilities.doc//ows:OperationsMetadata/ows:Operation[@name='GetRecordById']/ows:DCP/ows:HTTP/ows:Get/@xlink:href"/>
		</xsl:variable>
        <xsl:variable name="wrs.GetRecords.post.url">
            <xsl:value-of select="$wrs.capabilities.doc//ows:OperationsMetadata/ows:Operation[@name='GetRecords']/ows:DCP/ows:HTTP/ows:Post/@xlink:href"/>
	    </xsl:variable>
        <ctl:message>Target endpoint is <xsl:value-of select="$wrs.GetRecordById.get.url"/></ctl:message>
        
  <ctl:call-test name="wrs:wrs-1.0.0-GetRecordById-tc1.1">
    <ctl:with-param name="wrs.GetRecordById.get.url" select="$wrs.GetRecordById.get.url"/>
    <ctl:with-param name="wrs.GetRecords.post.url" select="$wrs.GetRecords.post.url"/>
  </ctl:call-test>
  <ctl:call-test name="wrs:wrs-1.0.0-GetRecordById-tc1.2">
    <ctl:with-param name="wrs.GetRecordById.get.url" select="$wrs.GetRecordById.get.url"/>
    <ctl:with-param name="wrs.GetRecords.post.url" select="$wrs.GetRecords.post.url"/>
  </ctl:call-test>
  <ctl:call-test name="wrs:wrs-1.0.0-GetRecordById-tc2.1">
    <ctl:with-param name="wrs.GetRecordById.get.url" select="$wrs.GetRecordById.get.url"/>
    <ctl:with-param name="wrs.GetRecords.post.url" select="$wrs.GetRecords.post.url"/>
  </ctl:call-test>
  <ctl:call-test name="wrs:wrs-1.0.0-GetRecordById-tc2.2">
    <ctl:with-param name="wrs.GetRecordById.get.url" select="$wrs.GetRecordById.get.url"/>
    <ctl:with-param name="wrs.GetRecords.post.url" select="$wrs.GetRecords.post.url"/>
  </ctl:call-test>
  <ctl:call-test name="wrs:wrs-1.0.0-GetRecordById-tc3.1">
    <ctl:with-param name="wrs.GetRecordById.get.url" select="$wrs.GetRecordById.get.url"/>
  </ctl:call-test>
  <ctl:call-test name="wrs:wrs-1.0.0-GetRecordById-tc4.1">
    <ctl:with-param name="wrs.GetRecordById.get.url" select="$wrs.GetRecordById.get.url"/>
  </ctl:call-test>
  <ctl:call-test name="wrs:wrs-1.0.0-GetRecordById-tc5.1">
    <ctl:with-param name="wrs.GetRecordById.get.url" select="$wrs.GetRecordById.get.url"/>
  </ctl:call-test>
  <ctl:call-test name="wrs:wrs-1.0.0-GetRecordById-tc6.1">
    <ctl:with-param name="wrs.GetRecordById.get.url" select="$wrs.GetRecordById.get.url"/>
  </ctl:call-test>
      </ctl:code>
    </ctl:test>
   
    <test name="wrs:wrs-1.0.0-GetRecordById-tc1.1">
      <param name="wrs.GetRecordById.get.url"/>
      <param name="wrs.GetRecords.post.url"/>
      <assertion>
      All WRS-based catalogue services must implement getRecordById using the 
      GET method. A GetRecordById request without the ElementSetName parameter 
      must produce a response containing a summary view of all matching records. 
      </assertion>
      <comment>
      Pass if the response is schema valid and includes a wrs:BriefRecord representation of all matching records.
      </comment>
      <link>ows-</link>
		<code>
            <xsl:variable name="response0">
				<ctl:request>
					<ctl:url>
						<xsl:value-of select="$wrs.GetRecords.post.url"/>
					</ctl:url>
                    <ctl:method>POST</ctl:method>
					<ctl:body>
                      <csw:GetRecords xmlns:csw="http://www.opengis.net/cat/csw" service="WRS" version="1.0.0" resultType="results">
                        <csw:Query typeNames="rim:RegistryObject">
                          <csw:ElementSetName>brief</csw:ElementSetName>
                        </csw:Query>
                      </csw:GetRecords>
					</ctl:body>
					<p:XMLValidatingParser.WRS/>
				</ctl:request>
			</xsl:variable>
            <xsl:variable name="id.1">
              <xsl:value-of select="$response0//csw:SearchResults/*[1]/@id"/>
            </xsl:variable>
			<xsl:variable name="response">
				<ctl:request>
					<ctl:url>
						<xsl:value-of select="$wrs.GetRecordById.get.url"/>
					</ctl:url>
					<ctl:method>GET</ctl:method>
					<ctl:param name="service">WRS</ctl:param>
                    <ctl:param name="version">1.0.0</ctl:param>
					<ctl:param name="request">GetRecordById</ctl:param>
                    <ctl:param name="id"><xsl:value-of select="encode-for-uri($id.1)"/></ctl:param>
					<p:XMLValidatingParser.WRS/>
				</ctl:request>
			</xsl:variable>
			<xsl:variable name="object.id">
              <xsl:value-of select="$response//rim:RegistryObject/@id"/>
            </xsl:variable>
            
            <xsl:choose>
              <xsl:when test="not($response/*)">
                  <ctl:message>[FAILURE] Missing response entity.</ctl:message>
                  <ctl:fail/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:if test="$object.id != $id.1">
                  <ctl:message>
                  [FAILURE] Expected rim:RegistryObject with @id = <xsl:value-of select="$id.1"/>.
                  </ctl:message>
				  <ctl:fail/>
			    </xsl:if>
              </xsl:otherwise>
            </xsl:choose>
		</code>
	</test>
    
    <test name="wrs:wrs-1.0.0-GetRecordById-tc1.2">
      <param name="wrs.GetRecordById.get.url"/>
      <param name="wrs.GetRecords.post.url"/>
      <assertion>
      The response to a GetRecordById request without the ElementSetName parameter 
      must produce a response containing a summary view of all matching records. 
      </assertion>
      <comment>
      Pass if the response is schema valid and includes only 1 rim:RegistryObject element.
      </comment>
      <link>ows-</link>
		<code>
            <xsl:variable name="response0">
				<ctl:request>
					<ctl:url>
						<xsl:value-of select="$wrs.GetRecords.post.url"/>
					</ctl:url>
                    <ctl:method>POST</ctl:method>
					<ctl:body>
                      <csw:GetRecords xmlns:csw="http://www.opengis.net/cat/csw" service="WRS" version="1.0.0" resultType="results">
                        <csw:Query typeNames="rim:RegistryObject">
                          <csw:ElementSetName>brief</csw:ElementSetName>
                        </csw:Query>
                      </csw:GetRecords>
					</ctl:body>
					<p:XMLValidatingParser.WRS/>
				</ctl:request>
			</xsl:variable>
            <xsl:variable name="id.2">
              <xsl:value-of select="$response0//csw:SearchResults/*[2]/@id"/>
            </xsl:variable>
			<xsl:variable name="response">
				<ctl:request>
					<ctl:url>
						<xsl:value-of select="$wrs.GetRecordById.get.url"/>
					</ctl:url>
					<ctl:method>GET</ctl:method>
					<ctl:param name="service">WRS</ctl:param>
                    <ctl:param name="version">1.0.0</ctl:param>
					<ctl:param name="request">GetRecordById</ctl:param>
                    <ctl:param name="id">urn:uuid:ce8627a0-685c-11db-bd13-0800200c9a66,<xsl:value-of select="escape-html-uri($id.2)"/></ctl:param>
					<p:XMLValidatingParser.WRS/>
				</ctl:request>
			</xsl:variable>
			
            <xsl:choose>
              <xsl:when test="not($response/*)">
                  <ctl:message>[FAILURE] Missing response entity.</ctl:message>
                  <ctl:fail/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:if test="count($response//csw:GetRecordByIdResponse/*) != 1">
                  <ctl:message>
                  [FAILURE] Expected one record in response.
                  </ctl:message>
				  <ctl:fail/>
			    </xsl:if>
                <xsl:if test="$response//rim:RegistryObject/@id != $id.2">
                  <ctl:message>
                  [FAILURE] Expected rim:RegistryObject with @id = <xsl:value-of select="$id.2"/>.
                  </ctl:message>
				  <ctl:fail/>
			    </xsl:if>
              </xsl:otherwise>
            </xsl:choose>
		</code>
	</test>
    
    <test name="wrs:wrs-1.0.0-GetRecordById-tc2.1">
      <param name="wrs.GetRecordById.get.url"/>
      <param name="wrs.GetRecords.post.url"/>
      <assertion>
      The response to a GetRecordById request containing the ElementSetName parameter 
      must produce a response containing the corresponding view of all matching 
      records. 
      </assertion>
      <comment>
      Pass if the response is schema valid and includes a brief representation 
      of a registry object.
      </comment>
      <link>ows-</link>
		<code>
            <xsl:variable name="response0">
				<ctl:request>
					<ctl:url>
						<xsl:value-of select="$wrs.GetRecords.post.url"/>
					</ctl:url>
                    <ctl:method>POST</ctl:method>
					<ctl:body>
                      <csw:GetRecords xmlns:csw="http://www.opengis.net/cat/csw" service="WRS" version="1.0.0" resultType="results">
                        <csw:Query typeNames="rim:RegistryObject">
                          <csw:ElementSetName>brief</csw:ElementSetName>
                        </csw:Query>
                      </csw:GetRecords>
					</ctl:body>
					<p:XMLValidatingParser.WRS/>
				</ctl:request>
			</xsl:variable>
            <xsl:variable name="id.3">
              <xsl:value-of select="$response0//csw:SearchResults/*[3]/@id"/>
            </xsl:variable>
			<xsl:variable name="response">
				<request>
					<url>
						<xsl:value-of select="$wrs.GetRecordById.get.url"/>
					</url>
					<method>GET</method>
					<param name="Service">WRS</param>
                    <param name="Version">1.0.0</param>
					<param name="Request">GetRecordById</param>
                    <param name="ElementSetName">brief</param>
                    <param name="ID"><xsl:value-of select="encode-for-uri($id.3)"/></param>
					<p:XMLValidatingParser.WRS/>
				</request>
			</xsl:variable>
			
            <xsl:choose>
              <xsl:when test="not($response/*)">
                  <ctl:message>[FAILURE] Missing response entity.</ctl:message>
                  <ctl:fail/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:variable name="nBriefRecords" select="count($response/csw:GetRecordByIdResponse/rim:RegistryObject)"/>
                <xsl:variable name="nRecords" select="count($response/csw:GetRecordByIdResponse/*)"/>
                <xsl:if test="($nBriefRecords != $nRecords) and ($nRecords != 1)">
                  <ctl:message>[FAILURE] Expected one rim:RegistryObject element in response.</ctl:message>
				  <ctl:fail/>
			    </xsl:if>
                <ctl:call-test name="ctl:SchematronValidatingParser">
		            <ctl:with-param name="doc" select="$response"/>
		            <ctl:with-param name="schema">sch/wrs/1.0.0/wrs.sch</ctl:with-param>
		            <ctl:with-param name="phase">BriefViewPhase</ctl:with-param>
	            </ctl:call-test>
              </xsl:otherwise>
            </xsl:choose>
		</code>
	</test>
    
    <test name="wrs:wrs-1.0.0-GetRecordById-tc2.2">
      <param name="wrs.GetRecordById.get.url"/>
      <param name="wrs.GetRecords.post.url"/>
      <assertion>
      The response to a GetRecordById request containing the ElementSetName parameter 
      must produce a response containing the corresponding view of all matching 
      records. 
      </assertion>
      <comment>
      Pass if the response is schema valid and includes a rim:RegistryObject representation.
      </comment>
      <link>ows-</link>
		<code>
            <xsl:variable name="response0">
				<ctl:request>
					<ctl:url>
						<xsl:value-of select="$wrs.GetRecords.post.url"/>
					</ctl:url>
                    <ctl:method>POST</ctl:method>
					<ctl:body>
                      <csw:GetRecords xmlns:csw="http://www.opengis.net/cat/csw" service="WRS" version="1.0.0" resultType="results">
                        <csw:Query typeNames="rim:RegistryObject">
                          <csw:ElementSetName>brief</csw:ElementSetName>
                        </csw:Query>
                      </csw:GetRecords>
					</ctl:body>
					<p:XMLValidatingParser.WRS/>
				</ctl:request>
			</xsl:variable>
            <xsl:variable name="id.4">
              <xsl:value-of select="$response0//csw:SearchResults/*[4]/@id"/>
            </xsl:variable>
			<xsl:variable name="response">
				<request>
					<url>
						<xsl:value-of select="$wrs.GetRecordById.get.url"/>
					</url>
					<method>GET</method>
					<param name="Service">WRS</param>
                    <param name="Version">1.0.0</param>
					<param name="Request">GetRecordById</param>
                    <param name="ElementSetName">full</param>
                    <param name="ID"><xsl:value-of select="encode-for-uri($id.4)"/></param>
					<p:XMLValidatingParser.WRS/>
				</request>
			</xsl:variable>
			
            <xsl:choose>
              <xsl:when test="not($response/*)">
                  <ctl:message>[FAILURE] Missing response entity.</ctl:message>
                  <ctl:fail/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:variable name="objectType" select="$response/csw:GetRecordByIdResponse/*/@objectType"/>
                <xsl:variable name="nRecords" select="count($response/csw:GetRecordByIdResponse/*)"/>
                <xsl:if test="$nRecords != 1">
                  <ctl:message>[FAILURE] Expected one registry object element in response.</ctl:message>
				  <ctl:fail/>
			    </xsl:if>
                <ctl:call-test name="ctl:SchematronValidatingParser">
		            <ctl:with-param name="doc" select="$response"/>
		            <ctl:with-param name="schema">sch/wrs/1.0.0/wrs.sch</ctl:with-param>
		            <ctl:with-param name="phase">FullViewPhase</ctl:with-param>
	            </ctl:call-test>
              </xsl:otherwise>
            </xsl:choose>
		</code>
	</test>
    
    <test name="wrs:wrs-1.0.0-GetRecordById-tc3.1">
      <param name="wrs.GetRecordById.get.url"/>
      <assertion>
      The response to a GetRecordById request containing no matching identifiers
      must be empty.
      </assertion>
      <comment>
      Pass if the response entity is schema valid and includes no records.
      </comment>
      <link>ows-</link>
		<code>
			<xsl:variable name="response">
				<request>
					<url>
						<xsl:value-of select="$wrs.GetRecordById.get.url"/>
					</url>
					<method>GET</method>
					<param name="service">WRS</param>
                    <param name="version">1.0.0</param>
					<param name="request">GetRecordById</param>
                    <param name="id">urn:uuid:ce8627a0-685c-11db-bd13-0800200c9a66</param>
					<p:XMLValidatingParser.WRS/>
				</request>
			</xsl:variable>
			
            <xsl:choose>
              <xsl:when test="not($response/*)">
                  <ctl:message>[FAILURE] Missing response entity.</ctl:message>
                  <ctl:fail/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:if test="count($response/csw:GetRecordByIdResponse/*) != 0">
                  <ctl:message>
                  [FAILURE] Expected empty csw:GetRecordByIdResponse element.
                  </ctl:message>
				  <ctl:fail/>
			    </xsl:if>
              </xsl:otherwise>
            </xsl:choose>
		</code>
	</test>
    
    <test name="wrs:wrs-1.0.0-GetRecordById-tc4.1">
      <param name="wrs.GetRecordById.get.url"/>
      <assertion>
      The response to a GetRecordById request missing the required Id parameter 
      must include an exception report. 
      </assertion>
      <comment>
      Pass if all of the following conditions are true: (1) the response is a 
      valid ows:ExceptionReport; (2) the reported exceptionCode is "MissingParameterValue".
      </comment>
		<code>
			<xsl:variable name="response">
				<request>
					<url>
						<xsl:value-of select="$wrs.GetRecordById.get.url"/>
					</url>
					<method>GET</method>
					<param name="service">WRS</param>
                    <param name="version">1.0.0</param>
					<param name="request">GetRecordById</param>
					<p:XMLValidatingParser.OWS/>
				</request>
			</xsl:variable>
			
            <xsl:choose>
              <xsl:when test="not($response/*)">
                  <ctl:message>[FAILURE] Missing response entity.</ctl:message>
                  <ctl:fail/>
              </xsl:when>
              <xsl:otherwise>
                <ctl:call-test name="ctl:SchematronValidatingParser">
		            <ctl:with-param name="doc" select="$response"/>
		            <ctl:with-param name="schema">sch/ows/1.0.0/ExceptionReport.sch</ctl:with-param>
		            <ctl:with-param name="phase">MissingParameterValuePhase</ctl:with-param>
	            </ctl:call-test>
                <xsl:if test="not(lower-case($response//ows:Exception/@locator) = 'id')">
                  <ctl:message>
                  [WARNING] ows:Exception/@locator is absent or does not refer to the missing 'id' parameter.
                  </ctl:message>
                  <ctl:warning/>
                </xsl:if>
              </xsl:otherwise>
            </xsl:choose>
		</code>
	</test>
    
    <test name="wrs:wrs-1.0.0-GetRecordById-tc5.1">
      <param name="wrs.GetRecordById.get.url"/>
      <assertion>
      The response to a GetRecordById request with an unsupported OutputFormat 
      parameter value must include an exception report. 
      </assertion>
      <comment>
      Pass if all of the following conditions are true: (1) the response is a 
      valid ows:ExceptionReport; (2) the reported exceptionCode is "InvalidParameterValue".
      </comment>
		<code>
			<xsl:variable name="response">
				<request>
					<url>
						<xsl:value-of select="$wrs.GetRecordById.get.url"/>
					</url>
					<method>GET</method>
					<param name="Service">WRS</param>
                    <param name="Version">1.0.0</param>
					<param name="Request">GetRecordById</param>
                    <param name="OutputFormat">application/atom+xml</param>
                    <param name="id">urn:uuid:a06af396-3105-442d-8b40-22b57a90d2f2,urn:uuid:19887a8a-f6b0-4a63-ae56-7fba0e17801f,urn:uuid:ab42a8c4-95e8-4630-bf79-33e59241605a</param>
					<p:XMLValidatingParser.WRS/>
				</request>
			</xsl:variable>
			
            <xsl:choose>
              <xsl:when test="not($response/*)">
                  <ctl:message>[FAILURE] Missing response entity.</ctl:message>
                  <ctl:fail/>
              </xsl:when>
              <xsl:otherwise>
                <ctl:call-test name="ctl:SchematronValidatingParser">
		            <ctl:with-param name="doc" select="$response"/>
		            <ctl:with-param name="schema">sch/ows/1.0.0/ExceptionReport.sch</ctl:with-param>
		            <ctl:with-param name="phase">InvalidParameterValuePhase</ctl:with-param>
	            </ctl:call-test>
                <xsl:if test="not(lower-case($response//ows:Exception/@locator) = 'outputformat')">
                  <ctl:message>
                  [WARNING] ows:Exception/@locator is absent or does not refer to the invalid 'OutputFormat' parameter.
                  </ctl:message>
                  <ctl:warning/>
                </xsl:if>
              </xsl:otherwise>
            </xsl:choose>
		</code>
	</test>
    
    <test name="wrs:wrs-1.0.0-GetRecordById-tc6.1">
      <param name="wrs.GetRecordById.get.url"/>
      <assertion>
      The response to a GetRecordById request with an unsupported OutputSchema 
      parameter value must include an exception report. 
      </assertion>
      <comment>
      Pass if all of the following conditions are true: (1) the response is a 
      valid ows:ExceptionReport; (2) the reported exceptionCode is "InvalidParameterValue".
      </comment>
		<code>
			<xsl:variable name="response">
				<request>
					<url>
						<xsl:value-of select="$wrs.GetRecordById.get.url"/>
					</url>
					<method>GET</method>
					<param name="Service">WRS</param>
                    <param name="Version">1.0.0</param>
					<param name="Request">GetRecordById</param>
                    <param name="OutputSchema">http://www.w3.org/2005/Atom</param>
                    <param name="Id">urn:uuid:19887a8a-f6b0-4a63-ae56-7fba0e17801f</param>
					<p:XMLValidatingParser.WRS/>
				</request>
			</xsl:variable>
			
            <xsl:choose>
              <xsl:when test="not($response/*)">
                  <ctl:message>[FAILURE] Missing response entity.</ctl:message>
                  <ctl:fail/>
              </xsl:when>
              <xsl:otherwise>
                <ctl:call-test name="ctl:SchematronValidatingParser">
		            <ctl:with-param name="doc" select="$response"/>
		            <ctl:with-param name="schema">sch/ows/1.0.0/ExceptionReport.sch</ctl:with-param>
		            <ctl:with-param name="phase">InvalidParameterValuePhase</ctl:with-param>
	            </ctl:call-test>
                <xsl:if test="not(lower-case($response//ows:Exception/@locator) = 'outputschema')">
                  <ctl:message>
                  [WARNING] ows:Exception/@locator is absent or does not refer to the invalid 'OutputSchema' parameter.
                  </ctl:message>
                  <ctl:warning/>
                </xsl:if>
              </xsl:otherwise>
            </xsl:choose>
		</code>
	</test>
</ctl:package>
   <ctl:package xmlns="http://www.occamlab.com/ctl" xmlns:p="http://teamengine.sourceforge.net/parsers" xmlns:gml="http://www.opengis.net/gml" xmlns:ogc="http://www.opengis.net/ogc">

  <ctl:test name="wrs:GetRecords-POST">
    <param name="wrs.capabilities.doc"/>
    <ctl:assertion>
    A conforming implementation must satisfy all assertions for GetRecords XML requests using the POST method.
    </ctl:assertion>
    <ctl:code>
      <xsl:variable name="wrs.GetRecords.post.url">
        <xsl:value-of select="$wrs.capabilities.doc//ows:OperationsMetadata/ows:Operation[@name='GetRecords']/ows:DCP/ows:HTTP/ows:Post/@xlink:href"/>
	  </xsl:variable>
      <ctl:message>Target endpoint is <xsl:value-of select="$wrs.GetRecords.post.url"/></ctl:message>
        
	  <ctl:call-test name="wrs:wrs-1.0.0-GetRecords-tc1.1">
		<ctl:with-param name="wrs.GetRecords.post.url" select="$wrs.GetRecords.post.url"/>
	  </ctl:call-test>  
	  <ctl:call-test name="wrs:wrs-1.0.0-GetRecords-tc2.1">
		<ctl:with-param name="wrs.GetRecords.post.url" select="$wrs.GetRecords.post.url"/>
	  </ctl:call-test>  
	  <ctl:call-test name="wrs:wrs-1.0.0-GetRecords-tc2.2">
		<ctl:with-param name="wrs.GetRecords.post.url" select="$wrs.GetRecords.post.url"/>
	  </ctl:call-test>
	  <ctl:call-test name="wrs:wrs-1.0.0-GetRecords-tc3.1">
		<ctl:with-param name="wrs.GetRecords.post.url" select="$wrs.GetRecords.post.url"/>
	  </ctl:call-test>
	  <ctl:call-test name="wrs:wrs-1.0.0-GetRecords-tc4.1">
		<ctl:with-param name="wrs.GetRecords.post.url" select="$wrs.GetRecords.post.url"/>
	  </ctl:call-test>
	  <ctl:call-test name="wrs:wrs-1.0.0-GetRecords-tc4.2">
		<ctl:with-param name="wrs.GetRecords.post.url" select="$wrs.GetRecords.post.url"/>
	  </ctl:call-test>
	  <ctl:call-test name="wrs:wrs-1.0.0-GetRecords-tc5.1">
		<ctl:with-param name="wrs.GetRecords.post.url" select="$wrs.GetRecords.post.url"/>
	  </ctl:call-test>
	  <ctl:call-test name="wrs:wrs-1.0.0-GetRecords-tc5.2">
		<ctl:with-param name="wrs.GetRecords.post.url" select="$wrs.GetRecords.post.url"/>
	  </ctl:call-test>
	  <ctl:call-test name="wrs:wrs-1.0.0-GetRecords-tc6.1">
		<ctl:with-param name="wrs.GetRecords.post.url" select="$wrs.GetRecords.post.url"/>
	  </ctl:call-test>
	  <ctl:call-test name="wrs:wrs-1.0.0-GetRecords-tc6.2">
		<ctl:with-param name="wrs.GetRecords.post.url" select="$wrs.GetRecords.post.url"/>
	  </ctl:call-test>
	  <ctl:call-test name="wrs:wrs-1.0.0-GetRecords-tc7.1">
		<ctl:with-param name="wrs.GetRecords.post.url" select="$wrs.GetRecords.post.url"/>
	  </ctl:call-test>
	  <ctl:call-test name="wrs:wrs-1.0.0-GetRecords-tc8.1">
		<ctl:with-param name="wrs.GetRecords.post.url" select="$wrs.GetRecords.post.url"/>
	  </ctl:call-test>
	  <ctl:call-test name="wrs:wrs-1.0.0-GetRecords-tc8.2">
		<ctl:with-param name="wrs.GetRecords.post.url" select="$wrs.GetRecords.post.url"/>
	  </ctl:call-test>
	  <ctl:call-test name="wrs:wrs-1.0.0-GetRecords-tc9.1">
		<ctl:with-param name="wrs.GetRecords.post.url" select="$wrs.GetRecords.post.url"/>
	  </ctl:call-test>
	  <ctl:call-test name="wrs:wrs-1.0.0-GetRecords-tc10.1">
		<ctl:with-param name="wrs.GetRecords.post.url" select="$wrs.GetRecords.post.url"/>
	  </ctl:call-test>
	  <ctl:call-test name="wrs:wrs-1.0.0-GetRecords-tc11.1">
		<ctl:with-param name="wrs.GetRecords.post.url" select="$wrs.GetRecords.post.url"/>
	  </ctl:call-test>
	  <ctl:call-test name="wrs:wrs-1.0.0-GetRecords-tc11.2">
		<ctl:with-param name="wrs.GetRecords.post.url" select="$wrs.GetRecords.post.url"/>
	  </ctl:call-test>
	  <ctl:call-test name="wrs:wrs-1.0.0-GetRecords-tc12.1">
		<ctl:with-param name="wrs.GetRecords.post.url" select="$wrs.GetRecords.post.url"/>
	  </ctl:call-test>
	  <ctl:call-test name="wrs:wrs-1.0.0-GetRecords-tc13.1">
		<ctl:with-param name="wrs.GetRecords.post.url" select="$wrs.GetRecords.post.url"/>
	  </ctl:call-test>
	  <ctl:call-test name="wrs:wrs-1.0.0-GetRecords-tc14.1">
		<ctl:with-param name="wrs.GetRecords.post.url" select="$wrs.GetRecords.post.url"/>
	  </ctl:call-test>
	  <ctl:call-test name="wrs:wrs-1.0.0-GetRecords-tc14.2">
		<ctl:with-param name="wrs.GetRecords.post.url" select="$wrs.GetRecords.post.url"/>
	  </ctl:call-test>
	  <ctl:call-test name="wrs:wrs-1.0.0-GetRecords-tc15.1">
		<ctl:with-param name="wrs.GetRecords.post.url" select="$wrs.GetRecords.post.url"/>
	  </ctl:call-test>
	  <ctl:call-test name="wrs:wrs-1.0.0-GetRecords-tc16.1">
		<ctl:with-param name="wrs.GetRecords.post.url" select="$wrs.GetRecords.post.url"/>
	  </ctl:call-test>
	  <ctl:call-test name="wrs:wrs-1.0.0-GetRecords-tc16.2">
		<ctl:with-param name="wrs.GetRecords.post.url" select="$wrs.GetRecords.post.url"/>
	  </ctl:call-test>
	  <ctl:call-test name="wrs:wrs-1.0.0-GetRecords-tc17.1">
		<ctl:with-param name="wrs.GetRecords.post.url" select="$wrs.GetRecords.post.url"/>
	  </ctl:call-test>
	  <ctl:call-test name="wrs:wrs-1.0.0-GetRecords-tc17.2">
		<ctl:with-param name="wrs.GetRecords.post.url" select="$wrs.GetRecords.post.url"/>
	  </ctl:call-test>
	  <ctl:call-test name="wrs:wrs-1.0.0-GetRecords-tc18.1">
		<ctl:with-param name="wrs.GetRecords.post.url" select="$wrs.GetRecords.post.url"/>
	  </ctl:call-test>
	  <ctl:call-test name="wrs:wrs-1.0.0-GetRecords-tc19.1">
		<ctl:with-param name="wrs.GetRecords.post.url" select="$wrs.GetRecords.post.url"/>
	  </ctl:call-test>
	  <ctl:call-test name="wrs:wrs-1.0.0-GetRecords-tc20.1">
		<ctl:with-param name="wrs.GetRecords.post.url" select="$wrs.GetRecords.post.url"/>
	  </ctl:call-test>
	  <ctl:call-test name="wrs:wrs-1.0.0-GetRecords-tc21.1">
		<ctl:with-param name="wrs.GetRecords.post.url" select="$wrs.GetRecords.post.url"/>
	  </ctl:call-test>
	  <ctl:call-test name="wrs:wrs-1.0.0-GetRecords-tc22.1">
		<ctl:with-param name="wrs.GetRecords.post.url" select="$wrs.GetRecords.post.url"/>
	  </ctl:call-test>
	  <ctl:call-test name="wrs:wrs-1.0.0-GetRecords-tc23.1">
		<ctl:with-param name="wrs.GetRecords.post.url" select="$wrs.GetRecords.post.url"/>
	  </ctl:call-test>
	  <ctl:call-test name="wrs:wrs-1.0.0-GetRecords-tc24.1">
		<ctl:with-param name="wrs.GetRecords.post.url" select="$wrs.GetRecords.post.url"/>
	  </ctl:call-test>
	  <ctl:call-test name="wrs:wrs-1.0.0-GetRecords-tc25.1">
		<ctl:with-param name="wrs.GetRecords.post.url" select="$wrs.GetRecords.post.url"/>
	  </ctl:call-test>
	  <ctl:call-test name="wrs:wrs-1.0.0-GetRecords-tc26.1">
		<ctl:with-param name="wrs.GetRecords.post.url" select="$wrs.GetRecords.post.url"/>
	  </ctl:call-test>
	  
    </ctl:code>
  </ctl:test>
   
    <test name="wrs:wrs-1.0.0-GetRecords-tc1.1">
      <param name="wrs.GetRecords.post.url"/>
      <assertion>
      A GetRecords request that omits all optional elements must produce a response containing only a summary of the result set.
      </assertion>
      <comment>Pass if all of the following conditions are true: (1) the response 
      is schema valid; (2) the csw:SearchResults element is empty.</comment>
      <link>csw-</link>
		<code>
			<xsl:variable name="response">
				<request>
					<url>
						<xsl:value-of select="$wrs.GetRecords.post.url"/>
					</url>
                    <method>POST</method>
					<body>
<csw:GetRecords service="WRS" version="1.0.0">
  <csw:Query typeNames="rim:RegistryObject">
    <csw:ElementSetName>brief</csw:ElementSetName>
  </csw:Query>
</csw:GetRecords>
					</body>
					<p:XMLValidatingParser.WRS/>
				</request>
			</xsl:variable>
			
            <xsl:choose>
              <xsl:when test="not($response/*)">
                  <ctl:message>[FAILURE] Missing or invalid response entity.</ctl:message>
                  <ctl:fail/>
              </xsl:when>
              <xsl:otherwise>
                <ctl:call-test name="ctl:SchematronValidatingParser">
		            <ctl:with-param name="doc" select="$response"/>
		            <ctl:with-param name="schema">sch/wrs/1.0.0/GetRecords.sch</ctl:with-param>
		            <ctl:with-param name="phase">DefaultPhase</ctl:with-param>
	            </ctl:call-test>
              </xsl:otherwise>
            </xsl:choose>
		</code>
	</test>
    
    <test name="wrs:wrs-1.0.0-GetRecords-tc2.1">
      <param name="wrs.GetRecords.post.url"/>
      <assertion>
      The response to a GetRecords request that specifies a "summary" view must 
      include the corresponding record representations not exeeding the value 
      of the default maxRecords attribute (10).
      </assertion>
      <comment>Pass if all of the following conditions are true: (1) the response 
      is schema valid; (2) the csw:SearchResults element contains exactly 10 
      rim:RegistryObject child elements.</comment>
      <link>csw-</link>
		<code>
			<xsl:variable name="response">
				<request>
					<url>
						<xsl:value-of select="$wrs.GetRecords.post.url"/>
					</url>
                    <method>POST</method>
					<body>
<csw:GetRecords service="WRS" version="1.0.0" resultType="results">
  <csw:Query typeNames="rim:RegistryObject">
    <csw:ElementSetName>summary</csw:ElementSetName>
  </csw:Query>
</csw:GetRecords>
					</body>
					<p:XMLValidatingParser.WRS/>
				</request>
			</xsl:variable>
			
            <xsl:choose>
              <xsl:when test="not($response/*)">
                  <ctl:message>[FAILURE] Missing or invalid response entity.</ctl:message>
                  <ctl:fail/>
              </xsl:when>
              <xsl:otherwise>
                <ctl:call-test name="ctl:SchematronValidatingParser">
		            <ctl:with-param name="doc" select="$response"/>
		            <ctl:with-param name="schema">sch/wrs/1.0.0/GetRecords.sch</ctl:with-param>
		            <ctl:with-param name="phase">TenRecordsPhase</ctl:with-param>
	            </ctl:call-test>
                <xsl:if test="count($response/csw:GetRecordsResponse/csw:SearchResults/rim:RegistryObject) != 10">
                  <ctl:message>[FAILURE] 10 rim:RegistryObject elements expected in response.</ctl:message>
                  <ctl:fail/>
                </xsl:if>
              </xsl:otherwise>
            </xsl:choose>
		</code>
	</test>
    
    <test name="wrs:wrs-1.0.0-GetRecords-tc2.2">
      <param name="wrs.GetRecords.post.url"/>
      <assertion>
      The response to a GetRecords request that specifies a "brief" view must 
      include the corresponding record representations not exeeding the value 
      of the default maxRecords attribute (10).
      </assertion>
      <comment>Pass if all of the following conditions are true: (1) the response 
      is schema valid; (2) the csw:SearchResults element contains exactly 10 
      rim:RegistryObject child elements.</comment>
      <link>csw-</link>
		<code>
			<xsl:variable name="response">
				<request>
					<url>
						<xsl:value-of select="$wrs.GetRecords.post.url"/>
					</url>
                    <method>POST</method>
					<body>
<csw:GetRecords service="WRS" version="1.0.0" resultType="results">
  <csw:Query typeNames="rim:RegistryObject">
    <csw:ElementSetName>brief</csw:ElementSetName>
  </csw:Query>
</csw:GetRecords>
					</body>
					<p:XMLValidatingParser.WRS/>
				</request>
			</xsl:variable>
			
            <xsl:choose>
              <xsl:when test="not($response/*)">
                  <ctl:message>[FAILURE] Missing or invalid response entity.</ctl:message>
                  <ctl:fail/>
              </xsl:when>
              <xsl:otherwise>
                <ctl:call-test name="ctl:SchematronValidatingParser">
		            <ctl:with-param name="doc" select="$response"/>
		            <ctl:with-param name="schema">sch/wrs/1.0.0/GetRecords.sch</ctl:with-param>
		            <ctl:with-param name="phase">TenRecordsPhase</ctl:with-param>
	            </ctl:call-test>
                <ctl:call-test name="ctl:SchematronValidatingParser">
		            <ctl:with-param name="doc" select="$response"/>
		            <ctl:with-param name="schema">sch/wrs/1.0.0/wrs.sch</ctl:with-param>
		            <ctl:with-param name="phase">BriefViewPhase</ctl:with-param>
	            </ctl:call-test>
              </xsl:otherwise>
            </xsl:choose>
		</code>
	</test>
    
    <test name="wrs:wrs-1.0.0-GetRecords-tc3.1">
      <param name="wrs.GetRecords.post.url"/>
      <assertion>
      The response to a GetRecords request that specifies an ad hoc view must 
      include the corresponding rim:RegistryObject representations not exeeding the value 
      of the default maxRecords attribute (10).
      </assertion>
      <comment>Pass if all of the following conditions are true: (1) the response 
      is schema valid; (2) the csw:SearchResults element contains exactly 10 
      rim:RegistryObject child elements, each containing only the requested elements.</comment>
		<code>
			<xsl:variable name="response">
				<request>
					<url>
						<xsl:value-of select="$wrs.GetRecords.post.url"/>
					</url>
                    <method>POST</method>
					<body>
<csw:GetRecords service="WRS" version="1.0.0" resultType="results">
  <csw:Query typeNames="rim:RegistryObject">
    <csw:ElementName>rim:Classification</csw:ElementName>
    <csw:ElementName>rim:VersionInfo</csw:ElementName>
  </csw:Query>
</csw:GetRecords>
					</body>
					<p:XMLValidatingParser.WRS/>
				</request>
			</xsl:variable>
			
            <xsl:choose>
              <xsl:when test="not($response/*)">
                  <ctl:message>[FAILURE] Missing or invalid response entity.</ctl:message>
                  <ctl:fail/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:for-each select="$response//rim:RegistryObject/*">
                  <xsl:variable name="local-name" select="local-name(.)"/>
                  <xsl:if test="empty(index-of(('Classification', 'VersionInfo'), $local-name))">
                    <ctl:message>[FAILURE] Unexpected record property: <xsl:value-of select="$local-name"/> (<xsl:value-of select="../@id"/>)</ctl:message>
                    <ctl:fail/>
                  </xsl:if>
                </xsl:for-each>
              </xsl:otherwise>
            </xsl:choose>
		</code>
	</test>
    
    <test name="wrs:wrs-1.0.0-GetRecords-tc4.1">
      <param name="wrs.GetRecords.post.url"/>
      <assertion>
      The response to a GetRecords request that specifies sorting criteria
      must include the corresponding record representations in the correct 
      sort order.
      </assertion>
      <comment>Pass if all of the following conditions are true: (1) the response 
      is schema valid; (2) the csw:SearchResults element contains exactly 10 
      rim:RegistryObject child elements; (3) the records are sorted by @id 
      in ascending order.</comment>
      <link>csw-</link>
		<code>
			<xsl:variable name="response">
				<request>
					<url>
						<xsl:value-of select="$wrs.GetRecords.post.url"/>
					</url>
                    <method>POST</method>
					<body>
<csw:GetRecords service="WRS" version="1.0.0" resultType="results">
    <csw:Query typeNames="rim:RegistryObject">
      <csw:ElementSetName>brief</csw:ElementSetName>
      <ogc:SortBy>
        <ogc:SortProperty>
          <ogc:PropertyName>@id</ogc:PropertyName>
          <ogc:SortOrder>ASC</ogc:SortOrder>
        </ogc:SortProperty>
      </ogc:SortBy>
    </csw:Query>
</csw:GetRecords>
					</body>
					<p:XMLValidatingParser.WRS/>
				</request>
			</xsl:variable>
			
            <xsl:choose>
              <xsl:when test="not($response/*)">
                  <ctl:message>[FAILURE] Missing or invalid response entity.</ctl:message>
                  <ctl:fail/>
              </xsl:when>
              <xsl:otherwise>
                <ctl:call-test name="ctl:SchematronValidatingParser">
		            <ctl:with-param name="doc" select="$response"/>
		            <ctl:with-param name="schema">sch/wrs/1.0.0/GetRecords.sch</ctl:with-param>
		            <ctl:with-param name="phase">TenRecordsPhase</ctl:with-param>
	            </ctl:call-test>
                <xsl:if test="count($response/csw:GetRecordsResponse/csw:SearchResults/rim:RegistryObject) != 10">
                  <ctl:message>[FAILURE] 10 rim:RegistryObject elements expected in response.</ctl:message>
                  <ctl:fail/>
                </xsl:if>
                <xsl:variable name="r1.id" select="$response//csw:SearchResults/*[1]/@id"/> 
                <xsl:variable name="r2.id" select="$response//csw:SearchResults/*[2]/@id"/>
                <xsl:variable name="r3.id" select="$response//csw:SearchResults/*[3]/@id"/>
                <xsl:if test="(compare($r1.id,$r2.id) ne -1) or (compare($r2.id,$r3.id) ne -1)">
                  <ctl:message>[FAILURE] Search results are not sorted correctly by @id in ascending order.</ctl:message>
                  <ctl:fail/>
                </xsl:if>
              </xsl:otherwise>
            </xsl:choose>
		</code>
	</test>
    
    <test name="wrs:wrs-1.0.0-GetRecords-tc4.2">
      <param name="wrs.GetRecords.post.url"/>
      <assertion>
      The response to a GetRecords request that specifies an ad hoc view and 
      sorting criteria must include the corresponding rim:RegistryObject representations 
      in the correct sort order.
      </assertion>
      <comment>Pass if all of the following conditions are true: (1) the response 
      is schema valid; (2) the csw:SearchResults element contains exactly 10 
      rim:RegistryObject child elements, each containing only the requested elements; 
      (3) the records are sorted by rim:Slot[@name='http://purl.org/dc/terms/modified'] value 
      in descending order.</comment>
		<code>
			<xsl:variable name="response">
				<request>
					<url>
						<xsl:value-of select="$wrs.GetRecords.post.url"/>
					</url>
                    <method>POST</method>
					<body>
<csw:GetRecords service="WRS" version="1.0.0" resultType="results">
    <csw:Query typeNames="wrs:ExtrinsicObject">
      <csw:ElementName>rim:Name</csw:ElementName>
      <csw:ElementName>rim:Description</csw:ElementName>
      <csw:ElementName>rim:Slot[@name='http://purl.org/dc/terms/modified']</csw:ElementName>
      <ogc:SortBy>
        <ogc:SortProperty>
          <ogc:PropertyName>rim:Slot[@name='http://purl.org/dc/terms/modified']/rim:ValueList/rim:Value</ogc:PropertyName>
          <ogc:SortOrder>DESC</ogc:SortOrder>
        </ogc:SortProperty>
      </ogc:SortBy>
    </csw:Query>
</csw:GetRecords>
					</body>
					<p:XMLValidatingParser.WRS/>
				</request>
			</xsl:variable>
			
            <xsl:choose>
              <xsl:when test="not($response/*)">
                  <ctl:message>[FAILURE] Missing or invalid response entity.</ctl:message>
                  <ctl:fail/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:for-each select="$response//wrs:ExtrinsicObject/*">
                  <xsl:variable name="local-name" select="local-name(.)"/>
                  <xsl:if test="empty(index-of(('Name', 'Description', 'Slot'), $local-name))">
                    <ctl:message>[FAILURE] Unexpected property: <xsl:value-of select="$local-name"/> (<xsl:value-of select="../@id"/>)</ctl:message>
                    <ctl:fail/>
                  </xsl:if>
                </xsl:for-each>
                <xsl:variable name="dates" select="$response//rim:Slot[@name='http://purl.org/dc/terms/modified']/rim:ValueList/rim:Value/text()"/>
                <xsl:if test="not(xsd:date($dates[1]) gt xsd:date($dates[2])) or not(xsd:date($dates[2]) gt xsd:date($dates[3]))">
                  <ctl:message>[FAILURE] Search results are not sorted correctly by Slot[@name='http://purl.org/dc/terms/modified'] in descending order.</ctl:message>
                  <ctl:fail/>
                </xsl:if>
              </xsl:otherwise>
            </xsl:choose>
		</code>
	</test>
    
    <test name="wrs:wrs-1.0.0-GetRecords-tc5.1">
      <param name="wrs.GetRecords.post.url"/>
      <assertion>
      The response to a GetRecords request that includes an ogc:Filter having a
      BBOX operator must include all matching record representations.
      </assertion>
      <comment>Pass if all of the following conditions are true: (1) the response 
      is schema valid; (2) the csw:SearchResults element contains 1-10 matching 
      rim:RegistryObject child elements.</comment>
      <link>csw-</link>
		<code>
			<xsl:variable name="response">
				<request>
					<url>
						<xsl:value-of select="$wrs.GetRecords.post.url"/>
					</url>
                    <method>POST</method>
					<body>
<csw:GetRecords service="WRS" version="1.0.0" resultType="results">
    <csw:Query typeNames="rim:RegistryObject">
      <csw:ElementName>@id</csw:ElementName>
      <csw:ElementName>rim:Slot[@name="http://purl.org/dc/terms/spatial"]</csw:ElementName>
      <csw:Constraint version="1.1.0">
        <ogc:Filter>
          <ogc:BBOX>
            <ogc:PropertyName>rim:Slot[@name="http://purl.org/dc/terms/spatial"]/wrs:ValueList/wrs:AnyValue</ogc:PropertyName>
            <gml:Envelope srsName="urn:ogc:def:crs:EPSG:4326">
              <gml:lowerCorner>47.0 -4.5</gml:lowerCorner>
              <gml:upperCorner>52.0 1.0</gml:upperCorner>
            </gml:Envelope>
          </ogc:BBOX>
        </ogc:Filter>
      </csw:Constraint>
    </csw:Query>
</csw:GetRecords>
					</body>
					<p:XMLValidatingParser.WRS/>
				</request>
			</xsl:variable>
			
            <xsl:choose>
              <xsl:when test="not($response/*)">
                  <ctl:message>[FAILURE] Missing or invalid response entity.</ctl:message>
                  <ctl:fail/>
              </xsl:when>
              <xsl:otherwise>
                <ctl:call-test name="ctl:SchematronValidatingParser">
		            <ctl:with-param name="doc" select="$response"/>
		            <ctl:with-param name="schema">sch/wrs/1.0.0/GetRecords.sch</ctl:with-param>
		            <ctl:with-param name="phase">OneToTenRecordsPhase</ctl:with-param>
	            </ctl:call-test>
                <xsl:if test="count($response//csw:SearchResults/rim:RegistryObject) != count($response//csw:SearchResults/*)">
                  <ctl:message>[FAILURE] Only rim:RegistryObject elements expected in response.</ctl:message>
                  <ctl:fail/>
                </xsl:if>
                <xsl:variable name="env">
                  <gml:Envelope srsName="urn:ogc:def:crs:EPSG:4326">
                    <gml:lowerCorner>47.0 -4.5</gml:lowerCorner>
                    <gml:upperCorner>52.0 1.0</gml:upperCorner>
                  </gml:Envelope>
                </xsl:variable>
                <xsl:for-each select="$response//csw:SearchResults/*">
                  <xsl:if test="wrs:disjoint-envelopes($env,rim:Slot[@slotType='urn:ogc:def:dataType:ISO-19107:GM_Envelope']/wrs:ValueList/wrs:AnyValue/*) != 0">
                    <ctl:message>[FAILURE] Envelopes do NOT intersect or @srsName value does not match 'urn:ogc:def:crs:EPSG:4326'(<xsl:value-of select="@id"/>)</ctl:message>
                    <ctl:fail/>
                  </xsl:if>
                </xsl:for-each>
              </xsl:otherwise>
            </xsl:choose>
		</code>
	</test>
    
    <test name="wrs:wrs-1.0.0-GetRecords-tc5.2">
      <param name="wrs.GetRecords.post.url"/>
      <assertion>
      The response to a GetRecords request that includes an ogc:Filter having a
      spatial operator that does not refer to a geometry-valued property must 
      include an exception report.
      </assertion>
      <comment>Pass if all of the following conditions are true: (1) the response 
      is a valid ows:ExceptionReport; (2) the reported exceptionCode is "InvalidParameterValuePhase".</comment>
      <link>csw-</link>
		<code>
			<xsl:variable name="response">
				<request>
					<url>
						<xsl:value-of select="$wrs.GetRecords.post.url"/>
					</url>
                    <method>POST</method>
					<body>
<csw:GetRecords service="WRS" version="1.0.0" resultType="results">
    <csw:Query typeNames="rim:RegistryObject">
      <csw:ElementSetName>brief</csw:ElementSetName>
      <csw:Constraint version="1.1.0">
        <ogc:Filter>
          <ogc:BBOX>
            <ogc:PropertyName>rim:Description/rim:LocalizedString/@value</ogc:PropertyName>
            <gml:Envelope srsName="urn:ogc:def:crs:EPSG:4326">
              <gml:lowerCorner>47.0 -4.5</gml:lowerCorner>
              <gml:upperCorner>52.0 1.0</gml:upperCorner>
            </gml:Envelope>
          </ogc:BBOX>
        </ogc:Filter>
      </csw:Constraint>
    </csw:Query>
</csw:GetRecords>
					</body>
					<p:XMLValidatingParser.OWS/>
				</request>
			</xsl:variable>
			
            <xsl:choose>
              <xsl:when test="not($response/*)">
                  <ctl:message>[FAILURE] Missing or invalid response entity.</ctl:message>
                  <ctl:fail/>
              </xsl:when>
              <xsl:otherwise>
                <ctl:call-test name="ctl:SchematronValidatingParser">
		            <ctl:with-param name="doc" select="$response"/>
		            <ctl:with-param name="schema">sch/wrs/1.0.0/ExceptionReport.sch</ctl:with-param>
		            <ctl:with-param name="phase">InvalidParameterValuePhase</ctl:with-param>
	            </ctl:call-test>
              </xsl:otherwise>
            </xsl:choose>
		</code>
	</test>
    
    <test name="wrs:wrs-1.0.0-GetRecords-tc6.1">
      <param name="wrs.GetRecords.post.url"/>
      <assertion>
      The response to a GetRecords request that includes an ogc:Filter having a
      PropertyIsEqualTo predicate (case-sensitive by default) must include all 
      matching record representations.
      </assertion>
      <comment>Pass if all of the following conditions are true: (1) the response 
      is schema valid; (2) the csw:SearchResults element contains exactly one 
      matching rim:RegistryObject instance; (3) csw:SearchResults/@nextRecord="0" </comment>
		<code>
			<xsl:variable name="response">
				<request>
					<url>
						<xsl:value-of select="$wrs.GetRecords.post.url"/>
					</url>
                    <method>POST</method>
					<body>
<csw:GetRecords service="WRS" version="1.0.0" resultType="results">
   <csw:Query typeNames="rim:RegistryObject">
     <csw:ElementSetName>brief</csw:ElementSetName>
     <csw:Constraint version="1.1.0">
       <ogc:Filter>
         <ogc:PropertyIsEqualTo>
           <ogc:PropertyName>rim:Name/rim:LocalizedString/@value</ogc:PropertyName>
           <ogc:Literal>Fuscé vitae ligulä</ogc:Literal>
         </ogc:PropertyIsEqualTo>
       </ogc:Filter>
     </csw:Constraint>
   </csw:Query>
</csw:GetRecords>
					</body>
					<p:XMLValidatingParser.WRS/>
				</request>
			</xsl:variable>
			
            <xsl:choose>
              <xsl:when test="not($response/*)">
                  <ctl:message>[FAILURE] Missing or invalid response entity.</ctl:message>
                  <ctl:fail/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:if test="$response//csw:SearchResults/*[1]/@id != 'urn:uuid:e9330592-0932-474b-be34-c3a3bb67c7db'">
                  <ctl:message>[FAILURE] Expected record is missing (urn:uuid:e9330592-0932-474b-be34-c3a3bb67c7db).</ctl:message>
                  <ctl:fail/>
                </xsl:if>
                <xsl:if test="$response//csw:SearchResults/@nextRecord != 0">
                  <ctl:message>[FAILURE] Expected csw:SearchResults/@nextRecord = 0.</ctl:message>
                  <ctl:fail/>
                </xsl:if>
              </xsl:otherwise>
            </xsl:choose>
		</code>
	</test>
    
    <test name="wrs:wrs-1.0.0-GetRecords-tc6.2">
      <param name="wrs.GetRecords.post.url"/>
      <assertion>
      The response to a GetRecords request that includes an ogc:Filter having a
      PropertyIsEqualTo predicate (case-insensitive) must include all matching 
      record representations.
      </assertion>
      <comment>Pass if all of the following conditions are true: (1) the response 
      is schema valid; (2) the csw:SearchResults element contains exactly one 
      matching rim:RegistryObject instance.</comment>
		<code>
			<xsl:variable name="response">
				<request>
					<url>
						<xsl:value-of select="$wrs.GetRecords.post.url"/>
					</url>
                    <method>POST</method>
					<body>
<csw:GetRecords service="WRS" version="1.0.0" resultType="results">
    <csw:Query typeNames="rim:RegistryObject">
      <csw:ElementSetName>brief</csw:ElementSetName>
      <csw:Constraint version="1.1.0">
        <ogc:Filter>
          <ogc:PropertyIsEqualTo matchCase="false">
            <ogc:PropertyName>rim:Slot[@name="http://purl.org/dc/elements/1.1/subject"]/rim:ValueList/rim:Value</ogc:PropertyName>
            <ogc:Literal>pHYSIOGRAPHy</ogc:Literal>
          </ogc:PropertyIsEqualTo>
        </ogc:Filter>
      </csw:Constraint>
    </csw:Query>
</csw:GetRecords>
					</body>
					<p:XMLValidatingParser.WRS/>
				</request>
			</xsl:variable>
			
            <xsl:choose>
              <xsl:when test="not($response/*)">
                  <ctl:message>[FAILURE] Missing or invalid response entity.</ctl:message>
                  <ctl:fail/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:choose>
                  <xsl:when test="$response/csw:GetRecordsResponse/csw:SearchResults//@id='urn:uuid:ab42a8c4-95e8-4630-bf79-33e59241605a'"/>
                  <xsl:otherwise>
                    <ctl:message>[FAILURE] Expected record is missing (urn:uuid:ab42a8c4-95e8-4630-bf79-33e59241605a).</ctl:message>
                    <ctl:fail/>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:otherwise>
            </xsl:choose>
		</code>
	</test>
    
    <test name="wrs:wrs-1.0.0-GetRecords-tc7.1">
      <param name="wrs.GetRecords.post.url"/>
      <assertion>
      The response to a GetRecords request that includes an unsupported function 
      must include an exception report.
      </assertion>
      <comment>Pass if all of the following conditions are true: (1) the response 
      is a valid ows:ExceptionReport; (2) the reported exceptionCode is "InvalidParameterValue" 
      (ogc:Function/@name).</comment>
		<code>
			<xsl:variable name="response">
				<request>
					<url>
						<xsl:value-of select="$wrs.GetRecords.post.url"/>
					</url>
                    <method>POST</method>
					<body>
<csw:GetRecords service="WRS" version="1.0.0" resultType="results">
    <csw:Query typeNames="rim:RegistryObject">
      <csw:ElementSetName>brief</csw:ElementSetName>
      <csw:Constraint version="1.1.0">
        <ogc:Filter>
          <ogc:PropertyIsEqualTo>
            <ogc:PropertyName>rim:Name/rim:LocalizedString/@value</ogc:PropertyName>
            <ogc:Function name="DummyFunction">
              <ogc:Literal>input.argument</ogc:Literal>
            </ogc:Function>
          </ogc:PropertyIsEqualTo>
        </ogc:Filter>
      </csw:Constraint>
    </csw:Query>
</csw:GetRecords>
					</body>
					<p:XMLValidatingParser.OWS/>
				</request>
			</xsl:variable>
			
            <xsl:choose>
              <xsl:when test="not($response/*)">
                  <ctl:message>[FAILURE] Missing or invalid response entity.</ctl:message>
                  <ctl:fail/>
              </xsl:when>
              <xsl:otherwise>
                <ctl:call-test name="ctl:SchematronValidatingParser">
		            <ctl:with-param name="doc" select="$response"/>
		            <ctl:with-param name="schema">sch/wrs/1.0.0/ExceptionReport.sch</ctl:with-param>
		            <ctl:with-param name="phase">InvalidParameterValuePhase</ctl:with-param>
	            </ctl:call-test>
              </xsl:otherwise>
            </xsl:choose>
		</code>
	</test>
    
    <test name="wrs:wrs-1.0.0-GetRecords-tc8.1">
      <param name="wrs.GetRecords.post.url"/>
      <assertion>
      The response to a GetRecords request that includes an ogc:Filter having a
      PropertyIsNotEqualTo predicate (case-sensitive by default) must exclude  
      matching record representations.
      </assertion>
      <comment>Pass if all of the following conditions are true: (1) the response 
      is schema valid; (2) the csw:SearchResults element does NOT contain any 
      records with a matching title.</comment>
		<code>
			<xsl:variable name="response">
				<request>
					<url>
						<xsl:value-of select="$wrs.GetRecords.post.url"/>
					</url>
                    <method>POST</method>
					<body>
<csw:GetRecords service="WRS" version="1.0.0" resultType="results" maxRecords="100">
   <csw:Query typeNames="wrs:ExtrinsicObject">
     <csw:ElementSetName>brief</csw:ElementSetName>
     <csw:Constraint version="1.1.0">
       <ogc:Filter>
         <ogc:PropertyIsNotEqualTo>
           <ogc:PropertyName>rim:Name/rim:LocalizedString/@value</ogc:PropertyName>
           <ogc:Literal>Fuscé vitae ligulä</ogc:Literal>
         </ogc:PropertyIsNotEqualTo>
       </ogc:Filter>
     </csw:Constraint>
     <ogc:SortBy>
       <ogc:SortProperty>
         <ogc:PropertyName>@mimeType</ogc:PropertyName>
         <ogc:SortOrder>DESC</ogc:SortOrder>
       </ogc:SortProperty>
     </ogc:SortBy>
   </csw:Query>
</csw:GetRecords>
					</body>
					<p:XMLValidatingParser.WRS/>
				</request>
			</xsl:variable>
			
            <xsl:choose>
              <xsl:when test="not($response/*)">
                  <ctl:message>[FAILURE] Missing or invalid response entity.</ctl:message>
                  <ctl:fail/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:for-each select="$response//csw:SearchResults/*">
                  <xsl:if test="@id = 'urn:uuid:e9330592-0932-474b-be34-c3a3bb67c7db'">
                    <ctl:message>[FAILURE] Unexpected record is included (urn:uuid:e9330592-0932-474b-be34-c3a3bb67c7db).</ctl:message>
                    <ctl:fail/>
                  </xsl:if>
                </xsl:for-each>
              </xsl:otherwise>
            </xsl:choose>
		</code>
	</test>
    
    <test name="wrs:wrs-1.0.0-GetRecords-tc8.2">
      <param name="wrs.GetRecords.post.url"/>
      <assertion>
      The response to a GetRecords request that includes an ogc:Filter having a
      PropertyIsNotEqualTo predicate (case-insensitive) must exclude matching 
      record representations.
      </assertion>
      <comment>Pass if all of the following conditions are true: (1) the response 
      is schema valid; (2) the csw:SearchResults element does NOT contain any 
      records with a matching subject.</comment>
		<code>
			<xsl:variable name="response">
				<request>
					<url>
						<xsl:value-of select="$wrs.GetRecords.post.url"/>
					</url>
                    <method>POST</method>
					<body>
<csw:GetRecords service="WRS" version="1.0.0" resultType="results" maxRecords="20">
    <csw:Query typeNames="rim:RegistryObject">
      <csw:ElementSetName>brief</csw:ElementSetName>
      <csw:Constraint version="1.1.0">
        <ogc:Filter>
          <ogc:PropertyIsNotEqualTo matchCase="false">
            <ogc:PropertyName>rim:Slot[@name="http://purl.org/dc/elements/1.1/subject"]/rim:ValueList/rim:Value</ogc:PropertyName>
            <ogc:Literal>pHYSIOGRAPHy</ogc:Literal>
          </ogc:PropertyIsNotEqualTo>
        </ogc:Filter>
      </csw:Constraint>
    </csw:Query>
</csw:GetRecords>
					</body>
					<p:XMLValidatingParser.WRS/>
				</request>
			</xsl:variable>
			
            <xsl:choose>
              <xsl:when test="not($response/*)">
                  <ctl:message>[FAILURE] Missing or invalid response entity.</ctl:message>
                  <ctl:fail/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:variable name="recordCount" select="count($response//csw:SearchResults/rim:RegistryObject)"/>
                <xsl:if test="$recordCount gt 20">
                  <ctl:message>[FAILURE] A maximum of 20 rim:RegistryObject elements expected in response (<xsl:value-of select="$recordCount"/> included)</ctl:message>
                  <ctl:fail/>
                </xsl:if>
                <xsl:for-each select="$response//csw:SearchResults/*">
                  <xsl:if test="compare(upper-case(rim:Slot[@name='http://purl.org/dc/elements/1.1/subject']/rim:ValueList/rim:Value/text()),'PHYSIOGRAPHY') = 0">
                    <ctl:message>[FAILURE] Unexpected record having rim:Slot[@name='http://purl.org/dc/elements/1.1/subject'] value matching 'pHYSIOGRAPHy' (case-insensitive) - (<xsl:value-of select="@id"/>)</ctl:message>
                    <ctl:fail/>
                  </xsl:if>
                </xsl:for-each>
              </xsl:otherwise>
            </xsl:choose>
		</code>
	</test>
    
    <test name="wrs:wrs-1.0.0-GetRecords-tc9.1">
      <param name="wrs.GetRecords.post.url"/>
      <assertion>
      The response to a GetRecords request that includes an ogc:Filter having a
      PropertyIsGreaterThan predicate must include matching record representations.
      </assertion>
      <comment>Pass if all of the following conditions are true: (1) the response 
      is schema valid; (2) the csw:SearchResults element contains 1-10 rim:RegistryObject 
      child elements having rim:Slot[@name='http://purl.org/dc/terms/modified']/rim:ValueList/rim:Value values occurring after 2004-01-01.</comment>
		<code>
			<xsl:variable name="response">
				<request>
					<url>
						<xsl:value-of select="$wrs.GetRecords.post.url"/>
					</url>
                    <method>POST</method>
					<body>
<csw:GetRecords service="WRS" version="1.0.0" resultType="results">
    <csw:Query typeNames="wrs:ExtrinsicObject">
      <csw:ElementName>@id</csw:ElementName>
      <csw:ElementName>@mimeType</csw:ElementName>
      <csw:ElementName>rim:Slot[@name='http://purl.org/dc/terms/modified']</csw:ElementName>
      <csw:Constraint version="1.1.0">
        <ogc:Filter>
          <ogc:PropertyIsGreaterThan>
            <ogc:PropertyName>rim:Slot[@name='http://purl.org/dc/terms/modified']/rim:ValueList/rim:Value</ogc:PropertyName>
            <ogc:Literal>2004-01-01Z</ogc:Literal>
          </ogc:PropertyIsGreaterThan>
        </ogc:Filter>
      </csw:Constraint>
    </csw:Query>
</csw:GetRecords>
					</body>
					<p:XMLValidatingParser.WRS/>
				</request>
			</xsl:variable>
			
            <xsl:choose>
              <xsl:when test="not($response/*)">
                  <ctl:message>[FAILURE] Missing or invalid response entity.</ctl:message>
                  <ctl:fail/>
              </xsl:when>
              <xsl:otherwise>
                <ctl:call-test name="ctl:SchematronValidatingParser">
		            <ctl:with-param name="doc" select="$response"/>
		            <ctl:with-param name="schema">sch/wrs/1.0.0/GetRecords.sch</ctl:with-param>
		            <ctl:with-param name="phase">OneToTenAdHocRecordsPhase</ctl:with-param>
	            </ctl:call-test>
                <xsl:for-each select="$response//csw:SearchResults/*">
                  <xsl:if test="xsd:date(rim:Slot[@name='http://purl.org/dc/terms/modified']/rim:ValueList/rim:Value/text()) le xsd:date('2004-01-01Z')">
                    <ctl:message>[FAILURE] Included record modified on or before 2004-01-01Z (<xsl:value-of select="rim:Slot[@name='http://purl.org/dc/terms/modified']/rim:ValueList/rim:Value/text()"/>)</ctl:message>
                    <ctl:fail/>
                  </xsl:if>
                </xsl:for-each>
              </xsl:otherwise>
            </xsl:choose>
		</code>
	</test>
    
    <test name="wrs:wrs-1.0.0-GetRecords-tc10.1">
      <param name="wrs.GetRecords.post.url"/>
      <assertion>
      The response to a GetRecords request that includes an ogc:Filter having a
      PropertyIsLessThan predicate must include matching record representations.
      </assertion>
      <comment>Pass if all of the following conditions are true: (1) the response 
      is schema valid; (2) the csw:SearchResults element contains 1-10 rim:RegistryObject 
      child elements having rim:Slot[@name='http://purl.org/dc/terms/modified']/rim:ValueList/rim:Value 
      values occurring before 2006-05-01.</comment>
		<code>
			<xsl:variable name="response">
				<request>
					<url>
						<xsl:value-of select="$wrs.GetRecords.post.url"/>
					</url>
                    <method>POST</method>
					<body>
<csw:GetRecords service="WRS" version="1.0.0" resultType="results">
    <csw:Query typeNames="rim:RegistryObject">
      <csw:ElementName>@id</csw:ElementName>
      <csw:ElementName>@objectType</csw:ElementName>
      <csw:ElementName>rim:Slot[@name='http://purl.org/dc/terms/modified']</csw:ElementName>
      <csw:Constraint version="1.1.0">
        <ogc:Filter>
          <ogc:PropertyIsLessThan>
            <ogc:PropertyName>rim:Slot[@name='http://purl.org/dc/terms/modified']/rim:ValueList/rim:Value</ogc:PropertyName>
            <ogc:Literal>2006-05-01Z</ogc:Literal>
          </ogc:PropertyIsLessThan>
        </ogc:Filter>
      </csw:Constraint>
    </csw:Query>
</csw:GetRecords>
					</body>
					<p:XMLValidatingParser.WRS/>
				</request>
			</xsl:variable>
			
            <xsl:choose>
              <xsl:when test="not($response//csw:GetRecordsResponse)">
                  <ctl:message>[FAILURE] Expected valid csw:GetRecordsResponse in response</ctl:message>
                  <ctl:fail/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:for-each select="$response//csw:SearchResults/*">
                  <xsl:if test="xsd:date(rim:Slot[@name='http://purl.org/dc/terms/modified']/rim:ValueList/rim:Value/text()) ge xsd:date('2006-05-01Z')">
                    <ctl:message>[FAILURE] Included record modified on or after 2006-05-01Z (<xsl:value-of select="rim:Slot[@name='http://purl.org/dc/terms/modified']/rim:ValueList/rim:Value/text()"/>)</ctl:message>
                    <ctl:fail/>
                  </xsl:if>
                </xsl:for-each>
              </xsl:otherwise>
            </xsl:choose>
		</code>
	</test>
    
    <test name="wrs:wrs-1.0.0-GetRecords-tc11.1">
      <param name="wrs.GetRecords.post.url"/>
      <assertion>
      The response to a GetRecords request that includes an ogc:Filter having a
      PropertyIsLike predicate must include matching record representations.
      </assertion>
      <comment>Pass if the csw:SearchResults element contains only rim:RegistryObject 
      instances having a rim:Name value starting with the string "Lorem ipsum".</comment>
		<code>
			<xsl:variable name="response">
				<request>
					<url>
						<xsl:value-of select="$wrs.GetRecords.post.url"/>
					</url>
                    <method>POST</method>
					<body>
<csw:GetRecords service="WRS" version="1.0.0" resultType="results">
    <csw:Query typeNames="rim:RegistryObject">
      <csw:ElementSetName>summary</csw:ElementSetName>
      <csw:Constraint version="1.1.0">
        <ogc:Filter>
          <ogc:PropertyIsLike wildCard="*" singleChar="?" escapeChar="\">
            <ogc:PropertyName>rim:Name/rim:LocalizedString/@value</ogc:PropertyName>
            <ogc:Literal>Lorem ipsum*</ogc:Literal>
          </ogc:PropertyIsLike>
        </ogc:Filter>
      </csw:Constraint>
    </csw:Query>
</csw:GetRecords>
					</body>
					<p:XMLValidatingParser.WRS/>
				</request>
			</xsl:variable>
			
            <xsl:choose>
              <xsl:when test="not($response/*)">
                  <ctl:message>[FAILURE] Missing or invalid response entity.</ctl:message>
                  <ctl:fail/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:if test="count($response//csw:SearchResults/rim:RegistryObject) lt 2">
                  <ctl:message>[FAILURE] At least two rim:RegistryObject elements expected in response.</ctl:message>
                  <ctl:fail/>
                </xsl:if>
                <xsl:for-each select="$response//csw:SearchResults/*">
                  <xsl:if test="starts-with(rim:Name/rim:LocalizedString/@value,'Lorem ipsum') != true()">
                    <ctl:message>[FAILURE] Unexpected record is included (rim:Name value does not match expression "Lorem ipsum*")</ctl:message>
                    <ctl:fail/>
                  </xsl:if>
                </xsl:for-each>
              </xsl:otherwise>
            </xsl:choose>
		</code>
	</test>
    
    <test name="wrs:wrs-1.0.0-GetRecords-tc11.2">
      <param name="wrs.GetRecords.post.url"/>
      <assertion>
      The response to a GetRecords request that includes an ogc:Filter having a
      PropertyIsLike predicate must include matching record representations.
      </assertion>
      <comment>Pass if the csw:SearchResults element contains only rim:RegistryObject 
      instances having a rim:Slot[@name='http://purl.org/dc/terms/modified']/rim:ValueList/rim:Value value satisfying the expression 200?-10-*.</comment>
		<code>
			<xsl:variable name="response">
				<request>
					<url>
						<xsl:value-of select="$wrs.GetRecords.post.url"/>
					</url>
                    <method>POST</method>
					<body>
<csw:GetRecords service="WRS" version="1.0.0" resultType="results">
    <csw:Query typeNames="rim:RegistryObject">
      <csw:ElementSetName>summary</csw:ElementSetName>
      <csw:Constraint version="1.1.0">
        <ogc:Filter>
          <ogc:PropertyIsLike wildCard="*" singleChar="?" escapeChar="\">
            <ogc:PropertyName>rim:Slot[@name='http://purl.org/dc/terms/modified']/rim:ValueList/rim:Value</ogc:PropertyName>
            <ogc:Literal>200?-10-*</ogc:Literal>
          </ogc:PropertyIsLike>
        </ogc:Filter>
      </csw:Constraint>
    </csw:Query>
</csw:GetRecords>
					</body>
					<p:XMLValidatingParser.WRS/>
				</request>
			</xsl:variable>
			
            <xsl:choose>
              <xsl:when test="not($response/*)">
                  <ctl:message>[FAILURE] Missing or invalid response entity.</ctl:message>
                  <ctl:fail/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:if test="count($response//csw:SearchResults/rim:RegistryObject) lt 1">
                  <ctl:message>[FAILURE] AT least one rim:RegistryObject element expected in response.</ctl:message>
                  <ctl:fail/>
                </xsl:if>
                <xsl:for-each select="$response//csw:SearchResults/*">
                  <xsl:if test="matches(rim:Slot[@name='http://purl.org/dc/terms/modified']/rim:ValueList/rim:Value/text(),'200\d-10-.*') != true()">
                    <ctl:message>[FAILURE] Unexpected record is included (rim:Slot[@name='http://purl.org/dc/terms/modified'] value does not match expression "200?-10-*")</ctl:message>
                    <ctl:fail/>
                  </xsl:if>
                </xsl:for-each>
              </xsl:otherwise>
            </xsl:choose>
		</code>
	</test>
    
    <test name="wrs:wrs-1.0.0-GetRecords-tc12.1">
      <param name="wrs.GetRecords.post.url"/>
      <assertion>
      The response to a GetRecords request that includes an ogc:Filter having a
      PropertyIsLessThanOrEqualTo predicate must include matching record 
      representations.
      </assertion>
      <comment>Pass if all of the following conditions are true: (1) the response 
      is schema valid; (2) the csw:SearchResults element contains at least two 
      rim:RegistryObject elements having rim:Slot[@name='http://purl.org/dc/terms/modified'] 
      values occurring on or before 2005-10-24.</comment>
		<code>
			<xsl:variable name="response">
				<request>
					<url>
						<xsl:value-of select="$wrs.GetRecords.post.url"/>
					</url>
                    <method>POST</method>
					<body>
<csw:GetRecords service="WRS" version="1.0.0" resultType="results">
    <csw:Query typeNames="rim:RegistryObject">
      <csw:ElementName>@id</csw:ElementName>
      <csw:ElementName>@objectType</csw:ElementName>
      <csw:ElementName>rim:Slot[@name='http://purl.org/dc/terms/modified']</csw:ElementName>
      <csw:Constraint version="1.1.0">
        <ogc:Filter>
          <ogc:PropertyIsLessThanOrEqualTo>
            <ogc:PropertyName>rim:Slot[@name='http://purl.org/dc/terms/modified']/rim:ValueList/rim:Value</ogc:PropertyName>
            <ogc:Literal>2005-10-24Z</ogc:Literal>
          </ogc:PropertyIsLessThanOrEqualTo>
        </ogc:Filter>
      </csw:Constraint>
    </csw:Query>
</csw:GetRecords>
					</body>
					<p:XMLValidatingParser.WRS/>
				</request>
			</xsl:variable>
			
            <xsl:choose>
              <xsl:when test="not($response/*)">
                  <ctl:message>[FAILURE] Missing or invalid response entity.</ctl:message>
                  <ctl:fail/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:if test="count($response//csw:SearchResults/rim:RegistryObject) lt 2">
                  <ctl:message>[FAILURE] AT least two rim:RegistryObject elements expected in response.</ctl:message>
                  <ctl:fail/>
                </xsl:if>
                <xsl:for-each select="$response//csw:SearchResults/*">
                  <xsl:if test="xsd:date(rim:Slot[@name='http://purl.org/dc/terms/modified']/rim:ValueList/rim:Value/text()) gt xsd:date('2005-10-24Z')">
                    <ctl:message>[FAILURE] Included record modified after 2005-10-24Z (<xsl:value-of select="rim:Slot[@name='http://purl.org/dc/terms/modified']/rim:ValueList/rim:Value/text()"/>)</ctl:message>
                    <ctl:fail/>
                  </xsl:if>
                </xsl:for-each>
              </xsl:otherwise>
            </xsl:choose>
		</code>
	</test>
    
    <test name="wrs:wrs-1.0.0-GetRecords-tc13.1">
      <param name="wrs.GetRecords.post.url"/>
      <assertion>
      The response to a GetRecords request that includes an ogc:Filter having a
      PropertyIsGreaterThanOrEqualTo predicate must include matching record 
      representations.
      </assertion>
      <comment>Pass if all of the following conditions are true: (1) the response 
      is schema valid; (2) the csw:SearchResults element contains at least two 
      rim:RegistryObject elements having rim:Slot[@name='http://purl.org/dc/terms/modified'] 
      values occurring on or after 2006-03-26.</comment>
		<code>
			<xsl:variable name="response">
				<request>
					<url>
						<xsl:value-of select="$wrs.GetRecords.post.url"/>
					</url>
                    <method>POST</method>
					<body>
<csw:GetRecords service="WRS" version="1.0.0" resultType="results">
    <csw:Query typeNames="rim:RegistryObject">
      <csw:ElementName>@id</csw:ElementName>
      <csw:ElementName>@objectType</csw:ElementName>
      <csw:ElementName>rim:Slot[@name='http://purl.org/dc/terms/modified']</csw:ElementName>
      <csw:Constraint version="1.1.0">
        <ogc:Filter>
          <ogc:PropertyIsGreaterThanOrEqualTo>
            <ogc:PropertyName>rim:Slot[@name='http://purl.org/dc/terms/modified']/rim:ValueList/rim:Value</ogc:PropertyName>
            <ogc:Literal>2006-03-26Z</ogc:Literal>
          </ogc:PropertyIsGreaterThanOrEqualTo>
        </ogc:Filter>
      </csw:Constraint>
    </csw:Query>
</csw:GetRecords>
					</body>
					<p:XMLValidatingParser.WRS/>
				</request>
			</xsl:variable>
			
            <xsl:choose>
              <xsl:when test="not($response/*)">
                  <ctl:message>[FAILURE] Missing or invalid response entity.</ctl:message>
                  <ctl:fail/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:if test="count($response//csw:SearchResults/rim:RegistryObject) lt 2">
                  <ctl:message>[FAILURE] AT least two rim:RegistryObject elements expected in response.</ctl:message>
                  <ctl:fail/>
                </xsl:if>
                <xsl:for-each select="$response//csw:SearchResults/*">
                  <xsl:if test="xsd:date(rim:Slot[@name='http://purl.org/dc/terms/modified']/rim:ValueList/rim:Value/text()) lt xsd:date('2006-03-26Z')">
                    <ctl:message>[FAILURE] Included record modified before 2006-03-26Z (<xsl:value-of select="rim:Slot[@name='http://purl.org/dc/terms/modified']/rim:ValueList/rim:Value"/>)</ctl:message>
                    <ctl:fail/>
                  </xsl:if>
                </xsl:for-each>
              </xsl:otherwise>
            </xsl:choose>
		</code>
	</test>
    
    <test name="wrs:wrs-1.0.0-GetRecords-tc14.1">
      <param name="wrs.GetRecords.post.url"/>
      <assertion>
      The response to a GetRecords request that includes an ogc:Filter having a
      Not logical predicate must include only matching record representations.
      </assertion>
      <comment>Pass if all of the following conditions are true: (1) the response 
      is schema valid; (2) the csw:SearchResults element contains 10-20 
      rim:RegistryObject elements having titles that do not start with the string 
      "Lorem ipsum".</comment>
		<code>
			<xsl:variable name="response">
				<request>
					<url>
						<xsl:value-of select="$wrs.GetRecords.post.url"/>
					</url>
                    <method>POST</method>
					<body>
<csw:GetRecords service="WRS" version="1.0.0" resultType="results" maxRecords="20">
    <csw:Query typeNames="rim:RegistryObject">
      <csw:ElementSetName>summary</csw:ElementSetName>
      <csw:Constraint version="1.1.0">
        <ogc:Filter>
          <ogc:Not>
          <ogc:PropertyIsLike wildCard="*" singleChar="?" escapeChar="\">
            <ogc:PropertyName>rim:Name/rim:LocalizedString/@value</ogc:PropertyName>
            <ogc:Literal>Lorem ipsum*</ogc:Literal>
          </ogc:PropertyIsLike>
          </ogc:Not>
        </ogc:Filter>
      </csw:Constraint>
    </csw:Query>
</csw:GetRecords>
					</body>
					<p:XMLValidatingParser.WRS/>
				</request>
			</xsl:variable>
			
            <xsl:choose>
              <xsl:when test="not($response/*)">
                  <ctl:message>[FAILURE] Missing or invalid response entity.</ctl:message>
                  <ctl:fail/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:variable name="summaryRecCount" select="count($response//csw:SearchResults/rim:RegistryObject)"/>
                <xsl:if test="($summaryRecCount &lt; 10) or ($summaryRecCount &gt; 20)">
                  <ctl:message>[FAILURE] 10-20 rim:RegistryObject elements expected in response (<xsl:value-of select="$summaryRecCount"/> included)</ctl:message>
                  <ctl:fail/>
                </xsl:if>
                <xsl:for-each select="$response//csw:SearchResults/*">
                  <xsl:if test="starts-with(rim:Name/rim:LocalizedString/@value,'Lorem ipsum') = true()">
                    <ctl:message>[FAILURE] Unexpected record is included (rim:Name value starts with "Lorem ipsum*")</ctl:message>
                    <ctl:fail/>
                  </xsl:if>
                </xsl:for-each>
              </xsl:otherwise>
            </xsl:choose>
		</code>
	</test>
    
    <test name="wrs:wrs-1.0.0-GetRecords-tc14.2">
      <param name="wrs.GetRecords.post.url"/>
      <assertion>
      The response to a GetRecords request that includes an ogc:Filter having a
      Not logical predicate must include only matching record representations.
      </assertion>
      <comment>Pass if all of the following conditions are true: (1) the response 
      is schema valid; (2) the csw:SearchResults element contains 11-20 rim:RegistryObject 
      elements having extents that are either disjoint from the given bounding 
      box or have no geometry-valued slot.</comment>
		<code>
			<xsl:variable name="response">
				<request>
					<url>
						<xsl:value-of select="$wrs.GetRecords.post.url"/>
					</url>
                    <method>POST</method>
					<body>
<csw:GetRecords service="WRS" version="1.0.0" resultType="results" maxRecords="20">
    <csw:Query typeNames="rim:RegistryObject">
      <csw:ElementName>@id</csw:ElementName>
      <csw:ElementName>rim:Slot[@name="http://purl.org/dc/terms/spatial"]</csw:ElementName>
      <csw:Constraint version="1.1.0">
        <ogc:Filter>
          <ogc:Not>
           <ogc:BBOX>
             <ogc:PropertyName>rim:Slot[@name="http://purl.org/dc/terms/spatial"]/wrs:ValueList/wrs:AnyValue</ogc:PropertyName>
             <gml:Envelope srsName="urn:ogc:def:crs:EPSG:4326">
               <gml:lowerCorner>60.0 12.0</gml:lowerCorner>
               <gml:upperCorner>70.0 20.0</gml:upperCorner>
             </gml:Envelope>
           </ogc:BBOX>
         </ogc:Not>
       </ogc:Filter>
     </csw:Constraint>
   </csw:Query>
</csw:GetRecords>
					</body>
					<p:XMLValidatingParser.WRS/>
				</request>
			</xsl:variable>
			
            <xsl:choose>
              <xsl:when test="not($response/*)">
                  <ctl:message>[FAILURE] Missing or invalid response entity.</ctl:message>
                  <ctl:fail/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:variable name="recordCount" select="count($response//csw:SearchResults/rim:RegistryObject)"/>
                <xsl:if test="($recordCount lt 11) or ($recordCount gt 20)">
                  <ctl:message>[FAILURE] 11-20 rim:RegistryObject elements expected in response (<xsl:value-of select="$recordCount"/> included)</ctl:message>
                  <ctl:fail/>
                </xsl:if>
                <xsl:variable name="env">
                  <gml:Envelope srsName="urn:ogc:def:crs:EPSG:4326">
                    <gml:lowerCorner>60.0 12.0</gml:lowerCorner>
                    <gml:upperCorner>70.0 20.0</gml:upperCorner>
                  </gml:Envelope>
                </xsl:variable>
                <xsl:for-each select="$response//csw:SearchResults/*">
                  <xsl:if test="rim:Slot[@slotType='urn:ogc:def:dataType:ISO-19107:GM_Envelope']">
                      <xsl:if test="wrs:disjoint-envelopes($env,rim:Slot[@slotType='urn:ogc:def:dataType:ISO-19107:GM_Envelope']/wrs:ValueList/wrs:AnyValue/*) != 1">
						<ctl:message>[FAILURE] Envelopes intersect (<xsl:value-of select="@id"/>)</ctl:message>
						<ctl:fail/>
					  </xsl:if>
				  </xsl:if>
                </xsl:for-each>
              </xsl:otherwise>
            </xsl:choose>
		</code>
	</test>
    
    <test name="wrs:wrs-1.0.0-GetRecords-tc15.1">
      <param name="wrs.GetRecords.post.url"/>
      <assertion>
      The response to a GetRecords request that includes an invalid filter 
      expression must include an exception report.
      </assertion>
      <comment>Pass if all of the following conditions are true: (1) the response 
      is a valid ows:ExceptionReport; (2) the reported exceptionCode is "NoApplicableCode".</comment>
		<code>
			<xsl:variable name="response">
				<request>
					<url>
						<xsl:value-of select="$wrs.GetRecords.post.url"/>
					</url>
                    <method>POST</method>
					<body>
<csw:GetRecords service="WRS" version="1.0.0" resultType="hits">
    <csw:Query typeNames="rim:RegistryObject">
      <csw:ElementSetName>brief</csw:ElementSetName>
      <csw:Constraint version="1.1.0">
        <ogc:Filter xmlns:ogc="http://www.opengis.net/foo">
          <ogc:PropertyIsEqualTo>
            <ogc:PropertyName>dc:title</ogc:PropertyName>
            <ogc:Literal>Maecenas enim</ogc:Literal>
          </ogc:PropertyIsEqualTo>
        </ogc:Filter>
      </csw:Constraint>
    </csw:Query>
</csw:GetRecords>
					</body>
					<p:XMLValidatingParser.OWS/>
				</request>
			</xsl:variable>
			
            <xsl:choose>
              <xsl:when test="not($response/*)">
                  <ctl:message>[FAILURE] Missing or invalid response entity.</ctl:message>
                  <ctl:fail/>
              </xsl:when>
              <xsl:otherwise>
                <ctl:call-test name="ctl:SchematronValidatingParser">
		            <ctl:with-param name="doc" select="$response"/>
		            <ctl:with-param name="schema">sch/wrs/1.0.0/ExceptionReport.sch</ctl:with-param>
		            <ctl:with-param name="phase">WRSInvalidRequestPhase</ctl:with-param>
	            </ctl:call-test>
              </xsl:otherwise>
            </xsl:choose>
		</code>
	</test>
    
    <test name="wrs:wrs-1.0.0-GetRecords-tc16.1">
      <param name="wrs.GetRecords.post.url"/>
      <assertion>
      The response to a GetRecords request that includes an ogc:Filter having 
      the Or logical predicate must include only matching record representations.
      </assertion>
      <comment>Pass if all of the following conditions are true: (1) the response 
      is schema valid; (2) the csw:SearchResults element contains 1-10 
      rim:RegistryObject elements that have @objectType = "urn:ogc:def:ebRIM-ObjectType:OGC:Image" 
      OR @mimeType = "application/*xml".</comment>
		<code>
			<xsl:variable name="response">
				<request>
					<url>
						<xsl:value-of select="$wrs.GetRecords.post.url"/>
					</url>
                    <method>POST</method>
					<body>
<csw:GetRecords service="WRS" version="1.0.0" resultType="results">
   <csw:Query typeNames="wrs:ExtrinsicObject">
     <csw:ElementSetName>summary</csw:ElementSetName>
     <csw:Constraint version="1.1.0">
       <ogc:Filter>
         <ogc:Or>
           <ogc:PropertyIsLike wildCard="*" singleChar="?" escapeChar="\">
             <ogc:PropertyName>@mimeType</ogc:PropertyName>
             <ogc:Literal>application/*xml</ogc:Literal>
           </ogc:PropertyIsLike>
           <ogc:PropertyIsEqualTo>
             <ogc:PropertyName>@objectType</ogc:PropertyName>
             <ogc:Literal>urn:ogc:def:ebRIM-ObjectType:OGC:Image</ogc:Literal>
           </ogc:PropertyIsEqualTo>
         </ogc:Or>
       </ogc:Filter>
     </csw:Constraint>
   </csw:Query>
</csw:GetRecords>
					</body>
					<p:XMLValidatingParser.WRS/>
				</request>
			</xsl:variable>
			
            <xsl:choose>
              <xsl:when test="not($response/*)">
                  <ctl:message>[FAILURE] Missing or invalid response entity.</ctl:message>
                  <ctl:fail/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:for-each select="$response//wrs:ExtrinsicObject">
                  <xsl:choose>
                    <xsl:when test="@mimeType and @objectType">
                      <xsl:if test="(@objectType != 'urn:ogc:def:ebRIM-ObjectType:OGC:Image') and (matches(@mimeType,'application/.*\+?xml') != true())">
                        <ctl:message>[FAILURE] @objectType != "urn:ogc:def:ebRIM-ObjectType:OGC:Image" AND @mimeType does not match expression "application/*xml" (<xsl:value-of select="@id"/>)</ctl:message>
                        <ctl:fail/>
                      </xsl:if>
                    </xsl:when>
                    <xsl:when test="@mimeType">
                      <xsl:if test="matches(@mimeType,'application/.*\+?xml') != true()">
                          <ctl:message>[FAILURE] @mimeType value does not match expression "application/*xml" (<xsl:value-of select="@id"/>)</ctl:message>
                          <ctl:fail/>
                        </xsl:if>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:if test="@objectType != 'urn:ogc:def:ebRIM-ObjectType:OGC:Image'">
                          <ctl:message>[FAILURE] @objectType != "urn:ogc:def:ebRIM-ObjectType:OGC:Image" (<xsl:value-of select="@id"/>)</ctl:message>
                          <ctl:fail/>
                        </xsl:if>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:for-each>
              </xsl:otherwise>
            </xsl:choose>
		</code>
	</test>
    
    <test name="wrs:wrs-1.0.0-GetRecords-tc16.2">
      <param name="wrs.GetRecords.post.url"/>
      <assertion>
      The response to a GetRecords request that includes an ogc:Filter having 
      the Or logical predicate must include only matching record representations.
      </assertion>
      <comment>Pass if all of the following conditions are true: (1) the response 
      is schema valid; (2) the csw:SearchResults element contains 1-10 rim:RegistryObject 
      child elements that have a matching extent OR were modified after 2006-01-01.</comment>
		<code>
			<xsl:variable name="response">
				<request>
					<url>
						<xsl:value-of select="$wrs.GetRecords.post.url"/>
					</url>
                    <method>POST</method>
					<body>
<csw:GetRecords service="WRS" version="1.0.0" resultType="results">
   <csw:Query typeNames="rim:RegistryObject">
     <csw:ElementName>@id</csw:ElementName>
     <csw:ElementName>rim:Slot[@name='http://purl.org/dc/terms/modified']</csw:ElementName>
     <csw:ElementName>rim:Slot[@name='http://purl.org/dc/terms/spatial']</csw:ElementName>
     <csw:Constraint version="1.1.0">
       <ogc:Filter>
         <ogc:Or>
           <ogc:BBOX>
             <ogc:PropertyName>rim:Slot[@name='http://purl.org/dc/terms/spatial']/wrs:ValueList/wrs:AnyValue</ogc:PropertyName>
             <gml:Envelope srsName="urn:ogc:def:crs:EPSG:4326">
               <gml:lowerCorner>47.0 -4.5</gml:lowerCorner>
               <gml:upperCorner>52.0 1.0</gml:upperCorner>
             </gml:Envelope>
           </ogc:BBOX>
           <ogc:PropertyIsGreaterThan>
             <ogc:PropertyName>rim:Slot[@name='http://purl.org/dc/terms/modified']/rim:ValueList/rim:Value</ogc:PropertyName>
             <ogc:Literal>2006-01-01Z</ogc:Literal>
           </ogc:PropertyIsGreaterThan>
         </ogc:Or>
       </ogc:Filter>
     </csw:Constraint>
   </csw:Query>
</csw:GetRecords>
					</body>
					<p:XMLValidatingParser.WRS/>
				</request>
			</xsl:variable>
			
            <xsl:choose>
              <xsl:when test="not($response/*)">
                  <ctl:message>[FAILURE] Missing or invalid response entity.</ctl:message>
                  <ctl:fail/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:variable name="env">
                  <gml:Envelope srsName="urn:ogc:def:crs:EPSG:4326">
                    <gml:lowerCorner>47.0 -4.5</gml:lowerCorner>
                    <gml:upperCorner>52.0 1.0</gml:upperCorner>
                  </gml:Envelope>
                </xsl:variable>
                <xsl:for-each select="$response//rim:RegistryObject">
                  <xsl:if test="not(rim:Slot[@name='http://purl.org/dc/terms/modified'] or rim:Slot[@name='http://purl.org/dc/terms/spatial'])">
                    <ctl:message>[FAILURE] rim:RegistryObject is missing an expected property: rim:Slot[@name='http://purl.org/dc/terms/modified'] or rim:Slot[@name='http://purl.org/dc/terms/spatial'] (<xsl:value-of select="@id"/>)</ctl:message>
                    <ctl:fail/>
                  </xsl:if>
                  <xsl:choose>
                    <xsl:when test="rim:Slot[@name='http://purl.org/dc/terms/modified']/rim:ValueList/rim:Value and rim:Slot[@name='http://purl.org/dc/terms/spatial']">
                      <xsl:if test="(xsd:date(rim:Slot[@name='http://purl.org/dc/terms/modified']/rim:ValueList/rim:Value/text()) le xsd:date('2006-01-01Z')) and (wrs:disjoint-envelopes($env,rim:Slot[@slotType='urn:ogc:def:dataType:ISO-19107:GM_Envelope']/wrs:ValueList/wrs:AnyValue/*) != 0)">
                        <ctl:message>[FAILURE] Record modified on or before 2006-01-01Z AND envelopes do not intersect (<xsl:value-of select="@id"/>)</ctl:message>
                        <ctl:fail/>
                      </xsl:if>
                    </xsl:when>
                    <xsl:when test="rim:Slot[@name='http://purl.org/dc/terms/modified']">
                      <xsl:if test="xsd:date(rim:Slot[@name='http://purl.org/dc/terms/modified']/rim:ValueList/rim:Value/text()) le xsd:date('2006-01-01Z')">
                          <ctl:message>[FAILURE] Record modified on or before 2006-01-01Z (<xsl:value-of select="@id"/>)</ctl:message>
                          <ctl:fail/>
                        </xsl:if>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:if test="wrs:disjoint-envelopes($env,rim:Slot[@slotType='urn:ogc:def:dataType:ISO-19107:GM_Envelope']/wrs:ValueList/wrs:AnyValue/*) != 0">
                          <ctl:message>[FAILURE] envelopes do not intersect (<xsl:value-of select="@id"/>)</ctl:message>
                          <ctl:fail/>
                        </xsl:if>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:for-each>
              </xsl:otherwise>
            </xsl:choose>
		</code>
	</test>
    
    <test name="wrs:wrs-1.0.0-GetRecords-tc17.1">
      <param name="wrs.GetRecords.post.url"/>
      <assertion>
      The response to a GetRecords request that includes an ogc:Filter having 
      the And logical predicate must include only matching record representations.
      </assertion>
      <comment>
      Pass if the csw:SearchResults element contains 1-10 rim:RegistryObject 
      elements that have @mimeType="image/*" AND are related to the given record.
      </comment>
		<code>
			<xsl:variable name="response">
				<request>
					<url>
						<xsl:value-of select="$wrs.GetRecords.post.url"/>
					</url>
                    <method>POST</method>
					<body>
<csw:GetRecords service="WRS" version="1.0.0" resultType="results">
  <csw:Query typeNames="wrs:ExtrinsicObject rim:Association">
    <csw:ElementSetName typeNames="wrs:ExtrinsicObject">full</csw:ElementSetName>
    <csw:Constraint version="1.1.0">
      <ogc:Filter>
        <ogc:And>
          <ogc:PropertyIsLike wildCard="*" singleChar="?" escapeChar="\">
            <ogc:PropertyName>wrs:ExtrinsicObject/@mimeType</ogc:PropertyName>
            <ogc:Literal>image/*</ogc:Literal>
          </ogc:PropertyIsLike>
          <ogc:PropertyIsEqualTo>
            <ogc:PropertyName>rim:Association/@associationType</ogc:PropertyName>
            <ogc:Literal>urn:oasis:names:tc:ebxml-regrep:AssociationType:RelatedTo</ogc:Literal>
          </ogc:PropertyIsEqualTo>
          <ogc:PropertyIsEqualTo>
            <ogc:PropertyName>rim:Association/@targetObject</ogc:PropertyName>
            <ogc:Literal>urn:uuid:9a669547-b69b-469f-a11f-2d875366bbdc</ogc:Literal>
          </ogc:PropertyIsEqualTo>
          <ogc:PropertyIsEqualTo>
            <ogc:PropertyName>rim:Association/@sourceObject</ogc:PropertyName>
            <ogc:PropertyName>wrs:ExtrinsicObject/@id</ogc:PropertyName>
          </ogc:PropertyIsEqualTo>
        </ogc:And>
      </ogc:Filter>
    </csw:Constraint>
  </csw:Query>
</csw:GetRecords>
					</body>
					<p:XMLValidatingParser.WRS/>
				</request>
			</xsl:variable>
			
            <xsl:choose>
              <xsl:when test="not($response/*)">
                  <ctl:message>[FAILURE] Missing or invalid response entity.</ctl:message>
                  <ctl:fail/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:variable name="recordCount" select="count($response//csw:SearchResults/wrs:ExtrinsicObject)"/>
                <xsl:if test="($recordCount lt 1) or ($recordCount gt 10)">
                  <ctl:message>[FAILURE] 1-10 wrs:ExtrinsicObject elements expected in response (<xsl:value-of select="$recordCount"/> included)</ctl:message>
                  <ctl:fail/>
                </xsl:if>
                <xsl:for-each select="$response//csw:SearchResults/*">
                  <xsl:if test="matches(@mimeType,'image/.*') != true()">
                    <ctl:message>[FAILURE] @mimeType does not match expression "image/*" (<xsl:value-of select="@id"/>)</ctl:message>
                    <ctl:fail/>
                  </xsl:if>
                </xsl:for-each>
              </xsl:otherwise>
            </xsl:choose>
		</code>
	</test>
    
    <test name="wrs:wrs-1.0.0-GetRecords-tc17.2">
      <param name="wrs.GetRecords.post.url"/>
      <assertion>
      The response to a GetRecords request that includes an ogc:Filter having 
      the And logical predicate must include only matching record representations.
      </assertion>
      <comment>
      Pass if the csw:SearchResults element contains 1-10 rim:RegistryObject elements 
      that have envelopes intersecting the given bounding box AND were modified 
      after 2006-01-01.
      </comment>
      <link>csw-</link>
		<code>
			<xsl:variable name="response">
				<request>
					<url>
						<xsl:value-of select="$wrs.GetRecords.post.url"/>
					</url>
                    <method>POST</method>
					<body>
<csw:GetRecords service="WRS" version="1.0.0" resultType="results">
  <csw:Query typeNames="rim:RegistryObject">
    <csw:ElementName>@id</csw:ElementName>
    <csw:ElementName>rim:Slot[@name='http://purl.org/dc/terms/modified']</csw:ElementName>
    <csw:ElementName>rim:Slot[@name='http://purl.org/dc/terms/spatial']</csw:ElementName>
    <csw:Constraint version="1.1.0">
      <ogc:Filter>
        <ogc:And>
          <ogc:BBOX>
            <ogc:PropertyName>rim:Slot[@name='http://purl.org/dc/terms/spatial']/wrs:ValueList/wrs:AnyValue</ogc:PropertyName>
            <gml:Envelope srsName="urn:ogc:def:crs:EPSG:4326">
              <gml:lowerCorner>47.0 -4.5</gml:lowerCorner>
              <gml:upperCorner>52.0 1.0</gml:upperCorner>
            </gml:Envelope>
          </ogc:BBOX> 
          <ogc:PropertyIsGreaterThan>
            <ogc:PropertyName>rim:Slot[@name='http://purl.org/dc/terms/modified']/rim:ValueList/rim:Value</ogc:PropertyName>
            <ogc:Literal>2006-01-01Z</ogc:Literal>
          </ogc:PropertyIsGreaterThan>
        </ogc:And>
      </ogc:Filter>
    </csw:Constraint>
  </csw:Query>
</csw:GetRecords>
					</body>
					<p:XMLValidatingParser.WRS/>
				</request>
			</xsl:variable>
         
            <xsl:choose>
              <xsl:when test="not($response/*)">
                  <ctl:message>[FAILURE] Missing or invalid response entity.</ctl:message>
                  <ctl:fail/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:variable name="recordCount" select="count($response//csw:SearchResults/rim:RegistryObject)"/>
                <xsl:if test="($recordCount &lt; 1) or ($recordCount &gt; 10)">
                  <ctl:message>[FAILURE] 1-10 rim:RegistryObject elements expected in response (<xsl:value-of select="$recordCount"/> included)</ctl:message>
                  <ctl:fail/>
                </xsl:if>
                <xsl:variable name="env">
                  <gml:Envelope srsName="urn:ogc:def:crs:EPSG:4326">
                    <gml:lowerCorner>47.0 -4.5</gml:lowerCorner>
                    <gml:upperCorner>52.0 1.0</gml:upperCorner>
                  </gml:Envelope>
                </xsl:variable>
                <xsl:for-each select="$response//csw:SearchResults/*">
                  <xsl:if test="xsd:date(rim:Slot[@name='http://purl.org/dc/terms/modified']/rim:ValueList/rim:Value/text()) le xsd:date('2006-01-01Z')">
                    <ctl:message>[FAILURE] rim:Slot[@name='http://purl.org/dc/terms/modified'] value on or before 2006-01-01Z (<xsl:value-of select="@id"/>)</ctl:message>
                    <ctl:fail/>
                  </xsl:if>
                  <xsl:if test="wrs:disjoint-envelopes($env,rim:Slot[@slotType='urn:ogc:def:dataType:ISO-19107:GM_Envelope']/wrs:ValueList/wrs:AnyValue/*) != 0">
                    <ctl:message>[FAILURE] Envelopes do NOT intersect (<xsl:value-of select="@id"/>)</ctl:message>
                    <ctl:fail/>
                  </xsl:if>
                </xsl:for-each>
              </xsl:otherwise>
            </xsl:choose>
		</code>
	</test>
    
    <test name="wrs:wrs-1.0.0-GetRecords-tc18.1">
      <param name="wrs.GetRecords.post.url"/>
      <assertion>
      The response to a GetRecords request that includes an ogc:Filter having 
      the And logical predicate must include the specified view of records that 
      satisfy all constraints.
      </assertion>
		<code>
			<xsl:variable name="response">
				<request>
					<url>
						<xsl:value-of select="$wrs.GetRecords.post.url"/>
					</url>
                    <method>POST</method>
					<body>
<csw:GetRecords service="WRS" version="1.0.0" resultType="results">
  <csw:Query typeNames="rim:RegistryObject">
    <csw:ElementName>@id</csw:ElementName>
    <csw:ElementName>@objectType</csw:ElementName>
    <csw:ElementName>rim:Slot[@name='http://purl.org/dc/terms/spatial']</csw:ElementName>
    <csw:Constraint version="1.1.0">
      <ogc:Filter>
        <ogc:And>
          <ogc:Not>
            <ogc:BBOX>
              <ogc:PropertyName>rim:Slot[@name='http://purl.org/dc/terms/spatial']/wrs:ValueList/wrs:AnyValue</ogc:PropertyName>
              <gml:Envelope srsName="urn:ogc:def:crs:EPSG:4326">
                <gml:lowerCorner>40.0 -9.0</gml:lowerCorner>
                <gml:upperCorner>50.0 -5.0</gml:upperCorner>
              </gml:Envelope>
            </ogc:BBOX>
          </ogc:Not>
          <ogc:PropertyIsEqualTo matchCase="false">
            <ogc:PropertyName>@objectType</ogc:PropertyName>
            <ogc:Literal>URN:OGC:def:ebRIM-ObjectType:OGC:Dataset</ogc:Literal>
          </ogc:PropertyIsEqualTo>
        </ogc:And>
      </ogc:Filter>
    </csw:Constraint>
  </csw:Query>
</csw:GetRecords>
					</body>
					<p:XMLValidatingParser.WRS/>
				</request>
			</xsl:variable>
            <xsl:choose>
              <xsl:when test="not($response/*)">
                  <ctl:message>[FAILURE] Missing or invalid response entity.</ctl:message>
                  <ctl:fail/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:variable name="recordCount" select="count($response//csw:SearchResults/rim:RegistryObject)"/>
                <xsl:if test="($recordCount &lt; 1) or ($recordCount &gt; 10)">
                  <ctl:message>[FAILURE] 1-10 rim:RegistryObject elements expected in response (<xsl:value-of select="$recordCount"/> included)</ctl:message>
                  <ctl:fail/>
                </xsl:if>
                <xsl:variable name="env">
                  <gml:Envelope srsName="urn:ogc:def:crs:EPSG:4326">
                    <gml:lowerCorner>40.0 -9.0</gml:lowerCorner>
                    <gml:upperCorner>50.0 -5.0</gml:upperCorner>
                  </gml:Envelope>
                </xsl:variable>
                <xsl:for-each select="$response//csw:SearchResults/*">
                  <xsl:if test="compare(lower-case(@objectType),'urn:ogc:def:ebrim-objecttype:ogc:dataset') != 0">
                    <ctl:message>[FAILURE] Unexpected record having dc:type not matching 'URN:OGC:def:ebRIM-ObjectType:OGC:Dataset' (case-insensitive) - (<xsl:value-of select="@id"/>)</ctl:message>
                    <ctl:fail/>
                  </xsl:if>
                  <xsl:if test="rim:Slot[@slotType='urn:ogc:def:dataType:ISO-19107:GM_Envelope']">
                      <xsl:if test="wrs:disjoint-envelopes($env,rim:Slot[@slotType='urn:ogc:def:dataType:ISO-19107:GM_Envelope']/wrs:ValueList/wrs:AnyValue/*) != 1">
                        <ctl:message>[FAILURE] Envelopes intersect (<xsl:value-of select="@id"/>)</ctl:message>
                        <ctl:fail/>
                      </xsl:if>
				  </xsl:if>
                </xsl:for-each>
              </xsl:otherwise>
            </xsl:choose>
		</code>
	</test>
    
    <test name="wrs:wrs-1.0.0-GetRecords-tc19.1">
      <param name="wrs.GetRecords.post.url"/>
      <assertion>
      The response to a GetRecords request that includes an ogc:Filter having a
      PropertyIsLike predicate must include the specified view of all matching 
      records. If a PropertyName value is not supplied, the predicate is evaluated 
      against all applicable record properties.
      </assertion>
		<code>
			<xsl:variable name="response">
				<request>
					<url>
						<xsl:value-of select="$wrs.GetRecords.post.url"/>
					</url>
                    <method>POST</method>
					<body>
<csw:GetRecords service="WRS" version="1.0.0" resultType="results">
  <csw:Query typeNames="rim:RegistryObject">
    <csw:ElementSetName>full</csw:ElementSetName>
    <csw:Constraint version="1.1.0">
      <ogc:Filter>
        <ogc:PropertyIsLike wildCard="*" singleChar="." escapeChar="\">
          <ogc:PropertyName>rim:Description/rim:LocalizedString/@value</ogc:PropertyName>
          <ogc:Literal>*lorem*</ogc:Literal>
        </ogc:PropertyIsLike>
      </ogc:Filter>
    </csw:Constraint>
  </csw:Query>
</csw:GetRecords>  
					</body>
					<p:XMLValidatingParser.WRS/>
				</request>
			</xsl:variable>
            <xsl:choose>
              <xsl:when test="not($response/*)">
                  <ctl:message>[FAILURE] Missing or invalid response entity.</ctl:message>
                  <ctl:fail/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:if test="count($response//csw:SearchResults/rim:RegistryObject) lt 3">
                  <ctl:message>[FAILURE] Expected at least 3 rim:RegistryObject elements with rim:Description values matching the expression "*lorem*".</ctl:message>
                  <ctl:fail/>
                </xsl:if>
              </xsl:otherwise>
            </xsl:choose>
		</code>
	</test>
    
    <test name="wrs:wrs-1.0.0-GetRecords-tc20.1">
      <param name="wrs.GetRecords.post.url"/>
      <assertion>
      The rim:Identifiable type cannot be queried. The response shall include 
      an exception having @exceptionCode = "wrs:InvalidRequest".
      </assertion>
		<code>
			<xsl:variable name="response">
				<request>
					<url>
						<xsl:value-of select="$wrs.GetRecords.post.url"/>
					</url>
                    <method>POST</method>
					<body>
<csw:GetRecords service="WRS" version="1.0.0" resultType="results">
  <csw:Query typeNames="rim:Identifiable">
    <csw:ElementSetName>brief</csw:ElementSetName>
    <csw:Constraint version="1.1.0">
      <ogc:Filter>
        <ogc:PropertyIsLike wildCard="*" singleChar="." escapeChar="\">
          <ogc:PropertyName>rim:Slot[@name="http://purl.org/dc/elements/1.1/subject"]/rim:ValueList/rim:Value</ogc:PropertyName>
          <ogc:Literal>*lorem*</ogc:Literal>
        </ogc:PropertyIsLike>
      </ogc:Filter>
    </csw:Constraint>
  </csw:Query>
</csw:GetRecords>  
					</body>
					<p:XMLValidatingParser.OWS/>
				</request>
			</xsl:variable>
            <xsl:choose>
              <xsl:when test="not($response/*)">
                  <ctl:message>[FAILURE] Missing or invalid response entity.</ctl:message>
                  <ctl:fail/>
              </xsl:when>
              <xsl:otherwise>
                  <ctl:call-test name="ctl:SchematronValidatingParser">
		            <ctl:with-param name="doc" select="$response"/>
		            <ctl:with-param name="schema">sch/wrs/1.0.0/ExceptionReport.sch</ctl:with-param>
		            <ctl:with-param name="phase">WRSInvalidRequestPhase</ctl:with-param>
	              </ctl:call-test>
              </xsl:otherwise>
            </xsl:choose>
		</code>
	</test>
    
    <test name="wrs:wrs-1.0.0-GetRecords-tc21.1">
      <param name="wrs.GetRecords.post.url"/>
      <assertion>
      The rim:Slot type cannot be queried. The response shall include an exception 
      having @exceptionCode = "wrs:InvalidRequest".
      </assertion>
		<code>
			<xsl:variable name="response">
				<request>
					<url>
						<xsl:value-of select="$wrs.GetRecords.post.url"/>
					</url>
                    <method>POST</method>
					<body>
<csw:GetRecords service="WRS" version="1.0.0" resultType="results">
  <csw:Query typeNames="rim:Slot">
    <csw:ElementSetName>brief</csw:ElementSetName>
  </csw:Query>
</csw:GetRecords>
					</body>
					<p:XMLValidatingParser.OWS/>
				</request>
			</xsl:variable>
            <xsl:choose>
              <xsl:when test="not($response/*)">
                  <ctl:message>[FAILURE] Missing or invalid response entity.</ctl:message>
                  <ctl:fail/>
              </xsl:when>
              <xsl:otherwise>
                  <ctl:call-test name="ctl:SchematronValidatingParser">
		            <ctl:with-param name="doc" select="$response"/>
		            <ctl:with-param name="schema">sch/wrs/1.0.0/ExceptionReport.sch</ctl:with-param>
		            <ctl:with-param name="phase">WRSInvalidRequestPhase</ctl:with-param>
	              </ctl:call-test>
              </xsl:otherwise>
            </xsl:choose>
		</code>
	</test>
    
    <test name="wrs:wrs-1.0.0-GetRecords-tc22.1">
      <param name="wrs.GetRecords.post.url"/>
      <assertion>
      The response to a GetRecords request that includes the startPosition 
      parameter must include the corresponding slice of the result set.
      </assertion>
      <comment>Pass if all of the following conditions are true: (1) the response 
      is schema valid; (2) the csw:SearchResults element contains exactly 5 
      rim:RegistryObject child elements; (3) csw:SearchResults/@nextRecord = 8.</comment>
      <link>csw-</link>
		<code>
			<xsl:variable name="response">
				<request>
					<url>
						<xsl:value-of select="$wrs.GetRecords.post.url"/>
					</url>
                    <method>POST</method>
					<body>
<csw:GetRecords service="WRS" version="1.0.0" resultType="results" startPosition="3" maxRecords="5">
  <csw:Query typeNames="rim:RegistryObject">
    <csw:ElementSetName>summary</csw:ElementSetName>
  </csw:Query>
</csw:GetRecords>
					</body>
					<p:XMLValidatingParser.WRS/>
				</request>
			</xsl:variable>
			
            <xsl:choose>
              <xsl:when test="not($response/*)">
                  <ctl:message>[FAILURE] Missing or invalid response entity.</ctl:message>
                  <ctl:fail/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:variable name="nSummaryRecord" select="count($response//csw:SearchResults/rim:RegistryObject)"/>
                <xsl:if test="nSummaryRecord != 5">
                  <ctl:message>[FAILURE] 5 rim:RegistryObject elements expected (<xsl:value-of select="$nSummaryRecord"/> returned).</ctl:message>
                  <ctl:fail/>
                </xsl:if>
                <xsl:if test="$response//csw:SearchResults/@numberOfRecordsReturned != 5">
                  <ctl:message>[FAILURE] @numberOfRecordsReturned != 5.</ctl:message>
                  <ctl:fail/>
                </xsl:if>
                <xsl:if test="$response//csw:SearchResults/@nextRecord != 8">
                  <ctl:message>[FAILURE] @nextRecord != 8.</ctl:message>
                  <ctl:fail/>
                </xsl:if>
              </xsl:otherwise>
            </xsl:choose>
		</code>
	</test>
    
    <test name="wrs:wrs-1.0.0-GetRecords-tc23.1">
      <param name="wrs.GetRecords.post.url"/>
      <assertion>
      The response to a GetRecords request that specifies maxRecords="0" must 
      not include any results.
      </assertion>
      <comment>Pass if all of the following conditions are true: 
      (1) the response is schema valid; 
      (2) the csw:SearchResults element is empty; 
      (3) csw:SearchResults/@numberOfRecordsMatched &gt; 10; 
      (4) csw:SearchResults/@nextRecord = 1
      </comment>
		<code>
			<xsl:variable name="response">
				<request>
					<url>
						<xsl:value-of select="$wrs.GetRecords.post.url"/>
					</url>
                    <method>POST</method>
					<body>
<csw:GetRecords service="WRS" version="1.0.0" resultType="results" maxRecords="0">
    <csw:Query typeNames="rim:RegistryObject">
      <csw:ElementName>@id</csw:ElementName>
      <csw:Constraint version="1.1.0">
        <ogc:Filter>
          <ogc:Not>
           <ogc:BBOX>
             <ogc:PropertyName>rim:Slot[@name='http://purl.org/dc/terms/spatial']/wrs:ValueList/wrs:AnyValue</ogc:PropertyName>
             <gml:Envelope srsName="urn:ogc:def:crs:EPSG:4326">
               <gml:lowerCorner>60.0 12.0</gml:lowerCorner>
               <gml:upperCorner>70.0 20.0</gml:upperCorner>
             </gml:Envelope>
           </ogc:BBOX>
         </ogc:Not>
       </ogc:Filter>
     </csw:Constraint>
   </csw:Query>
</csw:GetRecords>
					</body>
					<p:XMLValidatingParser.WRS/>
				</request>
			</xsl:variable>
			
            <xsl:choose>
              <xsl:when test="not($response/*)">
                  <ctl:message>[FAILURE] Missing or invalid response entity.</ctl:message>
                  <ctl:fail/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:variable name="nRecords" select="count($response//csw:SearchResults/*)"/>
                <xsl:if test="$nRecords gt 0">
                  <ctl:message>[FAILURE] csw:SearchResults should be empty (<xsl:value-of select="$nRecords"/> included)</ctl:message>
                  <ctl:fail/>
                </xsl:if>
                <xsl:if test="xsd:integer($response//csw:SearchResults/@numberOfRecordsMatched) le 1">
                  <ctl:message>[FAILURE] Expected @numberOfRecordsMatched &gt; 1</ctl:message>
                  <ctl:fail/>
                </xsl:if>
                <xsl:if test="$response//csw:SearchResults/@nextRecord != 1">
                  <ctl:message>[FAILURE] Expected csw:SearchResults/@nextRecord = 1.</ctl:message>
                  <ctl:fail/>
                </xsl:if>
              </xsl:otherwise>
            </xsl:choose>
		</code>
	</test>
    
    <test name="wrs:wrs-1.0.0-GetRecords-tc24.1">
      <param name="wrs.GetRecords.post.url"/>
      <assertion>
      The response to a GetRecords request that specifies resultType="validate"
      (asynchronous processing) must include an exception report with code 
      "wrs:NotSupported".
      </assertion>
		<code>
			<xsl:variable name="response">
				<request>
					<url>
						<xsl:value-of select="$wrs.GetRecords.post.url"/>
					</url>
                    <method>POST</method>
					<body>
<csw:GetRecords service="WRS" version="1.0.0" resultType="validate">
  <csw:Query typeNames="rim:RegistryObject">
    <csw:ElementSetName>full</csw:ElementSetName>
    <csw:Constraint version="1.1.0">
      <ogc:Filter>
        <ogc:PropertyIsLike wildCard="*" singleChar="." escapeChar="\">
          <ogc:PropertyName>rim:Description/rim:LocalizedString/@value</ogc:PropertyName>
          <ogc:Literal>*lorem*</ogc:Literal>
        </ogc:PropertyIsLike>
      </ogc:Filter>
    </csw:Constraint>
  </csw:Query>
</csw:GetRecords>  
					</body>
					<p:XMLValidatingParser.WRS/>
				</request>
			</xsl:variable>
            <xsl:choose>
              <xsl:when test="not($response/*)">
                  <ctl:message>[FAILURE] Missing or invalid response entity.</ctl:message>
                  <ctl:fail/>
              </xsl:when>
              <xsl:otherwise>
                <ctl:call-test name="ctl:SchematronValidatingParser">
		            <ctl:with-param name="doc" select="$response"/>
		            <ctl:with-param name="schema">sch/wrs/1.0.0/ExceptionReport.sch</ctl:with-param>
		            <ctl:with-param name="phase">WRSNotSupportedPhase</ctl:with-param>
	            </ctl:call-test>
              </xsl:otherwise>
            </xsl:choose>
		</code>
	</test>
    
    <test name="wrs:wrs-1.0.0-GetRecords-tc25.1">
      <param name="wrs.GetRecords.post.url"/>
      <assertion>
      The response to a GetRecords request that specifies an unsupported 
      outputFormat value must include an exception report.
      </assertion>
      <comment>Pass if all of the following conditions are true: (1) the response 
      is a valid ows:ExceptionReport; (2) the reported exceptionCode is 
      "InvalidParameterValue".</comment>
		<code>
			<xsl:variable name="response">
				<request>
					<url>
						<xsl:value-of select="$wrs.GetRecords.post.url"/>
					</url>
                    <method>POST</method>
					<body>
<csw:GetRecords service="WRS" version="1.0.0" resultType="results" outputFormat="application/xhtml+xml" maxRecords="5">
  <csw:Query typeNames="rim:RegistryObject">
    <csw:ElementSetName>summary</csw:ElementSetName>
  </csw:Query>
</csw:GetRecords>
					</body>
					<p:XMLValidatingParser.OWS/>
				</request>
			</xsl:variable>
			
            <xsl:choose>
              <xsl:when test="not($response/*)">
                  <ctl:message>[FAILURE] Missing or invalid response entity.</ctl:message>
                  <ctl:fail/>
              </xsl:when>
              <xsl:otherwise>
                <ctl:call-test name="ctl:SchematronValidatingParser">
		            <ctl:with-param name="doc" select="$response"/>
		            <ctl:with-param name="schema">sch/wrs/1.0.0/ExceptionReport.sch</ctl:with-param>
		            <ctl:with-param name="phase">InvalidParameterValuePhase</ctl:with-param>
	            </ctl:call-test>
              </xsl:otherwise>
            </xsl:choose>
		</code>
	</test>
    
    <test name="wrs:wrs-1.0.0-GetRecords-tc26.1">
      <param name="wrs.GetRecords.post.url"/>
      <assertion>
      The response to a GetRecords request that specifies an unsupported 
      outputSchema value must include an exception report.
      </assertion>
      <comment>Pass if all of the following conditions are true: (1) the response 
      is a valid ows:ExceptionReport; (2) the reported exceptionCode is 
      "InvalidParameterValue".</comment>
		<code>
			<xsl:variable name="response">
				<request>
					<url>
						<xsl:value-of select="$wrs.GetRecords.post.url"/>
					</url>
                    <method>POST</method>
					<body>
<csw:GetRecords service="WRS" version="1.0.0" resultType="results" outputSchema="http://www.w3.org/2005/Atom" maxRecords="5">
  <csw:Query typeNames="rim:RegistryObject">
    <csw:ElementSetName>summary</csw:ElementSetName>
  </csw:Query>
</csw:GetRecords>
					</body>
					<p:XMLValidatingParser.OWS/>
				</request>
			</xsl:variable>
			
            <xsl:choose>
              <xsl:when test="not($response/*)">
                  <ctl:message>[FAILURE] Missing or invalid response entity.</ctl:message>
                  <ctl:fail/>
              </xsl:when>
              <xsl:otherwise>
                <ctl:call-test name="ctl:SchematronValidatingParser">
		            <ctl:with-param name="doc" select="$response"/>
		            <ctl:with-param name="schema">sch/wrs/1.0.0/ExceptionReport.sch</ctl:with-param>
		            <ctl:with-param name="phase">InvalidParameterValuePhase</ctl:with-param>
	            </ctl:call-test>
              </xsl:otherwise>
            </xsl:choose>
		</code>
	</test>
	
</ctl:package>
   <ctl:package xmlns="http://www.occamlab.com/ctl" xmlns:p="http://teamengine.sourceforge.net/parsers" xmlns:csw="http://www.opengis.net/cat/csw/1.0.0" xmlns:gml="http://www.opengis.net/gml" xmlns:gmd="http://www.isotc211.org/2005/gmd" xmlns:gco="http://www.isotc211.org/2005/gco">

    <ctl:test name="wrs:GetRepositoryItem-GET">
      <param name="wrs.capabilities.doc"/>
      <ctl:assertion>
      Run test group for GetRepositoryItem requests using the GET method.
      </ctl:assertion>
      <ctl:code>
        <xsl:variable name="wrs.GetRepositoryItem.get.url">
		    <xsl:value-of select="$wrs.capabilities.doc//ows:OperationsMetadata/ows:Operation[@name='GetRepositoryItem']/ows:DCP/ows:HTTP/ows:Get/@xlink:href"/>
		</xsl:variable>
        <xsl:variable name="wrs.GetRecords.post.url">
            <xsl:value-of select="$wrs.capabilities.doc//ows:OperationsMetadata/ows:Operation[@name='GetRecords']/ows:DCP/ows:HTTP/ows:Post/@xlink:href"/>
	    </xsl:variable>
        <ctl:message>Target endpoint is <xsl:value-of select="$wrs.GetRepositoryItem.get.url"/></ctl:message>
        
	  <ctl:call-test name="wrs:wrs-1.0.0-GetRepositoryItem-tc1.1">
		<ctl:with-param name="wrs.GetRepositoryItem.get.url" select="$wrs.GetRepositoryItem.get.url"/>
		<ctl:with-param name="wrs.GetRecords.post.url" select="$wrs.GetRecords.post.url"/>
	  </ctl:call-test>
      </ctl:code>
    </ctl:test>
   
    <ctl:test name="wrs:wrs-1.0.0-GetRepositoryItem-tc1.1">
		<ctl:param name="wrs.GetRepositoryItem.get.url"/>
		<ctl:param name="wrs.GetRecords.post.url"/>		
		<ctl:assertion>Validate that the catalogue correctly stores ISO 19139 (Dataset) objects.</ctl:assertion>
		<ctl:comment>Pass if the test data instance is present and has the correct values for the given 
		slots and the associated repository item is also present and correct.</ctl:comment>
		<ctl:link>OGC 05-008</ctl:link>
		<ctl:code>

			<!-- Get the ISO 19139 Dataset (from the test suite test data) -->
			<xsl:variable name="getrecords.response">
				<ctl:request>
					<ctl:url>
						<xsl:value-of select="$wrs.GetRecords.post.url"/>
					</ctl:url>
					<ctl:method>POST</ctl:method>
					<ctl:body>
						<csw:GetRecords xmlns:csw="http://www.opengis.net/cat/csw/2.0.2" xmlns:ogc="http://www.opengis.net/ogc" outputFormat="application/xml; charset=UTF-8" resultType="results" startPosition="1" maxRecords="5">
							<csw:Query typeNames="wrs:ExtrinsicObject">
							   <csw:ElementSetName typeNames="wrs:ExtrinsicObject">full</csw:ElementSetName>
							   <csw:Constraint version="1.1.0">
									<ogc:Filter>
										<ogc:And>
											<ogc:PropertyIsEqualTo>
												<ogc:PropertyName>@objectType</ogc:PropertyName>
												<ogc:Literal>urn:ogc:def:ebRIM-ObjectType:OGC:Dataset</ogc:Literal>
											</ogc:PropertyIsEqualTo>
											<ogc:BBOX>
												<ogc:PropertyName>rim:Slot[@name="http://purl.org/dc/terms/spatial"]/wrs:ValueList/wrs:AnyValue[1]</ogc:PropertyName>
												<gml:Envelope srsName="urn:ogc:def:crs:EPSG:4326">
													<gml:lowerCorner>44.0 6.5</gml:lowerCorner>
													<gml:upperCorner>49.5 10.0</gml:upperCorner>
												</gml:Envelope>
											</ogc:BBOX>										
										</ogc:And>
									</ogc:Filter>
								</csw:Constraint>
							</csw:Query>
						</csw:GetRecords>
					</ctl:body>
				</ctl:request>
			</xsl:variable>

			<xsl:variable name="object.id"><xsl:copy-of select="string($getrecords.response//wrs:ExtrinsicObject[1]/@id)"/></xsl:variable>

			<!-- Get the associated repository item for the dataset -->
			<xsl:variable name="repository.item">
				<ctl:request>
					<ctl:url>
						<xsl:value-of select="$wrs.GetRepositoryItem.get.url"/>
					</ctl:url>
					<ctl:method>GET</ctl:method>
					<ctl:param name="REQUEST">GetRepositoryItem</ctl:param>
					<ctl:param name="SERVICE">WRS</ctl:param>
					<ctl:param name="VERSION">1.0.0</ctl:param>
					<ctl:param name="ID"><xsl:value-of select="escape-html-uri($object.id)"/></ctl:param>
				</ctl:request>
			</xsl:variable>

            <xsl:choose>
              <xsl:when test="($object.id = '') or not($repository.item//gmd:DS_Dataset)">
                  <ctl:message>[FAILURE] Missing or invalid response entity.</ctl:message>
                  <ctl:fail/>
              </xsl:when>
              <xsl:otherwise>
                <!-- Check for correctness of the extrinsic object -->
                <xsl:variable name="object.type" select="$getrecords.response//wrs:ExtrinsicObject/@objectType"/>
                <xsl:if test="not($object.type = 'urn:ogc:def:ebRIM-ObjectType:OGC:Dataset')">
                    <ctl:message>[FAILURE] Expected @objectType of "urn:ogc:def:ebRIM-ObjectType:OGC:Dataset" on the ExtrinsicObject, yet found <xsl:value-of select="$object.type"/></ctl:message>
                    <ctl:fail/>
				</xsl:if>
                <xsl:if test="not($getrecords.response//wrs:ExtrinsicObject/wrs:repositoryItemRef/@xlink:href)">
                    <ctl:message>[FAILURE] Expected a child wrs:repositoryItemRef/@xlink:href on the ExtrinsicObject.</ctl:message>
                    <ctl:fail/>
				</xsl:if>				
                <!-- Check for correctness of the repository item -->
                <xsl:if test="not($repository.item//gmd:DS_Dataset/gmd:has/gmd:MD_Metadata)">
                  <ctl:message>[FAILURE] Expected the repository item to be gmd:DS_Dataset document containing gmd:MD_Metadata under the "http://www.isotc211.org/2005/gmd" namespace.</ctl:message>
                  <ctl:fail/>
                </xsl:if>
                <xsl:variable name="apos"><xsl:text>'</xsl:text></xsl:variable>
                <xsl:variable name="title" select="$repository.item//gmd:identificationInfo/gmd:MD_DataIdentification/gmd:citation/gmd:CI_Citation/gmd:title/gco:CharacterString"/>
                <xsl:if test="not($title = concat('wa',$apos,' Hol mu',$apos,'mey puS je neH ghaj qo',$apos,' Hoch'))">
                    <ctl:message>[FAILURE] Expected the repository item to contain a title of "wa' Hol mu'mey puS je neH ghaj qo' Hoch", yet found <xsl:value-of select="$title"/></ctl:message>
                    <ctl:fail/>
				</xsl:if>              
			  </xsl:otherwise>
            </xsl:choose>

		</ctl:code>
	</ctl:test>
	
</ctl:package>

   <ctl:test name="wrs:Level-1">
      <ctl:param name="wrs.capabilities.doc"/>
      <ctl:assertion>The service under test implements all mandatory search and retrieval operations.</ctl:assertion>
      <ctl:code>
        <xsl:variable name="wrs.GetCapabilities.get.url">
		    <xsl:value-of select="$wrs.capabilities.doc//ows:OperationsMetadata/ows:Operation[@name='GetCapabilities']/ows:DCP/ows:HTTP/ows:Get/@xlink:href"/>
		</xsl:variable>
        <xsl:if test="string-length($wrs.GetCapabilities.get.url) gt 0">
          <ctl:call-test name="wrs:GetCapabilities-GET">
            <ctl:with-param name="wrs.capabilities.doc" select="$wrs.capabilities.doc"/>
          </ctl:call-test>
        </xsl:if>
          <ctl:call-test name="wrs:DescribeRecord-POST">
            <ctl:with-param name="wrs.capabilities.doc" select="$wrs.capabilities.doc"/>
          </ctl:call-test>
          <ctl:call-test name="wrs:GetRecordById-GET">
            <ctl:with-param name="wrs.capabilities.doc" select="$wrs.capabilities.doc"/>
          </ctl:call-test>
          <ctl:call-test name="wrs:GetRecords-POST">
            <ctl:with-param name="wrs.capabilities.doc" select="$wrs.capabilities.doc"/>
          </ctl:call-test>
          <ctl:call-test name="wrs:GetRepositoryItem-GET">
            <ctl:with-param name="wrs.capabilities.doc" select="$wrs.capabilities.doc"/>
          </ctl:call-test>          
      </ctl:code>
   </ctl:test>
</ctl:package>

	<ctl:suite name="wrs:wrs-1.0-conformance" version="1.0.0.1">
		  <ctl:title>WRS 1.0 Conformance Test Suite (1.0.0.1)</ctl:title>
		  <ctl:description>Verify that a WRS catalogue implementation satisfies all applicable constraints.</ctl:description>
          <ctl:link>docs/wrs/1.0/index.html</ctl:link>
          <ctl:link>data/data-wrs-1.0.zip</ctl:link>
		  <ctl:starting-test>wrs:Main</ctl:starting-test>
	</ctl:suite>

   <ctl:test name="wrs:Main">
      <ctl:assertion>The service capabilities document must be valid and complete.</ctl:assertion>
      <ctl:code>
         <xsl:variable name="form-data">
            <ctl:form method="POST" height="640" width="800">
             <h2>WRS catalogue profile</h2>
             <div class="info-box" style="background:#F0F8FF" bgcolor="#F0F8FF">
               <p>The behaviour of a WRS catalogue implementation is checked against
               the following specifications:</p>
               <ul>
                 <li>Web Registry Service (WRS) - Part 1: ebRIM profile of CSW [OGC 07-110r1]</li>
                 <li>OASIS ebXML Registry Information Model Version 3.0 [regrep-rim-3.0-os]</li>
                 <li>OGC Catalogue Services Specification 2.0.2 [OGC 07-006r1]</li>
                 <li>OpenGIS Web Services Common Specification 1.0.0 [OGC 05-008]</li>
                 <li>Filter Encoding Implementation Specification 1.1.0 [OGC 04-095]</li>
                 <li>OpenGIS Geography Markup Language (GML) Implementation Specification, Version 3.1 [OGC 03-105r1,ISO/CD 19136]</li>
               </ul>
               <p>Two conformance levels are defined:</p>
               <ul>
                 <li>WRS Level 0 (Generic CSW): Covers mandatory search and retrieval requests based 
                 on the generic csw:Record format.</li>
                 <li>WRS Level 1 (Minimal Discovery): Covers mandatory search and retrieval 
                 requests based on the ebRIM 3.0 information model.</li>
               </ul>
             </div>
             <fieldset style="background:#ccffff">
               <legend style="font-family: sans-serif; color: #000099; background-color:#F0F8FF; border:1px solid;">Implementation under test</legend>
               <p>
                 <input id="radio_url" type="radio" name="source" value="url" checked="checked"/>
                 <label class="form-label" for="url">Fetch capabilities document</label><br/>
                 <input id="url" name="url" size="64" type="text" value="http://" onChange="radio_url.checked = true;"/>
               </p>
               <p>
                 <input id="radio_file" type="radio" name="source" value="file"/>
                 <label class="form-label" for="file">Upload capabilities document</label><br/>
                 <input id="file" size="50" type="file" name="file" onChange="radio_file.checked = true;"/>
               </p>
               <p>
                 <label class="form-label" for="level">Conformance level: </label>
                 <input id="level-0" type="radio" name="level" value="level-0"/>
                 <label class="form-label" for="level-0"> WRS Level 0 | </label>
                 <input id="level-1" type="radio" name="level" value="level-1" checked="checked"/>
                 <label class="form-label" for="level-1"> WRS Level 1</label>
               </p>
             </fieldset>
             <p>
               <input class="form-button" type="submit" value="Start"/>
               <input class="form-button" type="reset" value="Clear"/>
             </p>
           </ctl:form>
         </xsl:variable>

        <xsl:variable name="src" select="$form-data/values/value[@key='source']"/>
        <xsl:variable name="url" select="$form-data/values/value[@key='url']"/>
        <xsl:variable name="conformance.level" select="$form-data/values/value[@key='level']"/>

        <xsl:variable name="capabilities.doc">
          <xsl:choose>
            <xsl:when test="(compare($src, 'url') = 0) and (string-length(substring-after($url,'//')) gt 0)">
                <ctl:request>
                    <ctl:url>
                        <xsl:value-of select="$url"/>
                    </ctl:url>
                    <ctl:method>GET</ctl:method>
                </ctl:request>
            </xsl:when>
            <xsl:when test="compare($src, 'file') = 0">
                <xsl:copy-of select="doc(concat('file:///',$form-data/values/value/ctl:file-entry/@full-path))"/>
            </xsl:when>
            <xsl:otherwise>null</xsl:otherwise>
		  </xsl:choose>
        </xsl:variable>

		<xsl:choose>
            <xsl:when test="compare($capabilities.doc, 'null') = 0">
                <ctl:message>[FAILURE] Did not obtain capabilities document using provided form data. Skipping remaining tests.</ctl:message>
                <ctl:fail/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:variable name="SmokeTest.result">
                <ctl:call-test name="wrs:SmokeTest">
                  <ctl:with-param name="wrs.capabilities.doc" select="$capabilities.doc"/>
                </ctl:call-test>
              </xsl:variable>
              <xsl:if test="not($SmokeTest.result/*)">
                <ctl:call-test name="wrs:Level-0">
                  <ctl:with-param name="wrs.capabilities.doc" select="$capabilities.doc"/>
                </ctl:call-test>
                <xsl:if test="$conformance.level = 'level-1'">
                  <ctl:call-test name="wrs:Level-1">
                    <ctl:with-param name="wrs.capabilities.doc" select="$capabilities.doc"/>
                  </ctl:call-test>
                </xsl:if>
              </xsl:if>
            </xsl:otherwise>
		 </xsl:choose>
      </ctl:code>
    </ctl:test>

    <ctl:test name="wrs:SmokeTest">
		<ctl:param name="wrs.capabilities.doc"/>
		<ctl:assertion>Confirm that the IUT is ready to undergo testing.</ctl:assertion>
        <ctl:comment>
        Check all of the following conditions:
        (1) the service is available;
        (2) the capabilities document is schema-valid;
        (3) test data have been loaded.
        If any of these checks fail, the test run is aborted.
        </ctl:comment>
		<ctl:code>
            <xsl:variable name="GetCapabilities.get.endpoint">
		        <xsl:value-of select="$wrs.capabilities.doc//ows:OperationsMetadata/ows:Operation[@name='GetCapabilities']/ows:DCP/ows:HTTP/ows:Get/@xlink:href"/>
		    </xsl:variable>
            <xsl:variable name="GetRecordById.get.endpoint">
			    <xsl:value-of select="$wrs.capabilities.doc//ows:OperationsMetadata/ows:Operation[@name='GetRecordById']/ows:DCP/ows:HTTP/ows:Get/@xlink:href"/>
		    </xsl:variable>
            <xsl:choose>
              <xsl:when test="not(starts-with($GetCapabilities.get.endpoint,'http'))">
                  <ctl:message>
                  [FAILURE] HTTP endpoint for GetCapabilities using GET method not found in provided capabilities document.
                  </ctl:message>
                  <ctl:fail/>
              </xsl:when>
              <xsl:when test="not(starts-with($GetRecordById.get.endpoint,'http'))">
                  <ctl:message>
                  [FAILURE] HTTP endpoint for GetRecordById using GET method not found in  provided capabilities document.
                  </ctl:message>
                  <ctl:fail/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:variable name="GetCapabilitiesRsp">
				  <ctl:request>
                    <ctl:url>
						<xsl:value-of select="$GetCapabilities.get.endpoint"/>
					</ctl:url>
					<ctl:method>GET</ctl:method>
					<ctl:param name="service">WRS</ctl:param>
					<ctl:param name="request">GetCapabilities</ctl:param>
					<tep:XMLValidatingParser.WRS/>
				  </ctl:request>
			    </xsl:variable>

                <xsl:variable name="GetRecordByIdRsp">
                  <ctl:request>
                    <ctl:url>
						<xsl:value-of select="$GetRecordById.get.endpoint"/>
					</ctl:url>
					<ctl:method>GET</ctl:method>
					<ctl:param name="service">WRS</ctl:param>
					<ctl:param name="version">1.0.0</ctl:param>
					<ctl:param name="request">GetRecordById</ctl:param>
                    <ctl:param name="id">urn:uuid:94bc9c83-97f6-4b40-9eb8-a8e8787a5c63,urn:uuid:6a3de50b-fa66-4b58-a0e6-ca146fdd18d4</ctl:param>
					<tep:XMLValidatingParser.WRS/>
				  </ctl:request>
			    </xsl:variable>

                <xsl:if test="not($GetCapabilitiesRsp/wrs:Capabilities)">
                  <ctl:message>
                  [FAILURE] The GetCapabilities response entity is NOT a valid wrs:Capabilities document.
                  </ctl:message>
                  <ctl:fail/>
                </xsl:if>
                <xsl:if test="count($GetRecordByIdRsp/csw:GetRecordByIdResponse/*) != 2">
                  <ctl:message>
                  [FAILURE] The GetRecordByIdResponse entity does NOT include two matching test data items ("urn:uuid:94bc9c83-97f6-4b40-9eb8-a8e8787a5c63", "urn:uuid:6a3de50b-fa66-4b58-a0e6-ca146fdd18d4").
                  Have the test data been loaded?
                  </ctl:message>
                  <ctl:fail/>
                </xsl:if>
              </xsl:otherwise>
            </xsl:choose>
		</ctl:code>
	</ctl:test>
</ctl:package>