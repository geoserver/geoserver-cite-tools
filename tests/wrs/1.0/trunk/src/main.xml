<?xml version="1.0" encoding="UTF-8"?>
<ctl:package
  xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
  xmlns:ctl="http://www.occamlab.com/ctl"
  xmlns:ocp="http://www.occamlab.com/te/parsers"
  xmlns:tep="http://teamengine.sourceforge.net/parsers"
  xmlns:saxon="http://saxon.sf.net/"
  xmlns:wrs="http://www.opengis.net/cat/wrs/1.0"
  xmlns:rim="urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0"
  xmlns:csw="http://www.opengis.net/cat/csw/2.0.2"
  xmlns:ows="http://www.opengis.net/ows"
  xmlns:dc="http://purl.org/dc/elements/1.1/"
  xmlns:dct="http://purl.org/dc/terms/"
  xmlns:xi="http://www.w3.org/2001/XInclude"
  xmlns:xlink="http://www.w3.org/1999/xlink"
  xmlns:xsd="http://www.w3.org/2001/XMLSchema">

    <xi:include href="common.xml"/>
    <xi:include href="level-0/L0-main.xml"/>
    <xi:include href="level-1/L1-main.xml"/>

	<ctl:suite name="wrs:wrs-1.0-conformance" version="1.0.0.1">
		  <ctl:title>WRS 1.0 Conformance Test Suite (1.0.0.1)</ctl:title>
		  <ctl:description>Verify that a WRS catalogue implementation satisfies all applicable constraints.</ctl:description>
          <ctl:link>docs/wrs/1.0/index.html</ctl:link>
          <ctl:link>data/data-wrs-1.0.zip</ctl:link>
		  <ctl:starting-test>wrs:Main</ctl:starting-test>
	</ctl:suite>

   <ctl:test name="wrs:Main">
      <ctl:assertion>The service capabilities document must be valid and complete.</ctl:assertion>
      <ctl:code>
         <xsl:variable name="form-data">
            <ctl:form method="POST" height="640" width="800">
             <h2>WRS catalogue profile</h2>
             <div class="info-box" style="background:#F0F8FF" bgcolor="#F0F8FF">
               <p>The behaviour of a WRS catalogue implementation is checked against
               the following specifications:</p>
               <ul>
                 <li>Web Registry Service (WRS) - Part 1: ebRIM profile of CSW [OGC 07-110r1]</li>
                 <li>OASIS ebXML Registry Information Model Version 3.0 [regrep-rim-3.0-os]</li>
                 <li>OGC Catalogue Services Specification 2.0.2 [OGC 07-006r1]</li>
                 <li>OpenGIS Web Services Common Specification 1.0.0 [OGC 05-008]</li>
                 <li>Filter Encoding Implementation Specification 1.1.0 [OGC 04-095]</li>
                 <li>OpenGIS Geography Markup Language (GML) Implementation Specification, Version 3.1 [OGC 03-105r1,ISO/CD 19136]</li>
               </ul>
               <p>Two conformance levels are defined:</p>
               <ul>
                 <li>WRS Level 0 (Generic CSW): Covers mandatory search and retrieval requests based 
                 on the generic csw:Record format.</li>
                 <li>WRS Level 1 (Minimal Discovery): Covers mandatory search and retrieval 
                 requests based on the ebRIM 3.0 information model.</li>
               </ul>
             </div>
             <fieldset style="background:#ccffff">
               <legend style="font-family: sans-serif; color: #000099; background-color:#F0F8FF; border:1px solid;">Implementation under test</legend>
               <p>
                 <input id="radio_url" type="radio" name="source" value="url" checked="checked" />
                 <label class="form-label" for="url">Fetch capabilities document</label><br />
                 <input id="url" name="url" size="64" type="text" value="http://" onChange="radio_url.checked = true;"/>
               </p>
               <p>
                 <input id="radio_file" type="radio" name="source" value="file" />
                 <label class="form-label" for="file">Upload capabilities document</label><br />
                 <input id="file" size="50" type="file" name="file" onChange="radio_file.checked = true;"/>
               </p>
               <p>
                 <label class="form-label" for="level">Conformance level: </label>
                 <input id="level-0" type="radio" name="level" value="level-0" />
                 <label class="form-label" for="level-0"> WRS Level 0 | </label>
                 <input id="level-1" type="radio" name="level" value="level-1" checked="checked" />
                 <label class="form-label" for="level-1"> WRS Level 1</label>
               </p>
             </fieldset>
             <p>
               <input class="form-button" type="submit" value="Start"/>
               <input class="form-button" type="reset" value="Clear"/>
             </p>
           </ctl:form>
         </xsl:variable>

        <xsl:variable name="src" select="$form-data/values/value[@key='source']"/>
        <xsl:variable name="url" select="$form-data/values/value[@key='url']"/>
        <xsl:variable name="conformance.level" select="$form-data/values/value[@key='level']"/>

        <xsl:variable name="capabilities.doc">
          <xsl:choose>
            <xsl:when test="(compare($src, 'url') = 0) and (string-length(substring-after($url,'//')) gt 0)">
                <ctl:request>
                    <ctl:url>
                        <xsl:value-of select="$url"/>
                    </ctl:url>
                    <ctl:method>GET</ctl:method>
                </ctl:request>
            </xsl:when>
            <xsl:when test="compare($src, 'file') = 0">
                <xsl:copy-of select="doc(concat('file:///',$form-data/values/value/ctl:file-entry/@full-path))" />
            </xsl:when>
            <xsl:otherwise>null</xsl:otherwise>
		  </xsl:choose>
        </xsl:variable>

		<xsl:choose>
            <xsl:when test="compare($capabilities.doc, 'null') = 0">
                <ctl:message>[FAILURE] Did not obtain capabilities document using provided form data. Skipping remaining tests.</ctl:message>
                <ctl:fail/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:variable name="SmokeTest.result">
                <ctl:call-test name="wrs:SmokeTest">
                  <ctl:with-param name="wrs.capabilities.doc" select="$capabilities.doc"/>
                </ctl:call-test>
              </xsl:variable>
              <xsl:if test="not($SmokeTest.result/*)">
                <ctl:call-test name="wrs:Level-0">
                  <ctl:with-param name="wrs.capabilities.doc" select="$capabilities.doc"/>
                </ctl:call-test>
                <xsl:if test="$conformance.level = 'level-1'">
                  <ctl:call-test name="wrs:Level-1">
                    <ctl:with-param name="wrs.capabilities.doc" select="$capabilities.doc"/>
                  </ctl:call-test>
                </xsl:if>
              </xsl:if>
            </xsl:otherwise>
		 </xsl:choose>
      </ctl:code>
    </ctl:test>

    <ctl:test name="wrs:SmokeTest">
		<ctl:param name="wrs.capabilities.doc"/>
		<ctl:assertion>Confirm that the IUT is ready to undergo testing.</ctl:assertion>
        <ctl:comment>
        Check all of the following conditions:
        (1) the service is available;
        (2) the capabilities document is schema-valid;
        (3) test data have been loaded.
        If any of these checks fail, the test run is aborted.
        </ctl:comment>
		<ctl:code>
            <xsl:variable name="GetCapabilities.get.endpoint">
		        <xsl:value-of select="$wrs.capabilities.doc//ows:OperationsMetadata/ows:Operation[@name='GetCapabilities']/ows:DCP/ows:HTTP/ows:Get/@xlink:href"/>
		    </xsl:variable>
            <xsl:variable name="GetRecordById.get.endpoint">
			    <xsl:value-of select="$wrs.capabilities.doc//ows:OperationsMetadata/ows:Operation[@name='GetRecordById']/ows:DCP/ows:HTTP/ows:Get/@xlink:href"/>
		    </xsl:variable>
            <xsl:choose>
              <xsl:when test="not(starts-with($GetCapabilities.get.endpoint,'http'))">
                  <ctl:message>
                  [FAILURE] HTTP endpoint for GetCapabilities using GET method not found in provided capabilities document.
                  </ctl:message>
                  <ctl:fail />
              </xsl:when>
              <xsl:when test="not(starts-with($GetRecordById.get.endpoint,'http'))">
                  <ctl:message>
                  [FAILURE] HTTP endpoint for GetRecordById using GET method not found in  provided capabilities document.
                  </ctl:message>
                  <ctl:fail />
              </xsl:when>
              <xsl:otherwise>
                <xsl:variable name="GetCapabilitiesRsp">
				  <ctl:request>
                    <ctl:url>
						<xsl:value-of select="$GetCapabilities.get.endpoint"/>
					</ctl:url>
					<ctl:method>GET</ctl:method>
					<ctl:param name="service">WRS</ctl:param>
					<ctl:param name="request">GetCapabilities</ctl:param>
					<tep:XMLValidatingParser.WRS/>
				  </ctl:request>
			    </xsl:variable>

                <xsl:variable name="GetRecordByIdRsp">
                  <ctl:request>
                    <ctl:url>
						<xsl:value-of select="$GetRecordById.get.endpoint"/>
					</ctl:url>
					<ctl:method>GET</ctl:method>
					<ctl:param name="service">WRS</ctl:param>
					<ctl:param name="version">1.0.0</ctl:param>
					<ctl:param name="request">GetRecordById</ctl:param>
                    <ctl:param name="id">urn:uuid:94bc9c83-97f6-4b40-9eb8-a8e8787a5c63,urn:uuid:6a3de50b-fa66-4b58-a0e6-ca146fdd18d4</ctl:param>
					<tep:XMLValidatingParser.WRS/>
				  </ctl:request>
			    </xsl:variable>

                <xsl:if test="not($GetCapabilitiesRsp/wrs:Capabilities)">
                  <ctl:message>
                  [FAILURE] The GetCapabilities response entity is NOT a valid wrs:Capabilities document.
                  </ctl:message>
                  <ctl:fail/>
                </xsl:if>
                <xsl:if test="count($GetRecordByIdRsp/csw:GetRecordByIdResponse/*) != 2">
                  <ctl:message>
                  [FAILURE] The GetRecordByIdResponse entity does NOT include two matching test data items ("urn:uuid:94bc9c83-97f6-4b40-9eb8-a8e8787a5c63", "urn:uuid:6a3de50b-fa66-4b58-a0e6-ca146fdd18d4").
                  Have the test data been loaded?
                  </ctl:message>
                  <ctl:fail/>
                </xsl:if>
              </xsl:otherwise>
            </xsl:choose>
		</ctl:code>
	</ctl:test>
</ctl:package>

