<?xml version="1.0" encoding="UTF-8"?><ctl:package xmlns="http://www.w3.org/2001/XMLSchema" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:ctl="http://www.occamlab.com/ctl" xmlns:parsers="http://www.occamlab.com/te/parsers" xmlns:myparsers="http://teamengine.sourceforge.net/parsers" xmlns:saxon="http://saxon.sf.net/" xmlns:wfs="http://www.opengis.net/wfs" xmlns:sf="http://cite.opengeospatial.org/gmlsf" xmlns:ows="http://www.opengis.net/ows" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xsd="http://www.w3.org/2001/XMLSchema">

	<ctl:package xmlns:gml="http://www.opengis.net/gml" xmlns:ogc="http://www.opengis.net/ogc">

        <!-- Sample usage:
    (1)
    <ctl:call-test name="ctl:assert-xpath">
                <ctl:with-param name="expr">/wfs:WFS_Capabilities</ctl:with-param>
                <ctl:with-param name="doc" select="$doc"/>
    </ctl:call-test>
    (2)
    <xsl:variable name="expression">/wfs:WFS_Capabilities</xsl:variable>
        <ctl:call-test name="ctl:assert-xpath">
            <ctl:with-param name="expr" select="$expression"/>
            <ctl:with-param name="doc" select="$doc"/>
        </ctl:call-test>
    -->
        <ctl:test name="ctl:assert-xpath">
                <ctl:param name="expr">An XPath expression</ctl:param>
                <ctl:param name="doc">An XML document</ctl:param>
                <ctl:assertion>
        Evaluates the given XPath expression against the input document and
        returns a boolean result according to the XPath specification (see
        http://www.w3.org/TR/xpath#section-Boolean-Functions).
        </ctl:assertion>
                <ctl:code>
                        <xsl:for-each select="$doc">
                                <xsl:choose>
                                        <xsl:when test="saxon:evaluate($expr)"/>
                                        <xsl:otherwise>
                                                <ctl:message>The expression '<xsl:value-of select="$expr"/>' is false.</ctl:message>
                                                <ctl:fail/>
                                        </xsl:otherwise>
                                </xsl:choose>
                        </xsl:for-each>
                </ctl:code>
        </ctl:test>

    <ctl:function name="wfs:extract-gml-id">
      <!-- TODO return a sequence of id values -->
      <ctl:param name="response">A wfs:FeatureCollection document</ctl:param>
      <ctl:return>The gml:id value for the first feature instance.</ctl:return>
      <ctl:description>Extracts the gml:id value for the first feature in the collection.</ctl:description>
      <ctl:code>
        <xsl:choose>
          <xsl:when test="boolean($response//gml:featureMember)">
            <xsl:value-of select="$response//gml:featureMember[1]/*[1]/@gml:id"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:value-of select="$response//gml:featureMembers/*[1]/@gml:id"/>
          </xsl:otherwise>
        </xsl:choose>
      </ctl:code>
   </ctl:function>

   <ctl:function name="wfs:disjoint-envelopes">
      <ctl:param name="env">The gml:Envelope specifying an area of interest</ctl:param>
      <ctl:param name="bbox">The gml:boundedBy property describing the extent of some feature.</ctl:param>
      <ctl:return>
      Returns '1' if the envelopes are disjoint or '0' if they are not (i.e. they
      intersect). Returns '-1' if the CRS references do not match.
      </ctl:return>
      <ctl:description>Determines if two envelopes are disjoint. If not, they intersect.</ctl:description>
      <ctl:code>
         <xsl:variable name="minX1" select="xsd:decimal(substring-before($env//gml:lowerCorner, ' '))"/>
         <xsl:variable name="maxX1" select="xsd:decimal(substring-before($env//gml:upperCorner, ' '))"/>
         <xsl:variable name="minY1" select="xsd:decimal(substring-after($env//gml:lowerCorner, ' '))"/>
         <xsl:variable name="maxY1" select="xsd:decimal(substring-after($env//gml:upperCorner, ' '))"/>
         <xsl:variable name="minX2" select="xsd:decimal(substring-before($bbox//gml:lowerCorner, ' '))"/>
         <xsl:variable name="maxX2" select="xsd:decimal(substring-before($bbox//gml:upperCorner, ' '))"/>
         <xsl:variable name="minY2" select="xsd:decimal(substring-after($bbox//gml:lowerCorner, ' '))"/>
         <xsl:variable name="maxY2" select="xsd:decimal(substring-after($bbox//gml:upperCorner, ' '))"/>
         <xsl:choose>
<!-- TODO: need a more sophisticated CRS matching scheme.  For now, disable CRS check.  CEM 10-1-09
            <xsl:when test="$env//@srsName != $bbox//@srsName">-1</xsl:when>
-->
            <xsl:when test="($minX2 gt $maxX1) or ($minY2 gt $maxY1) or ($maxX2 lt $minX1) or ($maxY2 lt $minY1)">1</xsl:when>
            <xsl:otherwise>0</xsl:otherwise>
         </xsl:choose>
      </ctl:code>
   </ctl:function>

   <ctl:function name="wfs:encode">
      <ctl:param name="s">String to encode</ctl:param>
      <ctl:param name="encoding">UTF-8</ctl:param>
      <ctl:java class="java.net.URLEncoder" method="encode">
        <ctl:with-param select="s"/>
        <ctl:with-param select="encoding"/>
      </ctl:java>
   </ctl:function>

   <ctl:function name="wfs:sleep">
      <ctl:param name="milliseconds"/>
      <ctl:java class="java.lang.Thread" method="sleep"/>
   </ctl:function>

</ctl:package>
	<ctl:package xmlns:p="http://teamengine.sourceforge.net/parsers">

	<!--=========-->
	<!-- PARSERS -->
	<!--=========-->
	
	<!-- Used to call the schematron validator outside the request element, i.e.: -->
	<!--<ctl:call-test name="ctl:SchematronValidatingParser">
		<ctl:with-param name="doc" select="$cap-doc"/>
		<ctl:with-param name="schematronFile">sch/wfs/1.1.0/WFSCapabilities.sch</ctl:with-param>
		<ctl:with-param name="phase">Default</ctl:with-param>
	</ctl:call-test>-->
	<ctl:test name="ctl:SchematronValidatingParser">
			<ctl:param name="doc"/>
			<ctl:param name="schema"/>
			<ctl:param name="phase"/>
			<ctl:assertion>Validate an XML instance against a Schematron schema using the given phase.</ctl:assertion>
			<ctl:code>
				<xsl:choose>
					<xsl:when test="not($doc)">
						<ctl:message>Error: Null input document.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:variable name="results">
							<ctl:call-function name="ctl:SchematronValidator">
								<ctl:with-param name="doc"><xsl:copy-of select="$doc"/></ctl:with-param>
								<ctl:with-param name="schema" select="string($schema)"/>
								<ctl:with-param name="phase" select="string($phase)"/>
							</ctl:call-function>
						</xsl:variable>
						<xsl:if test="count($results/*) &gt; 0">
							<ctl:message>Total number of errors detected: <xsl:copy-of select="count($results/*)"/></ctl:message>
							<xsl:for-each select="$results/*">
								<ctl:message><xsl:value-of select="concat('Error ', position())"/>: <xsl:copy-of select="."/></ctl:message>
							</xsl:for-each>
							<ctl:fail/>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
	</ctl:test>	
	<ctl:function name="ctl:SchematronValidator">
		<ctl:param name="doc"/>
		<ctl:param name="schema"/>
		<ctl:param name="phase"/>
		<ctl:return>A list of errors (NodeList of "error" elements).</ctl:return>
		<ctl:description>Invokes the Schematon validator.</ctl:description>
		<ctl:java class="com.occamlab.te.parsers.SchematronValidatingParser" method="validate" initialized="true"/>
	</ctl:function>	
	
	<!-- Used to call the xml validator outside the request element (after using parsers:HTTPParser in this case), i.e.: -->
	<!--<ctl:call-test name="ctl:XMLValidatingParser">
			<ctl:with-param name="doc"><xsl:copy-of select="$response//content/*"/></ctl:with-param>
			<ctl:with-param name="instruction">
				<parsers:schemas>
					<parsers:schema type="resource">xsd/ogc/wfs/1.1.0/wfs.xsd</parsers:schema>
				</parsers:schemas>
			</ctl:with-param>
	</ctl:call-test>-->
  <ctl:test name="ctl:XMLValidatingParser">
    <ctl:param name="doc"/>
    <ctl:param name="instruction"/>
    <ctl:assertion>Validates the XML instance against the set of XML Schemas specified using the given instruction parameter.</ctl:assertion>
    <ctl:code>
		<xsl:choose>
			<xsl:when test="not($doc)">
				<ctl:message>Error: Null input document.</ctl:message>
				<ctl:fail/>
			</xsl:when>
			<xsl:otherwise>
				<xsl:variable name="results">
					<ctl:call-function name="ctl:XMLValidator">
						<ctl:with-param name="doc"><xsl:copy-of select="$doc"/></ctl:with-param>
						<ctl:with-param name="instruction"><xsl:copy-of select="$instruction"/></ctl:with-param>
					</ctl:call-function>
				</xsl:variable>
				<xsl:if test="count($results/*) &gt; 0">
					<ctl:message>Total number of errors detected: <xsl:copy-of select="count($results/*)"/></ctl:message>
					<xsl:for-each select="$results/*">
						<ctl:message><xsl:value-of select="concat('Error ', position())"/>: <xsl:copy-of select="."/></ctl:message>
					</xsl:for-each>
					<ctl:fail/>
				</xsl:if>
			</xsl:otherwise>
		</xsl:choose>
    </ctl:code>
  </ctl:test>
  <ctl:function name="ctl:XMLValidator">
		<ctl:param name="doc"/>
		<ctl:param name="instruction"/>
		<ctl:return>A list of errors (NodeList of "error" elements).</ctl:return>
		<ctl:description>Invokes the XML Schema validator.</ctl:description>
		<ctl:java class="com.occamlab.te.parsers.XMLValidatingParser" method="validate" initialized="true"/>
  </ctl:function>

	<!-- Sample usage:
    <ctl:call-test name="ctl:XMLValidatingParser.WFS">
			<ctl:with-param name="doc"><xsl:copy-of select="$response//content/*"/></ctl:with-param>
	</ctl:call-test>
    -->
	<ctl:test name="ctl:XMLValidatingParser.GMLSF2">
			<ctl:param name="doc"/>
			<ctl:assertion>Validate response entity against WFS schemas.</ctl:assertion>
			<ctl:code>
				<ctl:call-test name="ctl:XMLValidatingParser">
					<ctl:with-param name="doc"><xsl:copy-of select="$doc"/></ctl:with-param>
					<ctl:with-param name="instruction">				
						<parsers:schemas>
							<parsers:schema type="resource">xsd/ogc/xlink/1.0.0/xlinks.xsd</parsers:schema>
							<parsers:schema type="resource">xsd/ogc/ows/1.0.0/ows-1.0.0.xsd</parsers:schema>					
							<parsers:schema type="resource">xsd/ogc/cite/gmlsf2.xsd</parsers:schema>					
							<parsers:schema type="resource">xsd/ogc/filter/1.1.0/filter-1.1.0.xsd</parsers:schema>
							<parsers:schema type="resource">xsd/ogc/cite/cite-gmlsf2.xsd</parsers:schema>				
							<parsers:schema type="resource">xsd/ogc/cite/wfs.xsd</parsers:schema>				
						</parsers:schemas>
					</ctl:with-param>
				</ctl:call-test>
			</ctl:code>			
	</ctl:test>	

	<ctl:test name="ctl:XMLValidatingParser.GMLSF1">
			<ctl:param name="doc"/>
			<ctl:assertion>Validate response entity against WFS schemas.</ctl:assertion>
			<ctl:code>
				<ctl:call-test name="ctl:XMLValidatingParser">
					<ctl:with-param name="doc"><xsl:copy-of select="$doc"/></ctl:with-param>
					<ctl:with-param name="instruction">				
						<parsers:schemas>
							<parsers:schema type="resource">xsd/ogc/xlink/1.0.0/xlinks.xsd</parsers:schema>
							<parsers:schema type="resource">xsd/ogc/ows/1.0.0/ows-1.0.0.xsd</parsers:schema>					
							<parsers:schema type="resource">xsd/ogc/cite/gmlsf.xsd</parsers:schema>					
							<parsers:schema type="resource">xsd/ogc/filter/1.1.0/filter-1.1.0.xsd</parsers:schema>
							<parsers:schema type="resource">xsd/ogc/cite/cite-gmlsf1.xsd</parsers:schema>				
							<parsers:schema type="resource">xsd/ogc/cite/wfs.xsd</parsers:schema>
						</parsers:schemas>
					</ctl:with-param>
				</ctl:call-test>
			</ctl:code>			
	</ctl:test>	
	
	<!-- XML validating parsers, defined for various response types to be reused by multiple tests -->
	<ctl:parser name="p:XMLValidatingParser.GMLSF2">
		<ctl:java class="com.occamlab.te.parsers.XMLValidatingParser" method="parse" initialized="true">
			<ctl:with-param name="schemas_links">
				<parsers:schemas>
					<parsers:schema type="resource">xsd/ogc/xlink/1.0.0/xlinks.xsd</parsers:schema>
					<parsers:schema type="resource">xsd/ogc/ows/1.0.0/ows-1.0.0.xsd</parsers:schema>					
					<parsers:schema type="resource">xsd/ogc/cite/gmlsf2.xsd</parsers:schema>					
					<parsers:schema type="resource">xsd/ogc/filter/1.1.0/filter-1.1.0.xsd</parsers:schema>
					<parsers:schema type="resource">xsd/ogc/cite/cite-gmlsf2.xsd</parsers:schema>				
					<parsers:schema type="resource">xsd/ogc/cite/wfs.xsd</parsers:schema>					
				</parsers:schemas>
			</ctl:with-param>
		</ctl:java>
	</ctl:parser>	

	<ctl:parser name="p:XMLValidatingParser.GMLSF1">
		<ctl:java class="com.occamlab.te.parsers.XMLValidatingParser" method="parse" initialized="true">
			<ctl:with-param name="schemas_links">
				<parsers:schemas>
					<parsers:schema type="resource">xsd/ogc/xlink/1.0.0/xlinks.xsd</parsers:schema>
					<parsers:schema type="resource">xsd/ogc/ows/1.0.0/ows-1.0.0.xsd</parsers:schema>					
					<parsers:schema type="resource">xsd/ogc/cite/gmlsf.xsd</parsers:schema>					
					<parsers:schema type="resource">xsd/ogc/filter/1.1.0/filter-1.1.0.xsd</parsers:schema>
					<parsers:schema type="resource">xsd/ogc/cite/cite-gmlsf1.xsd</parsers:schema>				
					<parsers:schema type="resource">xsd/ogc/cite/wfs.xsd</parsers:schema>
				</parsers:schemas>
			</ctl:with-param>
		</ctl:java>
	</ctl:parser>	

	<ctl:parser name="p:XMLValidatingParser.OWS">
		<ctl:java class="com.occamlab.te.parsers.XMLValidatingParser" method="parse" initialized="true">
			<ctl:with-param name="schemas_links">
				<parsers:schemas>
					<parsers:schema type="resource">xsd/ogc/xlink/1.0.0/xlinks.xsd</parsers:schema>				
					<parsers:schema type="resource">xsd/ogc/ows/1.0.0/ows-1.0.0.xsd</parsers:schema>
				</parsers:schemas>
			</ctl:with-param>
		</ctl:java>
	</ctl:parser>	
	
	<ctl:parser name="p:XMLValidatingParser.XMLSchema">
		<ctl:java class="com.occamlab.te.parsers.XMLValidatingParser" method="parse" initialized="true">
			<ctl:with-param name="schemas_links">
				<parsers:schemas>
					<parsers:schema type="resource">xsd/w3c/xmlschema/1.0/XMLSchema.xsd</parsers:schema>
				</parsers:schemas>
			</ctl:with-param>
		</ctl:java>
	</ctl:parser>		
	
	<!-- Schematron validator used in request element, pass in information for schematron schema to use, i.e.: -->
	<!--<p:SchematronValidatingParser>
			<parsers:schemas>
				<parsers:schema type="resource" phase="Default">sch/wfs/1.1.0/WFSCapabilities.sch</parsers:schema>
			</parsers:schemas>
		</p:SchematronValidatingParser>-->
	<ctl:parser name="p:SchematronValidatingParser">
		<ctl:param name="schema_link"/>
		<ctl:java class="com.occamlab.te.parsers.SchematronValidatingParser" method="parse" initialized="true"/>
	</ctl:parser>		
	
	<!-- Schematron validator used in request element, uses the given schema, i.e.: -->
	<!--<p:SchematronValidatingParser.WFSCapabilities/>-->
	<ctl:parser name="p:SchematronValidatingParser.WFSCapabilities">
		<ctl:java class="com.occamlab.te.parsers.SchematronValidatingParser" method="parse" initialized="true">
			<ctl:with-param name="schema_link">
					<parsers:schemas>
						<parsers:schema type="resource" phase="Default">sch/wfs/1.1.0/WFSCapabilities.sch</parsers:schema>
					</parsers:schemas>
			</ctl:with-param>
		</ctl:java>
	</ctl:parser>	
	
</ctl:package>
	<ctl:package xmlns:p="http://teamengine.sourceforge.net/parsers" xmlns:gml="http://www.opengis.net/gml">

	<ctl:test name="wfs:readiness-tests">
		<ctl:param name="wfs.GetCapabilities.document"/>
		<ctl:param name="wfs-transaction"/>
        <ctl:param name="wfs-xlink"/>
		<ctl:param name="gmlsf.profile.level"/>
		<ctl:assertion>
        Assess readiness of the IUT. Check the retrieved capabilities document for
        available service endpoints; determine if the service is available and
        is ready to undergo further testing.
        </ctl:assertion>
        <ctl:comment>
        The capabilities document is first checked for the presence of required
        HTTP method bindings. Then a GetCapabilities request is submitted to the
        SUT using the GET method. A subsequent GetFeature request to retrieve
        one of the records in the test data set is then submitted and checked
        for a non-empty response. If any of these checks fail, execution of the
        test suite is aborted.
        </ctl:comment>
		<ctl:code>
          <xsl:choose>
            <xsl:when test="string-length($wfs-transaction) gt 0">
              <ctl:call-test name="ctl:SchematronValidatingParser">
		        <ctl:with-param name="doc" select="$wfs.GetCapabilities.document"/>
		        <ctl:with-param name="schema">sch/wfs/1.1.0/Capabilities.sch</ctl:with-param>
		        <ctl:with-param name="phase">RequiredTransactionBindingsPhase</ctl:with-param>
	          </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:call-test name="ctl:SchematronValidatingParser">
		        <ctl:with-param name="doc" select="$wfs.GetCapabilities.document"/>
		        <ctl:with-param name="schema">sch/wfs/1.1.0/Capabilities.sch</ctl:with-param>
		        <ctl:with-param name="phase">RequiredBasicElementsPhase</ctl:with-param>
	          </ctl:call-test>
            </xsl:otherwise>
          </xsl:choose>

            <xsl:variable name="GetCapabilities.get.url">
		        <xsl:value-of select="$wfs.GetCapabilities.document//ows:OperationsMetadata/ows:Operation[@name='GetCapabilities']/ows:DCP/ows:HTTP/ows:Get/@xlink:href"/>
		    </xsl:variable>
            <xsl:variable name="GetFeature.get.url">
			    <xsl:value-of select="$wfs.GetCapabilities.document//ows:OperationsMetadata/ows:Operation[@name='GetFeature']/ows:DCP/ows:HTTP/ows:Get/@xlink:href"/>
		    </xsl:variable>
            <xsl:variable name="GetFeature.post.url">
			    <xsl:value-of select="$wfs.GetCapabilities.document//ows:OperationsMetadata/ows:Operation[@name='GetFeature']/ows:DCP/ows:HTTP/ows:Post/@xlink:href"/>
		    </xsl:variable>

            <xsl:choose>
              <xsl:when test="not(starts-with($GetCapabilities.get.url,'http'))">
                  <ctl:message>
                  FAILURE: HTTP endpoint for GetCapabilities using GET method not found in capabilities document.
                  </ctl:message>
                  <ctl:fail/>
              </xsl:when>
              <xsl:when test="not(starts-with($GetFeature.post.url,'http')) and not(starts-with($GetFeature.get.url,'http'))">
                  <ctl:message>
                  FAILURE: HTTP endpoint for GetFeature using POST or GET method not found in capabilities document.
                  </ctl:message>
                  <ctl:fail/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:variable name="response1">
				  <ctl:request>
					<ctl:url>
						<xsl:value-of select="$GetCapabilities.get.url"/>
					</ctl:url>
					<ctl:method>GET</ctl:method>
					<ctl:param name="service">WFS</ctl:param>
					<ctl:param name="version">1.1.0</ctl:param>
					<ctl:param name="request">GetCapabilities</ctl:param>
					<p:XMLValidatingParser.GMLSF1/>
				  </ctl:request>
			    </xsl:variable>
				<xsl:variable name="response2">
				  <xsl:choose>
							<xsl:when test="not($GetFeature.post.url = '')">
							  <ctl:request>
								<ctl:url>
									<xsl:value-of select="$GetFeature.post.url"/>
								</ctl:url>
								<ctl:method>POST</ctl:method>
								<ctl:body>
									<wfs:GetFeature version="1.1.0" service="WFS">
										<wfs:Query typeName="sf:PrimitiveGeoFeature"/>
									</wfs:GetFeature>
								</ctl:body>
								<p:XMLValidatingParser.GMLSF1/>
							  </ctl:request>
							</xsl:when>
                            <xsl:otherwise>
                              <ctl:request>
								<ctl:url>
									<xsl:value-of select="$GetFeature.get.url"/>
								</ctl:url>
								<ctl:method>GET</ctl:method>
								<ctl:param name="request">GetFeature</ctl:param>
								<ctl:param name="service">WFS</ctl:param>
								<ctl:param name="version">1.1.0</ctl:param>
								<ctl:param name="typename">sf:PrimitiveGeoFeature</ctl:param>
								<ctl:param name="namespace">xmlns(sf=http://cite.opengeospatial.org/gmlsf)</ctl:param>
								<p:XMLValidatingParser.GMLSF1/>
							  </ctl:request>
                            </xsl:otherwise>
				  </xsl:choose>
				</xsl:variable>

                <xsl:choose>
                  <xsl:when test="not($response1/*)">
                    <ctl:message>
                    FAILURE: The response from <xsl:value-of select="$GetCapabilities.get.url"/> could not be read or is invalid.
                    </ctl:message>
                    <ctl:fail/>
                  </xsl:when>
                  <xsl:when test="not($response2/*)">
                    <ctl:message>
                    FAILURE: The GetFeature response could not be read or is invalid.
                    </ctl:message>
                    <ctl:fail/>
                  </xsl:when>
                  <xsl:when test="not($response1/wfs:WFS_Capabilities)">
                    <ctl:message>
                    FAILURE: The response entity is NOT a wfs:WFS_Capabilities document.
                    The document element has [local name] = <xsl:value-of select="local-name($response1/*[1])"/> and [namespace name] = <xsl:value-of select="namespace-uri($response1/*[1])"/>.
                    </ctl:message>
                    <ctl:fail/>
                  </xsl:when>
                  <xsl:when test="(count($response2//gml:featureMember) + count($response2//gml:featureMembers/*)) &lt; 4">
                    <ctl:message>
                    FAILURE: The resulting wfs:FeatureCollection must include at least 4 sf:PrimitiveGeoFeature instances from the test data set.
                    </ctl:message>
                    <ctl:fail/>
                  </xsl:when>
                  <xsl:otherwise>
					 <ctl:call-test name="wfs:basic-main">
						<ctl:with-param name="wfs.GetCapabilities.document" select="$wfs.GetCapabilities.document"/>
						<ctl:with-param name="gmlsf.profile.level" select="$gmlsf.profile.level"/>
						<ctl:with-param name="wfs-xlink" select="$wfs-xlink"/>
					 </ctl:call-test>
					 <xsl:if test="string-length($wfs-transaction) gt 0">
						<ctl:call-test name="wfs:transaction-main">
							<ctl:with-param name="wfs.GetCapabilities.document" select="$wfs.GetCapabilities.document"/>
							<ctl:with-param name="gmlsf.profile.level" select="$gmlsf.profile.level"/>
						</ctl:call-test>
					 </xsl:if>
					 <xsl:if test="string-length($wfs-xlink) gt 0">
                       <ctl:call-test name="wfs:XLinkTests">
							<ctl:with-param name="wfs.GetCapabilities.document" select="$wfs.GetCapabilities.document"/>
						</ctl:call-test>
                     </xsl:if>
				  </xsl:otherwise>
				</xsl:choose>
              </xsl:otherwise>
            </xsl:choose>
		</ctl:code>
	</ctl:test>

</ctl:package>
	<ctl:package xmlns:p="http://teamengine.sourceforge.net/parsers">

	<ctl:package xmlns="http://www.occamlab.com/ctl">

    <ctl:test name="wfs:run-GetCapabilities-GET">
      <param name="wfs.GetCapabilities.document"/>
      <ctl:assertion>
      Run test group for GetCapabilities requests using the GET method. Target endpoint is {$wfs.GetCapabilities.document//ows:OperationsMetadata/ows:Operation[@name='GetCapabilities']/ows:DCP/ows:HTTP/ows:Get/@xlink:href}.
      </ctl:assertion>
      <ctl:code>

                <xsl:variable name="wfs.GetCapabilities.get.url">
                        <xsl:value-of select="$wfs.GetCapabilities.document//ows:OperationsMetadata/ows:Operation[@name='GetCapabilities']/ows:DCP/ows:HTTP/ows:Get/@xlink:href"/>
                </xsl:variable>

                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetCapabilities-tc1.1">
                        <ctl:with-param name="wfs.GetCapabilities.get.url" select="$wfs.GetCapabilities.get.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetCapabilities-tc3.1">
                        <ctl:with-param name="wfs.GetCapabilities.get.url" select="$wfs.GetCapabilities.get.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetCapabilities-tc4.1">
                        <ctl:with-param name="wfs.GetCapabilities.get.url" select="$wfs.GetCapabilities.get.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetCapabilities-tc4.2">
                        <ctl:with-param name="wfs.GetCapabilities.get.url" select="$wfs.GetCapabilities.get.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetCapabilities-tc4.3">
                        <ctl:with-param name="wfs.GetCapabilities.get.url" select="$wfs.GetCapabilities.get.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetCapabilities-tc5.1">
                        <ctl:with-param name="wfs.GetCapabilities.get.url" select="$wfs.GetCapabilities.get.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetCapabilities-tc6.1">
                        <ctl:with-param name="wfs.GetCapabilities.get.url" select="$wfs.GetCapabilities.get.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetCapabilities-tc7.1">
                        <ctl:with-param name="wfs.GetCapabilities.get.url" select="$wfs.GetCapabilities.get.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetCapabilities-tc8.1">
                        <ctl:with-param name="wfs.GetCapabilities.get.url" select="$wfs.GetCapabilities.get.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetCapabilities-tc9.1">
                        <ctl:with-param name="wfs.GetCapabilities.get.url" select="$wfs.GetCapabilities.get.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetCapabilities-tc9.2">
                        <ctl:with-param name="wfs.GetCapabilities.get.url" select="$wfs.GetCapabilities.get.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetCapabilities-tc10.1">
                        <ctl:with-param name="wfs.GetCapabilities.get.url" select="$wfs.GetCapabilities.get.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetCapabilities-tc10.2">
                        <ctl:with-param name="wfs.GetCapabilities.get.url" select="$wfs.GetCapabilities.get.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetCapabilities-tc10.3">
                        <ctl:with-param name="wfs.GetCapabilities.get.url" select="$wfs.GetCapabilities.get.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetCapabilities-tc11.1">
                        <ctl:with-param name="wfs.GetCapabilities.get.url" select="$wfs.GetCapabilities.get.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetCapabilities-tc12.1">
                        <ctl:with-param name="wfs.GetCapabilities.get.url" select="$wfs.GetCapabilities.get.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetCapabilities-tc13.1">
                        <ctl:with-param name="wfs.GetCapabilities.get.url" select="$wfs.GetCapabilities.get.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetCapabilities-tc13.2">
                        <ctl:with-param name="wfs.GetCapabilities.get.url" select="$wfs.GetCapabilities.get.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetCapabilities-tc13.3">
                        <ctl:with-param name="wfs.GetCapabilities.get.url" select="$wfs.GetCapabilities.get.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetCapabilities-tc14.1">
                        <ctl:with-param name="wfs.GetCapabilities.get.url" select="$wfs.GetCapabilities.get.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetCapabilities-tc15.1">
                        <ctl:with-param name="wfs.GetCapabilities.get.url" select="$wfs.GetCapabilities.get.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetCapabilities-tc15.2">
                        <ctl:with-param name="wfs.GetCapabilities.get.url" select="$wfs.GetCapabilities.get.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetCapabilities-tc16.1">
                        <ctl:with-param name="wfs.GetCapabilities.get.url" select="$wfs.GetCapabilities.get.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetCapabilities-tc16.2">
                        <ctl:with-param name="wfs.GetCapabilities.get.url" select="$wfs.GetCapabilities.get.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetCapabilities-tc16.3">
                        <ctl:with-param name="wfs.GetCapabilities.get.url" select="$wfs.GetCapabilities.get.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetCapabilities-tc16.5">
                        <ctl:with-param name="wfs.GetCapabilities.get.url" select="$wfs.GetCapabilities.get.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetCapabilities-tc17.1">
                        <ctl:with-param name="wfs.GetCapabilities.get.url" select="$wfs.GetCapabilities.get.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetCapabilities-tc18.1">
                        <ctl:with-param name="wfs.GetCapabilities.get.url" select="$wfs.GetCapabilities.get.url"/>
                </ctl:call-test>

        <!-- run tests for optional capabilities that are implemented -->
        <xsl:if test="not(string($wfs.GetCapabilities.document//@updateSequence) = '')">
                        <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetCapabilities-tc16.4">
                                <ctl:with-param name="wfs.GetCapabilities.get.url" select="$wfs.GetCapabilities.get.url"/>
                        </ctl:call-test>
                </xsl:if>
        <xsl:if test="$wfs.GetCapabilities.document//ows:OperationsMetadata/ows:Operation[@name='GetCapabilities']/ows:Parameter[lower-case(@name)='sections']">
          <ctl:message>Sections parameter is supported for GetCapabilities requests.</ctl:message>
          <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetCapabilities-tc19.1">
            <ctl:with-param name="wfs.GetCapabilities.get.url" select="$wfs.GetCapabilities.get.url"/>
          </ctl:call-test>
          <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetCapabilities-tc19.2">
            <ctl:with-param name="wfs.GetCapabilities.get.url" select="$wfs.GetCapabilities.get.url"/>
          </ctl:call-test>
        </xsl:if>
        <xsl:if test="$wfs.GetCapabilities.document//ows:OperationsMetadata/ows:Operation[@name='GetCapabilities']/ows:Parameter[lower-case(@name)='acceptformats']">
          <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetCapabilities-tc22.1">
            <ctl:with-param name="wfs.GetCapabilities.get.url" select="$wfs.GetCapabilities.get.url"/>
            <ctl:with-param name="wfs.GetCapabilities.formats" select="$wfs.GetCapabilities.document//ows:Operation[@name='GetCapabilities']/ows:Parameter[lower-case(@name)='acceptformats']"/>
          </ctl:call-test>
        </xsl:if>
      </ctl:code>
    </ctl:test>

        <test name="wfs:wfs-1.1.0-Basic-GetCapabilities-tc1.1">
      <param name="wfs.GetCapabilities.get.url"/>
      <assertion>The GET method request must be supported (using HTTP GET).</assertion>
      <comment>GetCapabilities by GET.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is an wfs:WFS_Capabilities document.</comment>
          <link>wfs-1.1.0-Basic-GetCapabilities-atc1</link>
      <link>OGC 04-094, 13.1, p.79</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetCapabilities.get.url"/>
                                        </url>
                                        <method>get</method>
                                        <param name="service">WFS</param>
                                        <param name="version">1.1.0</param>
                                        <param name="request">GetCapabilities</param>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                                        <xsl:variable name="expression">//wfs:WFS_Capabilities</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

        <test name="wfs:wfs-1.1.0-Basic-GetCapabilities-tc3.1">
      <param name="wfs.GetCapabilities.get.url"/>
      <assertion>Version number specified in a given request must correspond to a version supported by the service.</assertion>
      <comment>GetCapabilities with version of '1.1.0'.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is an wfs:WFS_Capabilities document; (3) the version number on the response is what was requested.</comment>
      <link>wfs-1.1.0-Basic-atc1</link>
      <link>OGC 04-094, 6.2.3, p.9</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetCapabilities.get.url"/>
                                        </url>
                                        <method>get</method>
                                        <param name="service">WFS</param>
                                        <param name="version">1.1.0</param>
                                        <param name="request">GetCapabilities</param>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                                        <xsl:variable name="expression">//wfs:WFS_Capabilities/@version='1.1.0'</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

        <test name="wfs:wfs-1.1.0-Basic-GetCapabilities-tc4.1">
      <param name="wfs.GetCapabilities.get.url"/>
      <assertion>Host names in a URI are case-insensitive.</assertion>
      <comment>GetCapabilities with host URI in all uppercase  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is an wfs:WFS_Capabilities document.</comment>
      <link>wfs-1.1.0-Basic-atc2</link>
      <link>OGC 04-094, 6.3.1, p.10</link>
      <link>RFC 3986, 3.2.2</link>
                <code>

                <xsl:choose>
                        <xsl:when test="boolean(starts-with($wfs.GetCapabilities.get.url,'http://') or starts-with($wfs.GetCapabilities.get.url,'https://'))">
                                <xsl:variable name="after_slashes"><xsl:value-of select="substring-after($wfs.GetCapabilities.get.url,'//')"/></xsl:variable>
                                <xsl:variable name="prefix"><xsl:value-of select="substring-before($wfs.GetCapabilities.get.url,'//')"/></xsl:variable>
                                <xsl:variable name="stripped_uri"><xsl:value-of select="substring-before($after_slashes,'/')"/></xsl:variable>
                                <xsl:variable name="postfix"><xsl:value-of select="substring-after($after_slashes,'/')"/></xsl:variable>
                                <xsl:variable name="uppercase_uri"><xsl:value-of select="translate($stripped_uri,'abcdefghijklmnopqrstuvwxyz','ABCDEFGHIJKLMNOPQRSTUVWXYZ')"/></xsl:variable>
                                <xsl:variable name="wfs.GetCapabilities.get.url"><xsl:value-of select="concat($prefix,'//',$uppercase_uri,'/',$postfix)"/></xsl:variable>
                        </xsl:when>
                </xsl:choose>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetCapabilities.get.url"/>
                                        </url>
                                        <method>get</method>
                                        <param name="service">WFS</param>
                                        <param name="version">1.1.0</param>
                                        <param name="request">GetCapabilities</param>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                                        <xsl:variable name="expression">//wfs:WFS_Capabilities</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

        <test name="wfs:wfs-1.1.0-Basic-GetCapabilities-tc4.2">
      <param name="wfs.GetCapabilities.get.url"/>
      <assertion>Host names in a URI are case-insensitive.</assertion>
      <comment>GetCapabilities with host URI in mixed case  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is an wfs:WFS_Capabilities document.</comment>
      <link>wfs-1.1.0-Basic-atc2</link>
      <link>OGC 04-094, 6.3.1, p.10</link>
      <link>RFC 3986, 3.2.2</link>
                <code>

                <xsl:choose>
                        <xsl:when test="boolean(starts-with($wfs.GetCapabilities.get.url,'http://') or starts-with($wfs.GetCapabilities.get.url,'https://'))">
                                <xsl:variable name="after_slashes"><xsl:value-of select="substring-after($wfs.GetCapabilities.get.url,'//')"/></xsl:variable>
                                <xsl:variable name="prefix"><xsl:value-of select="substring-before($wfs.GetCapabilities.get.url,'//')"/></xsl:variable>
                                <xsl:variable name="stripped_uri"><xsl:value-of select="substring-before($after_slashes,'/')"/></xsl:variable>
                                <xsl:variable name="postfix"><xsl:value-of select="substring-after($after_slashes,'/')"/></xsl:variable>
                                <xsl:variable name="uppercase_uri"><xsl:value-of select="translate($stripped_uri,'abcdefghijklmnopqrstuvwxyz','AbCDeFghIJklMnoPQrSTUVwxYZ')"/></xsl:variable>
                                <xsl:variable name="wfs.GetCapabilities.get.url"><xsl:value-of select="concat($prefix,'//',$uppercase_uri,'/',$postfix)"/></xsl:variable>
                        </xsl:when>
                </xsl:choose>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetCapabilities.get.url"/>
                                        </url>
                                        <method>get</method>
                                        <param name="service">WFS</param>
                                        <param name="version">1.1.0</param>
                                        <param name="request">GetCapabilities</param>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                                        <xsl:variable name="expression">//wfs:WFS_Capabilities</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

        <test name="wfs:wfs-1.1.0-Basic-GetCapabilities-tc4.3">
      <param name="wfs.GetCapabilities.get.url"/>
      <assertion>Host names in a URI are case-insensitive.</assertion>
      <comment>GetCapabilities with host URI in all lowercase.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is an wfs:WFS_Capabilities document.</comment>
      <link>wfs-1.1.0-Basic-atc2</link>
      <link>OGC 04-094, 6.3.1, p.10</link>
      <link>RFC 3986, 3.2.2</link>
                <code>

                <xsl:choose>
                        <xsl:when test="boolean(starts-with($wfs.GetCapabilities.get.url,'http://') or starts-with($wfs.GetCapabilities.get.url,'https://'))">
                                <xsl:variable name="after_slashes"><xsl:value-of select="substring-after($wfs.GetCapabilities.get.url,'//')"/></xsl:variable>
                                <xsl:variable name="prefix"><xsl:value-of select="substring-before($wfs.GetCapabilities.get.url,'//')"/></xsl:variable>
                                <xsl:variable name="stripped_uri"><xsl:value-of select="substring-before($after_slashes,'/')"/></xsl:variable>
                                <xsl:variable name="postfix"><xsl:value-of select="substring-after($after_slashes,'/')"/></xsl:variable>
                                <xsl:variable name="uppercase_uri"><xsl:value-of select="translate($stripped_uri,'ABCDEFGHIJKLMNOPQRSTUVWXYZ','abcdefghijklmnopqrstuvwxyz')"/></xsl:variable>
                                <xsl:variable name="wfs.GetCapabilities.get.url"><xsl:value-of select="concat($prefix,'//',$uppercase_uri,'/',$postfix)"/></xsl:variable>
                        </xsl:when>
                </xsl:choose>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetCapabilities.get.url"/>
                                        </url>
                                        <method>get</method>
                                        <param name="service">WFS</param>
                                        <param name="version">1.1.0</param>
                                        <param name="request">GetCapabilities</param>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                                        <xsl:variable name="expression">//wfs:WFS_Capabilities</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

        <test name="wfs:wfs-1.1.0-Basic-GetCapabilities-tc5.1">
      <param name="wfs.GetCapabilities.get.url"/>
      <assertion>The response entity must be valid and have wfs:WFS_Capabilities as the document element.</assertion>
      <comment>Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is an wfs:WFS_Capabilities document.</comment>
      <link>wfs-1.1.0-Basic-GetCapabilities-atc2</link>
      <link>OGC 04-094, 13.1, p.79</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetCapabilities.get.url"/>
                                        </url>
                                        <method>get</method>
                                        <param name="service">WFS</param>
                                        <param name="version">1.1.0</param>
                                        <param name="request">GetCapabilities</param>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                                        <xsl:variable name="expression">//wfs:WFS_Capabilities</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

        <test name="wfs:wfs-1.1.0-Basic-GetCapabilities-tc6.1">
      <param name="wfs.GetCapabilities.get.url"/>
      <assertion>If present in a GET request, the query component in a Request-URI must conform to the KVP syntax (Content-Type: application/x-www-form-urlencoded).</assertion>
      <comment>GetCapabilities with the correct KVP syntax and correct content encoding (default of 'application/x-www-form-urlencoded').  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is an wfs:WFS_Capabilities document.</comment>
      <link>wfs-1.1.0-Basic-atc3</link>
      <link>OGC 04-094, 6.3.2, p.10</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetCapabilities.get.url"/>
                                        </url>
                                        <method>get</method>
                                        <param name="service">WFS</param>
                                        <param name="version">1.1.0</param>
                                        <param name="request">GetCapabilities</param>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                                        <xsl:variable name="expression">//wfs:WFS_Capabilities</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

        <test name="wfs:wfs-1.1.0-Basic-GetCapabilities-tc7.1">
      <param name="wfs.GetCapabilities.get.url"/>
      <assertion>Unrecognized parameters in KVP-encoded query strings shall be ignored.</assertion>
      <comment>GetCapabilities with additional bogus KVP parameters, to be ignored.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is an wfs:WFS_Capabilities document.</comment>
      <link>wfs-1.1.0-Basic-atc5</link>
      <link>OGC 04-094, 14.2.1, p.94</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetCapabilities.get.url"/>
                                        </url>
                                        <method>get</method>
                                        <param name="service">WFS</param>
                                        <param name="version">1.1.0</param>
                                        <param name="versionXXX">x.x.x,x.y.z</param>
                                        <param name="request">GetCapabilities</param>
                                        <param name="ASDF">asdf:asdf</param>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                                        <xsl:variable name="expression">//wfs:WFS_Capabilities</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

        <test name="wfs:wfs-1.1.0-Basic-GetCapabilities-tc8.1">
      <param name="wfs.GetCapabilities.get.url"/>
      <assertion>Parameter ordering in KVP-encoded query strings is not significant.</assertion>
      <comment>2 GetCapabilities with the differing KVP ordering.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is an wfs:WFS_Capabilities document; (3) the results from both requests are the exact same.</comment>
      <link>wfs-1.1.0-Basic-atc4</link>
      <link>OGC 04-094, 14.2.1, p.94</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetCapabilities.get.url"/>
                                        </url>
                                        <method>get</method>
                                        <param name="service">WFS</param>
                                        <param name="version">1.1.0</param>
                                        <param name="request">GetCapabilities</param>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:variable name="request2">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetCapabilities.get.url"/>
                                        </url>
                                        <method>get</method>
                                        <param name="request">GetCapabilities</param>
                                        <param name="version">1.1.0</param>
                                        <param name="service">WFS</param>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                                        <xsl:variable name="expression">//wfs:WFS_Capabilities</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                        <xsl:if test="$request1 != $request2">
                                                <ctl:message>FAILURE: The KVP encoding does not handle parameters in different sequences.</ctl:message>
                                                <ctl:fail/>
                                        </xsl:if>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

        <test name="wfs:wfs-1.1.0-Basic-GetCapabilities-tc9.1">
      <param name="wfs.GetCapabilities.get.url"/>
      <assertion>A valid http URL value shall conform to the syntax specified in RFC 2616. http_URL = 'http:' '//' host [ ':' port ] [ abs_path [ '?' query ]]</assertion>
      <comment>GetCapabilities with the proper KVP syntax.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is an wfs:WFS_Capabilities document.</comment>
      <link>ows-1.0.0-common-atc3</link>
      <link>OGC 05-008c1, 11.1, p.54</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetCapabilities.get.url"/>
                                        </url>
                                        <method>get</method>
                                        <param name="service">WFS</param>
                                        <param name="version">1.1.0</param>
                                        <param name="request">GetCapabilities</param>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                                        <xsl:variable name="expression">//wfs:WFS_Capabilities</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

        <test name="wfs:wfs-1.1.0-Basic-GetCapabilities-tc9.2">
      <param name="wfs.GetCapabilities.get.url"/>
      <assertion>A valid http URL value shall conform to the syntax specified in RFC 2616. http_URL = 'http:' '//' host [ ':' port ] [ abs_path [ '?' query ]]</assertion>
      <comment>GetCapabilities with improper KVP syntax (using '#' and ',' instead of '?' or '&amp;').  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is an ows:ExceptionReport document</comment>
      <link>ows-1.0.0-common-atc3</link>
      <link>OGC 05-008c1, 11.1, p.54</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="concat($wfs.GetCapabilities.get.url,'#request=GetCapabilities,service=WFS')"/>
                                        </url>
                                        <method>get</method>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                                        <xsl:variable name="expression">//ows:ExceptionReport</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

        <test name="wfs:wfs-1.1.0-Basic-GetCapabilities-tc10.1">
      <param name="wfs.GetCapabilities.get.url"/>
      <assertion>Parameter names in KVP strings shall be handled in a case-insensitive manner.</assertion>
      <comment>GetCapabilities with the KVP parameter names in all uppercase.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is an wfs:WFS_Capabilities document.</comment>
      <link>ows-1.0.0-common-atc1</link>
      <link>OGC 05-008c1, 11.5.2, p.56</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetCapabilities.get.url"/>
                                        </url>
                                        <method>get</method>
                                        <param name="SERVICE">WFS</param>
                                        <param name="VERSION">1.1.0</param>
                                        <param name="REQUEST">GetCapabilities</param>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                                        <xsl:variable name="expression">//wfs:WFS_Capabilities</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

        <test name="wfs:wfs-1.1.0-Basic-GetCapabilities-tc10.2">
      <param name="wfs.GetCapabilities.get.url"/>
      <assertion>Parameter names in KVP strings shall be handled in a case-insensitive manner.</assertion>
      <comment>GetCapabilities with the KVP parameter names in mixed case.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is an wfs:WFS_Capabilities document.</comment>
      <link>ows-1.0.0-common-atc1</link>
      <link>OGC 05-008c1, 11.5.2, p.56</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetCapabilities.get.url"/>
                                        </url>
                                        <method>get</method>
                                        <param name="SeRvIcE">WFS</param>
                                        <param name="vErSiOn">1.1.0</param>
                                        <param name="RequesT">GetCapabilities</param>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                                        <xsl:variable name="expression">//wfs:WFS_Capabilities</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

        <test name="wfs:wfs-1.1.0-Basic-GetCapabilities-tc10.3">
      <param name="wfs.GetCapabilities.get.url"/>
      <assertion>Parameter names in KVP strings shall be handled in a case-insensitive manner.</assertion>
      <comment>GetCapabilities with the KVP parameter names in all lowercase.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is an wfs:WFS_Capabilities document.</comment>
      <link>ows-1.0.0-common-atc1</link>
      <link>OGC 05-008c1, 11.5.2, p.56</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetCapabilities.get.url"/>
                                        </url>
                                        <method>get</method>
                                        <param name="service">WFS</param>
                                        <param name="version">1.1.0</param>
                                        <param name="request">GetCapabilities</param>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                                        <xsl:variable name="expression">//wfs:WFS_Capabilities</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

        <test name="wfs:wfs-1.1.0-Basic-GetCapabilities-tc11.1">
      <param name="wfs.GetCapabilities.get.url"/>
      <assertion>A response message containing an entity body must contain a Content-Type entity header field that correctly indicates the media type of the message body.</assertion>
      <comment>Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is an wfs:WFS_Capabilities document; (3) the response Content-Type header must be 'application/xml' or 'text/xml' for XML entities.</comment>
      <link>ows-1.0.0-common-atc2</link>
      <link>OGC 05-008c1, 11.7, p.61</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetCapabilities.get.url"/>
                                        </url>
                                        <method>get</method>
                                        <param name="service">WFS</param>
                                        <param name="version">1.1.0</param>
                                        <param name="request">GetCapabilities</param>
                                        <parsers:HTTPParser/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                                        <xsl:variable name="expression">//wfs:WFS_Capabilities</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>

                                        <xsl:variable name="content-type" select="substring-before(concat($request1/response/headers/header[@name='Content-Type'], ';'), ';')"/>
                                        <xsl:if test="not($content-type = 'application/xml') and not($content-type = 'text/xml')">
                                                <ctl:message>FAILURE: Incorrect response encoding.</ctl:message>
                                                <ctl:fail/>
                                        </xsl:if>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

                <test name="wfs:wfs-1.1.0-Basic-GetCapabilities-tc12.1">
      <param name="wfs.GetCapabilities.get.url"/>
      <assertion>All OGC web services must implement the GetCapabilities request to provide an XML representation of service metadata.</assertion>
      <comment>Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is an wfs:WFS_Capabilities document.</comment>
      <link>ows-1.0.0-metadata-atc1</link>
      <link>OGC 05-008c1, 7.1, p.10</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetCapabilities.get.url"/>
                                        </url>
                                        <method>get</method>
                                        <param name="service">WFS</param>
                                        <param name="version">1.1.0</param>
                                        <param name="request">GetCapabilities</param>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                                                <xsl:variable name="expression">//wfs:WFS_Capabilities</xsl:variable>
                                                <ctl:call-test name="ctl:assert-xpath">
                                                        <ctl:with-param name="expr" select="$expression"/>
                                                        <ctl:with-param name="doc" select="$request1"/>
                                                </ctl:call-test>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

                <test name="wfs:wfs-1.1.0-Basic-GetCapabilities-tc13.1">
      <param name="wfs.GetCapabilities.get.url"/>
      <assertion>A KVP-encoded GetCapabilities request shall include the following query parameters: service=WxS request=GetCapabilities, where WxS is a mnemonic label for a service type. See Table 2 for definitions of optional query parameters.</assertion>
      <comment>GetCapabilities with version of '1.1.0' and service of 'WFS'.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is an wfs:WFS_Capabilities document; (3) the response version must be what was requested.</comment>
      <link>ows-1.0.0-metadata-atc2</link>
      <link>OGC 05-008c1, 7.2.2, p.12 (Table 2)</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetCapabilities.get.url"/>
                                        </url>
                                   <method>get</method>
                                        <param name="request">GetCapabilities</param>
                                        <param name="service">WFS</param>
                                        <param name="version">1.1.0</param>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                                                <xsl:variable name="expression">//wfs:WFS_Capabilities/@version='1.1.0'</xsl:variable>
                                                <ctl:call-test name="ctl:assert-xpath">
                                                        <ctl:with-param name="expr" select="$expression"/>
                                                        <ctl:with-param name="doc" select="$request1"/>
                                                </ctl:call-test>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

                <test name="wfs:wfs-1.1.0-Basic-GetCapabilities-tc13.2">
      <param name="wfs.GetCapabilities.get.url"/>
      <assertion>A KVP-encoded GetCapabilities request shall include the following query parameters: service=WxS request=GetCapabilities, where WxS is a mnemonic label for a service type. See Table 2 for definitions of optional query parameters.</assertion>
      <comment>GetCapabilities with version of '1.1.0' and no service'.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is an ows:ExceptionReport document.</comment>
      <link>ows-1.0.0-metadata-atc2</link>
      <link>OGC 05-008c1, 7.2.2, p.12 (Table 2)</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetCapabilities.get.url"/>
                                        </url>
                                   <method>get</method>
                                        <param name="request">GetCapabilities</param>
                                        <param name="version">1.1.0</param>
                                        <p:XMLValidatingParser.OWS/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                                                <xsl:variable name="expression">//ows:ExceptionReport</xsl:variable>
                                                <ctl:call-test name="ctl:assert-xpath">
                                                        <ctl:with-param name="expr" select="$expression"/>
                                                        <ctl:with-param name="doc" select="$request1"/>
                                                </ctl:call-test>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

                <test name="wfs:wfs-1.1.0-Basic-GetCapabilities-tc13.3">
      <param name="wfs.GetCapabilities.get.url"/>
      <assertion>A KVP-encoded GetCapabilities request shall include the following query parameters: service=WxS request=GetCapabilities, where WxS is a mnemonic label for a service type. See Table 2 for definitions of optional query parameters.</assertion>
      <comment>GetCapabilities with no version and service of 'WFS'.  Version negotiation, sends latest copy.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is an wfs:WFS_Capabilities document; (3) the response version must be what was requested.</comment>
      <link>ows-1.0.0-metadata-atc2</link>
      <link>OGC 05-008c1, 7.2.2, p.12 (Table 2)</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetCapabilities.get.url"/>
                                        </url>
                                   <method>get</method>
                                        <param name="request">GetCapabilities</param>
                                        <param name="service">WFS</param>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                                                <xsl:variable name="expression">//wfs:WFS_Capabilities/@version='1.1.0'</xsl:variable>
                                                <ctl:call-test name="ctl:assert-xpath">
                                                        <ctl:with-param name="expr" select="$expression"/>
                                                        <ctl:with-param name="doc" select="$request1"/>
                                                </ctl:call-test>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

                <test name="wfs:wfs-1.1.0-Basic-GetCapabilities-tc14.1">
      <param name="wfs.GetCapabilities.get.url"/>
      <assertion>If AcceptVersion is not specified, the service must respond with highest supported version.</assertion>
      <comment>GetCapabilities with no version and service of 'WFS'.  Without AcceptVersion, using version negotiation, sends latest copy.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is an wfs:WFS_Capabilities document; (3) the response version must be what was requested.</comment>
      <link>ows-1.0.0-metadata-atc3</link>
      <link>OGC 05-008c1, 7.3.2, p.16</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetCapabilities.get.url"/>
                                        </url>
                                        <method>get</method>
                                        <param name="service">WFS</param>
                                        <param name="request">GetCapabilities</param>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                                                        <xsl:variable name="expression">//wfs:WFS_Capabilities/@version='1.1.0'</xsl:variable>
                                                        <ctl:call-test name="ctl:assert-xpath">
                                                                <ctl:with-param name="expr" select="$expression"/>
                                                                <ctl:with-param name="doc" select="$request1"/>
                                                        </ctl:call-test>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

        <test name="wfs:wfs-1.1.0-Basic-GetCapabilities-tc15.1">
      <param name="wfs.GetCapabilities.get.url"/>
      <assertion>Version negotiation using AcceptVersions parameter (preference ordering): Return service metadata corresponding to the most preferred version that is supported. If none of the requested versions are supported, the server must generate an exception with code 'VersionNegotiationFailed'.</assertion>
      <comment>GetCapabilities with no version and service of 'WFS'.  With AcceptVersion, expecting one of the versions listed ('1.1.0').  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is an wfs:WFS_Capabilities document; (3) the response version must be what was requested. The AcceptVersion element is used with a number of versions, one is expected to return ('1.1.0').</comment>
      <link>ows-1.0.0-metadata-atc4</link>
      <link>OGC 05-008c1, 7.3.2, p.16</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetCapabilities.get.url"/>
                                        </url>
                                        <method>get</method>
                                        <param name="service">WFS</param>
                                        <param name="request">GetCapabilities</param>
                                        <param name="acceptversions">1.1.0,1.0.0</param>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                                                        <xsl:variable name="expression">//wfs:WFS_Capabilities/@version='1.1.0'</xsl:variable>
                                                        <ctl:call-test name="ctl:assert-xpath">
                                                                <ctl:with-param name="expr" select="$expression"/>
                                                                <ctl:with-param name="doc" select="$request1"/>
                                                        </ctl:call-test>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

                <test name="wfs:wfs-1.1.0-Basic-GetCapabilities-tc15.2">
      <param name="wfs.GetCapabilities.get.url"/>
      <assertion>Version negotiation using AcceptVersions parameter (preference ordering): Return service metadata corresponding to the most preferred version that is supported. If none of the requested versions are supported, the server must generate an exception with code 'VersionNegotiationFailed'.</assertion>
      <comment>GetCapabilities with no version and service of 'WFS'.  With AcceptVersion, using a bogus version number ('2006-10-25').  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is an ows:ExceptionReport document; (3) the ExceptionReport shall have the 'VersionNegotiationFailed' exception code.</comment>
      <link>ows-1.0.0-metadata-atc4</link>
      <link>OGC 05-008c1, 7.3.2, p.16</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetCapabilities.get.url"/>
                                        </url>
                                        <method>get</method>
                                        <param name="service">WFS</param>
                                        <param name="request">GetCapabilities</param>
                                        <param name="version">1.1.0</param>
                                        <param name="acceptversions">2006.10.25</param>
                                        <p:XMLValidatingParser.OWS/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                                        <xsl:variable name="expression">//ows:ExceptionReport</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                        <ctl:call-test name="ctl:SchematronValidatingParser">
                                                <ctl:with-param name="doc" select="$request1"/>
                                                <ctl:with-param name="schema">sch/ows/1.0.0/ExceptionReport.sch</ctl:with-param>
                                                <ctl:with-param name="phase">VersionNegotiationFailedPhase</ctl:with-param>
                                        </ctl:call-test>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

        <test name="wfs:wfs-1.1.0-Basic-GetCapabilities-tc16.1">
      <param name="wfs.GetCapabilities.get.url"/>
      <assertion>In the event that a GetCapabilities request cannot be processed for any reason, the response entity shall include an exception report. The exception code must be one of those listed in Table 5.</assertion>
      <comment>GetCapabilities with no service parameter.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is an ows:ExceptionReport document; (3) the ExceptionReport shall have the 'MissingParameterValue' exception code; (4) theExceptionReport @locator value shall be that of the missing parameter.</comment>
      <link>ows-1.0.0-metadata-atc5</link>
      <link>OGC 05-008c1, 7.4.1, p.19</link>
                <code>

                        <xsl:variable name="response">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetCapabilities.get.url"/>
                                        </url>
                                        <method>get</method>
                                        <param name="version">1.1.0</param>
                                        <param name="request">GetCapabilities</param>
                                        <p:XMLValidatingParser.OWS/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($response/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                  <xsl:if test="not(lower-case($response//ows:Exception/@locator) = 'service')">
                    <ctl:message>
                    FAILURE: ows:Exception/@locator is absent or does not identify the missing 'service' parameter.
                    </ctl:message>
                    <ctl:fail/>
                  </xsl:if>
                                  <ctl:call-test name="ctl:SchematronValidatingParser">
                                        <ctl:with-param name="doc" select="$response"/>
                                        <ctl:with-param name="schema">sch/ows/1.0.0/ExceptionReport.sch</ctl:with-param>
                                        <ctl:with-param name="phase">MissingParameterValuePhase</ctl:with-param>
                                  </ctl:call-test>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

        <test name="wfs:wfs-1.1.0-Basic-GetCapabilities-tc16.2">
      <param name="wfs.GetCapabilities.get.url"/>
      <assertion>In the event that a GetCapabilities request cannot be processed for any reason, the response entity shall include an exception report. The exception code must be one of those listed in Table 5.</assertion>
      <comment>GetCapabilities with a bogus service parameter value ('ADSF').  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is an ows:ExceptionReport document; (3) the ExceptionReport shall have the 'InvalidParameterValue' exception code; (4) theExceptionReport @locator value shall be that of the invalid parameter.</comment>
      <link>ows-1.0.0-metadata-atc5</link>
      <link>OGC 05-008c1, 7.4.1, p.19</link>
                <code>

                        <xsl:variable name="response">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetCapabilities.get.url"/>
                                        </url>
                                        <method>get</method>
                                        <param name="service">ASDF</param>
                                        <param name="version">1.1.0</param>
                                        <param name="request">GetCapabilities</param>
                                        <p:XMLValidatingParser.OWS/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($response/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                                        <xsl:if test="not(lower-case($response//ows:Exception/@locator) = 'service')">
                      <ctl:message>
                      FAILURE: ows:Exception/@locator is absent or does not identify the missing 'service' parameter.
                      </ctl:message>
                      <ctl:fail/>
                    </xsl:if>
                                        <ctl:call-test name="ctl:SchematronValidatingParser">
                                                <ctl:with-param name="doc" select="$response"/>
                                                <ctl:with-param name="schema">sch/ows/1.0.0/ExceptionReport.sch</ctl:with-param>
                                                <ctl:with-param name="phase">InvalidParameterValuePhase</ctl:with-param>
                                        </ctl:call-test>
                                </xsl:otherwise>
                        </xsl:choose>
                </code>
        </test>

        <test name="wfs:wfs-1.1.0-Basic-GetCapabilities-tc16.3">
      <param name="wfs.GetCapabilities.get.url"/>
      <assertion>In the event that a GetCapabilities request cannot be processed for any reason, the response entity shall include an exception report. The exception code must be one of those listed in Table 5.</assertion>
      <comment>GetCapabilities with an incorrect version parameter ('2006-10-26'), using acceptversions.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is an ows:ExceptionReport document; (3) the ExceptionReport shall have the 'VersionNegotiationFailed' exception code.</comment>
      <link>ows-1.0.0-metadata-atc5</link>
      <link>OGC 05-008c1, 7.4.1, p.19</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetCapabilities.get.url"/>
                                        </url>
                                        <method>get</method>
                                        <param name="service">WFS</param>
                                        <param name="request">GetCapabilities</param>
                                        <param name="version">1.1.0</param>
                                        <param name="acceptversions">2006-10-26</param>
                                        <p:XMLValidatingParser.OWS/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                                        <xsl:variable name="expression">//ows:ExceptionReport</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                        <ctl:call-test name="ctl:SchematronValidatingParser">
                                                <ctl:with-param name="doc" select="$request1"/>
                                                <ctl:with-param name="schema">sch/ows/1.0.0/ExceptionReport.sch</ctl:with-param>
                                                <ctl:with-param name="phase">VersionNegotiationFailedPhase</ctl:with-param>
                                        </ctl:call-test>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

        <test name="wfs:wfs-1.1.0-Basic-GetCapabilities-tc16.4">
      <param name="wfs.GetCapabilities.get.url"/>
      <assertion>In the event that a GetCapabilities request cannot be processed for any reason, the response entity shall include an exception report. The exception code must be one of those listed in Table 5.</assertion>
      <comment>GetCapabilities with an incorrect updatesequence ('9999999999'), if higher than the update sequence on the current capabilities document give an exception.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is an ows:ExceptionReport document; (3) the ExceptionReport shall have the 'InvalidUpdateSequence' exception code.</comment>
      <link>ows-1.0.0-metadata-atc5</link>
      <link>OGC 05-008c1, 7.4.1, p.19</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetCapabilities.get.url"/>
                                        </url>
                                        <method>get</method>
                                        <param name="service">WFS</param>
                                        <param name="version">1.1.0</param>
                                        <param name="request">GetCapabilities</param>
                                        <param name="updatesequence">9999999999</param>
                                        <p:XMLValidatingParser.OWS/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                                        <xsl:variable name="expression">//ows:ExceptionReport</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                        <ctl:call-test name="ctl:SchematronValidatingParser">
                                                <ctl:with-param name="doc" select="$request1"/>
                                                <ctl:with-param name="schema">sch/ows/1.0.0/ExceptionReport.sch</ctl:with-param>
                                                <ctl:with-param name="phase">InvalidUpdateSequencePhase</ctl:with-param>
                                        </ctl:call-test>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

        <test name="wfs:wfs-1.1.0-Basic-GetCapabilities-tc16.5">
      <param name="wfs.GetCapabilities.get.url"/>
      <assertion>In the event that a GetCapabilities request cannot be processed for any reason, the response entity shall include an exception report. The exception code must be one of those listed in Table 5.</assertion>
      <comment>GetCapabilities with an incorrect KVP query string, triggering the missing parameter value exception.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is an ows:ExceptionReport document; (3) the ExceptionReport shall have the 'MissingParameterValue' exception code, for both the request and service.</comment>
      <link>ows-1.0.0-metadata-atc5</link>
      <link>OGC 05-008c1, 7.4.1, p.19</link>
                <code>
                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="concat($wfs.GetCapabilities.get.url, '?request~GetCapabilities!service~WFS!version~1.1.0')"/>
                                        </url>
                                        <method>get</method>
                                        <p:XMLValidatingParser.OWS/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                                        <ctl:call-test name="ctl:SchematronValidatingParser">
                                                <ctl:with-param name="doc" select="$request1"/>
                                                <ctl:with-param name="schema">sch/ows/1.0.0/ExceptionReport.sch</ctl:with-param>
                                                <ctl:with-param name="phase">MissingParameterValuePhase</ctl:with-param>
                                        </ctl:call-test>
                    <xsl:if test="not(lower-case($request1//ows:Exception/@locator) = 'request') and not(lower-case($request1//ows:Exception/@locator) = 'service')">
                      <ctl:message>
                      FAILURE: ows:Exception/@locator is absent or does not identify the invalid 'request' and 'service' attributes.
                      </ctl:message>
                      <ctl:fail/>
                    </xsl:if>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

        <test name="wfs:wfs-1.1.0-Basic-GetCapabilities-tc17.1">
      <param name="wfs.GetCapabilities.get.url"/>
      <assertion>A valid service metadata document must conform to a content model based on the ows:CapabilitiesBaseType definition. Additional service-specific elements may be defined as needed.</assertion>
      <comment>Pass if all of the following conditions are true: (1) the response is schema valid (containing all required elements); (2) the root document is an ows:ExceptionReport document.</comment>
      <link>ows-1.0.0-metadata-atc6</link>
      <link>OGC 05-008c1, 7.4.8, p.29</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetCapabilities.get.url"/>
                                        </url>
                                        <method>get</method>
                                        <param name="service">WFS</param>
                                        <param name="version">1.1.0</param>
                                        <param name="request">GetCapabilities</param>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                                        <xsl:variable name="expression">//wfs:WFS_Capabilities</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

        <test name="wfs:wfs-1.1.0-Basic-GetCapabilities-tc18.1">
      <param name="wfs.GetCapabilities.get.url"/>
      <assertion>A complete service metadata document must include mandatory parameters and constraints in the OperationsMetadata section.</assertion>
      <comment>Pass if the response is schema valid and includes a complete wfs:WFS_Capabilities document.</comment>
      <link>ows-1.0.0-metadata-atc7</link>
      <link>OGC 05-008c1, 7.4.6, p.26</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetCapabilities.get.url"/>
                                        </url>
                                        <method>GET</method>
                                        <param name="service">WFS</param>
                                        <param name="version">1.1.0</param>
                                        <param name="request">GetCapabilities</param>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                                        <ctl:call-test name="ctl:SchematronValidatingParser">
                                                <ctl:with-param name="doc" select="$request1"/>
                                                <ctl:with-param name="schema">sch/wfs/1.1.0/Capabilities.sch</ctl:with-param>
                                                <ctl:with-param name="phase">RequiredBasicElementsPhase</ctl:with-param>
                                        </ctl:call-test>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

    <test name="wfs:wfs-1.1.0-Basic-GetCapabilities-tc19.1">
      <param name="wfs.GetCapabilities.get.url"/>
      <assertion>
      The response to a GetCapabilities request that includes a sections parameter
      with NO VALUE provided shall include an abbreviated capabilities document
      that omits all optional sections.
      </assertion>
      <comment>Pass if the response is schema valid and omits all optional
      top-level elements.</comment>
      <link>ows-1.0.0-metadata-atc9</link>
      <link>OGC 05-008c1, 7.3.3, p.17</link>
                <code>
                        <xsl:variable name="response">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetCapabilities.get.url"/>
                                        </url>
                                        <method>GET</method>
                                        <param name="service">WFS</param>
                                        <param name="request">GetCapabilities</param>
                    <param name="sections"/>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

            <xsl:choose>
              <xsl:when test="not($response/*)">
                  <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                  <ctl:fail/>
              </xsl:when>
              <xsl:otherwise>
                <ctl:call-test name="ctl:SchematronValidatingParser">
                            <ctl:with-param name="doc" select="$response"/>
                            <ctl:with-param name="schema">sch/wfs/1.1.0/Capabilities.sch</ctl:with-param>
                            <ctl:with-param name="phase">AbbreviatedContentPhase</ctl:with-param>
                    </ctl:call-test>
              </xsl:otherwise>
            </xsl:choose>
                </code>
        </test>

    <test name="wfs:wfs-1.1.0-Basic-GetCapabilities-tc19.2">
      <param name="wfs.GetCapabilities.get.url"/>
      <assertion>
      The response to a GetCapabilities request that includes a sections parameter
      listing optional elements shall include only the requested elements in the
      response entity.
      </assertion>
      <comment>
      Pass if the response is schema valid and includes only the requested optional
      elements.
      </comment>
      <link>ows-1.0.0-metadata-atc9</link>
      <link>OGC 05-008c1, 7.3.3, p.17</link>
                <code>
                        <xsl:variable name="response">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetCapabilities.get.url"/>
                                        </url>
                                        <method>GET</method>
                                        <param name="service">WFS</param>
                                        <param name="request">GetCapabilities</param>
                    <param name="version">1.1.0</param>
                    <param name="sections">OperationsMetadata,FeatureTypeList</param>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

            <xsl:choose>
              <xsl:when test="not($response/*)">
                  <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                  <ctl:fail/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:if test="not($response//ows:OperationsMetadata)">
                    <ctl:message>FAILURE: ows:OperationsMetadata element is missing</ctl:message>
                    <ctl:fail/>
                </xsl:if>
                <xsl:if test="not($response//wfs:FeatureTypeList)">
                    <ctl:message>FAILURE: wfs:FeatureTypeList element is missing</ctl:message>
                    <ctl:fail/>
                </xsl:if>
                <xsl:if test="$response//ows:ServiceIdentification">
                    <ctl:message>FAILURE: ows:ServiceIdentification element is included</ctl:message>
                    <ctl:fail/>
                </xsl:if>
                <xsl:if test="$response//ows:ServiceProvider">
                    <ctl:message>FAILURE: ows:ServiceProvider element is included</ctl:message>
                    <ctl:fail/>
                </xsl:if>
              </xsl:otherwise>
            </xsl:choose>
                </code>
        </test>

    <ctl:test name="wfs:wfs-1.1.0-Basic-GetCapabilities-tc22.1">
      <ctl:param name="wfs.GetCapabilities.get.url"/>
      <ctl:param name="wfs.GetCapabilities.formats"/>
      <ctl:assertion>
      The response to a GetCapabilities request containing an AcceptVersions
      parameter specifying a supported format must include a response entity
      that corresponds to the requested media type.
      </ctl:assertion>
      <ctl:link>OGC 05-008, 7.3.5</ctl:link>
                <ctl:code>
          <xsl:for-each select="$wfs.GetCapabilities.formats//ows:Value">
            <xsl:variable name="format" select="./text()"/>
            <xsl:variable name="response">
                                <ctl:request>
                                        <ctl:url>
                                                <xsl:value-of select="$wfs.GetCapabilities.get.url"/>
                                        </ctl:url>
                                        <ctl:method>GET</ctl:method>
                                        <ctl:param name="service">WFS</ctl:param>
                                        <ctl:param name="request">GetCapabilities</ctl:param>
                    <ctl:param name="acceptformats"><xsl:value-of select="$format"/></ctl:param>
                                        <parsers:HTTPParser/>
                                </ctl:request>
                        </xsl:variable>
            <xsl:variable name="content-type" select="$response//headers/header[@name='Content-Type']"/>
                        <xsl:if test="not(starts-with($content-type, $format))">
                                <ctl:message>FAILURE: Unexpected content type for response entity (Request: <xsl:value-of select="$format"/>, Response: <xsl:value-of select="$content-type"/>).</ctl:message>
                                <ctl:fail/>
                        </xsl:if>
          </xsl:for-each>
                </ctl:code>
        </ctl:test>

</ctl:package>
	<ctl:package xmlns="http://www.occamlab.com/ctl">

    <ctl:test name="wfs:run-GetCapabilities-POST">
      <param name="wfs.GetCapabilities.document"/>
      <ctl:assertion>
      Run test group for GetCapabilities requests using the POST method. Target endpoint is {$wfs.GetCapabilities.document//ows:OperationsMetadata/ows:Operation[@name='GetCapabilities']/ows:DCP/ows:HTTP/ows:Post/@xlink:href}.
      </ctl:assertion>
      <ctl:code>

		<xsl:variable name="wfs.GetCapabilities.post.url">
			<xsl:value-of select="$wfs.GetCapabilities.document//ows:OperationsMetadata/ows:Operation[@name='GetCapabilities']/ows:DCP/ows:HTTP/ows:Post/@xlink:href"/>
		</xsl:variable>
                <xsl:variable name="kvp-post-supported" select="boolean($wfs.GetCapabilities.document//ows:OperationsMetadata/ows:Operation[@name='GetCapabilities']/ows:DCP/ows:HTTP/ows:Post/ows:Constraint[@name='InputFormat' and ows:Value='application/x-www-form-urlencoded'])"/>

		<ctl:call-test name="wfs:wfs-1.1.0-Basic-GetCapabilities-tc2.1">
			<ctl:with-param name="wfs.GetCapabilities.post.url" select="$wfs.GetCapabilities.post.url"/>
		</ctl:call-test>
		<xsl:if test="$kvp-post-supported">
			<ctl:call-test name="wfs:wfs-1.1.0-Basic-GetCapabilities-tc2.2">
				<ctl:with-param name="wfs.GetCapabilities.post.url" select="$wfs.GetCapabilities.post.url"/>
			</ctl:call-test>
		</xsl:if>
		<ctl:call-test name="wfs:wfs-1.1.0-Basic-GetCapabilities-tc20.1">
			<ctl:with-param name="wfs.GetCapabilities.post.url" select="$wfs.GetCapabilities.post.url"/>
		</ctl:call-test>
		<ctl:call-test name="wfs:wfs-1.1.0-Basic-GetCapabilities-tc21.1">
			<ctl:with-param name="wfs.GetCapabilities.post.url" select="$wfs.GetCapabilities.post.url"/>
		</ctl:call-test>

      </ctl:code>
    </ctl:test>

	<test name="wfs:wfs-1.1.0-Basic-GetCapabilities-tc2.1">
      <param name="wfs.GetCapabilities.post.url"/>
      <assertion>The POST method may be supported using either the XML or KVP entity representations.</assertion>
      <comment>GetCapabilities using XML POST.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is a wfs:WFS_Capabilities document as expected.</comment>
	  <link>wfs-1.1.0-Basic-GetCapabilities-atc3</link>
      <link>OGC 04-094, 13.1, p.79</link>
		<code>

			<xsl:variable name="request1">
				<request>
				   <url>
					  <xsl:value-of select="$wfs.GetCapabilities.post.url"/>
				   </url>
				   <method>post</method>
				   <body>
					   <foo:GetCapabilities xmlns:foo="http://www.opengis.net/wfs" service="WFS"/>
				   </body>
					<p:XMLValidatingParser.GMLSF1/>
				</request>
			</xsl:variable>

			<xsl:choose>
				<xsl:when test="not($request1/*)">
			       	<ctl:message>ERROR: Missing response entity.</ctl:message>
					<ctl:fail/>
			    </xsl:when>
			    <xsl:otherwise>
					<xsl:variable name="expression">//wfs:WFS_Capabilities</xsl:variable>
					<ctl:call-test name="ctl:assert-xpath">
						<ctl:with-param name="expr" select="$expression"/>
						<ctl:with-param name="doc" select="$request1"/>
					</ctl:call-test>
				</xsl:otherwise>
			</xsl:choose>

		</code>
	</test>

	<test name="wfs:wfs-1.1.0-Basic-GetCapabilities-tc2.2">
      <param name="wfs.GetCapabilities.post.url"/>
      <assertion>The POST method may be supported using either the XML or KVP entity representations.</assertion>
      <comment>GetCapabilities using KVP over POST.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is a wfs:WFS_Capabilities document as expected.</comment>
	  <link>wfs-1.1.0-Basic-GetCapabilities-atc3</link>
      <link>OGC 04-094, 13.1, p.79</link>
		<code>

			<xsl:variable name="request1">
				<request>
				   <url>
					  <xsl:value-of select="$wfs.GetCapabilities.post.url"/>
				   </url>
				   <method>post</method>
				   <param name="request">GetCapabilities</param>
				   <param name="service">WFS</param>
				   <param name="version">1.1.0</param>
					<p:XMLValidatingParser.GMLSF1/>
				</request>
			</xsl:variable>

			<xsl:choose>
				<xsl:when test="not($request1/*)">
			       	<ctl:message>ERROR: Missing response entity.</ctl:message>
					<ctl:fail/>
			    </xsl:when>
			    <xsl:otherwise>
					<xsl:variable name="expression">//wfs:WFS_Capabilities</xsl:variable>
					<ctl:call-test name="ctl:assert-xpath">
						<ctl:with-param name="expr" select="$expression"/>
						<ctl:with-param name="doc" select="$request1"/>
					</ctl:call-test>
				</xsl:otherwise>
			</xsl:choose>

		</code>
	</test>

	<test name="wfs:wfs-1.1.0-Basic-GetCapabilities-tc20.1">
      <param name="wfs.GetCapabilities.post.url"/>
      <assertion>The Content-Type of all XML request entities must be 'application/xml'.</assertion>
      <comment>GetCapabilities with the encoding as 'application/xml' (default).  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is a wfs:WFS_Capabilities document.</comment>
      <link>wfs-1.1.0-Basic-atc-11</link>
      <link>OGC 04-094, 6.5.1, p.13</link>
		<code>

			<xsl:variable name="request1">
				<request>
					<url>
						<xsl:value-of select="$wfs.GetCapabilities.post.url"/>
					</url>
				   <method>post</method>
				   <body>
					   <wfs:GetCapabilities service="WFS"/>
				   </body>
					<p:XMLValidatingParser.GMLSF1/>
				</request>
			</xsl:variable>

			<xsl:choose>
				<xsl:when test="not($request1/*)">
			        <ctl:message>ERROR: Missing response entity.</ctl:message>
					<ctl:fail/>
			    </xsl:when>
  			    <xsl:otherwise>
					<xsl:variable name="expression">//wfs:WFS_Capabilities</xsl:variable>
					<ctl:call-test name="ctl:assert-xpath">
						<ctl:with-param name="expr" select="$expression"/>
						<ctl:with-param name="doc" select="$request1"/>
					</ctl:call-test>
				</xsl:otherwise>
			</xsl:choose>

		</code>
	</test>

	<test name="wfs:wfs-1.1.0-Basic-GetCapabilities-tc21.1">
      <param name="wfs.GetCapabilities.post.url"/>
      <assertion>A valid XML request entity submitted using the POST method must conform to the declaration of the ows:GetCapabilities element.</assertion>
      <comment>Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is a wfs:WFS_Capabilities document.</comment>
      <link>ows-1.0.0-metadata-atc8</link>
      <link>OGC 05-008c1, 7.2.3, p.12</link>
		<code>

			<xsl:variable name="request1">
				<request>
					<url>
						<xsl:value-of select="$wfs.GetCapabilities.post.url"/>
					</url>
				   <method>post</method>
				   <body>
					  <wfs:GetCapabilities service="WFS"/>
				   </body>
					<p:XMLValidatingParser.GMLSF1/>
				</request>
			</xsl:variable>

			<xsl:choose>
				<xsl:when test="not($request1/*)">
			        <ctl:message>ERROR: Missing response entity.</ctl:message>
					<ctl:fail/>
			    </xsl:when>
  			    <xsl:otherwise>
					<xsl:variable name="expression">//wfs:WFS_Capabilities</xsl:variable>
					<ctl:call-test name="ctl:assert-xpath">
						<ctl:with-param name="expr" select="$expression"/>
						<ctl:with-param name="doc" select="$request1"/>
					</ctl:call-test>
				</xsl:otherwise>
			</xsl:choose>

		</code>
	</test>

</ctl:package>
	<ctl:package xmlns="http://www.occamlab.com/ctl" xmlns:gml="http://www.opengis.net/gml">

    <ctl:test name="wfs:run-DescribeFeatureType-GET">
      <param name="wfs.GetCapabilities.document"/>
      <param name="gmlsf.profile.level"/>
      <ctl:assertion>
      Run test group for DescribeFeatureType requests using the GET method. Target endpoint is {$wfs.GetCapabilities.document//ows:OperationsMetadata/ows:Operation[@name='DescribeFeatureType']/ows:DCP/ows:HTTP/ows:Get/@xlink:href}.
      </ctl:assertion>
      <ctl:code>
                <xsl:variable name="wfs.DescribeFeatureType.get.url">
                        <xsl:value-of select="$wfs.GetCapabilities.document//ows:OperationsMetadata/ows:Operation[@name='DescribeFeatureType']/ows:DCP/ows:HTTP/ows:Get/@xlink:href"/>
                </xsl:variable>

                <ctl:call-test name="wfs:DescribeFeatureType-output-format-default">
                        <ctl:with-param name="CAPABILITIES" select="$wfs.GetCapabilities.document"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:DescribeFeatureType-output-format-XMLSCHEMA">
                        <ctl:with-param name="CAPABILITIES" select="$wfs.GetCapabilities.document"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:DescribeFeatureType-output-format-gml-2.1.2">
                        <ctl:with-param name="CAPABILITIES" select="$wfs.GetCapabilities.document"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:DescribeFeatureType-output-format-gml-3.1.1">
                        <ctl:with-param name="CAPABILITIES" select="$wfs.GetCapabilities.document"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:DescribeFeatureType-invalid-featureType">
                        <ctl:with-param name="CAPABILITIES" select="$wfs.GetCapabilities.document"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-DescribeFeatureType-tc1.1">
                        <ctl:with-param name="wfs.DescribeFeatureType.get.url" select="$wfs.DescribeFeatureType.get.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-DescribeFeatureType-tc4.1">
                        <ctl:with-param name="wfs.DescribeFeatureType.get.url" select="$wfs.DescribeFeatureType.get.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-DescribeFeatureType-tc4.2">
                        <ctl:with-param name="wfs.DescribeFeatureType.get.url" select="$wfs.DescribeFeatureType.get.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-DescribeFeatureType-tc4.3">
                        <ctl:with-param name="wfs.DescribeFeatureType.get.url" select="$wfs.DescribeFeatureType.get.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-DescribeFeatureType-tc4.4">
                        <ctl:with-param name="wfs.DescribeFeatureType.get.url" select="$wfs.DescribeFeatureType.get.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-DescribeFeatureType-tc5.1">
                        <ctl:with-param name="wfs.DescribeFeatureType.get.url" select="$wfs.DescribeFeatureType.get.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-DescribeFeatureType-tc8.1">
                        <ctl:with-param name="wfs.DescribeFeatureType.get.url" select="$wfs.DescribeFeatureType.get.url"/>
                        <ctl:with-param name="gmlsf.profile.level" select="$gmlsf.profile.level"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-DescribeFeatureType-tc10.1">
                        <ctl:with-param name="wfs.DescribeFeatureType.get.url" select="$wfs.DescribeFeatureType.get.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-DescribeFeatureType-tc12.1">
                        <ctl:with-param name="wfs.DescribeFeatureType.get.url" select="$wfs.DescribeFeatureType.get.url"/>
                </ctl:call-test>

        <xsl:if test="gmlsf.profile.level = 'sf-1'">
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-DescribeFeatureType-tc10.2">
                        <ctl:with-param name="wfs.DescribeFeatureType.get.url" select="$wfs.DescribeFeatureType.get.url"/>
                </ctl:call-test>
        </xsl:if>

      </ctl:code>
    </ctl:test>

        <test name="wfs:wfs-1.1.0-Basic-DescribeFeatureType-tc1.1">
      <param name="wfs.DescribeFeatureType.get.url"/>
      <assertion>A valid namespace binding expressed by the namespace parameter in a KVP string shall conform to the syntax specified in subclause 14.4.</assertion>
      <comment>DescribeFeatureType with the namespace KVP parameter (escaped by engine).  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is an xsd:schema document.</comment>
      <link>wfs-1.1.0-Basic-atc6</link>
      <link>OGC 04-094, 14.4, p.96</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.DescribeFeatureType.get.url"/>
                                        </url>
                                        <method>get</method>
                                        <param name="service">WFS</param>
                                        <param name="version">1.1.0</param>
                                        <param name="request">DescribeFeatureType</param>
                                        <param name="typename">sf:PrimitiveGeoFeature</param>
                                        <param name="namespace">xmlns(sf=http://cite.opengeospatial.org/gmlsf)</param>
                                        <p:XMLValidatingParser.XMLSchema/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                        <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                                <xsl:otherwise>
                                        <xsl:variable name="expression">//xsd:schema</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

        <test name="wfs:wfs-1.1.0-Basic-DescribeFeatureType-tc4.1">
      <param name="wfs.DescribeFeatureType.get.url"/>
      <assertion>The following query parameters are required for all KVP-encoded service requests except GetCapabilities: service, request, version.</assertion>
      <comment>DescribeFeatureType with required parameters service 'WFS', version '1.1.0', and request of 'DescribeFeatureType'.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is an xsd:schema document.</comment>
      <link>ows-1.0.0-common-atc4</link>
      <link>OGC 05-008c1, 9.2.1, p.36 (Table 20)</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.DescribeFeatureType.get.url"/>
                                        </url>
                                        <method>get</method>
                                        <param name="service">WFS</param>
                                        <param name="version">1.1.0</param>
                                        <param name="request">DescribeFeatureType</param>
                                        <param name="typename">sf:PrimitiveGeoFeature</param>
                                        <param name="namespace">xmlns(sf=http://cite.opengeospatial.org/gmlsf)</param>
                                        <p:XMLValidatingParser.XMLSchema/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                        <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                                <xsl:otherwise>
                                        <xsl:variable name="expression">//xsd:schema</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

        <test name="wfs:wfs-1.1.0-Basic-DescribeFeatureType-tc4.2">
      <param name="wfs.DescribeFeatureType.get.url"/>
      <assertion>The following query parameters are required for all KVP-encoded service requests except GetCapabilities: service, request, version.</assertion>
      <comment>DescribeFeatureType with required parameters service 'WFS', version '1.1.0', and no request parameter.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is an ows:ExceptionReport document.</comment>
      <link>ows-1.0.0-common-atc4</link>
      <link>OGC 05-008c1, 9.2.1, p.36 (Table 20)</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.DescribeFeatureType.get.url"/>
                                        </url>
                                        <method>get</method>
                                        <param name="service">WFS</param>
                                        <param name="version">1.1.0</param>
                                        <param name="typename">sf:PrimitiveGeoFeature</param>
                                        <param name="namespace">xmlns(sf=http://cite.opengeospatial.org/gmlsf)</param>
                                        <p:XMLValidatingParser.OWS/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                        <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                                <xsl:otherwise>
                                        <xsl:variable name="expression">//ows:ExceptionReport</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

        <test name="wfs:wfs-1.1.0-Basic-DescribeFeatureType-tc4.3">
      <param name="wfs.DescribeFeatureType.get.url"/>
      <assertion>The following query parameters are required for all KVP-encoded service requests except GetCapabilities: service, request, version.</assertion>
      <comment>DescribeFeatureType with required parameters version '1.1.0', and request 'DescribeFeatureType', but no service.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is an ows:ExceptionReport document.</comment>
      <link>ows-1.0.0-common-atc4</link>
      <link>OGC 05-008c1, 9.2.1, p.36 (Table 20)</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.DescribeFeatureType.get.url"/>
                                        </url>
                                        <method>get</method>
                                        <param name="request">DescribeFeatureType</param>
                                        <param name="version">1.1.0</param>
                                        <param name="typename">sf:PrimitiveGeoFeature</param>
                                        <param name="namespace">xmlns(sf=http://cite.opengeospatial.org/gmlsf)</param>
                                        <p:XMLValidatingParser.OWS/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                        <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                                <xsl:otherwise>
                                        <xsl:variable name="expression">//ows:ExceptionReport</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

        <test name="wfs:wfs-1.1.0-Basic-DescribeFeatureType-tc4.4">
      <param name="wfs.DescribeFeatureType.get.url"/>
      <assertion>The following query parameters are required for all KVP-encoded service requests except GetCapabilities: service, request, version.</assertion>
      <comment>DescribeFeatureType with required parameters service 'WFS', and request 'DescribeFeatureType', but no version.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is an ows:ExceptionReport document.</comment>
      <link>ows-1.0.0-common-atc4</link>
      <link>OGC 05-008c1, 9.2.1, p.36 (Table 20)</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.DescribeFeatureType.get.url"/>
                                        </url>
                                        <method>get</method>
                                        <param name="request">DescribeFeatureType</param>
                                        <param name="service">WFS</param>
                                        <param name="typename">sf:PrimitiveGeoFeature</param>
                                        <param name="namespace">xmlns(sf=http://cite.opengeospatial.org/gmlsf)</param>
                                        <p:XMLValidatingParser.OWS/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                        <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                                <xsl:otherwise>
                                        <xsl:variable name="expression">//ows:ExceptionReport</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

        <test name="wfs:wfs-1.1.0-Basic-DescribeFeatureType-tc5.1">
      <param name="wfs.DescribeFeatureType.get.url"/>
      <assertion>A comma (',') shall be used to delimit list items within multi-valued parameters in KVP strings.</assertion>
      <comment>DescribeFeatureType with multiple typename seperated by a comma.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is an xsd:schema document.</comment>
      <link>ows-1.0.0-common-atc7</link>
      <link>OGC 05-008c1, 11.5.3, p.57</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.DescribeFeatureType.get.url"/>
                                        </url>
                                        <method>get</method>
                                        <param name="service">WFS</param>
                                        <param name="version">1.1.0</param>
                                        <param name="request">DescribeFeatureType</param>
                                        <param name="typename">sf:PrimitiveGeoFeature,sf:AggregateGeoFeature</param>
                                        <param name="namespace">xmlns(sf=http://cite.opengeospatial.org/gmlsf)</param>
                                        <p:XMLValidatingParser.XMLSchema/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                        <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                                <xsl:otherwise>
                                        <xsl:variable name="expression">//xsd:schema</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

        <test name="wfs:wfs-1.1.0-Basic-DescribeFeatureType-tc8.1">
      <param name="wfs.DescribeFeatureType.get.url"/>
          <param name="gmlsf.profile.level"/>
          <assertion>Application schemas that comply with GML 3.1.1 must be a supported. These are presented if no outputFormat is specified.</assertion>
      <comment>DescribeFeatureType for a single feature type, expect the schema to validate with the proper GMLSF level as well.  Pass if all of the following conditions are true: (1) the response is schema valid (both xsd:schema and the proper GMLSF level supported); (2) the root document is a xsd:schema document.</comment>
      <link>wfs-1.1.0-Basic-DescribeFeatureType-atc1</link>
      <link>OGC 04-094, 8.1, p.24</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.DescribeFeatureType.get.url"/>
                                        </url>
                                   <method>get</method>
                                        <param name="service">WFS</param>
                                        <param name="version">1.1.0</param>
                                        <param name="request">DescribeFeatureType</param>
                                        <param name="typename">sf:PrimitiveGeoFeature</param>
                                        <param name="namespace">xmlns(sf=http://cite.opengeospatial.org/gmlsf)</param>
                                        <p:XMLValidatingParser.XMLSchema/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                                        <xsl:variable name="expression">//xsd:schema</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

        <test name="wfs:wfs-1.1.0-Basic-DescribeFeatureType-tc10.1">
      <param name="wfs.DescribeFeatureType.get.url"/>
          <assertion>A request for a given TypeName shall produce a response that includes the corresponding type definition in the requested schema language.</assertion>
      <comment>DescribeFeatureType for a single feature type ('sf:PrimitiveGeoFeature'), expect the schema to contain a schema description for that feature.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is a xsd:schema document; (3) the schema has an entry for the requested feature type (with correct targetNamespace).</comment>
      <link>wfs-1.1.0-Basic-DescribeFeatureType-atc2</link>
      <link>OGC 04-094, 8.3, p.26</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.DescribeFeatureType.get.url"/>
                                        </url>
                                   <method>get</method>
                                        <param name="service">WFS</param>
                                        <param name="version">1.1.0</param>
                                        <param name="request">DescribeFeatureType</param>
                                        <param name="typename">sf:PrimitiveGeoFeature</param>
                                        <param name="namespace">xmlns(sf=http://cite.opengeospatial.org/gmlsf)</param>
                                        <p:XMLValidatingParser.XMLSchema/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                                        <xsl:variable name="expression">//xsd:schema</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                        <xsl:variable name="expression">//@targetNamespace = 'http://cite.opengeospatial.org/gmlsf'</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                        <xsl:variable name="expression">//xsd:element/@name = 'PrimitiveGeoFeature'</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

        <test name="wfs:wfs-1.1.0-Basic-DescribeFeatureType-tc10.2">
      <param name="wfs.DescribeFeatureType.get.url"/>
          <assertion>A request for a given TypeName shall produce a response that includes the corresponding type definition in the requested schema language.</assertion>
      <comment>DescribeFeatureType for a single feature type in GMLSF level 1 ('sf:ComplexGeoFeature'), expect the schema to contain a schema description for that feature.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is a xsd:schema document; (3) the schema has an entry for the requested feature type (with correct targetNamespace).</comment>
      <link>wfs-1.1.0-Basic-DescribeFeatureType-atc2</link>
      <link>OGC 04-094, 8.3, p.26</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.DescribeFeatureType.get.url"/>
                                        </url>
                                   <method>get</method>
                                        <param name="service">WFS</param>
                                        <param name="version">1.1.0</param>
                                        <param name="request">DescribeFeatureType</param>
                                        <param name="typename">sf:ComplexGeoFeature</param>
                                        <param name="namespace">xmlns(sf=http://cite.opengeospatial.org/gmlsf)</param>
                                        <p:XMLValidatingParser.XMLSchema/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                                        <xsl:variable name="expression">//xsd:schema</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                        <xsl:variable name="expression">//@targetNamespace = 'http://cite.opengeospatial.org/gmlsf'</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                        <xsl:variable name="expression">//xsd:element/@name = 'ComplexGeoFeature'</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

        <test name="wfs:wfs-1.1.0-Basic-DescribeFeatureType-tc12.1">
      <param name="wfs.DescribeFeatureType.get.url"/>
          <assertion>A request with no TypeName elements shall produce a response that includes definitions of all supported feature types in the requested schema language.</assertion>
      <comment>DescribeFeatureType no feature types, expect either the CITE test schema or a wrapper schema that imports it, among other schemas.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is a xsd:schema document; (3) the schema has an entry for all the feature types in the test schema.</comment>
      <link>wfs-1.1.0-Basic-DescribeFeatureType-atc3</link>
      <link>OGC 04-094, 8.2, p.25</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.DescribeFeatureType.get.url"/>
                                        </url>
                                   <method>get</method>
                                        <param name="service">WFS</param>
                                        <param name="version">1.1.0</param>
                                        <param name="request">DescribeFeatureType</param>
                                        <p:XMLValidatingParser.XMLSchema/>
                                </request>
                        </xsl:variable>

                        <xsl:variable name="citeNamespaceURL" select="$request1//xsd:import[@namespace='http://cite.opengeospatial.org/gmlsf']/@schemaLocation"/>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                                        <xsl:variable name="expression">//xsd:schema</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>

                                        <xsl:choose>
                                                <!--Required schema-->
                                                <xsl:when test="string($citeNamespaceURL)=''">
                                                        <xsl:variable name="expression">//@targetNamespace = 'http://cite.opengeospatial.org/gmlsf'</xsl:variable>
                                                        <ctl:call-test name="ctl:assert-xpath">
                                                                <ctl:with-param name="expr" select="$expression"/>
                                                                <ctl:with-param name="doc" select="$request1"/>
                                                        </ctl:call-test>
                                                        <xsl:variable name="expression">(//xsd:element/@name = 'PrimitiveGeoFeature') and (//xsd:element/@name = 'AggregateGeoFeature') and (//xsd:element/@name = 'EntitéGénérique')</xsl:variable>
                                                        <ctl:call-test name="ctl:assert-xpath">
                                                                <ctl:with-param name="expr" select="$expression"/>
                                                                <ctl:with-param name="doc" select="$request1"/>
                                                        </ctl:call-test>
                                                </xsl:when>
                                                <!--Wrapper schema, must get the required schema-->
                                                <xsl:otherwise>

                                                        <xsl:variable name="request2">
                                                                <request>
                                                                        <url>
                                                                                <xsl:value-of select="$citeNamespaceURL"/>
                                                                        </url>
                                                                   <method>get</method>
                                                                        <!--<p:XMLValidatingParser.XMLSchema/>-->
                                                                </request>
                                                        </xsl:variable>

                                                        <xsl:choose>
                                                                <xsl:when test="not($request2/*)">
                                                                        <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                                                        <ctl:fail/>
                                                                </xsl:when>
                                                                <xsl:otherwise>

                                                                        <xsl:variable name="expression">//@targetNamespace = 'http://cite.opengeospatial.org/gmlsf'</xsl:variable>
                                                                        <ctl:call-test name="ctl:assert-xpath">
                                                                                <ctl:with-param name="expr" select="$expression"/>
                                                                                <ctl:with-param name="doc" select="$request2"/>
                                                                        </ctl:call-test>
                                                                        <xsl:variable name="expression">(//xsd:element/@name = 'PrimitiveGeoFeature') and (//xsd:element/@name = 'AggregateGeoFeature') and (//xsd:element/@name = 'EntitéGénérique')</xsl:variable>
                                                                        <ctl:call-test name="ctl:assert-xpath">
                                                                                <ctl:with-param name="expr" select="$expression"/>
                                                                                <ctl:with-param name="doc" select="$request2"/>
                                                                        </ctl:call-test>
                                                                </xsl:otherwise>
                                                                </xsl:choose>

                                                </xsl:otherwise>
                                        </xsl:choose>

                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

        <ctl:test name="wfs:DescribeFeatureType-output-format-default">
                <ctl:param name="CAPABILITIES"/>
                <ctl:assertion>The MIME returned for a DescribeFeatureType request where no specific output format is requested is "text/xml; subtype=gml/3.1.1".</ctl:assertion>
                <ctl:comment/>
        <ctl:link>OGC 04-094, 6.4, p.11</ctl:link>
        <ctl:link>OGC 04-094, 8.2, p.25</ctl:link>
                <ctl:code>
                        <xsl:variable name="RESPONSE">
                                <ctl:request>
                                        <ctl:url>
                                                <xsl:value-of select="$CAPABILITIES/ows:OperationsMetadata/ows:Operation[@name='DescribeFeatureType']/ows:DCP/ows:HTTP/ows:Get/@xlink:href"/>
                                        </ctl:url>
                                        <ctl:method>get</ctl:method>
                                        <ctl:param name="request">DescribeFeatureType</ctl:param>
                                        <ctl:param name="service">WFS</ctl:param>
                                        <ctl:param name="version">1.1.0</ctl:param>
                            <parsers:HTTPParser>
                               <parsers:parse>
                                  <parsers:NullParser/>
                               </parsers:parse>
                            </parsers:HTTPParser>
                                </ctl:request>
                        </xsl:variable>
                        <xsl:if test="not(starts-with($RESPONSE/response/headers/header[lower-case(@name) = 'content-type'], 'text/xml; subtype=gml/3.1.1'))">
                                <ctl:fail/>
                        </xsl:if>
                </ctl:code>
        </ctl:test>

        <ctl:test name="wfs:DescribeFeatureType-output-format-XMLSCHEMA">
                <ctl:param name="CAPABILITIES"/>
                <ctl:assertion>When output format XMLSCHEMA is supported, the MIME returned for a DescribeFeatureType request where the output format requested is XMLSCHEMA is "text/xml; subtype=gml/2.1.2".</ctl:assertion>
                <ctl:comment/>
        <ctl:link>OGC 04-094, 6.4, p.11</ctl:link>
        <ctl:link>OGC 04-094, 8.2, p.25</ctl:link>
                <ctl:code>
                <xsl:choose>
                    <xsl:when test="$CAPABILITIES/ows:OperationsMetadata/ows:Operation[@name='DescribeFeatureType']/ows:Parameter[@name='outputFormat' and ows:Value='XMLSCHEMA']">
                                        <xsl:variable name="RESPONSE">
                                                <ctl:request>
                                                        <ctl:url>
                                                                <xsl:value-of select="$CAPABILITIES/ows:OperationsMetadata/ows:Operation[@name='DescribeFeatureType']/ows:DCP/ows:HTTP/ows:Get/@xlink:href"/>
                                                        </ctl:url>
                                                        <ctl:method>get</ctl:method>
                                                        <ctl:param name="request">DescribeFeatureType</ctl:param>
                                                        <ctl:param name="service">WFS</ctl:param>
                                                        <ctl:param name="version">1.1.0</ctl:param>
                                                        <ctl:param name="outputformat">XMLSCHEMA</ctl:param>
                                            <parsers:HTTPParser>
                                               <parsers:parse>
                                                  <parsers:NullParser/>
                                               </parsers:parse>
                                            </parsers:HTTPParser>
                                                </ctl:request>
                                        </xsl:variable>
                                        <xsl:if test="not($RESPONSE/response/headers/header[lower-case(@name) = 'content-type']= 'text/xml; subtype=gml/2.1.2')">
                                                <ctl:fail/>
                                        </xsl:if>
                    </xsl:when>
                    <xsl:otherwise>
                                        <ctl:message>output format XMLSCHEMA is not supported</ctl:message>
                    </xsl:otherwise>
                 </xsl:choose>
                </ctl:code>
        </ctl:test>

        <ctl:test name="wfs:DescribeFeatureType-output-format-gml-2.1.2">
                <ctl:param name="CAPABILITIES"/>
                <ctl:assertion>When output format "text/xml; subtype=gml/2.1.2" is supported, the MIME returned for a DescribeFeatureType request where the output format requested is "text/xml; subtype=gml/2.1.2" is "text/xml; subtype=gml/2.1.2".</ctl:assertion>
                <ctl:comment/>
        <ctl:link>OGC 04-094, 6.4, p.11</ctl:link>
        <ctl:link>OGC 04-094, 8.2, p.25</ctl:link>
                <ctl:code>
                <xsl:choose>
                    <xsl:when test="$CAPABILITIES/ows:OperationsMetadata/ows:Operation[@name='DescribeFeatureType']/ows:Parameter[@name='outputFormat' and ows:Value='text/xml; subtype=gml/2.1.2']">
                                        <xsl:variable name="RESPONSE">
                                                <ctl:request>
                                                        <ctl:url>
                                                                <xsl:value-of select="$CAPABILITIES/ows:OperationsMetadata/ows:Operation[@name='DescribeFeatureType']/ows:DCP/ows:HTTP/ows:Get/@xlink:href"/>
                                                        </ctl:url>
                                                        <ctl:method>get</ctl:method>
                                                        <ctl:param name="request">DescribeFeatureType</ctl:param>
                                                        <ctl:param name="service">WFS</ctl:param>
                                                        <ctl:param name="version">1.1.0</ctl:param>
                                                        <ctl:param name="outputformat">
                                                         <xsl:value-of select="wfs:encode('text/xml; subtype=gml/2.1.2', 'UTF-8')"/>
                                                        </ctl:param>
                                            <parsers:HTTPParser>
                                               <parsers:parse>
                                                  <parsers:NullParser/>
                                               </parsers:parse>
                                            </parsers:HTTPParser>
                                                </ctl:request>
                                        </xsl:variable>
                                        <xsl:if test="not(starts-with($RESPONSE/response/headers/header[lower-case(@name) = 'content-type'], 'text/xml; subtype=gml/2.1.2'))">
                                                <ctl:fail/>
                                        </xsl:if>
                    </xsl:when>
                    <xsl:otherwise>
                                        <ctl:message>output format 'text/xml; subtype=gml/2.1.2' is not supported</ctl:message>
                    </xsl:otherwise>
                 </xsl:choose>
                </ctl:code>
        </ctl:test>

        <ctl:test name="wfs:DescribeFeatureType-output-format-gml-3.1.1">
                <ctl:param name="CAPABILITIES"/>
                <ctl:assertion>The MIME returned for a DescribeFeatureType request where the output format requested is "text/xml; subtype=gml/3.1.1" is "text/xml; subtype=gml/3.1.1".</ctl:assertion>
                <ctl:comment/>
        <ctl:link>OGC 04-094, 6.4, p.11</ctl:link>
        <ctl:link>OGC 04-094, 8.2, p.25</ctl:link>
                <ctl:code>
                        <xsl:variable name="RESPONSE">
                                <ctl:request>
                                        <ctl:url>
                                                <xsl:value-of select="$CAPABILITIES/ows:OperationsMetadata/ows:Operation[@name='DescribeFeatureType']/ows:DCP/ows:HTTP/ows:Get/@xlink:href"/>
                                        </ctl:url>
                                        <ctl:method>get</ctl:method>
                                        <ctl:param name="request">DescribeFeatureType</ctl:param>
                                        <ctl:param name="service">WFS</ctl:param>
                                        <ctl:param name="version">1.1.0</ctl:param>
                                        <ctl:param name="outputformat">
                                         <xsl:value-of select="wfs:encode('text/xml; subtype=gml/3.1.1', 'UTF-8')"/>
                                        </ctl:param>
                            <parsers:HTTPParser>
                               <parsers:parse>
                                  <parsers:NullParser/>
                               </parsers:parse>
                            </parsers:HTTPParser>
                                </ctl:request>
                        </xsl:variable>
                        <xsl:if test="not(starts-with($RESPONSE/response/headers/header[lower-case(@name) = 'content-type'], 'text/xml; subtype=gml/3.1.1'))">
                                <ctl:fail/>
                        </xsl:if>
                </ctl:code>
        </ctl:test>

        <ctl:test name="wfs:DescribeFeatureType-invalid-featureType">
                <ctl:param name="CAPABILITIES"/>
                <ctl:assertion>The response for a DescribeFeatureType request with an invalid feature type is an exception.</ctl:assertion>
                <ctl:comment/>
        <ctl:link>OGC 04-094, 8.4, p.27</ctl:link>
                <ctl:code>
                        <xsl:variable name="RESPONSE">
                                <ctl:request>
                                        <ctl:url>
                                                <xsl:value-of select="$CAPABILITIES/ows:OperationsMetadata/ows:Operation[@name='DescribeFeatureType']/ows:DCP/ows:HTTP/ows:Get/@xlink:href"/>
                                        </ctl:url>
                                        <ctl:method>get</ctl:method>
                                        <ctl:param name="request">DescribeFeatureType</ctl:param>
                                        <ctl:param name="service">WFS</ctl:param>
                                        <ctl:param name="version">1.1.0</ctl:param>
                                        <param name="typename">InValidFeatureType</param>
                            <parsers:HTTPParser>
                               <parsers:parse>
                                  <parsers:HTTPParser/>
                               </parsers:parse>
                            </parsers:HTTPParser>
                                </ctl:request>
                        </xsl:variable>
                        <xsl:if test="not($RESPONSE//ows:Exception/*)">
                                <ctl:fail/>
                        </xsl:if>
                </ctl:code>
        </ctl:test>

</ctl:package>
	<ctl:package xmlns="http://www.occamlab.com/ctl" xmlns:gml="http://www.opengis.net/gml">

    <ctl:test name="wfs:run-DescribeFeatureType-POST">
      <param name="wfs.GetCapabilities.document"/>
      <param name="gmlsf.profile.level"/>
      <ctl:assertion>
      Run test group for DescribeFeatureType requests using the POST method. Tarpost endpoint is {$wfs.GetCapabilities.document//ows:OperationsMetadata/ows:Operation[@name='DescribeFeatureType']/ows:DCP/ows:HTTP/ows:Post/@xlink:href}.
      </ctl:assertion>
      <ctl:code>
      
		<xsl:variable name="wfs.DescribeFeatureType.post.url">
			<xsl:value-of select="$wfs.GetCapabilities.document//ows:OperationsMetadata/ows:Operation[@name='DescribeFeatureType']/ows:DCP/ows:HTTP/ows:Post/@xlink:href"/>
		</xsl:variable>      
                <xsl:variable name="kvp-post-supported" select="boolean($wfs.GetCapabilities.document//ows:OperationsMetadata/ows:Operation[@name='DescribeFeatureType']/ows:DCP/ows:HTTP/ows:Post/ows:Constraint[@name='InputFormat' and ows:Value='application/x-www-form-urlencoded'])"/>
      
		<xsl:if test="$kvp-post-supported">
			<ctl:call-test name="wfs:wfs-1.1.0-Basic-DescribeFeatureType-tc2.1">
				<ctl:with-param name="wfs.DescribeFeatureType.post.url" select="$wfs.DescribeFeatureType.post.url"/>
			</ctl:call-test>	
		</xsl:if>
		<ctl:call-test name="wfs:wfs-1.1.0-Basic-DescribeFeatureType-tc3.1">
			<ctl:with-param name="wfs.DescribeFeatureType.post.url" select="$wfs.DescribeFeatureType.post.url"/>
		</ctl:call-test>	
		<ctl:call-test name="wfs:wfs-1.1.0-Basic-DescribeFeatureType-tc3.2">
			<ctl:with-param name="wfs.DescribeFeatureType.post.url" select="$wfs.DescribeFeatureType.post.url"/>
		</ctl:call-test>	
		<ctl:call-test name="wfs:wfs-1.1.0-Basic-DescribeFeatureType-tc3.3">
			<ctl:with-param name="wfs.DescribeFeatureType.post.url" select="$wfs.DescribeFeatureType.post.url"/>
		</ctl:call-test>
		<ctl:call-test name="wfs:wfs-1.1.0-Basic-DescribeFeatureType-tc3.4">
			<ctl:with-param name="wfs.DescribeFeatureType.post.url" select="$wfs.DescribeFeatureType.post.url"/>
		</ctl:call-test>	
		<ctl:call-test name="wfs:wfs-1.1.0-Basic-DescribeFeatureType-tc3.5">
			<ctl:with-param name="wfs.DescribeFeatureType.post.url" select="$wfs.DescribeFeatureType.post.url"/>
		</ctl:call-test>	
		<ctl:call-test name="wfs:wfs-1.1.0-Basic-DescribeFeatureType-tc3.6">
			<ctl:with-param name="wfs.DescribeFeatureType.post.url" select="$wfs.DescribeFeatureType.post.url"/>
		</ctl:call-test>			
		<ctl:call-test name="wfs:wfs-1.1.0-Basic-DescribeFeatureType-tc6.1">
			<ctl:with-param name="wfs.DescribeFeatureType.post.url" select="$wfs.DescribeFeatureType.post.url"/>
		</ctl:call-test>	
		<ctl:call-test name="wfs:wfs-1.1.0-Basic-DescribeFeatureType-tc7.1">
			<ctl:with-param name="wfs.DescribeFeatureType.post.url" select="$wfs.DescribeFeatureType.post.url"/>
			<ctl:with-param name="gmlsf.profile.level" select="$gmlsf.profile.level"/>			
		</ctl:call-test>	
		<ctl:call-test name="wfs:wfs-1.1.0-Basic-DescribeFeatureType-tc9.1">
			<ctl:with-param name="wfs.DescribeFeatureType.post.url" select="$wfs.DescribeFeatureType.post.url"/>		
		</ctl:call-test>	
		<ctl:call-test name="wfs:wfs-1.1.0-Basic-DescribeFeatureType-tc11.1">
			<ctl:with-param name="wfs.DescribeFeatureType.post.url" select="$wfs.DescribeFeatureType.post.url"/>		
		</ctl:call-test>	
		
        <xsl:if test="gmlsf.profile.level = 'sf-1'">
		<ctl:call-test name="wfs:wfs-1.1.0-Basic-DescribeFeatureType-tc9.2">
			<ctl:with-param name="wfs.DescribeFeatureType.post.url" select="$wfs.DescribeFeatureType.post.url"/>
		</ctl:call-test>	
        </xsl:if>			
		
      </ctl:code>
    </ctl:test>
   
   <test name="wfs:wfs-1.1.0-Basic-DescribeFeatureType-tc2.1">
      <param name="wfs.DescribeFeatureType.post.url"/>
      <assertion>The Content-Type of all POST KVP-encoded request entities must be 'application/x-www-form-urlencoded'.</assertion>
      <comment>DescribeFeatureType with 'application/x-www-form-urlencoded' encoding (default), KVP over POST.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is an xsd:schema document as expected.</comment>
      <link>wfs-1.1.0-Basic-atc7</link>
      <link>OGC 04-094, 6.5.1, p.13</link>
		<code>
		
			<xsl:variable name="request1">
				<request>
					<url>
						<xsl:value-of select="$wfs.DescribeFeatureType.post.url"/>
					</url>
					<method>post</method>
					<param name="service">WFS</param>
					<param name="version">1.1.0</param>
					<param name="request">DescribeFeatureType</param>
					<param name="typename">sf:PrimitiveGeoFeature</param>
					<param name="namespace">xmlns(sf=http://cite.opengeospatial.org/gmlsf)</param>
					<p:XMLValidatingParser.XMLSchema/>
				</request>
			</xsl:variable>		

			<xsl:choose>
				<xsl:when test="not($request1/*)">
			            <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
						<ctl:fail/>
				 </xsl:when>
				 <xsl:otherwise>
					<xsl:variable name="expression">//xsd:schema</xsl:variable>
					<ctl:call-test name="ctl:assert-xpath">
						<ctl:with-param name="expr" select="$expression"/>
						<ctl:with-param name="doc" select="$request1"/>
					</ctl:call-test>
				</xsl:otherwise>
			</xsl:choose>
			
		</code>
	</test>

	<test name="wfs:wfs-1.1.0-Basic-DescribeFeatureType-tc3.1">
      <param name="wfs.DescribeFeatureType.post.url"/>
      <assertion>The following attributes are required for all XML request entities: @version (default '1.1.0'); @service (default 'WFS').</assertion>
      <comment>DescribeFeatureType with version '1.1.0' and service '', expects default of 'WFS'.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is an xsd:schema document as expected.</comment>
      <link>wfs-1.1.0-Basic-atc9</link>
      <link>OGC 04-094, 7.8, p.24</link>
		<code>
		
			<xsl:variable name="request1">
				<request>
					<url>
						<xsl:value-of select="$wfs.DescribeFeatureType.post.url"/>
					</url>
				   <method>post</method>
				   <body>
						<wfs:DescribeFeatureType version="1.1.0" service="">
	<wfs:TypeName>sf:PrimitiveGeoFeature</wfs:TypeName>
</wfs:DescribeFeatureType>
				   </body>
					<p:XMLValidatingParser.XMLSchema/>
				</request>
			</xsl:variable>			

			<xsl:choose>
				<xsl:when test="not($request1/*)">
			        <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
					<ctl:fail/>
			    </xsl:when>
  			    <xsl:otherwise>
					<xsl:variable name="expression">//xsd:schema</xsl:variable>
					<ctl:call-test name="ctl:assert-xpath">
						<ctl:with-param name="expr" select="$expression"/>
						<ctl:with-param name="doc" select="$request1"/>
					</ctl:call-test>		
				</xsl:otherwise>
			</xsl:choose>
				
		</code>
	</test>

	<test name="wfs:wfs-1.1.0-Basic-DescribeFeatureType-tc3.2">
      <param name="wfs.DescribeFeatureType.post.url"/>
      <assertion>The following attributes are required for all XML request entities: @version (default '1.1.0'); @service (default 'WFS').</assertion>
      <comment>DescribeFeatureType with version '1.1.0' and  no service (derived from namespace, value of 'WFS').  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is an xsd:schema document as expected.</comment>
      <link>wfs-1.1.0-Basic-atc9</link>
      <link>OGC 04-094, 7.8, p.24</link>
		<code>
		
			<xsl:variable name="request1">
				<request>
					<url>
						<xsl:value-of select="$wfs.DescribeFeatureType.post.url"/>
					</url>
				   <method>post</method>
				   <body>
						<wfs:DescribeFeatureType version="1.1.0">
	<wfs:TypeName>sf:PrimitiveGeoFeature</wfs:TypeName>
</wfs:DescribeFeatureType>
				   </body>
					<p:XMLValidatingParser.XMLSchema/>
				</request>
			</xsl:variable>			

			<xsl:choose>
				<xsl:when test="not($request1/*)">
			        <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
					<ctl:fail/>
			    </xsl:when>
  			    <xsl:otherwise>
					<xsl:variable name="expression">//xsd:schema</xsl:variable>
					<ctl:call-test name="ctl:assert-xpath">
						<ctl:with-param name="expr" select="$expression"/>
						<ctl:with-param name="doc" select="$request1"/>
					</ctl:call-test>		
				</xsl:otherwise>
			</xsl:choose>
				
		</code>
	</test>

	<test name="wfs:wfs-1.1.0-Basic-DescribeFeatureType-tc3.3">
      <param name="wfs.DescribeFeatureType.post.url"/>
      <assertion>The following attributes are required for all XML request entities: @version (default '1.1.0'); @service (default 'WFS').</assertion>
      <comment>DescribeFeatureType with no version and service 'WFS', expecting version '1.1.0'.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is an xsd:schema document.</comment>
      <link>wfs-1.1.0-Basic-atc9</link>
      <link>OGC 04-094, 7.8, p.24</link>
		<code>
		
			<xsl:variable name="request1">
				<request>
					<url>
						<xsl:value-of select="$wfs.DescribeFeatureType.post.url"/>
					</url>
				   <method>post</method>
				   <body>
						<wfs:DescribeFeatureType version="1.1.0" service="">
	<wfs:TypeName>sf:PrimitiveGeoFeature</wfs:TypeName>
</wfs:DescribeFeatureType>
				   </body>
					<p:XMLValidatingParser.XMLSchema/>
				</request>
			</xsl:variable>			

			<xsl:choose>
				<xsl:when test="not($request1/*)">
			        <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
					<ctl:fail/>
			    </xsl:when>
  			    <xsl:otherwise>
					<xsl:variable name="expression">//xsd:schema</xsl:variable>
					<ctl:call-test name="ctl:assert-xpath">
						<ctl:with-param name="expr" select="$expression"/>
						<ctl:with-param name="doc" select="$request1"/>
					</ctl:call-test>			
				</xsl:otherwise>
			</xsl:choose>
				
		</code>
	</test>

	<test name="wfs:wfs-1.1.0-Basic-DescribeFeatureType-tc3.4">
      <param name="wfs.DescribeFeatureType.post.url"/>
      <assertion>The following attributes are required for all XML request entities: @version (default '1.1.0'); @service (default 'WFS').</assertion>
      <comment>DescribeFeatureType with version '' and service 'WFS', expecting version '1.1.0'.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is an xsd:schema document.</comment>
      <link>wfs-1.1.0-Basic-atc9</link>
      <link>OGC 04-094, 7.8, p.24</link>
		<code>
		
			<xsl:variable name="request1">
				<request>
					<url>
						<xsl:value-of select="$wfs.DescribeFeatureType.post.url"/>
					</url>
				   <method>post</method>
				   <body>
						<wfs:DescribeFeatureType version="" service="WFS">
	<wfs:TypeName>sf:PrimitiveGeoFeature</wfs:TypeName>
</wfs:DescribeFeatureType>
				   </body>
					<p:XMLValidatingParser.XMLSchema/>
				</request>
			</xsl:variable>			

			<xsl:choose>
				<xsl:when test="not($request1/*)">
			        <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
					<ctl:fail/>
			    </xsl:when>
  			    <xsl:otherwise>
					<xsl:variable name="expression">//xsd:schema</xsl:variable>
					<ctl:call-test name="ctl:assert-xpath">
						<ctl:with-param name="expr" select="$expression"/>
						<ctl:with-param name="doc" select="$request1"/>
					</ctl:call-test>		
				</xsl:otherwise>
			</xsl:choose>	
				
		</code>
	</test>

	<test name="wfs:wfs-1.1.0-Basic-DescribeFeatureType-tc3.5">
      <param name="wfs.DescribeFeatureType.post.url"/>
      <assertion>The following attributes are required for all XML request entities: @version (default '1.1.0'); @service (default 'WFS').</assertion>
      <comment>DescribeFeatureType with a version of '1.1.0' and a bogus service of 'FOO'.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is an ows:ExceptionReport document.</comment>
      <link>wfs-1.1.0-Basic-atc9</link>
      <link>OGC 04-094, 7.8, p.24</link>
		<code>
		
			<xsl:variable name="request1">
				<request>
					<url>
						<xsl:value-of select="$wfs.DescribeFeatureType.post.url"/>
					</url>
				   <method>post</method>
				   <body>
						<wfs:DescribeFeatureType version="1.1.0" service="FOO">
	<wfs:TypeName>sf:PrimitiveGeoFeature</wfs:TypeName>
</wfs:DescribeFeatureType>
				   </body>
					<p:XMLValidatingParser.OWS/>
				</request>
			</xsl:variable>			

			<xsl:choose>
				<xsl:when test="not($request1/*)">
			        <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
					<ctl:fail/>
			    </xsl:when>
  			    <xsl:otherwise>
					<xsl:variable name="expression">//ows:ExceptionReport</xsl:variable>
					<ctl:call-test name="ctl:assert-xpath">
						<ctl:with-param name="expr" select="$expression"/>
						<ctl:with-param name="doc" select="$request1"/>
					</ctl:call-test>		
				</xsl:otherwise>
			</xsl:choose>			
				
		</code>
	</test>

	<test name="wfs:wfs-1.1.0-Basic-DescribeFeatureType-tc3.6">
      <param name="wfs.DescribeFeatureType.post.url"/>
      <assertion>The following attributes are required for all XML request entities: @version (default '1.1.0'); @service (default 'WFS').</assertion>
      <comment>DescribeFeatureType with a bogus version of '2.0.0' and a service of 'WFS'.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is an ows:ExceptionReport document.</comment>
      <link>wfs-1.1.0-Basic-atc9</link>
      <link>OGC 04-094, 7.8, p.24</link>
		<code>
		
			<xsl:variable name="request1">
				<request>
					<url>
						<xsl:value-of select="$wfs.DescribeFeatureType.post.url"/>
					</url>
				   <method>post</method>
				   <body>
						<wfs:DescribeFeatureType version="BOGUS" service="WFS">
        <wfs:TypeName>sf:PrimitiveGeoFeature</wfs:TypeName>
</wfs:DescribeFeatureType>
				   </body>
					<p:XMLValidatingParser.OWS/>
				</request>
			</xsl:variable>			

			<xsl:choose>
				<xsl:when test="not($request1/*)">
			        <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
					<ctl:fail/>
			    </xsl:when>
  			    <xsl:otherwise>
					<xsl:variable name="expression">//ows:ExceptionReport</xsl:variable>
					<ctl:call-test name="ctl:assert-xpath">
						<ctl:with-param name="expr" select="$expression"/>
						<ctl:with-param name="doc" select="$request1"/>
					</ctl:call-test>		
				</xsl:otherwise>
			</xsl:choose>			
				
		</code>
	</test>

	<test name="wfs:wfs-1.1.0-Basic-DescribeFeatureType-tc6.1">
      <param name="wfs.DescribeFeatureType.post.url"/>
	  <assertion>The Content-Type of all XML request entities must be 'application/xml'.</assertion>
      <comment>DescribeFeatureType with the encoding as 'application/xml' (default).  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is a xsd:schema document.</comment>
      <link>wfs-1.1.0-Basic-atc11</link>
      <link>OGC 04-094, 6.5.1, p.13</link>
		<code>
		
			<xsl:variable name="request1">
				<request>
					<url>
						<xsl:value-of select="$wfs.DescribeFeatureType.post.url"/>
					</url>
				   <method>post</method>
				   <body>
						<foo:DescribeFeatureType xmlns:foo="http://www.opengis.net/wfs" service="WFS" version="1.1.0"/>
				   </body>
					<p:XMLValidatingParser.XMLSchema/>
				</request>
			</xsl:variable>			

			<xsl:choose>
				<xsl:when test="not($request1/*)">
			        <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
					<ctl:fail/>
			    </xsl:when>
  			    <xsl:otherwise>
					<xsl:variable name="expression">//xsd:schema</xsl:variable>
					<ctl:call-test name="ctl:assert-xpath">
						<ctl:with-param name="expr" select="$expression"/>
						<ctl:with-param name="doc" select="$request1"/>
					</ctl:call-test>
				</xsl:otherwise>
			</xsl:choose>			
				
		</code>
	</test>

	<test name="wfs:wfs-1.1.0-Basic-DescribeFeatureType-tc7.1">
      <param name="wfs.DescribeFeatureType.post.url"/>
	  <param name="gmlsf.profile.level"/>      
	  <assertion>Application schemas that comply with GML 3.1.1 must be a supported. These are presented if no outputFormat is specified.</assertion>
      <comment>DescribeFeatureType for a single feature type, expect the schema to validate with the proper GMLSF level as well.  Pass if all of the following conditions are true: (1) the response is schema valid (both xsd:schema and the proper GMLSF level supported); (2) the root document is a xsd:schema document.</comment>
      <link>wfs-1.1.0-Basic-DescribeFeatureType-atc1</link>
      <link>OGC 04-094, 8.1, p.24</link>
		<code>
		
			<xsl:variable name="request1">
				<request>
					<url>
						<xsl:value-of select="$wfs.DescribeFeatureType.post.url"/>
					</url>
				   <method>post</method>
				   <body>
						<wfs:DescribeFeatureType service="WFS" version="1.1.0">
	<wfs:TypeName>sf:PrimitiveGeoFeature</wfs:TypeName>
</wfs:DescribeFeatureType>
				   </body>
					<p:XMLValidatingParser.XMLSchema/>
				</request>
			</xsl:variable>			

			<xsl:choose>
				<xsl:when test="not($request1/*)">
			        <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
					<ctl:fail/>
			    </xsl:when>
  			    <xsl:otherwise>
					<xsl:variable name="expression">//xsd:schema</xsl:variable>
					<ctl:call-test name="ctl:assert-xpath">
						<ctl:with-param name="expr" select="$expression"/>
						<ctl:with-param name="doc" select="$request1"/>
					</ctl:call-test>
				</xsl:otherwise>
			</xsl:choose>			
				
		</code>
	</test>

	<test name="wfs:wfs-1.1.0-Basic-DescribeFeatureType-tc9.1">
      <param name="wfs.DescribeFeatureType.post.url"/>  
	  <assertion>A request for a given TypeName shall produce a response that includes the corresponding type definition in the requested schema language.</assertion>
      <comment>DescribeFeatureType for a single feature type ('sf:PrimitiveGeoFeature'), expect the schema to contain a schema description for that feature.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is a xsd:schema document; (3) the schema has an entry for the requested feature type (with correct targetNamespace).</comment>
      <link>wfs-1.1.0-Basic-DescribeFeatureType-atc2</link>
      <link>OGC 04-094, 8.3, p.26</link>
		<code>
		
			<xsl:variable name="request1">
				<request>
					<url>
						<xsl:value-of select="$wfs.DescribeFeatureType.post.url"/>
					</url>
				   <method>post</method>
				   <body>
						<wfs:DescribeFeatureType service="WFS" version="1.1.0">
	<wfs:TypeName>sf:PrimitiveGeoFeature</wfs:TypeName>
</wfs:DescribeFeatureType>
				   </body>
					<p:XMLValidatingParser.XMLSchema/>
				</request>
			</xsl:variable>			

			<xsl:choose>
				<xsl:when test="not($request1/*)">
			        <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
					<ctl:fail/>
			    </xsl:when>
  			    <xsl:otherwise>
					<xsl:variable name="expression">//xsd:schema</xsl:variable>
					<ctl:call-test name="ctl:assert-xpath">
						<ctl:with-param name="expr" select="$expression"/>
						<ctl:with-param name="doc" select="$request1"/>
					</ctl:call-test>
					<xsl:variable name="expression">//@targetNamespace = 'http://cite.opengeospatial.org/gmlsf'</xsl:variable>
					<ctl:call-test name="ctl:assert-xpath">
						<ctl:with-param name="expr" select="$expression"/>
						<ctl:with-param name="doc" select="$request1"/>
					</ctl:call-test>					
					<xsl:variable name="expression">//xsd:element/@name = 'PrimitiveGeoFeature'</xsl:variable>
					<ctl:call-test name="ctl:assert-xpath">
						<ctl:with-param name="expr" select="$expression"/>
						<ctl:with-param name="doc" select="$request1"/>
					</ctl:call-test>
				</xsl:otherwise>
			</xsl:choose>			
				
		</code>
	</test>

	<test name="wfs:wfs-1.1.0-Basic-DescribeFeatureType-tc9.2">
      <param name="wfs.DescribeFeatureType.post.url"/>  
	  <assertion>A request for a given TypeName shall produce a response that includes the corresponding type definition in the requested schema language.</assertion>
      <comment>DescribeFeatureType for a single feature type in GMLSF level 1 ('sf:ComplexGeoFeature'), expect the schema to contain a schema description for that feature.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is a xsd:schema document; (3) the schema has an entry for the requested feature type (with correct targetNamespace).</comment>
      <link>wfs-1.1.0-Basic-DescribeFeatureType-atc2</link>
      <link>OGC 04-094, 8.3, p.26</link>
		<code>
		
			<xsl:variable name="request1">
				<request>
					<url>
						<xsl:value-of select="$wfs.DescribeFeatureType.post.url"/>
					</url>
				   <method>post</method>
				   <body>
						<wfs:DescribeFeatureType service="WFS" version="1.1.0">
	<wfs:TypeName>sf:ComplexGeoFeature</wfs:TypeName>
</wfs:DescribeFeatureType>
				   </body>
					<p:XMLValidatingParser.XMLSchema/>
				</request>
			</xsl:variable>			

			<xsl:choose>
				<xsl:when test="not($request1/*)">
			        <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
					<ctl:fail/>
			    </xsl:when>
  			    <xsl:otherwise>
					<xsl:variable name="expression">//xsd:schema</xsl:variable>
					<ctl:call-test name="ctl:assert-xpath">
						<ctl:with-param name="expr" select="$expression"/>
						<ctl:with-param name="doc" select="$request1"/>
					</ctl:call-test>
					<xsl:variable name="expression">//@targetNamespace = 'http://cite.opengeospatial.org/gmlsf'</xsl:variable>
					<ctl:call-test name="ctl:assert-xpath">
						<ctl:with-param name="expr" select="$expression"/>
						<ctl:with-param name="doc" select="$request1"/>
					</ctl:call-test>					
					<xsl:variable name="expression">//xsd:element/@name = 'ComplexGeoFeature'</xsl:variable>
					<ctl:call-test name="ctl:assert-xpath">
						<ctl:with-param name="expr" select="$expression"/>
						<ctl:with-param name="doc" select="$request1"/>
					</ctl:call-test>
				</xsl:otherwise>
			</xsl:choose>			
				
		</code>
	</test>

	<test name="wfs:wfs-1.1.0-Basic-DescribeFeatureType-tc11.1">
      <param name="wfs.DescribeFeatureType.post.url"/>  
	  <assertion>A request with no TypeName elements shall produce a response that includes definitions of all supported feature types in the requested schema language.</assertion>
      <comment>DescribeFeatureType no feature types, expect either the CITE test schema or a wrapper schema that imports it, among other schemas.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is a xsd:schema document; (3) the schema has an entry for all the feature types in the test schema.</comment>
      <link>wfs-1.1.0-Basic-DescribeFeatureType-atc3</link>
      <link>OGC 04-094, 8.2, p.25</link>
		<code>
		
			<xsl:variable name="request1">
				<request>
					<url>
						<xsl:value-of select="$wfs.DescribeFeatureType.post.url"/>
					</url>
				   <method>post</method>
				   <body>
						<wfs:DescribeFeatureType service="WFS" version="1.1.0"/>
				   </body>
					<p:XMLValidatingParser.XMLSchema/>
				</request>
			</xsl:variable>			

			<xsl:variable name="citeNamespaceURL" select="$request1//xsd:import[@namespace='http://cite.opengeospatial.org/gmlsf']/@schemaLocation"/>

			<xsl:choose>
				<xsl:when test="not($request1/*)">
			        <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
					<ctl:fail/>
			    </xsl:when>
  			    <xsl:otherwise>
					<xsl:variable name="expression">//xsd:schema</xsl:variable>
					<ctl:call-test name="ctl:assert-xpath">
						<ctl:with-param name="expr" select="$expression"/>
						<ctl:with-param name="doc" select="$request1"/>
					</ctl:call-test>
					
					<xsl:choose>
						<!--Required schema-->
						<xsl:when test="string($citeNamespaceURL)=''">	
							<xsl:variable name="expression">//@targetNamespace = 'http://cite.opengeospatial.org/gmlsf'</xsl:variable>
							<ctl:call-test name="ctl:assert-xpath">
								<ctl:with-param name="expr" select="$expression"/>
								<ctl:with-param name="doc" select="$request1"/>
							</ctl:call-test>										
							<xsl:variable name="expression">(//xsd:element/@name = 'PrimitiveGeoFeature') and (//xsd:element/@name = 'AggregateGeoFeature') and (//xsd:element/@name = 'EntitéGénérique')</xsl:variable>
							<ctl:call-test name="ctl:assert-xpath">
								<ctl:with-param name="expr" select="$expression"/>
								<ctl:with-param name="doc" select="$request1"/>
							</ctl:call-test>
						</xsl:when>
						<!--Wrapper schema, must get the required schema-->
						<xsl:otherwise>
						
							<xsl:variable name="request2">
								<request>
									<url>
										<xsl:value-of select="$citeNamespaceURL"/>
									</url>
								   <method>get</method>
									<!--<p:XMLValidatingParser.XMLSchema/>-->
								</request>
							</xsl:variable>							

							<xsl:choose>
								<xsl:when test="not($request2/*)">
									<ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
									<ctl:fail/>
								</xsl:when>
								<xsl:otherwise>
						
									<xsl:variable name="expression">//@targetNamespace = 'http://cite.opengeospatial.org/gmlsf'</xsl:variable>
									<ctl:call-test name="ctl:assert-xpath">
										<ctl:with-param name="expr" select="$expression"/>
										<ctl:with-param name="doc" select="$request2"/>
									</ctl:call-test>										
									<xsl:variable name="expression">(//xsd:element/@name = 'PrimitiveGeoFeature') and (//xsd:element/@name = 'AggregateGeoFeature') and (//xsd:element/@name = 'EntitéGénérique')</xsl:variable>
									<ctl:call-test name="ctl:assert-xpath">
										<ctl:with-param name="expr" select="$expression"/>
										<ctl:with-param name="doc" select="$request2"/>
									</ctl:call-test>						
								</xsl:otherwise>
								</xsl:choose>
						
						</xsl:otherwise>
					</xsl:choose>
					
				</xsl:otherwise>
			</xsl:choose>			
				
		</code>
	</test>

</ctl:package>
	<ctl:package xmlns="http://www.occamlab.com/ctl" xmlns:gml="http://www.opengis.net/gml">

    <ctl:test name="wfs:run-GetFeature-GET">
      <param name="wfs.GetCapabilities.document"/>
      <ctl:assertion>
      Run test group for GetFeature requests using the GET method. Target endpoint is {$wfs.GetCapabilities.document//ows:OperationsMetadata/ows:Operation[@name='GetFeature']/ows:DCP/ows:HTTP/ows:Get/@xlink:href}.
      </ctl:assertion>
      <ctl:code>

                <ctl:call-test name="wfs:GetFeature-output-format-default">
                        <ctl:with-param name="CAPABILITIES" select="$wfs.GetCapabilities.document"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:GetFeature-output-format-GML2">
                        <ctl:with-param name="CAPABILITIES" select="$wfs.GetCapabilities.document"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:GetFeature-output-format-gml-2.1.2">
                        <ctl:with-param name="CAPABILITIES" select="$wfs.GetCapabilities.document"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:GetFeature-extra-param">
                        <ctl:with-param name="CAPABILITIES" select="$wfs.GetCapabilities.document"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:GetFeature-result-type-results">
                        <ctl:with-param name="CAPABILITIES" select="$wfs.GetCapabilities.document"/>
                </ctl:call-test>

                <xsl:variable name="wfs.GetFeature.get.url">
                        <xsl:value-of select="$wfs.GetCapabilities.document//ows:OperationsMetadata/ows:Operation[@name='GetFeature']/ows:DCP/ows:HTTP/ows:Get/@xlink:href"/>
                </xsl:variable>

                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc8.1">
                        <ctl:with-param name="wfs.GetFeature.get.url" select="$wfs.GetFeature.get.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc8.2">
                        <ctl:with-param name="wfs.GetFeature.get.url" select="$wfs.GetFeature.get.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc8.3">
                        <ctl:with-param name="wfs.GetFeature.get.url" select="$wfs.GetFeature.get.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc10.1">
                        <ctl:with-param name="wfs.GetFeature.get.url" select="$wfs.GetFeature.get.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc23.1">
                        <ctl:with-param name="wfs.GetFeature.get.url" select="$wfs.GetFeature.get.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc23.2">
                        <ctl:with-param name="wfs.GetFeature.get.url" select="$wfs.GetFeature.get.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc23.3">
                        <ctl:with-param name="wfs.GetFeature.get.url" select="$wfs.GetFeature.get.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc23.4">
                        <ctl:with-param name="wfs.GetFeature.get.url" select="$wfs.GetFeature.get.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc26.1">
                        <ctl:with-param name="wfs.GetFeature.get.url" select="$wfs.GetFeature.get.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc30.1">
                        <ctl:with-param name="wfs.GetFeature.get.url" select="$wfs.GetFeature.get.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc30.2">
                        <ctl:with-param name="wfs.GetFeature.get.url" select="$wfs.GetFeature.get.url"/>
                </ctl:call-test>
                <!--<ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc30.3">
                        <ctl:with-param name="wfs.GetFeature.get.url" select="$wfs.GetFeature.get.url"/>
                </ctl:call-test>-->
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc31.1">
                        <ctl:with-param name="wfs.GetFeature.get.url" select="$wfs.GetFeature.get.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc32.1">
                        <ctl:with-param name="wfs.GetFeature.get.url" select="$wfs.GetFeature.get.url"/>
                </ctl:call-test>
                <!--<ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc32.2">
                        <ctl:with-param name="wfs.GetFeature.get.url" select="$wfs.GetFeature.get.url"/>
                </ctl:call-test>-->
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc44.1">
                        <ctl:with-param name="wfs.GetFeature.get.url" select="$wfs.GetFeature.get.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc44.2">
                        <ctl:with-param name="wfs.GetFeature.get.url" select="$wfs.GetFeature.get.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc46.1">
                        <ctl:with-param name="wfs.GetFeature.get.url" select="$wfs.GetFeature.get.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc47.1">
                        <ctl:with-param name="wfs.GetFeature.get.url" select="$wfs.GetFeature.get.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc47.2">
                        <ctl:with-param name="wfs.GetFeature.get.url" select="$wfs.GetFeature.get.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc48.1">
                        <ctl:with-param name="wfs.GetFeature.get.url" select="$wfs.GetFeature.get.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc50.1">
                        <ctl:with-param name="wfs.GetFeature.get.url" select="$wfs.GetFeature.get.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc50.2">
                        <ctl:with-param name="wfs.GetFeature.get.url" select="$wfs.GetFeature.get.url"/>
                </ctl:call-test>

      </ctl:code>
    </ctl:test>

        <test name="wfs:wfs-1.1.0-Basic-GetFeature-tc8.1">
      <param name="wfs.GetFeature.get.url"/>
      <assertion>A KVP parameter value that denotes a bounding box shall conform to the general syntax specified in subclause 10.2.3. If no CRS reference is provided, a service-defined default value must be assumed.</assertion>
      <comment>GetFeature with BBOX KVP parameter (with the CRS specified).  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is an wfs:FeatureCollection document; (3) more than one feature is in the response.</comment>
      <link>ows-1.0.0-common-atc5</link>
      <link>OGC 05-008c1, 10.2.3, p.39</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.get.url"/>
                                        </url>
                                        <method>get</method>
                                        <param name="service">WFS</param>
                                        <param name="version">1.1.0</param>
                                        <param name="request">GetFeature</param>
                                        <param name="typename">sf:PrimitiveGeoFeature</param>
                                        <param name="bbox">34.94,-10.52,71.96,32.19,urn:ogc:def:crs:EPSG::4326</param>
                                        <param name="namespace">xmlns(sf=http://cite.opengeospatial.org/gmlsf)</param>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:choose>
                                <xsl:when test="$request1/ows:ExceptionReport">
                                  <ctl:call-test name="ctl:SchematronValidatingParser">
                                    <ctl:with-param name="doc" select="$request1"/>
                                    <ctl:with-param name="schema">sch/ows/1.0.0/ExceptionReport.sch</ctl:with-param>
                                    <ctl:with-param name="phase">InvalidParameterValuePhase</ctl:with-param>
                                  </ctl:call-test>
                                </xsl:when>
                                <xsl:otherwise>
                                        <xsl:variable name="expression">//wfs:FeatureCollection</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                        <xsl:variable name="expression">(count(//gml:featureMember) + count(//gml:featureMembers/*)) &gt;= 1</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                </xsl:otherwise>
                              </xsl:choose>
                            </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

<test name="wfs:wfs-1.1.0-Basic-GetFeature-tc8.2">
      <param name="wfs.GetFeature.get.url"/>
      <assertion>A KVP parameter value that denotes a bounding box shall conform to the general syntax specified in subclause 10.2.3. If no CRS reference is provided, a service-defined default value must be assumed.</assertion>
      <comment>GetFeature with BBOX KVP parameter (without the CRS specified, service default is expected).  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is an wfs:FeatureCollection document; (3) more than one feature is in the response.</comment>
      <link>ows-1.0.0-common-atc5</link>
      <link>OGC 05-008c1, 10.2.3, p.39</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.get.url"/>
                                        </url>
                                        <method>get</method>
                                        <param name="service">WFS</param>
                                        <param name="version">1.1.0</param>
                                        <param name="request">GetFeature</param>
                                        <param name="typename">sf:PrimitiveGeoFeature</param>
                                        <param name="bbox">34.94,-10.52,71.96,32.19</param>
                                        <param name="namespace">xmlns(sf=http://cite.opengeospatial.org/gmlsf)</param>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:choose>
                                <xsl:when test="$request1/ows:ExceptionReport">
                                  <ctl:call-test name="ctl:SchematronValidatingParser">
                                    <ctl:with-param name="doc" select="$request1"/>
                                    <ctl:with-param name="schema">sch/ows/1.0.0/ExceptionReport.sch</ctl:with-param>
                                    <ctl:with-param name="phase">InvalidParameterValuePhase</ctl:with-param>
                                  </ctl:call-test>
                                </xsl:when>
                                <xsl:otherwise>
                                        <xsl:variable name="expression">//wfs:FeatureCollection</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                        <xsl:variable name="expression">(count(//gml:featureMember) + count(//gml:featureMembers/*)) &gt;= 1</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                </xsl:otherwise>
                              </xsl:choose>
                            </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

<test name="wfs:wfs-1.1.0-Basic-GetFeature-tc8.3">
      <param name="wfs.GetFeature.get.url"/>
      <assertion>A KVP parameter value that denotes a bounding box shall conform to the general syntax specified in subclause 10.2.3. If no CRS reference is provided, a service-defined default value must be assumed.</assertion>
      <comment>GetFeature with BBOX KVP parameter (with the CRS not specified, service default expected).  The BBOX values would indicate no features in the response.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is an wfs:FeatureCollection document; (3) no features are in the response.</comment>
      <link>ows-1.0.0-common-atc5</link>
      <link>OGC 05-008c1, 10.2.3, p.39</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.get.url"/>
                                        </url>
                                        <method>get</method>
                                        <param name="service">WFS</param>
                                        <param name="version">1.1.0</param>
                                        <param name="request">GetFeature</param>
                                        <param name="typename">sf:PrimitiveGeoFeature</param>
                                        <param name="bbox">0,0,0.01,0.01</param>
                                        <param name="namespace">xmlns(sf=http://cite.opengeospatial.org/gmlsf)</param>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:choose>
                                <xsl:when test="$request1/ows:ExceptionReport">
                                  <ctl:call-test name="ctl:SchematronValidatingParser">
                                    <ctl:with-param name="doc" select="$request1"/>
                                    <ctl:with-param name="schema">sch/ows/1.0.0/ExceptionReport.sch</ctl:with-param>
                                    <ctl:with-param name="phase">InvalidParameterValuePhase</ctl:with-param>
                                  </ctl:call-test>
                                </xsl:when>
                                <xsl:otherwise>
                                        <xsl:variable name="expression">//wfs:FeatureCollection</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                        <xsl:variable name="expression">(count(//gml:featureMember) + count(//gml:featureMembers/*)) = 0</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                </xsl:otherwise>
                              </xsl:choose>
                            </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

        <test name="wfs:wfs-1.1.0-Basic-GetFeature-tc10.1">
      <param name="wfs.GetFeature.get.url"/>
      <assertion>A valid namespace binding expressed by the namespace parameter in a KVP string shall conform to the syntax specified in subclause 14.4.</assertion>
      <comment>GetFeature with the namespace KVP parameter (escaped by engine).  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is an wfs:FeatureCollection document.</comment>
      <link>wfs-1.1.0-Basic-atc6</link>
      <link>OGC 04-094, 14.4, p.96</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.get.url"/>
                                        </url>
                                        <method>get</method>
                                        <param name="service">WFS</param>
                                        <param name="version">1.1.0</param>
                                        <param name="request">GetFeature</param>
                                        <param name="typename">sf:PrimitiveGeoFeature</param>
                                        <param name="namespace">xmlns(sf=http://cite.opengeospatial.org/gmlsf)</param>
                                        <!--<param name="namespace">xmlns(sf=http%3A%2F%2Fwww.opengis.net%2Fcite%2Fgmlsf)</param>-->
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                                        <xsl:variable name="expression">//wfs:FeatureCollection</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

        <test name="wfs:wfs-1.1.0-Basic-GetFeature-tc23.1">
      <param name="wfs.GetFeature.get.url"/>
      <assertion>The following query parameters are required for all KVP-encoded service requests except GetCapabilities: service, request, version.</assertion>
      <comment>GetFeature with a service='WFS', EMPTY version parameter, and request='GetFeature'.  Pass if an exception report is returned.</comment>
      <link>ows-1.0.0-common-atc4</link>
      <link>OGC 05-008c1, 9.2.1, p.36 (Table 20)</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.get.url"/>
                                        </url>
                                        <method>get</method>
                                        <param name="service">WFS</param>
                                        <param name="version"/>
                                        <param name="request">GetFeature</param>
                                        <param name="typename">sf:PrimitiveGeoFeature</param>
                                        <param name="namespace">xmlns(sf=http://cite.opengeospatial.org/gmlsf)</param>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                        <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                                <xsl:otherwise>
                    <ctl:call-test name="ctl:SchematronValidatingParser">
                                                <ctl:with-param name="doc" select="$request1"/>
                                                <ctl:with-param name="schema">sch/ows/1.0.0/ExceptionReport.sch</ctl:with-param>
                                                <ctl:with-param name="phase">MissingParameterValuePhase</ctl:with-param>
                                        </ctl:call-test>
                    <xsl:if test="not(lower-case($request1//ows:Exception/@locator) = 'version')">
                      <ctl:message>
                      FAILURE: ows:Exception/@locator is absent or does not identify the missing version parameter value.
                      </ctl:message>
                      <ctl:fail/>
                    </xsl:if>
                                </xsl:otherwise>
                        </xsl:choose>
                </code>
        </test>

        <test name="wfs:wfs-1.1.0-Basic-GetFeature-tc23.2">
      <param name="wfs.GetFeature.get.url"/>
      <assertion>The following query parameters are required for all KVP-encoded service requests except GetCapabilities: service, request, version.</assertion>
      <comment>GetFeature with a service 'WFS', version '1.1.0', and no request parameter.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is an ows:ExceptionReport document.</comment>
      <link>ows-1.0.0-common-atc4</link>
      <link>OGC 05-008c1, 9.2.1, p.36 (Table 20)</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.get.url"/>
                                        </url>
                                        <method>get</method>
                                        <param name="service">WFS</param>
                                        <param name="version">1.1.0</param>
                                        <param name="typename">sf:PrimitiveGeoFeature</param>
                                        <param name="namespace">xmlns(sf=http://cite.opengeospatial.org/gmlsf)</param>
                                        <p:XMLValidatingParser.OWS/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                        <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                                <xsl:otherwise>
                    <ctl:call-test name="ctl:SchematronValidatingParser">
                                                <ctl:with-param name="doc" select="$request1"/>
                                                <ctl:with-param name="schema">sch/ows/1.0.0/ExceptionReport.sch</ctl:with-param>
                                                <ctl:with-param name="phase">MissingParameterValuePhase</ctl:with-param>
                                        </ctl:call-test>
                    <xsl:if test="not(lower-case($request1//ows:Exception/@locator) = 'request')">
                      <ctl:message>
                      FAILURE: ows:Exception/@locator is absent or does not identify the missing request attribute.
                      </ctl:message>
                      <ctl:fail/>
                    </xsl:if>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

        <test name="wfs:wfs-1.1.0-Basic-GetFeature-tc23.3">
      <param name="wfs.GetFeature.get.url"/>
      <assertion>The following query parameters are required for all KVP-encoded service requests except GetCapabilities: service, request, version.</assertion>
      <comment>GetFeature with a version '1.1.0', request 'GetFeature' and no service.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is an ows:ExceptionReport document.</comment>
      <link>ows-1.0.0-common-atc4</link>
      <link>OGC 05-008c1, 9.2.1, p.36 (Table 20)</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.get.url"/>
                                        </url>
                                        <method>get</method>
                                        <param name="request">GetFeature</param>
                                        <param name="version">1.1.0</param>
                                        <param name="typename">sf:PrimitiveGeoFeature</param>
                                        <param name="namespace">xmlns(sf=http://cite.opengeospatial.org/gmlsf)</param>
                                        <p:XMLValidatingParser.OWS/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                        <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                                <xsl:otherwise>
                                        <ctl:call-test name="ctl:SchematronValidatingParser">
                                                <ctl:with-param name="doc" select="$request1"/>
                                                <ctl:with-param name="schema">sch/ows/1.0.0/ExceptionReport.sch</ctl:with-param>
                                                <ctl:with-param name="phase">MissingParameterValuePhase</ctl:with-param>
                                        </ctl:call-test>
                    <xsl:if test="not(lower-case($request1//ows:Exception/@locator) = 'service')">
                      <ctl:message>
                      FAILURE: ows:Exception/@locator is absent or does not identify the missing service attribute.
                      </ctl:message>
                      <ctl:fail/>
                    </xsl:if>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

        <test name="wfs:wfs-1.1.0-Basic-GetFeature-tc23.4">
      <param name="wfs.GetFeature.get.url"/>
      <assertion>The following query parameters are required for all KVP-encoded service requests except GetCapabilities: service, request, version.</assertion>
      <comment>GetFeature with a service 'WFS', request 'GetFeature' and no version.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is an ows:ExceptionReport document.</comment>
      <link>ows-1.0.0-common-atc4</link>
      <link>OGC 05-008c1, 9.2.1, p.36 (Table 20)</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.get.url"/>
                                        </url>
                                        <method>get</method>
                                        <param name="request">GetFeature</param>
                                        <param name="service">WFS</param>
                                        <param name="typename">sf:PrimitiveGeoFeature</param>
                                        <param name="namespace">xmlns(sf=http://cite.opengeospatial.org/gmlsf)</param>
                                        <p:XMLValidatingParser.OWS/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                        <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                                <xsl:otherwise>
                                        <xsl:variable name="expression">//ows:ExceptionReport</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

        <test name="wfs:wfs-1.1.0-Basic-GetFeature-tc26.1">
      <param name="wfs.GetFeature.get.url"/>
      <assertion>A comma (',') shall be used to delimit list items within multi-valued parameters in KVP strings.</assertion>
      <comment>GetFeature with a typename parameter of multiple values, sperated by a comma.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is an wfs:FeatureCollection document; (3) there is at least one of each of the requested feature types in the response.</comment>
      <link>ows-1.0.0-common-atc7</link>
      <link>OGC 05-008c1, 11.5.3, p.57</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.get.url"/>
                                        </url>
                                        <method>get</method>
                                        <param name="service">WFS</param>
                                        <param name="version">1.1.0</param>
                                        <param name="request">GetFeature</param>
                                        <param name="typename">sf:PrimitiveGeoFeature,sf:AggregateGeoFeature</param>
                                        <param name="namespace">xmlns(sf=http://cite.opengeospatial.org/gmlsf)</param>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                        <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                                <xsl:otherwise>
                                        <xsl:variable name="expression">//wfs:FeatureCollection</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                        <xsl:variable name="expression">(count(//sf:PrimitiveGeoFeature) &gt;= 4) and (count(//sf:AggregateGeoFeature) &gt;= 3)</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

        <test name="wfs:wfs-1.1.0-Basic-GetFeature-tc30.1">
      <param name="wfs.GetFeature.get.url"/>
      <assertion>XPath 1.0 shall be used to address parts of an XML representation using ogc:PropertyName. Support for the AbbreviatedRelativeLocationPath construct is required; the position() function may appear in a predicate to refer to a child node by position relative to the context node.</assertion>
      <comment>GetFeature with a filter using the abbreviated local path predicate on the gml:description.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is an wfs:FeatureCollection document; (3) the requested feature is in the response as expected.</comment>
      <link>filter-1.1.0-common-atc2</link>
      <link>OGC 04-095, 6.3.2, p.5</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.get.url"/>
                                        </url>
                                        <method>get</method>
                                        <param name="service">WFS</param>
                                        <param name="version">1.1.0</param>
                                        <param name="request">GetFeature</param>
                                        <param name="typename">sf:PrimitiveGeoFeature</param>
                                        <param name="namespace">xmlns(sf=http://cite.opengeospatial.org/gmlsf)</param>
                                        <param name="filter">&lt;ogc:Filter%20xmlns:gml="http://www.opengis.net/gml"%20xmlns:ogc="http://www.opengis.net/ogc"&gt;&lt;ogc:PropertyIsEqualTo&gt;&lt;ogc:PropertyName&gt;gml:description&lt;/ogc:PropertyName&gt;&lt;ogc:Literal&gt;description-f008&lt;/ogc:Literal&gt;&lt;/ogc:PropertyIsEqualTo&gt;&lt;/ogc:Filter&gt;</param>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                        <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                                <xsl:otherwise>
                                        <xsl:variable name="expression">//wfs:FeatureCollection</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                        <xsl:variable name="expression">(count(//gml:featureMember) + count(//gml:featureMembers/*)) &gt;= 1</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                        <xsl:variable name="expression">//gml:description = 'description-f008'</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

        <test name="wfs:wfs-1.1.0-Basic-GetFeature-tc30.2">
      <param name="wfs.GetFeature.get.url"/>
      <assertion>XPath 1.0 shall be used to address parts of an XML representation using ogc:PropertyName. Support for the AbbreviatedRelativeLocationPath construct is required; the position() function may appear in a predicate to refer to a child node by position relative to the context node.</assertion>
      <comment>GetFeature with a filter using the simplified position predicate ('[n]').  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is an wfs:FeatureCollection document; (3) the requested feature is in the response as expected.</comment>
      <link>filter-1.1.0-common-atc2</link>
      <link>OGC 04-095, 6.3.2, p.5</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.get.url"/>
                                        </url>
                                        <method>get</method>
                                        <param name="service">WFS</param>
                                        <param name="version">1.1.0</param>
                                        <param name="request">GetFeature</param>
                                        <param name="typename">sf:PrimitiveGeoFeature</param>
                                        <param name="namespace">xmlns(sf=http://cite.opengeospatial.org/gmlsf)</param>
                                        <param name="filter">&lt;ogc:Filter%20xmlns:ogc="http://www.opengis.net/ogc"%20xmlns:gml="http://www.opengis.net/gml"&gt;&lt;ogc:PropertyIsEqualTo&gt;&lt;ogc:PropertyName&gt;gml:description[1]&lt;/ogc:PropertyName&gt;&lt;ogc:Literal&gt;description-f001&lt;/ogc:Literal&gt;&lt;/ogc:PropertyIsEqualTo&gt;&lt;/ogc:Filter&gt;</param>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                        <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                                <xsl:otherwise>
                                        <xsl:variable name="expression">//wfs:FeatureCollection</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                        <xsl:variable name="expression">(count(//gml:featureMember) + count(//gml:featureMembers/*)) &gt;= 1</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                        <xsl:variable name="expression">//gml:description = 'description-f001'</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

        <!--<test name="wfs:wfs-1.1.0-Basic-GetFeature-tc30.3">
      <param name="wfs.GetFeature.get.url"/>
      <assertion>XPath 1.0 shall be used to address parts of an XML representation using ogc:PropertyName. Support for the AbbreviatedRelativeLocationPath construct is required; the position() function may appear in a predicate to refer to a child node by position relative to the context node.</assertion>
      <comment>GetFeature with a filter using the position predicate ('position()').  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is an wfs:FeatureCollection document; (3) the requested feature is in the response as expected.</comment>
      <link>filter-1.1.0-common-atc2</link>
      <link>OGC 04-095, 6.3.2, p.5</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.get.url"/>
                                        </url>
                                        <method>get</method>
                                        <param name="service">WFS</param>
                                        <param name="version">1.1.0</param>
                                        <param name="request">GetFeature</param>
                                        <param name="typename">sf:PrimitiveGeoFeature</param>
                                        <param name="namespace">xmlns(sf=http://cite.opengeospatial.org/gmlsf)</param>
                                        <param name="filter"><![CDATA[<ogc:Filter%20xmlns:ogc="http://www.opengis.net/ogc"><ogc:PropertyIsEqualTo><ogc:PropertyName>*[position()=1]</ogc:PropertyName><ogc:Literal>description-f001</ogc:Literal></ogc:PropertyIsEqualTo></ogc:Filter>]]></param>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                        <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                                <xsl:otherwise>
                                        <xsl:variable name="expression">//wfs:FeatureCollection</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                        <xsl:variable name="expression">(count(//gml:featureMember) + count(//gml:featureMembers/*)) &gt;= 1</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                        <xsl:variable name="expression">//gml:description = 'description-f001'</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>-->

        <test name="wfs:wfs-1.1.0-Basic-GetFeature-tc31.1">
      <param name="wfs.GetFeature.get.url"/>
      <assertion>A valid filter expression must conform to the content model declared for the ogc:Filter element.</assertion>
      <comment>GetFeature with a correctly structured filter element.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is an wfs:FeatureCollection document.</comment>
      <link>filter-1.1.0-common-atc3</link>
      <link>OGC 04-095, 7.2, p.9</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.get.url"/>
                                        </url>
                                        <method>get</method>
                                        <param name="service">WFS</param>
                                        <param name="version">1.1.0</param>
                                        <param name="request">GetFeature</param>
                                        <param name="typename">sf:PrimitiveGeoFeature</param>
                                        <param name="namespace">xmlns(sf=http://cite.opengeospatial.org/gmlsf)</param>
                                        <param name="filter">&lt;ogc:Filter%20xmlns:sf="http://cite.opengeospatial.org/gmlsf"%20xmlns:ogc="http://www.opengis.net/ogc"&gt;&lt;ogc:PropertyIsGreaterThan&gt;&lt;ogc:PropertyName&gt;sf:intProperty&lt;/ogc:PropertyName&gt;&lt;ogc:Literal&gt;100&lt;/ogc:Literal&gt;&lt;/ogc:PropertyIsGreaterThan&gt;&lt;/ogc:Filter&gt;</param>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                                        <xsl:variable name="expression">//wfs:FeatureCollection</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

        <test name="wfs:wfs-1.1.0-Basic-GetFeature-tc32.1">
      <param name="wfs.GetFeature.get.url"/>
      <assertion>An ogc:Literal element may include simple or complex content. If a child element appears it may belong to any target namespace, but a top-level declaration for the item must be available.</assertion>
      <comment>GetFeature with a string-valued literal in the filter.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is an wfs:FeatureCollection document; (3) the requested feature shall be in the response.</comment>
      <link>filter-1.1.0-common-atc4</link>
      <link>OGC 04-095, 14.2, p.17</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.get.url"/>
                                        </url>
                                   <method>get</method>
                                        <param name="service">WFS</param>
                                        <param name="version">1.1.0</param>
                                        <param name="request">GetFeature</param>
                                        <param name="typename">sf:PrimitiveGeoFeature</param>
                                        <param name="namespace">xmlns(sf=http://cite.opengeospatial.org/gmlsf)</param>
                                        <param name="filter">&lt;ogc:Filter%20xmlns:gml="http://www.opengis.net/gml"%20xmlns:ogc="http://www.opengis.net/ogc"&gt;&lt;ogc:PropertyIsEqualTo&gt;&lt;ogc:PropertyName&gt;gml:name&lt;/ogc:PropertyName&gt;&lt;ogc:Literal&gt;name-f002&lt;/ogc:Literal&gt;&lt;/ogc:PropertyIsEqualTo&gt;&lt;/ogc:Filter&gt;</param>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                                        <xsl:variable name="expression">//wfs:FeatureCollection</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                        <xsl:variable name="expression">(count(//gml:featureMember) + count(//gml:featureMembers/*)) &gt;= 1</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                        <xsl:variable name="expression">//gml:name = 'name-f002'</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

        <!--<test name="wfs:wfs-1.1.0-Basic-GetFeature-tc32.2">
      <param name="wfs.GetFeature.get.url"/>
      <assertion>An ogc:Literal element may include simple or complex content. If a child element appears it may belong to any target namespace, but a top-level declaration for the item must be available.</assertion>
      <comment>GetFeature with a complex literal in the filter, which doesn't exist.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is an wfs:FeatureCollection document; (3) there are no features in the response.</comment>
      <link>filter-1.1.0-common-atc4</link>
      <link>OGC 04-095, 14.2, p.17</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.get.url"/>
                                        </url>
                                   <method>get</method>
                                        <param name="service">WFS</param>
                                        <param name="version">1.1.0</param>
                                        <param name="request">GetFeature</param>
                                        <param name="typename">sf:PrimitiveGeoFeature</param>
                                        <param name="namespace">xmlns(sf=http://cite.opengeospatial.org/gmlsf)</param>
                                        <param name="filter"><![CDATA[<ogc:Filter%20xmlns:gml="http://www.opengis.net/gml"%20xmlns:ogc="http://www.opengis.net/ogc"><ogc:PropertyIsEqualTo><ogc:PropertyName>gml:name</ogc:PropertyName><ogc:Literal><wfs:Native vendorId="ASDF" safeToIgnore="true"/></ogc:Literal></ogc:PropertyIsEqualTo></ogc:Filter>]]></param>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                                        <xsl:variable name="expression">//wfs:FeatureCollection</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                        <xsl:variable name="expression">(count(//gml:featureMember) + count(//gml:featureMembers/*)) = 0</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>-->

        <test name="wfs:wfs-1.1.0-Basic-GetFeature-tc44.1">
      <param name="wfs.GetFeature.get.url"/>
      <assertion>Version number specified in a given request must correspond to a version supported by the service.</assertion>
      <comment>GetFeature with missing version parameter. Pass if the response includes an exception report.</comment>
      <link>wfs-1.1.0-Basic-atc1</link>
      <link>OGC 04-094, 6.2.3, p.9</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.get.url"/>
                                        </url>
                                        <method>get</method>
                                        <param name="service">WFS</param>
                                        <param name="request">GetFeature</param>
                                        <param name="typename">sf:PrimitiveGeoFeature</param>
                                        <param name="namespace">xmlns(sf=http://cite.opengeospatial.org/gmlsf)</param>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                                        <ctl:call-test name="ctl:SchematronValidatingParser">
                                                <ctl:with-param name="doc" select="$request1"/>
                                                <ctl:with-param name="schema">sch/ows/1.0.0/ExceptionReport.sch</ctl:with-param>
                                                <ctl:with-param name="phase">MissingParameterValuePhase</ctl:with-param>
                                        </ctl:call-test>
                    <xsl:if test="not(lower-case($request1//ows:Exception/@locator) = 'version')">
                      <ctl:message>
                      FAILURE: ows:Exception/@locator is absent or does not identify the missing version parameter value.
                      </ctl:message>
                      <ctl:fail/>
                    </xsl:if>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

        <test name="wfs:wfs-1.1.0-Basic-GetFeature-tc44.2">
      <param name="wfs.GetFeature.get.url"/>
      <assertion>Version number specified in a given request must correspond to a version supported by the service.</assertion>
      <comment>GetFeature with a bogus version of '2006-11-14'.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is an ows:ExceptionReport document.</comment>
      <link>wfs-1.1.0-Basic-atc1</link>
      <link>OGC 04-094, 6.2.3, p.9</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.get.url"/>
                                        </url>
                                        <method>get</method>
                                        <param name="service">WFS</param>
                                        <param name="version">2006-11-14</param>
                                        <param name="request">GetFeature</param>
                                        <param name="typename">sf:PrimitiveGeoFeature</param>
                                        <param name="namespace">xmlns(sf=http://cite.opengeospatial.org/gmlsf)</param>
                                        <p:XMLValidatingParser.OWS/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                                        <ctl:call-test name="ctl:SchematronValidatingParser">
                                                <ctl:with-param name="doc" select="$request1"/>
                                                <ctl:with-param name="schema">sch/ows/1.0.0/ExceptionReport.sch</ctl:with-param>
                                                <ctl:with-param name="phase">InvalidParameterValuePhase</ctl:with-param>
                                        </ctl:call-test>
                    <xsl:if test="not(lower-case($request1//ows:Exception/@locator) = 'version')">
                      <ctl:message>
                      FAILURE: ows:Exception/@locator is absent or does not identify the invalid version parameter value.
                      </ctl:message>
                      <ctl:fail/>
                    </xsl:if>
                                </xsl:otherwise>
                        </xsl:choose>
                </code>
        </test>

        <test name="wfs:wfs-1.1.0-Basic-GetFeature-tc46.1">
      <param name="wfs.GetFeature.get.url"/>
      <assertion>KVP URI encoding must be properly escaped for escape and special characters.</assertion>
      <comment>GetFeature by featureType a feature using escaped characters (é = %C3%A9 in URI encoding).  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is an wfs:FeatureCollection document; (3) the response must have at least the expected features (correct feature type).</comment>
      <link>wfs-</link>
      <link/>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.get.url"/>
                                        </url>
                                        <method>get</method>
                                        <param name="service">WFS</param>
                                        <param name="version">1.1.0</param>
                                        <param name="request">GetFeature</param>
                                        <!--<param name="typename">sf:EntitéGénérique</param>-->
                                        <param name="typename">sf:Entit%C3%A9G%C3%A9n%C3%A9rique</param>
                                        <param name="namespace">xmlns(sf=http://cite.opengeospatial.org/gmlsf)</param>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                                        <xsl:variable name="expression">//wfs:FeatureCollection</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                        <xsl:variable name="expression">(count(//gml:featureMember) + count(//gml:featureMembers/*)) &gt;= 2</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                        <xsl:variable name="expression">count(//sf:EntitéGénérique) &gt;= 2</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

        <test name="wfs:wfs-1.1.0-Basic-GetFeature-tc47.1">
      <param name="wfs.GetFeature.get.url"/>
      <assertion>IIf a request is unrecognizable or the service cannot process the request, a valid exception report must be returned.</assertion>
      <comment>GetFeature with an incorrect typename ('sf:Asdf') in the query.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is an ows:ServiceException document.</comment>
      <link>wfs-1.1.0-Basic-atc10</link>
      <link>OGC 04-094, 7.7, p. 23</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.get.url"/>
                                        </url>
                                        <method>get</method>
                                        <param name="service">WFS</param>
                                        <param name="version">1.1.0</param>
                                        <param name="request">GetFeature</param>
                                        <param name="typename">sf:Asdf</param>
                                        <param name="namespace">xmlns(sf=http://cite.opengeospatial.org/gmlsf)</param>
                                        <p:XMLValidatingParser.OWS/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                                        <xsl:variable name="expression">//ows:ExceptionReport</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

        <test name="wfs:wfs-1.1.0-Basic-GetFeature-tc47.2">
      <param name="wfs.GetFeature.get.url"/>
      <assertion>IIf a request is unrecognizable or the service cannot process the request, a valid exception report must be returned.</assertion>
      <comment>GetFeature with an incorrect propertyname ('sf:asdfProperty') requested in the query.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is an ows:ServiceException document.</comment>
      <link>wfs-1.1.0-Basic-atc10</link>
      <link>OGC 04-094, 7.7, p. 23</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.get.url"/>
                                        </url>
                                        <method>get</method>
                                        <param name="service">WFS</param>
                                        <param name="version">1.1.0</param>
                                        <param name="request">GetFeature</param>
                                        <param name="typename">sf:PrimitiveGeoFeature</param>
                                        <param name="propertyname">sf:asdfProperty</param>
                                        <param name="namespace">xmlns(sf=http://cite.opengeospatial.org/gmlsf)</param>
                                        <p:XMLValidatingParser.OWS/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                                        <xsl:variable name="expression">//ows:ExceptionReport</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

<test name="wfs:wfs-1.1.0-Basic-GetFeature-tc48.1">
      <param name="wfs.GetFeature.get.url"/>
      <assertion>Correctly select the objects specified by the list of supplied identifiers. The  identification scheme is service-specific, but valid identifiers must substitute for ogc:_Id.</assertion>
      <comment>GetFeature to first get more than one feature id (gml:id), then another GetFeature filtering on the gml:ids.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is an wfs:FeatureCollection document; (3) the response shall have at least the two feature members expected from the request.</comment>
      <link>filter-1.1.0-objectid-atc2</link>
      <link>OGC 04-095, 11.1, p.14</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.get.url"/>
                                        </url>
                                        <method>get</method>
                                        <param name="service">WFS</param>
                                        <param name="version">1.1.0</param>
                                        <param name="request">GetFeature</param>
                                        <param name="typename">sf:Entit%C3%A9G%C3%A9n%C3%A9rique</param>
                                        <param name="namespace">xmlns(sf=http://cite.opengeospatial.org/gmlsf)</param>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1//wfs:FeatureCollection)">
                                <ctl:message>FAILURE: Expected valid wfs:FeatureCollection.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                                <xsl:otherwise>

            <xsl:variable name="gml.id1">
              <xsl:value-of select="$request1//sf:EntitéGénérique[1]/@gml:id"/>
            </xsl:variable>
            <xsl:variable name="gml.id2">
              <xsl:value-of select="$request1//sf:EntitéGénérique[2]/@gml:id"/>
            </xsl:variable>
                        <xsl:variable name="request2">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.get.url"/>
                                        </url>
                                        <method>get</method>
                                        <param name="service">WFS</param>
                                        <param name="version">1.1.0</param>
                                        <param name="request">GetFeature</param>
                                        <param name="featureid"><xsl:value-of select="encode-for-uri($gml.id1)"/>,<xsl:value-of select="encode-for-uri($gml.id2)"/></param>
                                        <param name="namespace">xmlns(sf=http://cite.opengeospatial.org/gmlsf)</param>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request2/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                    <xsl:for-each select="$request2//sf:EntitéGénérique">
                      <xsl:variable name="id"><xsl:value-of select="@gml:id"/></xsl:variable>
                      <xsl:if test="empty(index-of(($gml.id1, $gml.id2), $id))">
                        <ctl:message>FAILURE: Unexpected gml:id value (<xsl:value-of select="$id"/>)</ctl:message>
                        <ctl:fail/>
                      </xsl:if>
                    </xsl:for-each>
                                </xsl:otherwise>
                        </xsl:choose>

                        </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

   <test name="wfs:wfs-1.1.0-Basic-GetFeature-tc50.1">
      <param name="wfs.GetFeature.get.url"/>
      <assertion>When the SortBy parameter is used the resulting feature set must be properly sorted according to the sort criteria.</assertion>
      <comment>GetFeature for all PrimitiveGeoFeature sorting by the intProperty in ascending order (default if no 'A' or 'D' present).  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is an wfs:FeatureCollection document; (3) the response shall have the features sorted by the proper feature property in the described ascending or descending manner.</comment>
      <link>wfs-</link>
      <link>OGC 04-094, 14.7.3.1, p.100</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.get.url"/>
                                        </url>
                                        <method>get</method>
                                        <param name="service">WFS</param>
                                        <param name="version">1.1.0</param>
                                        <param name="request">GetFeature</param>
                                        <param name="typename">sf:PrimitiveGeoFeature</param>
                                        <param name="sortby"><xsl:value-of select="encode-for-uri('sf:intProperty')"/></param>
                                        <param name="namespace">xmlns(sf=http://cite.opengeospatial.org/gmlsf)</param>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1//wfs:FeatureCollection)">
                                <ctl:message>[FAILURE] Expected wfs:FeatureCollection in response.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                                <xsl:otherwise>
                  <xsl:variable name="features" select="$request1//sf:PrimitiveGeoFeature"/>
                                  <xsl:variable name="f1.int" select="xsd:integer($features[1]/sf:intProperty)"/>
                  <xsl:variable name="f2.int" select="xsd:integer($features[2]/sf:intProperty)"/>
                  <xsl:variable name="f3.int" select="xsd:integer($features[3]/sf:intProperty)"/>
                                  <xsl:if test="($f1.int gt $f2.int) or ($f2.int gt $f3.int)">
                                          <ctl:message>FAILURE: Features are not sorted by sf:intProperty in ascending order.</ctl:message>
                                          <ctl:fail/>
                                  </xsl:if>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

   <test name="wfs:wfs-1.1.0-Basic-GetFeature-tc50.2">
      <param name="wfs.GetFeature.get.url"/>
      <assertion>When the SortBy parameter is used the resulting feature set must be properly sorted according to the sort criteria.</assertion>
      <comment>GetFeature for all PrimitiveGeoFeature sorting by the intProperty in descending order.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is an wfs:FeatureCollection document; (3) the response shall have the features sorted by the proper feature property in the described ascending or descending manner.</comment>
      <link>wfs-</link>
      <link>OGC 04-094, 14.7.3.1, p.100</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.get.url"/>
                                        </url>
                                        <method>get</method>
                                        <param name="service">WFS</param>
                                        <param name="version">1.1.0</param>
                                        <param name="request">GetFeature</param>
                                        <param name="typename">sf:PrimitiveGeoFeature</param>
                                        <param name="sortby"><xsl:value-of select="encode-for-uri('sf:intProperty D')"/></param>
                                        <param name="namespace">xmlns(sf=http://cite.opengeospatial.org/gmlsf)</param>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1//wfs:FeatureCollection)">
                                <ctl:message>[FAILURE] Expected wfs:FeatureCollection in response.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                                <xsl:otherwise>
                  <xsl:variable name="features" select="$request1//sf:PrimitiveGeoFeature"/>
                                  <xsl:variable name="f1.int" select="xsd:integer($features[1]/sf:intProperty)"/>
                                  <xsl:variable name="f2.int" select="xsd:integer($features[2]/sf:intProperty)"/>
                                  <xsl:variable name="f3.int" select="xsd:integer($features[3]/sf:intProperty)"/>
                                  <xsl:if test="($f1.int lt $f2.int) or ($f2.int lt $f3.int)">
                                          <ctl:message>FAILURE: Features are not sorted by sf:intProperty in descending order.</ctl:message>
                                          <ctl:fail/>
                                  </xsl:if>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

        <ctl:test name="wfs:GetFeature-output-format-default">
                <ctl:param name="CAPABILITIES"/>
                <ctl:assertion>The MIME returned for a GetFeature request where no specific output format is requested is "text/xml; subtype=gml/3.1.1".</ctl:assertion>
                <ctl:comment/>
        <ctl:link>OGC 04-094, 6.4, p.11</ctl:link>
                <ctl:code>
                        <xsl:variable name="RESPONSE">
                                <ctl:request>
                                        <ctl:url>
                                                <xsl:value-of select="$CAPABILITIES/ows:OperationsMetadata/ows:Operation[@name='GetFeature']/ows:DCP/ows:HTTP/ows:Get/@xlink:href"/>
                                        </ctl:url>
                                        <ctl:method>get</ctl:method>
                                        <ctl:param name="request">GetFeature</ctl:param>
                                        <ctl:param name="service">WFS</ctl:param>
                                        <ctl:param name="version">1.1.0</ctl:param>
                                        <param name="typename">
                                                <xsl:value-of select="wfs:encode($CAPABILITIES/wfs:FeatureTypeList/wfs:FeatureType[1]/wfs:Name,'UTF-8')"/>
                                        </param>
                            <parsers:HTTPParser>
                               <parsers:parse>
                                  <parsers:NullParser/>
                               </parsers:parse>
                            </parsers:HTTPParser>
                                </ctl:request>
                        </xsl:variable>
                        <xsl:variable name="header" select="$RESPONSE/response/headers/header[@name='Content-Type']"/>
                        <xsl:variable name="content-type" select="substring-before(concat($header, ';'), ';')"/>
                        <xsl:if test="not($content-type = 'text/xml' and contains($header, 'subtype=gml/3.1.1'))">
                          <ctl:fail/>
                        </xsl:if>
                </ctl:code>
        </ctl:test>

        <ctl:test name="wfs:GetFeature-output-format-GML2">
                <ctl:param name="CAPABILITIES"/>
                <ctl:assertion>When output format GML2 is supported, the MIME returned for a GetFeature request where the output format requested is GML2 is "text/xml; subtype=gml/2.1.2".</ctl:assertion>
                <ctl:comment/>
        <ctl:link>OGC 04-094, 6.4, p.11</ctl:link>
                <ctl:code>
                <xsl:choose>
                    <xsl:when test="$CAPABILITIES/ows:OperationsMetadata/ows:Operation[@name='GetFeature']/ows:Parameter[@name='outputFormat' and ows:Value='GML2']">
                                        <xsl:variable name="RESPONSE">
                                                <ctl:request>
                                                        <ctl:url>
                                                                <xsl:value-of select="$CAPABILITIES/ows:OperationsMetadata/ows:Operation[@name='GetFeature']/ows:DCP/ows:HTTP/ows:Get/@xlink:href"/>
                                                        </ctl:url>
                                                        <ctl:method>get</ctl:method>
                                                        <ctl:param name="request">GetFeature</ctl:param>
                                                        <ctl:param name="service">WFS</ctl:param>
                                                        <ctl:param name="version">1.1.0</ctl:param>
                                                        <param name="typename">
                                                                <xsl:value-of select="wfs:encode($CAPABILITIES/wfs:FeatureTypeList/wfs:FeatureType[1]/wfs:Name,'UTF-8')"/>
                                                        </param>
                                                        <ctl:param name="outputformat">GML2</ctl:param>
                                            <parsers:HTTPParser>
                                               <parsers:parse>
                                                  <parsers:NullParser/>
                                               </parsers:parse>
                                            </parsers:HTTPParser>
                                                </ctl:request>
                                        </xsl:variable>
                                        <xsl:variable name="header" select="$RESPONSE/response/headers/header[@name='Content-Type']"/>
                                        <xsl:variable name="content-type" select="substring-before(concat($header, ';'), ';')"/>
                                        <xsl:if test="not($content-type = 'text/xml' and contains($header, 'subtype=gml/2.1.2'))">
                                                <ctl:fail/>
                                        </xsl:if>
                    </xsl:when>
                    <xsl:otherwise>
                                        <ctl:message>output format GML2 is not supported</ctl:message>
                    </xsl:otherwise>
                 </xsl:choose>
                </ctl:code>
        </ctl:test>

        <ctl:test name="wfs:GetFeature-output-format-gml-2.1.2">
                <ctl:param name="CAPABILITIES"/>
                <ctl:assertion>When output format "text/xml; subtype=gml/2.1.2" is supported, the MIME returned for a GetFeature request where the output format requested is "text/xml; subtype=gml/2.1.2" is "text/xml; subtype=gml/2.1.2".</ctl:assertion>
                <ctl:comment/>
        <ctl:link>OGC 04-094, 6.4, p.11</ctl:link>
                <ctl:code>
                <xsl:choose>
                    <xsl:when test="$CAPABILITIES/ows:OperationsMetadata/ows:Operation[@name='GetFeature']/ows:Parameter[@name='outputFormat' and ows:Value='text/xml; subtype=gml/2.1.2']">
                                        <xsl:variable name="RESPONSE">
                                                <ctl:request>
                                                        <ctl:url>
                                                                <xsl:value-of select="$CAPABILITIES/ows:OperationsMetadata/ows:Operation[@name='GetFeature']/ows:DCP/ows:HTTP/ows:Get/@xlink:href"/>
                                                        </ctl:url>
                                                        <ctl:method>get</ctl:method>
                                                        <ctl:param name="request">GetFeature</ctl:param>
                                                        <ctl:param name="service">WFS</ctl:param>
                                                        <ctl:param name="version">1.1.0</ctl:param>
                                                        <param name="typename">
                                                                <xsl:value-of select="wfs:encode($CAPABILITIES/wfs:FeatureTypeList/wfs:FeatureType[1]/wfs:Name,'UTF-8')"/>
                                                        </param>
                                                        <ctl:param name="outputformat">
                                                                <xsl:value-of select="wfs:encode('text/xml; subtype=gml/2.1.2','UTF-8')"/>
                                                        </ctl:param>
                                            <parsers:HTTPParser>
                                               <parsers:parse>
                                                  <parsers:NullParser/>
                                               </parsers:parse>
                                            </parsers:HTTPParser>
                                                </ctl:request>
                                        </xsl:variable>
                                        <xsl:variable name="header" select="$RESPONSE/response/headers/header[@name='Content-Type']"/>
                                        <xsl:variable name="content-type" select="substring-before(concat($header, ';'), ';')"/>
                                        <xsl:if test="not($content-type = 'text/xml' and contains($header, 'subtype=gml/2.1.2'))">
                                                <ctl:fail/>
                                        </xsl:if>
                    </xsl:when>
                    <xsl:otherwise>
                                        <ctl:message>output format "text/xml; subtype=gml/2.1.2" is not supported</ctl:message>
                    </xsl:otherwise>
                 </xsl:choose>
                </ctl:code>
        </ctl:test>

        <ctl:test name="wfs:GetFeature-extra-param">
                <ctl:param name="CAPABILITIES"/>
                <ctl:assertion>A valid HTTP Get request with an extra parameter not recognized by the WFS does not return an exception.</ctl:assertion>
                <ctl:comment/>
        <ctl:link>OGC 04-094, 14.3.4, p.95</ctl:link>
                <ctl:code>
                        <xsl:variable name="RESPONSE">
                                <ctl:request>
                                        <ctl:url>
                                                <xsl:value-of select="$CAPABILITIES/ows:OperationsMetadata/ows:Operation[@name='GetFeature']/ows:DCP/ows:HTTP/ows:Get/@xlink:href"/>
                                        </ctl:url>
                                        <ctl:method>get</ctl:method>
                                        <ctl:param name="request">GetFeature</ctl:param>
                                        <ctl:param name="service">WFS</ctl:param>
                                        <ctl:param name="version">1.1.0</ctl:param>
                                        <ctl:param name="extra">Unknown</ctl:param>
                                        <param name="typename">
                                                <xsl:value-of select="wfs:encode($CAPABILITIES/wfs:FeatureTypeList/wfs:FeatureType[1]/wfs:Name,'UTF-8')"/>
                                        </param>
                            <parsers:HTTPParser>
                               <parsers:parse>
                                  <parsers:HTTPParser/>
                               </parsers:parse>
                            </parsers:HTTPParser>
                                </ctl:request>
                        </xsl:variable>
                        <xsl:if test="$RESPONSE//ows:Exception/*">
                                <ctl:fail/>
                        </xsl:if>
                </ctl:code>
        </ctl:test>


        <ctl:test name="wfs:GetFeature-result-type-results">
                <ctl:param name="CAPABILITIES"/>
                <ctl:assertion>A GetFeature request with resultType=Results returns the actual features, not just the count of number of hits.</ctl:assertion>
                <ctl:comment/>
        <ctl:link>OGC 04-094, 9.3, p.38</ctl:link>
                <ctl:code>
                        <xsl:variable name="RESPONSE">
                                <ctl:request>
                                        <ctl:url>
                                                <xsl:value-of select="$CAPABILITIES/ows:OperationsMetadata/ows:Operation[@name='GetFeature']/ows:DCP/ows:HTTP/ows:Get/@xlink:href"/>
                                        </ctl:url>
                                        <ctl:method>get</ctl:method>
                                        <ctl:param name="request">GetFeature</ctl:param>
                                        <ctl:param name="service">WFS</ctl:param>
                                        <ctl:param name="version">1.1.0</ctl:param>
                                        <ctl:param name="resultType">results</ctl:param>
                                        <param name="typename">
                                                <xsl:value-of select="wfs:encode($CAPABILITIES/wfs:FeatureTypeList/wfs:FeatureType[1]/wfs:Name,'UTF-8')"/>
                                        </param>
                            <parsers:HTTPParser>
                               <parsers:parse>
                                  <parsers:HTTPParser/>
                               </parsers:parse>
                            </parsers:HTTPParser>
                                </ctl:request>
                        </xsl:variable>
                        <xsl:if test="not(($RESPONSE//gml:featureMember) or ($RESPONSE//gml:featureMembers/*))">
                                <ctl:fail/>
                        </xsl:if>
                        <xsl:if test="$RESPONSE//wfs:FeatureCollection/@numberOfFeatures and not($RESPONSE//wfs:FeatureCollection/@numberOfFeatures = count($RESPONSE//gml:featureMember) + count($RESPONSE//gml:featureMembers/*))">
                                <ctl:fail/>
                        </xsl:if>
                </ctl:code>
        </ctl:test>



</ctl:package>
	<ctl:package xmlns="http://www.occamlab.com/ctl" xmlns:ogc="http://www.opengis.net/ogc" xmlns:gml="http://www.opengis.net/gml" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">

    <!-- include test groups for optional capabilities -->
    <ctl:package>

    <ctl:test name="wfs:run-GetFeature-POST-logicalops">
      <ctl:param name="wfs.GetCapabilities.document"/>
      <ctl:assertion>Run test group for GetFeature requests (POST) with logical operators: And, Or, Not.</ctl:assertion>
      <ctl:code>
                <xsl:variable name="wfs.GetFeature.post.url">
                        <xsl:value-of select="$wfs.GetCapabilities.document//ows:OperationsMetadata/ows:Operation[@name='GetFeature']/ows:DCP/ows:HTTP/ows:Post/@xlink:href"/>
                </xsl:variable>

        <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc100.1">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
        <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc100.2">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
        <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc100.3">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
        <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc101.1">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
        <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc101.2">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
        <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc101.3">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
        <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc102.1">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
        <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc102.2">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
      </ctl:code>
    </ctl:test>

    <ctl:test name="wfs:wfs-1.1.0-Basic-GetFeature-tc100.1">
      <ctl:param name="wfs.GetFeature.post.url"/>
      <ctl:assertion>
      The response to a GetFeature request that includes an ogc:Filter having a
      Not/PropertyIsBetween predicate must include only matching feature representations.
      </ctl:assertion>
      <ctl:comment>
      Pass if the response entity is a valid wfs:FeatureCollection that contains
      only feature members satisfying the Not/PropertyIsBetween predicate.
      </ctl:comment>
      <ctl:link>wfs-1.1.0-Basic-GetFeature-atc100</ctl:link>
      <ctl:code>
                <xsl:variable name="response">
                        <ctl:request>
                                <ctl:url>
                                        <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                </ctl:url>
                                <ctl:method>POST</ctl:method>
                            <ctl:body>
                                        <!-- test case id: wfs-1.1.0-Basic-GetFeature-tc100.1 --><wfs:GetFeature version="1.1.0" service="WFS">
  <wfs:Query typeName="sf:AggregateGeoFeature">
    <ogc:Filter>
      <ogc:Not>
        <ogc:PropertyIsBetween>
          <ogc:PropertyName>sf:doubleProperty</ogc:PropertyName>
          <ogc:LowerBoundary><ogc:Literal>20.0</ogc:Literal></ogc:LowerBoundary>
          <ogc:UpperBoundary><ogc:Literal>100.0</ogc:Literal></ogc:UpperBoundary>										
        </ogc:PropertyIsBetween>
      </ogc:Not>
    </ogc:Filter>
  </wfs:Query>
</wfs:GetFeature>
                                </ctl:body>
                                <p:XMLValidatingParser.GMLSF1/>
                        </ctl:request>
                </xsl:variable>
                <xsl:choose>
                        <xsl:when test="not($response/*)">
                        <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                <ctl:fail/>
                    </xsl:when>
                    <xsl:otherwise>
              <xsl:variable name="featureCount" select="count($response//sf:AggregateGeoFeature)"/>
              <xsl:if test="$featureCount != 3">
                <ctl:message>FAILURE: Expected 3 sf:AggregateGeoFeature instances in response (<xsl:value-of select="$featureCount"/> included)</ctl:message>
                <ctl:fail/>
              </xsl:if>
              <xsl:for-each select="$response//sf:doubleProperty">
                <xsl:if test="not((xsd:double(.) lt 20.0) or (xsd:double(.) gt 100.0))">
                  <ctl:message>FAILURE: sf:doubleProperty value is not &lt; 20 or &gt; 100 (gml:id = <xsl:value-of select="../@gml:id"/>)</ctl:message>
                  <ctl:fail/>
                </xsl:if>
              </xsl:for-each>
                        </xsl:otherwise>
                </xsl:choose>
          </ctl:code>
    </ctl:test>

    <ctl:test name="wfs:wfs-1.1.0-Basic-GetFeature-tc100.2">
      <ctl:param name="wfs.GetFeature.post.url"/>
      <ctl:assertion>
      The response to a GetFeature request that includes an ogc:Filter having a
      Not/BBOX predicate must include only matching feature representations.
      </ctl:assertion>
      <ctl:comment>
      Pass if the response entity is a valid wfs:FeatureCollection that contains
      only feature members satisfying the Not/BBOX predicate.
      </ctl:comment>
      <ctl:link>wfs-1.1.0-Basic-GetFeature-atc100</ctl:link>
      <ctl:code>
                <xsl:variable name="response">
                        <ctl:request>
                                <ctl:url>
                                        <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                </ctl:url>
                                <ctl:method>POST</ctl:method>
                            <ctl:body>
                                        <!-- test case id: wfs-1.1.0-Basic-GetFeature-tc100.2 --><wfs:GetFeature version="1.1.0" service="WFS">
  <wfs:Query typeName="sf:EntitéGénérique" srsName="urn:ogc:def:crs:EPSG::4326">
    <ogc:Filter>
      <ogc:Not>
        <ogc:BBOX>
          <ogc:PropertyName>sf:attribut.Géométrie</ogc:PropertyName>
          <gml:Envelope srsName="urn:ogc:def:crs:EPSG::4326">
            <gml:lowerCorner>34.0 16.0</gml:lowerCorner>
            <gml:upperCorner>40.0 19.0</gml:upperCorner>
          </gml:Envelope>
        </ogc:BBOX>
      </ogc:Not>
    </ogc:Filter>
  </wfs:Query>
</wfs:GetFeature>
                                </ctl:body>
                                <p:XMLValidatingParser.GMLSF1/>
                        </ctl:request>
                </xsl:variable>
                <xsl:choose>
                        <xsl:when test="not($response/*)">
                        <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                <ctl:fail/>
                    </xsl:when>
                    <xsl:otherwise>
              <xsl:variable name="featureCount" select="count($response//sf:EntitéGénérique)"/>
              <xsl:if test="$featureCount != 2">
                <ctl:message>FAILURE: Expected 2 sf:EntitéGénérique instance in response (<xsl:value-of select="$featureCount"/> included)</ctl:message>
                <ctl:fail/>
              </xsl:if>
              <xsl:variable name="env">
                <gml:Envelope srsName="urn:ogc:def:crs:EPSG::4326">
                  <gml:lowerCorner>34.0 16.0</gml:lowerCorner>
                  <gml:upperCorner>40.0 19.0</gml:upperCorner>
                </gml:Envelope>
              </xsl:variable>
              <xsl:for-each select="$response//sf:EntitéGénérique">
                <xsl:if test="./gml:boundedBy">
                        <xsl:if test="wfs:disjoint-envelopes($env,gml:boundedBy) != 1">
                          <ctl:message>FAILURE: Envelopes intersect (gml:id = <xsl:value-of select="@gml:id"/>)</ctl:message>
                          <ctl:fail/>
                        </xsl:if>
                    </xsl:if>
              </xsl:for-each>
              <!-- TODO evaluate spatial relationship -->
                        </xsl:otherwise>
                </xsl:choose>
          </ctl:code>
    </ctl:test>

    <ctl:test name="wfs:wfs-1.1.0-Basic-GetFeature-tc100.3">
      <ctl:param name="wfs.GetFeature.post.url"/>
      <ctl:assertion>
      The response to a GetFeature request that includes an ogc:Filter having a
      Not/Not predicate must include only matching feature representations.
      </ctl:assertion>
      <ctl:comment>
      Pass if the response entity is a valid wfs:FeatureCollection that contains
      only feature members satisfying the Not/Not/BBOX predicate.
      </ctl:comment>
      <ctl:link>wfs-1.1.0-Basic-GetFeature-atc100</ctl:link>
      <ctl:code>
                <xsl:variable name="response">
                        <ctl:request>
                                <ctl:url>
                                        <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                </ctl:url>
                                <ctl:method>POST</ctl:method>
                            <ctl:body>
                                        <!-- test case id: wfs-1.1.0-Basic-GetFeature-tc100.3 --><wfs:GetFeature version="1.1.0" service="WFS">
  <wfs:Query typeName="sf:EntitéGénérique" srsName="urn:ogc:def:crs:EPSG::4326">
    <ogc:Filter>
      <ogc:Not>
        <ogc:Not>
          <ogc:BBOX>
            <ogc:PropertyName>sf:attribut.Géométrie</ogc:PropertyName>
            <gml:Envelope srsName="urn:ogc:def:crs:EPSG::4326">
              <gml:lowerCorner>55.0 -2.5</gml:lowerCorner>
              <gml:upperCorner>65.0 2.5</gml:upperCorner>
            </gml:Envelope>
          </ogc:BBOX>
        </ogc:Not>
      </ogc:Not>
    </ogc:Filter>
  </wfs:Query>
</wfs:GetFeature>
                                </ctl:body>
                                <p:XMLValidatingParser.GMLSF1/>
                        </ctl:request>
                </xsl:variable>
                <xsl:choose>
                        <xsl:when test="not($response/*)">
                        <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                <ctl:fail/>
                    </xsl:when>
                    <xsl:otherwise>
              <xsl:variable name="featureCount" select="count($response//sf:EntitéGénérique)"/>
              <xsl:if test="$featureCount lt 1">
                <ctl:message>FAILURE: Empty feature collection.</ctl:message>
                <ctl:fail/>
              </xsl:if>
              <xsl:variable name="env">
                <gml:Envelope srsName="urn:ogc:def:crs:EPSG::4326">
                  <gml:lowerCorner>55.0 -2.5</gml:lowerCorner>
                  <gml:upperCorner>65.0 2.5</gml:upperCorner>
                </gml:Envelope>
              </xsl:variable>
              <xsl:for-each select="$response//sf:EntitéGénérique">
                <xsl:if test="./gml:boundedBy">
                  <xsl:if test="wfs:disjoint-envelopes($env,gml:boundedBy) != 0">
                    <ctl:message>FAILURE: Envelopes do NOT intersect (gml:id = <xsl:value-of select="@gml:id"/>)</ctl:message>
                    <ctl:fail/>
                  </xsl:if>
                </xsl:if>
              </xsl:for-each>
              <xsl:if test="not($response//sf:EntitéGénérique[sf:featureRef = 'name-f003'])">
                        <ctl:message>FAILURE: Did not return expected feature (sf:featureRef = 'name-f003')</ctl:message>
                        <ctl:fail/>
              </xsl:if>
              <!-- TODO evaluate spatial relationship -->
                        </xsl:otherwise>
                </xsl:choose>
          </ctl:code>
    </ctl:test>

    <ctl:test name="wfs:wfs-1.1.0-Basic-GetFeature-tc101.1">
      <ctl:param name="wfs.GetFeature.post.url"/>
      <ctl:assertion>
      The response to a GetFeature request that includes an ogc:Filter having an
      And predicate must include only features that satisfy ALL constraints.
      </ctl:assertion>
      <ctl:comment>
      Pass if the response entity is a valid wfs:FeatureCollection that contains
      only feature members satisfying all predicates.
      </ctl:comment>
      <ctl:link>wfs-1.1.0-Basic-GetFeature-atc101</ctl:link>
      <ctl:code>
                <xsl:variable name="response">
                        <ctl:request>
                                <ctl:url>
                                        <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                </ctl:url>
                                <ctl:method>POST</ctl:method>
                            <ctl:body>
                                   <!-- test case id: wfs-1.1.0-Basic-GetFeature-tc101.1 --><wfs:GetFeature version="1.1.0" service="WFS">
  <wfs:Query typeName="sf:PrimitiveGeoFeature" srsName="urn:ogc:def:crs:EPSG::4326">
    <ogc:Filter>
      <ogc:And>
        <ogc:BBOX>
          <ogc:PropertyName>sf:pointProperty</ogc:PropertyName>
          <gml:Envelope srsName="urn:x-ogc:def:crs:EPSG:6.11:4326">
            <gml:lowerCorner>36.0 -1.0</gml:lowerCorner>
            <gml:upperCorner>42.0 4.0</gml:upperCorner>
          </gml:Envelope>
        </ogc:BBOX>
        <ogc:PropertyIsGreaterThan>
          <ogc:PropertyName>sf:dateProperty</ogc:PropertyName>
          <ogc:Literal>2006-10-01Z</ogc:Literal>
        </ogc:PropertyIsGreaterThan>
      </ogc:And>
    </ogc:Filter>
  </wfs:Query>
</wfs:GetFeature>
                                </ctl:body>
                                <p:XMLValidatingParser.GMLSF1/>
                        </ctl:request>
                </xsl:variable>
                <xsl:choose>
                        <xsl:when test="not($response/*)">
                        <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                <ctl:fail/>
                    </xsl:when>
                    <xsl:otherwise>
              <xsl:variable name="featureCount" select="count($response//sf:PrimitiveGeoFeature)"/>
              <xsl:if test="$featureCount lt 1">
                <ctl:message>FAILURE: Empty feature collection.</ctl:message>
                <ctl:fail/>
              </xsl:if>
              <xsl:variable name="env">
                <gml:Envelope srsName="urn:ogc:def:crs:EPSG::4326">
                  <gml:lowerCorner>36.0 -1.0</gml:lowerCorner>
                  <gml:upperCorner>42.0 4.0</gml:upperCorner>
                </gml:Envelope>
              </xsl:variable>
              <xsl:for-each select="$response//sf:PrimitiveGeoFeature">
                <xsl:if test="xsd:date(sf:dateProperty) le xsd:date('2006-10-01Z')">
                  <ctl:message>FAILURE: sf:dateProperty value on or before 2006-10-01Z (gml:id = <xsl:value-of select="@gml:id"/>)</ctl:message>
                  <ctl:fail/>
                </xsl:if>
               <xsl:if test="./gml:boundedBy">
                       <xsl:if test="wfs:disjoint-envelopes($env,gml:boundedBy) != 0">
                         <ctl:message>FAILURE: Envelopes do NOT intersect (gml:id = <xsl:value-of select="@gml:id"/>)</ctl:message>
                         <ctl:fail/>
                       </xsl:if>
               </xsl:if>
              </xsl:for-each>
              <!-- TODO evaluate intersects relationship -->
                        </xsl:otherwise>
                </xsl:choose>
          </ctl:code>
    </ctl:test>

    <ctl:test name="wfs:wfs-1.1.0-Basic-GetFeature-tc101.2">
      <ctl:param name="wfs.GetFeature.post.url"/>
      <ctl:assertion>
      The response to a GetFeature request that includes an ogc:Filter having an
      And predicate must include only features that satisfy ALL constraints.
      </ctl:assertion>
      <ctl:comment>
      Pass if the response entity is a valid wfs:FeatureCollection that contains
      only feature members satisfying all predicates.
      </ctl:comment>
      <ctl:link>wfs-1.1.0-Basic-GetFeature-atc101</ctl:link>
      <ctl:code>
                <xsl:variable name="response">
                        <ctl:request>
                                <ctl:url>
                                        <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                </ctl:url>
                                <ctl:method>POST</ctl:method>
                            <ctl:body>
                                        <!-- test case id: wfs-1.1.0-Basic-GetFeature-tc101.2 --><wfs:GetFeature version="1.1.0" service="WFS">
  <wfs:Query typeName="sf:AggregateGeoFeature">
    <ogc:Filter>
      <ogc:And>
        <ogc:PropertyIsGreaterThanOrEqualTo>
          <ogc:PropertyName>sf:doubleProperty</ogc:PropertyName>
          <ogc:Literal>24510</ogc:Literal>
        </ogc:PropertyIsGreaterThanOrEqualTo>
        <ogc:PropertyIsEqualTo matchCase="false">
          <ogc:PropertyName>sf:featureCode</ogc:PropertyName>
          <ogc:Literal>ak020</ogc:Literal>
        </ogc:PropertyIsEqualTo>
      </ogc:And>
    </ogc:Filter>
  </wfs:Query>
</wfs:GetFeature>
                                </ctl:body>
                                <p:XMLValidatingParser.GMLSF1/>
                        </ctl:request>
                </xsl:variable>
                <xsl:choose>
                        <xsl:when test="not($response/*)">
                        <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                <ctl:fail/>
                    </xsl:when>
                    <xsl:otherwise>
              <xsl:variable name="featureCount" select="count($response//sf:AggregateGeoFeature)"/>
              <xsl:if test="$featureCount lt 1">
                <ctl:message>FAILURE: Empty feature collection.</ctl:message>
                <ctl:fail/>
              </xsl:if>
              <xsl:for-each select="$response//sf:AggregateGeoFeature">
                <xsl:if test="xsd:double(sf:doubleProperty) lt 24510">
                  <ctl:message>FAILURE: sf:doubleProperty value &lt; 24510 (gml:id = <xsl:value-of select="@gml:id"/>)</ctl:message>
                  <ctl:fail/>
                </xsl:if>
                <xsl:if test="compare(sf:featureCode, 'AK020') != 0">
                  <ctl:message>FAILURE: sf:featureCode != "AK020" (gml:id = <xsl:value-of select="@gml:id"/>)</ctl:message>
                  <ctl:fail/>
                </xsl:if>
              </xsl:for-each>
                        </xsl:otherwise>
                </xsl:choose>
          </ctl:code>
    </ctl:test>

    <ctl:test name="wfs:wfs-1.1.0-Basic-GetFeature-tc101.3">
      <ctl:param name="wfs.GetFeature.post.url"/>
      <ctl:assertion>
        The response to a GetFeature request that includes an ogc:Filter having an
        And predicate must include only features that satisfy ALL constraints.
      </ctl:assertion>
      <ctl:comment>
        Pass if the response entity is a valid wfs:FeatureCollection that contains
        only feature members satisfying all predicates.
      </ctl:comment>
      <ctl:link>wfs-1.1.0-Basic-GetFeature-atc101</ctl:link>
      <ctl:code>
        <xsl:variable name="response">
          <ctl:request>
            <ctl:url>
              <xsl:value-of select="$wfs.GetFeature.post.url"/>
            </ctl:url>
            <ctl:method>POST</ctl:method>
            <ctl:body>
              <!-- test case id: wfs-1.1.0-Basic-GetFeature-tc101.3 --><wfs:GetFeature version="1.1.0" service="WFS">
  <wfs:Query typeName="sf:AggregateGeoFeature" srsName="urn:ogc:def:crs:EPSG::4326">
    <ogc:Filter>
      <ogc:And>
        <ogc:Not>
          <ogc:BBOX>
            <gml:Envelope srsName="urn:ogc:def:crs:EPSG::4326">
              <gml:lowerCorner>40.0 -5.0</gml:lowerCorner>
              <gml:upperCorner>50.0 -1.0</gml:upperCorner>
            </gml:Envelope>
          </ogc:BBOX>
        </ogc:Not>
        <ogc:PropertyIsGreaterThan>
          <ogc:PropertyName>sf:doubleProperty</ogc:PropertyName>
          <ogc:Literal>20.0</ogc:Literal>
        </ogc:PropertyIsGreaterThan>
      </ogc:And>
    </ogc:Filter>
  </wfs:Query>
</wfs:GetFeature>
            </ctl:body>
            <p:XMLValidatingParser.GMLSF1/>
          </ctl:request>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="not($response/*)">
            <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
            <ctl:fail/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:choose>
              <xsl:when test="$response/ows:ExceptionReport">
                <ctl:call-test name="ctl:SchematronValidatingParser">
                  <ctl:with-param name="doc" select="$response"/>
                  <ctl:with-param name="schema">sch/ows/1.0.0/ExceptionReport.sch</ctl:with-param>
                  <ctl:with-param name="phase">InvalidParameterValuePhase</ctl:with-param>
                </ctl:call-test>
              </xsl:when>
              <xsl:otherwise>
                <xsl:variable name="featureCount" select="count($response//sf:AggregateGeoFeature)"/>
                <xsl:if test="$featureCount lt 1">
                  <ctl:message>FAILURE: Empty feature collection.</ctl:message>
                  <ctl:fail/>
                </xsl:if>
                <xsl:variable name="env">
                  <gml:Envelope srsName="urn:ogc:def:crs:EPSG::4326">
                    <gml:lowerCorner>40.0 -5.0</gml:lowerCorner>
                    <gml:upperCorner>50.0 -1.0</gml:upperCorner>
                  </gml:Envelope>
                </xsl:variable>
                <xsl:for-each select="$response//sf:AggregateGeoFeature">
                  <xsl:if test="xsd:double(sf:doubleProperty) le 20.0">
                    <ctl:message>FAILURE: sf:doubleProperty &lt;= 20.0 (gml:id = <xsl:value-of select="@gml:id"/>)</ctl:message>
                    <ctl:fail/>
                  </xsl:if>
                  <xsl:if test="./gml:boundedBy">
                    <xsl:if test="wfs:disjoint-envelopes($env,gml:boundedBy) != 1">
                      <ctl:message>FAILURE: Envelopes intersect (gml:id = <xsl:value-of select="@gml:id"/>)</ctl:message>
                      <ctl:fail/>
                    </xsl:if>
                  </xsl:if>
                </xsl:for-each>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:otherwise>
        </xsl:choose>
      </ctl:code>
    </ctl:test>

    <ctl:test name="wfs:wfs-1.1.0-Basic-GetFeature-tc102.1">
      <ctl:param name="wfs.GetFeature.post.url"/>
      <ctl:assertion>
      The response to a GetFeature request that includes an ogc:Filter having an
      Or predicate must include features that satisfy ANY of the constraints.
      </ctl:assertion>
      <ctl:comment>
      Pass if the response entity is a valid wfs:FeatureCollection that contains
      only feature members satisfying any predicate.
      </ctl:comment>
      <ctl:link>wfs-1.1.0-Basic-GetFeature-atc102</ctl:link>
      <ctl:code>
                <xsl:variable name="response">
                        <ctl:request>
                                <ctl:url>
                                        <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                </ctl:url>
                                <ctl:method>POST</ctl:method>
                            <ctl:body>
                                        <!-- test case id: wfs-1.1.0-Basic-GetFeature-tc102.1 --><wfs:GetFeature version="1.1.0" service="WFS">
  <wfs:Query typeName="sf:EntitéGénérique" srsName="urn:ogc:def:crs:EPSG::4326">
    <ogc:Filter>
      <ogc:Or>
        <ogc:PropertyIsEqualTo>
          <ogc:PropertyName>sf:str4Property</ogc:PropertyName>
          <ogc:Literal>abc3</ogc:Literal>
        </ogc:PropertyIsEqualTo>
        <ogc:BBOX>
          <ogc:PropertyName>sf:attribut.Géométrie</ogc:PropertyName>
          <gml:Envelope srsName="urn:ogc:def:crs:EPSG::4326">
            <gml:lowerCorner>34.0 15.0</gml:lowerCorner>
            <gml:upperCorner>40.0 19.0</gml:upperCorner>
          </gml:Envelope>
        </ogc:BBOX>
      </ogc:Or>
    </ogc:Filter>
    <ogc:SortBy>
      <ogc:SortProperty>
        <ogc:PropertyName>sf:str4Property</ogc:PropertyName>
        <ogc:SortOrder>ASC</ogc:SortOrder>
      </ogc:SortProperty>
    </ogc:SortBy>
  </wfs:Query>
</wfs:GetFeature>
                                </ctl:body>
                                <p:XMLValidatingParser.GMLSF1/>
                        </ctl:request>
                </xsl:variable>
                <xsl:choose>
                        <xsl:when test="not($response/*)">
                        <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                <ctl:fail/>
                    </xsl:when>
                    <xsl:otherwise>
              <xsl:variable name="featureCount" select="count($response//sf:EntitéGénérique)"/>
              <xsl:if test="$featureCount lt 1">
                <ctl:message>FAILURE: Empty feature collection.</ctl:message>
                <ctl:fail/>
              </xsl:if>
              <xsl:variable name="env">
                <gml:Envelope srsName="urn:ogc:def:crs:EPSG::4326">
                  <gml:lowerCorner>34.0 15.0</gml:lowerCorner>
                  <gml:upperCorner>40.0 19.0</gml:upperCorner>
                </gml:Envelope>
              </xsl:variable>
              <xsl:for-each select="$response//sf:EntitéGénérique">
                  <xsl:if test="not(sf:str4Property or sf:attribut.Géométrie)">
                    <ctl:message>FAILURE: sf:EntitéGénérique missing an expected property: sf:str4Property or sf:attribut.Géométrie (gml:id = <xsl:value-of select="@gml:id"/>)</ctl:message>
                    <ctl:fail/>
                  </xsl:if>
              </xsl:for-each>
              <!-- verify sorting -->
              <xsl:variable name="f1.str4" select="($response//sf:EntitéGénérique)[1]/sf:str4Property"/>
              <xsl:variable name="f2.str4" select="($response//sf:EntitéGénérique)[2]/sf:str4Property"/>
              <xsl:if test="(compare($f1.str4,$f2.str4) ne -1)">
                  <ctl:message>FAILURE: Features are not sorted by sf:str4Property in ascending order.</ctl:message>
                  <ctl:fail/>
              </xsl:if>
                        </xsl:otherwise>
                </xsl:choose>
          </ctl:code>
    </ctl:test>

    <ctl:test name="wfs:wfs-1.1.0-Basic-GetFeature-tc102.2">
      <ctl:param name="wfs.GetFeature.post.url"/>
      <ctl:assertion>
      The response to a GetFeature request that includes an ogc:Filter having an
      Or predicate must include features that satisfy ANY of the constraints.
      </ctl:assertion>
      <ctl:comment>
      Pass if the response entity is a valid wfs:FeatureCollection that contains
      only feature members satisfying any predicate.
      </ctl:comment>
      <ctl:link>wfs-1.1.0-Basic-GetFeature-atc102</ctl:link>
      <ctl:code>
                <xsl:variable name="response">
                        <ctl:request>
                                <ctl:url>
                                        <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                </ctl:url>
                                <ctl:method>POST</ctl:method>
                            <ctl:body>
                                        <!-- test case id: wfs-1.1.0-Basic-GetFeature-tc102.2 --><wfs:GetFeature version="1.1.0" service="WFS">
  <wfs:Query typeName="sf:PrimitiveGeoFeature">
    <ogc:Filter>
      <ogc:Or>
        <ogc:PropertyIsNotEqualTo>
          <ogc:PropertyName>sf:intProperty</ogc:PropertyName>
          <ogc:Literal>155</ogc:Literal>
        </ogc:PropertyIsNotEqualTo>
        <ogc:PropertyIsBetween>
          <ogc:PropertyName>sf:decimalProperty</ogc:PropertyName>
          <ogc:LowerBoundary><ogc:Literal>10.00</ogc:Literal></ogc:LowerBoundary>
          <ogc:UpperBoundary><ogc:Literal>20.00</ogc:Literal></ogc:UpperBoundary>										
        </ogc:PropertyIsBetween>
      </ogc:Or>
    </ogc:Filter>
  </wfs:Query>
</wfs:GetFeature>
                                </ctl:body>
                                <p:XMLValidatingParser.GMLSF1/>
                        </ctl:request>
                </xsl:variable>
                <xsl:choose>
                        <xsl:when test="not($response/*)">
                        <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                <ctl:fail/>
                    </xsl:when>
                    <xsl:otherwise>
              <xsl:for-each select="$response//sf:PrimitiveGeoFeature">
                  <xsl:if test="not(sf:intProperty or sf:decimalProperty)">
                    <ctl:message>FAILURE: sf:PrimitiveGeoFeature missing an expected property: sf:intProperty or sf:decimalProperty (gml:id = <xsl:value-of select="@gml:id"/>)</ctl:message>
                    <ctl:fail/>
                  </xsl:if>
                  <xsl:choose>
                    <xsl:when test="sf:intProperty and sf:decimalProperty">
                      <xsl:if test="(xsd:integer(sf:intProperty) = 155) and ((xsd:decimal(sf:decimalProperty) lt 10.0) or (xsd:decimal(sf:decimalProperty) gt 20.0))">
                        <ctl:message>FAILURE: sf:intProperty = 155 AND sf:decimalProperty is not in the range 10.0-20.0 (gml:id = <xsl:value-of select="@gml:id"/>)</ctl:message>
                        <ctl:fail/>
                      </xsl:if>
                    </xsl:when>
                    <xsl:when test="sf:intProperty">
                      <xsl:if test="xsd:integer(sf:intProperty) = 155">
                        <ctl:message>FAILURE: sf:intProperty = 155 (gml:id = <xsl:value-of select="@gml:id"/>)</ctl:message>
                        <ctl:fail/>
                      </xsl:if>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:if test="(xsd:decimal(sf:decimalProperty) lt 10.0) or (xsd:decimal(sf:decimalProperty) gt 20.0)">
                        <ctl:message>FAILURE: sf:decimalProperty is not in the range 10.0-20.0 (gml:id = <xsl:value-of select="@gml:id"/>)</ctl:message>
                        <ctl:fail/>
                      </xsl:if>
                    </xsl:otherwise>
                  </xsl:choose>
              </xsl:for-each>
                        </xsl:otherwise>
                </xsl:choose>
          </ctl:code>
    </ctl:test>
</ctl:package>
    <ctl:package>

    <ctl:test name="wfs:run-GetFeature-POST-spatialops">
      <ctl:param name="wfs.GetCapabilities.document"/>
      <ctl:assertion>Run test group for GetFeature requests (POST) with spatial operators.</ctl:assertion>
      <ctl:code>
        <xsl:variable name="wfs.GetFeature.post.url">
          <xsl:value-of select="$wfs.GetCapabilities.document//ows:OperationsMetadata/ows:Operation[@name='GetFeature']/ows:DCP/ows:HTTP/ows:Post/@xlink:href"/>
        </xsl:variable>

        <xsl:if test="$wfs.GetCapabilities.document//ogc:Spatial_Capabilities/ogc:SpatialOperators/ogc:SpatialOperator[@name='Disjoint']">
          <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc200.1">
            <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
          </ctl:call-test>
          <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc200.2">
            <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
          </ctl:call-test>
          <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc200.3">
            <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
          </ctl:call-test>

          <xsl:variable name="wfs.circle.supported">
            <xsl:value-of select="count($wfs.GetCapabilities.document//ogc:Filter_Capabilities/ogc:Spatial_Capabilities/ogc:GeometryOperands/ogc:GeometryOperand[contains(text(), 'Circle')]) gt 0"/>
          </xsl:variable>

          <xsl:if test="count($wfs.GetCapabilities.document//ogc:Filter_Capabilities/ogc:Spatial_Capabilities/ogc:GeometryOperands/ogc:GeometryOperand[contains(text(), 'Circle')]) = 0">
            <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc200.4">
              <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
            </ctl:call-test>
          </xsl:if>
          <xsl:if test="count($wfs.GetCapabilities.document//ogc:Filter_Capabilities/ogc:Spatial_Capabilities/ogc:GeometryOperands/ogc:GeometryOperand[contains(text(), 'Circle')]) gt 1">
            <ctl:message>Not testing wfs:wfs-1.1.0-Basic-GetFeature-tc200.4 because circles are actually supported.</ctl:message>
          </xsl:if>
        </xsl:if>


        <xsl:if test="$wfs.GetCapabilities.document//ogc:Spatial_Capabilities/ogc:SpatialOperators/ogc:SpatialOperator[@name='Intersects']">
          <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc201.1">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                  </ctl:call-test>
          <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc201.2">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                  </ctl:call-test>
          <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc201.3">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                  </ctl:call-test>
          <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc202.1">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                  </ctl:call-test>
        </xsl:if>
        <xsl:if test="$wfs.GetCapabilities.document//ogc:Spatial_Capabilities/ogc:SpatialOperators/ogc:SpatialOperator[@name='Within']">
          <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc203.1">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                  </ctl:call-test>
          <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc203.2">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                  </ctl:call-test>
          <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc203.3">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                  </ctl:call-test>
        </xsl:if>
        <xsl:if test="$wfs.GetCapabilities.document//ogc:Spatial_Capabilities/ogc:SpatialOperators/ogc:SpatialOperator[@name='Overlaps']">
          <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc204.1">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                  </ctl:call-test>
          <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc204.2">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                  </ctl:call-test>
          <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc204.3">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                  </ctl:call-test>
          <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc204.4">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                  </ctl:call-test>
        </xsl:if>
        <xsl:if test="$wfs.GetCapabilities.document//ogc:Spatial_Capabilities/ogc:SpatialOperators/ogc:SpatialOperator[@name='Equals']">
          <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc205.1">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                  </ctl:call-test>
          <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc205.2">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                  </ctl:call-test>
          <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc205.3">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                  </ctl:call-test>
        </xsl:if>
        <xsl:if test="$wfs.GetCapabilities.document//ogc:Spatial_Capabilities/ogc:SpatialOperators/ogc:SpatialOperator[@name='Contains']">
          <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc206.1">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                  </ctl:call-test>
          <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc206.2">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                  </ctl:call-test>
          <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc206.3">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                  </ctl:call-test>
        </xsl:if>
        <xsl:if test="$wfs.GetCapabilities.document//ogc:Spatial_Capabilities/ogc:SpatialOperators/ogc:SpatialOperator[@name='Touches']">
          <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc207.1">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                  </ctl:call-test>
          <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc207.2">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                  </ctl:call-test>
          <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc207.3">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                  </ctl:call-test>
        </xsl:if>
        <xsl:if test="$wfs.GetCapabilities.document//ogc:Spatial_Capabilities/ogc:SpatialOperators/ogc:SpatialOperator[@name='Crosses']">
          <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc208.1">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                  </ctl:call-test>
          <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc208.2">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                  </ctl:call-test>
          <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc208.3">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                  </ctl:call-test>
        </xsl:if>
                <!-- Expect an explicit EPSG value or a regular expression in the capabilities document for each supported SRS, i.e. urn:ogc:def:crs:EPSG:\d{4,5} -->
            <xsl:variable name="value0">urn:ogc:def:crs:EPSG::4326</xsl:variable>
        <xsl:if test="boolean($wfs.GetCapabilities.document//wfs:FeatureType[contains(wfs:Name, ':PrimitiveGeoFeature')]/wfs:DefaultSRS[text() = $value0]) or boolean($wfs.GetCapabilities.document//wfs:FeatureType[contains(wfs:Name, ':PrimitiveGeoFeature')]/wfs:OtherSRS[text() = $value0]) or boolean($wfs.GetCapabilities.document//wfs:FeatureTypeList/wfs:DefaultSRS[text() = $value0]) or boolean($wfs.GetCapabilities.document//wfs:FeatureTypeList/wfs:OtherSRS[text() = $value0])">
                        <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc209.1">
                                <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                        </ctl:call-test>
                </xsl:if>
            <xsl:variable name="value1">urn:ogc:def:crs:EPSG:32629</xsl:variable>
        <xsl:if test="boolean($wfs.GetCapabilities.document//wfs:FeatureType[contains(wfs:Name, ':PrimitiveGeoFeature')]/wfs:DefaultSRS[text() = $value1]) or boolean($wfs.GetCapabilities.document//wfs:FeatureType[contains(wfs:Name, ':PrimitiveGeoFeature')]/wfs:OtherSRS[text() = $value1]) or boolean($wfs.GetCapabilities.document//wfs:FeatureTypeList/wfs:DefaultSRS[text() = $value1]) or boolean($wfs.GetCapabilities.document//wfs:FeatureTypeList/wfs:OtherSRS[text() = $value1])">
          <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc209.2">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                  </ctl:call-test>
        </xsl:if>
            <xsl:variable name="value2">urn:ogc:def:crs:EPSG:32631</xsl:variable>
        <xsl:if test="boolean($wfs.GetCapabilities.document//wfs:FeatureType[contains(wfs:Name, ':PrimitiveGeoFeature')]/wfs:DefaultSRS[text() = $value2]) or boolean($wfs.GetCapabilities.document//wfs:FeatureType[contains(wfs:Name, ':PrimitiveGeoFeature')]/wfs:OtherSRS[text() = $value2]) or boolean($wfs.GetCapabilities.document//wfs:FeatureTypeList/wfs:DefaultSRS[text() = $value2]) or boolean($wfs.GetCapabilities.document//wfs:FeatureTypeList/wfs:OtherSRS[text() = $value2])">
          <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc209.3">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                  </ctl:call-test>
        </xsl:if>
        <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc210.1">
                  <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>

      </ctl:code>
    </ctl:test>

    <ctl:test name="wfs:wfs-1.1.0-Basic-GetFeature-tc200.1">
      <ctl:param name="wfs.GetFeature.post.url"/>
      <ctl:assertion>
      The response to a GetFeature request that includes an ogc:Filter having a
      Disjoint spatial predicate must include only features that are disjoint
      with respect to the provided geometry value.
      </ctl:assertion>
      <ctl:link>wfs-1.1.0-Basic-GetFeature-atc200</ctl:link>
      <ctl:code>
                <xsl:variable name="response">
                        <ctl:request>
                                <ctl:url>
                                        <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                </ctl:url>
                                <ctl:method>POST</ctl:method>
                            <ctl:body>
                                        <!-- test case id: wfs-1.1.0-Basic-GetFeature-tc200.1 --><wfs:GetFeature version="1.1.0" service="WFS">
  <wfs:Query typeName="sf:PrimitiveGeoFeature">
    <ogc:Filter>
      <ogc:Disjoint>
          <ogc:PropertyName>sf:surfaceProperty</ogc:PropertyName>
          <gml:LineString srsName="urn:ogc:def:crs:EPSG::4326">
            <gml:posList>45.017 30.422 45.208 30.603 45.757 30.812 45.957 30.926</gml:posList>
          </gml:LineString>
      </ogc:Disjoint>
    </ogc:Filter>
  </wfs:Query>
</wfs:GetFeature>
                                </ctl:body>
                                <p:XMLValidatingParser.GMLSF1/>
                        </ctl:request>
                </xsl:variable>
                <xsl:choose>
                        <xsl:when test="not($response/*)">
                        <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                <ctl:fail/>
                    </xsl:when>
                    <xsl:otherwise>
              <xsl:variable name="featureCount" select="count($response//sf:PrimitiveGeoFeature)"/>
              <xsl:if test="$featureCount gt 0">
                <ctl:message>FAILURE: Expected empty feature collection (<xsl:value-of select="$featureCount"/> features included)</ctl:message>
                <ctl:fail/>
              </xsl:if>
                        </xsl:otherwise>
                </xsl:choose>
          </ctl:code>
    </ctl:test>

    <ctl:test name="wfs:wfs-1.1.0-Basic-GetFeature-tc200.2">
      <ctl:param name="wfs.GetFeature.post.url"/>
      <ctl:assertion>
      The response to a GetFeature request that includes an ogc:Filter having a
      Disjoint spatial predicate must include only features that are disjoint
      with respect to the provided geometry value.
      </ctl:assertion>
      <ctl:link>wfs-1.1.0-Basic-GetFeature-atc200</ctl:link>
      <ctl:code>
                <xsl:variable name="response">
                        <ctl:request>
                                <ctl:url>
                                        <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                </ctl:url>
                                <ctl:method>POST</ctl:method>
                            <ctl:body>
                                        <!-- test case id: wfs-1.1.0-Basic-GetFeature-tc200.2 --><wfs:GetFeature version="1.1.0" service="WFS">
  <wfs:Query typeName="sf:EntitéGénérique">
    <ogc:Filter>
      <ogc:BBOX>
          <gml:Envelope srsName="urn:ogc:def:crs:EPSG::4326">
            <gml:lowerCorner>34 14</gml:lowerCorner>
            <gml:upperCorner>41 23</gml:upperCorner>
          </gml:Envelope>
      </ogc:BBOX>
    </ogc:Filter>
  </wfs:Query>
</wfs:GetFeature>
                                </ctl:body>
                                <p:XMLValidatingParser.GMLSF1/>
                        </ctl:request>
                </xsl:variable>
                <xsl:choose>
                        <xsl:when test="not($response/*)">
                        <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                <ctl:fail/>
                    </xsl:when>
                    <xsl:otherwise>
              <xsl:variable name="featureCount" select="count($response//sf:EntitéGénérique)"/>
              <xsl:if test="$featureCount lt 1">
                <ctl:message>FAILURE: Empty response</ctl:message>
                <ctl:fail/>
              </xsl:if>
              <xsl:if test="$response//sf:EntitéGénérique/gml:name != 'name-f007'">
                <ctl:message>FAILURE: Expected feature having gml:name="name-f007".</ctl:message>
                <ctl:fail/>
              </xsl:if>
                        </xsl:otherwise>
                </xsl:choose>
          </ctl:code>
    </ctl:test>

    <ctl:test name="wfs:wfs-1.1.0-Basic-GetFeature-tc200.3">
      <ctl:param name="wfs.GetFeature.post.url"/>
      <ctl:assertion>
      The response to a GetFeature request that includes an ogc:Filter having a
      Disjoint spatial predicate must include only features that are disjoint
      with respect to the provided geometry value.
      </ctl:assertion>
      <ctl:link>wfs-1.1.0-Basic-GetFeature-atc200</ctl:link>
      <ctl:code>
                <xsl:variable name="response">
                        <ctl:request>
                                <ctl:url>
                                        <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                </ctl:url>
                                <ctl:method>POST</ctl:method>
                            <ctl:body>
                                        <!-- test case id: wfs-1.1.0-Basic-GetFeature-tc200.3 --><wfs:GetFeature version="1.1.0" service="WFS">
  <wfs:Query typeName="sf:AggregateGeoFeature">
    <ogc:Filter>
      <ogc:Disjoint>
          <ogc:PropertyName>sf:multiSurfaceProperty</ogc:PropertyName>
          <gml:Envelope srsName="urn:ogc:def:crs:EPSG::4326">
            <gml:lowerCorner>48.0 18.0</gml:lowerCorner>
            <gml:upperCorner>52.0 21.0</gml:upperCorner>
          </gml:Envelope>
      </ogc:Disjoint>
    </ogc:Filter>
  </wfs:Query>
</wfs:GetFeature>
                                </ctl:body>
                                <p:XMLValidatingParser.GMLSF1/>
                        </ctl:request>
                </xsl:variable>
                <xsl:choose>
                        <xsl:when test="not($response/*)">
                        <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                <ctl:fail/>
                    </xsl:when>
                    <xsl:otherwise>
              <xsl:variable name="featureCount" select="count($response//sf:AggregateGeoFeature)"/>
              <xsl:if test="$featureCount lt 1">
                <ctl:message>FAILURE: Expected one or more sf:AggregateGeoFeature instances in response (<xsl:value-of select="$featureCount"/> features included)</ctl:message>
                <ctl:fail/>
              </xsl:if>
              <xsl:if test="$response//sf:AggregateGeoFeature/gml:name = 'name-f010'">
                <ctl:message>FAILURE: Unexpected feature in response (gml:name="name-f010").</ctl:message>
                <ctl:fail/>
              </xsl:if>
                        </xsl:otherwise>
                </xsl:choose>
          </ctl:code>
    </ctl:test>

    <ctl:test name="wfs:wfs-1.1.0-Basic-GetFeature-tc200.4">
      <ctl:param name="wfs.GetFeature.post.url"/>
      <ctl:assertion>
      The response to a GetFeature request having a spatial predicate that
      includes an unsupported geometry operand must include an exception report.
      </ctl:assertion>
      <ctl:link>wfs-1.1.0-Basic-GetFeature-atc202</ctl:link>
      <ctl:code>
                <xsl:variable name="response">
                        <ctl:request>
                                <ctl:url>
                                        <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                </ctl:url>
                                <ctl:method>POST</ctl:method>
                            <ctl:body>
                                        <!-- test case id: wfs-1.1.0-Basic-GetFeature-tc200.4 --><wfs:GetFeature version="1.1.0" service="WFS">
  <wfs:Query typeName="sf:AggregateGeoFeature">
    <ogc:Filter>
      <ogc:Disjoint>
        <ogc:PropertyName>sf:multiCurveProperty</ogc:PropertyName>
        <gml:Curve srsName="urn:ogc:def:crs:EPSG::4326">
          <gml:segments>
            <gml:Circle interpolation="circularArc3Points">
              <gml:posList>57.5 19.0 57.0 20.0 57.5 21.0</gml:posList>
            </gml:Circle>
          </gml:segments>
        </gml:Curve>
        </ogc:Disjoint>
      </ogc:Filter>
  </wfs:Query>
</wfs:GetFeature>
                                </ctl:body>
                                <p:XMLValidatingParser.OWS/>
                        </ctl:request>
                </xsl:variable>
                <xsl:choose>
                        <xsl:when test="not($response/*)">
                        <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                <ctl:fail/>
                    </xsl:when>
                    <xsl:otherwise>
                <ctl:call-test name="ctl:SchematronValidatingParser">
                            <ctl:with-param name="doc" select="$response"/>
                            <ctl:with-param name="schema">sch/ows/1.0.0/ExceptionReport.sch</ctl:with-param>
                            <ctl:with-param name="phase">InvalidParameterValuePhase</ctl:with-param>
                    </ctl:call-test>
            </xsl:otherwise>
                </xsl:choose>
          </ctl:code>
    </ctl:test>

    <ctl:test name="wfs:wfs-1.1.0-Basic-GetFeature-tc201.1">
      <ctl:param name="wfs.GetFeature.post.url"/>
      <ctl:assertion>
      The response to a GetFeature request that includes an ogc:Filter having
      an Intersects spatial predicate must include only features that intersect
      the given geometry value.
      </ctl:assertion>
      <ctl:link>wfs-1.1.0-Basic-GetFeature-atc201</ctl:link>
      <ctl:code>
                <xsl:variable name="response">
                        <ctl:request>
                                <ctl:url>
                                        <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                </ctl:url>
                                <ctl:method>POST</ctl:method>
                            <ctl:body>
                                        <!-- test case id: wfs-1.1.0-Basic-GetFeature-tc201.1 --><wfs:GetFeature version="1.1.0" service="WFS">
  <wfs:Query typeName="sf:PrimitiveGeoFeature">
    <ogc:Filter>
      <ogc:Intersects>
        <ogc:PropertyName>sf:pointProperty</ogc:PropertyName>
        <gml:Polygon srsName="urn:ogc:def:crs:EPSG::4326">
          <gml:exterior>
            <gml:LinearRing>
              <gml:posList>34.0 -12.0 34.0 4.0 42.0 4.0 42.0 -12.0 34.0 -12.0</gml:posList>
            </gml:LinearRing>
          </gml:exterior>
        </gml:Polygon>
      </ogc:Intersects>
    </ogc:Filter>
  </wfs:Query>
</wfs:GetFeature>
                                </ctl:body>
                                <p:XMLValidatingParser.GMLSF1/>
                        </ctl:request>
                </xsl:variable>
                <xsl:choose>
                        <xsl:when test="not($response/*)">
                        <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                <ctl:fail/>
                    </xsl:when>
                    <xsl:otherwise>
              <xsl:variable name="featureCount" select="count($response//sf:PrimitiveGeoFeature)"/>
              <xsl:if test="$featureCount lt 1">
                <ctl:message>FAILURE: Expected one or more sf:PrimitiveGeoFeature instances in response (<xsl:value-of select="$featureCount"/> features included)</ctl:message>
                <ctl:fail/>
              </xsl:if>
              <xsl:if test="$response//sf:PrimitiveGeoFeature/gml:name = 'name-f002'">
                <ctl:message>FAILURE: Unexpected feature in response (gml:name="name-f002").</ctl:message>
                <ctl:fail/>
              </xsl:if>
                        </xsl:otherwise>
                </xsl:choose>
          </ctl:code>
    </ctl:test>

    <ctl:test name="wfs:wfs-1.1.0-Basic-GetFeature-tc201.2">
      <ctl:param name="wfs.GetFeature.post.url"/>
      <ctl:assertion>
      The response to a GetFeature request that includes an ogc:Filter having
      an Intersects spatial predicate must include only features that intersect
      the given geometry value.
      </ctl:assertion>
      <ctl:link>wfs-1.1.0-Basic-GetFeature-atc201</ctl:link>
      <ctl:code>
                <xsl:variable name="response">
                        <ctl:request>
                                <ctl:url>
                                        <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                </ctl:url>
                                <ctl:method>POST</ctl:method>
                            <ctl:body>
                                        <!-- test case id: wfs-1.1.0-Basic-GetFeature-tc201.2 --><wfs:GetFeature version="1.1.0" service="WFS">
  <wfs:Query typeName="sf:EntitéGénérique">
    <ogc:Filter>
      <ogc:Intersects>
        <ogc:PropertyName>sf:attribut.Géométrie</ogc:PropertyName>
        <gml:MultiPoint srsName="urn:ogc:def:crs:EPSG::4326">
          <gml:pointMember>
            <gml:Point><gml:pos>38.83 16.22</gml:pos></gml:Point>
          </gml:pointMember>
          <gml:pointMember>
            <gml:Point><gml:pos>62.07 2.48</gml:pos></gml:Point>
          </gml:pointMember>
        </gml:MultiPoint>
      </ogc:Intersects>
    </ogc:Filter>
  </wfs:Query>
</wfs:GetFeature>
                                </ctl:body>
                                <p:XMLValidatingParser.GMLSF1/>
                        </ctl:request>
                </xsl:variable>
                <xsl:choose>
                        <xsl:when test="not($response/*)">
                        <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                <ctl:fail/>
                    </xsl:when>
                    <xsl:otherwise>
              <xsl:variable name="featureCount" select="count($response//sf:EntitéGénérique)"/>
              <xsl:if test="$featureCount lt 1">
                <ctl:message>FAILURE: Expected one or more sf:EntitéGénérique instances in response (<xsl:value-of select="$featureCount"/> features included)</ctl:message>
                <ctl:fail/>
              </xsl:if>
              <xsl:if test="$response//sf:EntitéGénérique/gml:name = 'name-f004'">
                <ctl:message>FAILURE: Unexpected feature in response (gml:name="name-f004").</ctl:message>
                <ctl:fail/>
              </xsl:if>
                        </xsl:otherwise>
                </xsl:choose>
          </ctl:code>
    </ctl:test>

    <ctl:test name="wfs:wfs-1.1.0-Basic-GetFeature-tc201.3">
      <ctl:param name="wfs.GetFeature.post.url"/>
      <ctl:assertion>
      The response to a GetFeature request that includes an ogc:Filter having
      an Intersects spatial predicate must include only features that intersect
      the given geometry value.
      </ctl:assertion>
      <ctl:link>wfs-1.1.0-Basic-GetFeature-atc201</ctl:link>
      <ctl:code>
                <xsl:variable name="response">
                        <ctl:request>
                                <ctl:url>
                                        <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                </ctl:url>
                                <ctl:method>POST</ctl:method>
                            <ctl:body>
                                        <!-- test case id: wfs-1.1.0-Basic-GetFeature-tc201.3 --><wfs:GetFeature version="1.1.0" service="WFS">
  <wfs:Query typeName="sf:AggregateGeoFeature">
    <ogc:Filter>
      <ogc:Intersects>
        <ogc:PropertyName>sf:multiSurfaceProperty</ogc:PropertyName>
        <gml:LinearRing srsName="urn:ogc:def:crs:EPSG::4326">
          <gml:posList>57.0 7.5 57.0 8.5 58.0 8.5 58.0 7.5 57.0 7.5</gml:posList>
        </gml:LinearRing>
      </ogc:Intersects>
    </ogc:Filter>
  </wfs:Query>
</wfs:GetFeature>
                                </ctl:body>
                                <p:XMLValidatingParser.GMLSF1/>
                        </ctl:request>
                </xsl:variable>
                <xsl:choose>
                        <xsl:when test="not($response/*)">
                        <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                <ctl:fail/>
                    </xsl:when>
                    <xsl:otherwise>
              <xsl:variable name="featureCount" select="count($response//sf:AggregateGeoFeature)"/>
              <xsl:if test="$featureCount != 1">
                <ctl:message>FAILURE: Expected one sf:AggregateGeoFeature instance in response (<xsl:value-of select="$featureCount"/> features included)</ctl:message>
                <ctl:fail/>
              </xsl:if>
              <xsl:if test="not($response//sf:AggregateGeoFeature/gml:name = 'name-f016')">
                <ctl:message>FAILURE: Missing feature (gml:name="name-f016").</ctl:message>
                <ctl:fail/>
              </xsl:if>
                        </xsl:otherwise>
                </xsl:choose>
          </ctl:code>
    </ctl:test>

    <ctl:test name="wfs:wfs-1.1.0-Basic-GetFeature-tc202.1">
      <ctl:param name="wfs.GetFeature.post.url"/>
      <ctl:assertion>
      The response to a GetFeature request having a spatial predicate that
      refers to an invalid spatial property must include an exception report.
      </ctl:assertion>
      <ctl:link>wfs-1.1.0-Basic-GetFeature-atc202</ctl:link>
      <ctl:code>
                <xsl:variable name="response">
                        <ctl:request>
                                <ctl:url>
                                        <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                </ctl:url>
                                <ctl:method>POST</ctl:method>
                            <ctl:body>
                                        <!-- test case id: wfs-1.1.0-Basic-GetFeature-tc202.1 --><wfs:GetFeature version="1.1.0" service="WFS">
  <wfs:Query typeName="sf:AggregateGeoFeature">
    <ogc:Filter>
      <ogc:Intersects>
        <ogc:PropertyName>sf:curveProperty</ogc:PropertyName>
        <gml:Envelope srsName="urn:ogc:def:crs:EPSG::4326">
            <gml:lowerCorner>56.0 -8.0</gml:lowerCorner>
            <gml:upperCorner>60.0 -2.0</gml:upperCorner>
        </gml:Envelope>
      </ogc:Intersects>
    </ogc:Filter>
  </wfs:Query>
</wfs:GetFeature>
                                </ctl:body>
                                <p:XMLValidatingParser.OWS/>
                        </ctl:request>
                </xsl:variable>
                <xsl:choose>
                        <xsl:when test="not($response/*)">
                        <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                <ctl:fail/>
                    </xsl:when>
                    <xsl:otherwise>
                                        <ctl:call-test name="ctl:SchematronValidatingParser">
                                                <ctl:with-param name="doc" select="$response"/>
                                                <ctl:with-param name="schema">sch/ows/1.0.0/ExceptionReport.sch</ctl:with-param>
                                                <ctl:with-param name="phase">InvalidParameterValuePhase</ctl:with-param>
                                        </ctl:call-test>
            </xsl:otherwise>
                </xsl:choose>
          </ctl:code>
    </ctl:test>

    <ctl:test name="wfs:wfs-1.1.0-Basic-GetFeature-tc203.1">
      <ctl:param name="wfs.GetFeature.post.url"/>
      <ctl:assertion>
      The response to a GetFeature request that includes an ogc:Filter containing
      the Within spatial predicate must include only features that lie within
      the given geometry value.
      </ctl:assertion>
      <ctl:link>wfs-1.1.0-Basic-GetFeature-atc203</ctl:link>
      <ctl:code>
                <xsl:variable name="response">
                        <ctl:request>
                                <ctl:url>
                                        <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                </ctl:url>
                                <ctl:method>POST</ctl:method>
                            <ctl:body>
                                        <!-- test case id: wfs-1.1.0-Basic-GetFeature-tc203.1 --><wfs:GetFeature version="1.1.0" service="WFS">
  <wfs:Query typeName="sf:PrimitiveGeoFeature">
    <ogc:Filter>
      <ogc:Within>
        <ogc:PropertyName>sf:curveProperty</ogc:PropertyName>
        <gml:Envelope srsName="urn:ogc:def:crs:EPSG::4326">
          <gml:lowerCorner>45.050 8.800</gml:lowerCorner>
          <gml:upperCorner>47.114 11.021</gml:upperCorner>
        </gml:Envelope>
      </ogc:Within>
    </ogc:Filter>
  </wfs:Query>
</wfs:GetFeature>
                                </ctl:body>
                                <p:XMLValidatingParser.GMLSF1/>
                        </ctl:request>
                </xsl:variable>
                <xsl:choose>
                        <xsl:when test="not($response/*)">
                        <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                <ctl:fail/>
                    </xsl:when>
                    <xsl:otherwise>
              <xsl:variable name="featureCount" select="count($response//sf:PrimitiveGeoFeature)"/>
              <xsl:if test="$featureCount != 1">
                <ctl:message>FAILURE: Expected one sf:PrimitiveGeoFeature instance in response (<xsl:value-of select="$featureCount"/> features included)</ctl:message>
                <ctl:fail/>
              </xsl:if>
              <xsl:if test="not($response//sf:PrimitiveGeoFeature/gml:name = 'name-f003')">
                <ctl:message>FAILURE: Missing feature (gml:name="name-f003").</ctl:message>
                <ctl:fail/>
              </xsl:if>
                        </xsl:otherwise>
                </xsl:choose>
          </ctl:code>
    </ctl:test>

    <ctl:test name="wfs:wfs-1.1.0-Basic-GetFeature-tc203.2">
      <ctl:param name="wfs.GetFeature.post.url"/>
      <ctl:assertion>
      The response to a GetFeature request that includes an ogc:Filter containing
      the Within spatial predicate must include only features that lie within
      the given geometry value.
      </ctl:assertion>
      <ctl:link>wfs-1.1.0-Basic-GetFeature-atc203</ctl:link>
      <ctl:code>
                <xsl:variable name="response">
                        <ctl:request>
                                <ctl:url>
                                        <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                </ctl:url>
                                <ctl:method>POST</ctl:method>
                            <ctl:body>
                                        <!-- test case id: wfs-1.1.0-Basic-GetFeature-tc203.2 --><wfs:GetFeature version="1.1.0" service="WFS">
  <wfs:Query typeName="sf:PrimitiveGeoFeature">
    <ogc:Filter>
      <ogc:Within>
        <ogc:PropertyName>sf:pointProperty</ogc:PropertyName>
        <gml:Polygon srsName="urn:ogc:def:crs:EPSG::4326">
          <gml:exterior>
            <gml:LinearRing>
              <gml:posList>38.0 0.0 38.0 6.0 43.0 0.0 38.0 0.0</gml:posList>
            </gml:LinearRing>
          </gml:exterior>
        </gml:Polygon>
      </ogc:Within>
    </ogc:Filter>
  </wfs:Query>
</wfs:GetFeature>
                                </ctl:body>
                                <p:XMLValidatingParser.GMLSF1/>
                        </ctl:request>
                </xsl:variable>
                <xsl:choose>
                        <xsl:when test="not($response/*)">
                        <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                <ctl:fail/>
                    </xsl:when>
                    <xsl:otherwise>
              <xsl:variable name="featureCount" select="count($response//sf:PrimitiveGeoFeature)"/>
              <xsl:if test="$featureCount != 1">
                <ctl:message>FAILURE: Expected one sf:PrimitiveGeoFeature instance in response (<xsl:value-of select="$featureCount"/> features included)</ctl:message>
                <ctl:fail/>
              </xsl:if>
              <xsl:if test="not($response//sf:PrimitiveGeoFeature/gml:name = 'name-f001')">
                <ctl:message>FAILURE: Missing feature (gml:name="name-f001").</ctl:message>
                <ctl:fail/>
              </xsl:if>
                        </xsl:otherwise>
                </xsl:choose>
          </ctl:code>
    </ctl:test>

    <ctl:test name="wfs:wfs-1.1.0-Basic-GetFeature-tc203.3">
      <ctl:param name="wfs.GetFeature.post.url"/>
      <ctl:assertion>
      The response to a GetFeature request that includes a filter containing
      a spatial predicate that does not refer to a valid geometry property must
      include an exception report indicating "InvalidParameterValue".
      </ctl:assertion>
      <ctl:link>wfs-1.1.0-Basic-GetFeature-atc203</ctl:link>
      <ctl:code>
                <xsl:variable name="response">
                        <ctl:request>
                                <ctl:url>
                                        <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                </ctl:url>
                                <ctl:method>POST</ctl:method>
                            <ctl:body>
                                        <!-- test case id: wfs-1.1.0-Basic-GetFeature-tc203.3 --><wfs:GetFeature version="1.1.0" service="WFS">
  <wfs:Query typeName="sf:EntitéGénérique">
    <ogc:Filter>
      <ogc:Within>
        <ogc:PropertyName>sf:nonExistingAttribute</ogc:PropertyName>
        <gml:Polygon srsName="urn:ogc:def:crs:EPSG::4326">
          <gml:exterior>
            <gml:LinearRing>
              <gml:posList>55.1 -8.0 55.1 -5.4 60.0 -5.4 60.0 -8.0 55.1 -8.0</gml:posList>
            </gml:LinearRing>
          </gml:exterior>
        </gml:Polygon>
      </ogc:Within>
    </ogc:Filter>
  </wfs:Query>
</wfs:GetFeature>
                                </ctl:body>
                                <p:XMLValidatingParser.OWS/>
                        </ctl:request>
                </xsl:variable>
                <xsl:choose>
                        <xsl:when test="not($response/*)">
                        <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                <ctl:fail/>
                    </xsl:when>
                    <xsl:otherwise>
              <ctl:call-test name="ctl:SchematronValidatingParser">
                            <ctl:with-param name="doc" select="$response"/>
                            <ctl:with-param name="schema">sch/ows/1.0.0/ExceptionReport.sch</ctl:with-param>
                            <ctl:with-param name="phase">InvalidParameterValuePhase</ctl:with-param>
                  </ctl:call-test>
                        </xsl:otherwise>
                </xsl:choose>
          </ctl:code>
    </ctl:test>

    <ctl:test name="wfs:wfs-1.1.0-Basic-GetFeature-tc204.1">
      <ctl:param name="wfs.GetFeature.post.url"/>
      <ctl:assertion>
      The response to a GetFeature request that includes an ogc:Filter containing
      the Overlaps spatial predicate must include only features that overlap the
      given geometry value.
      </ctl:assertion>
      <ctl:link>wfs-1.1.0-Basic-GetFeature-atc204</ctl:link>
      <ctl:code>
                <xsl:variable name="response">
                        <ctl:request>
                                <ctl:url>
                                        <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                </ctl:url>
                                <ctl:method>POST</ctl:method>
                            <ctl:body>
                                        <!-- test case id: wfs-1.1.0-Basic-GetFeature-tc204.1 --><wfs:GetFeature version="1.1.0" service="WFS">
  <wfs:Query typeName="sf:EntitéGénérique">
    <ogc:Filter>
      <ogc:Overlaps>
        <ogc:PropertyName>sf:attribut.Géométrie</ogc:PropertyName>
        <gml:Envelope srsName="urn:ogc:def:crs:EPSG::4326">
          <gml:lowerCorner>56.05 -2.00</gml:lowerCorner>
          <gml:upperCorner>62.11 2.02</gml:upperCorner>
        </gml:Envelope>
      </ogc:Overlaps>
    </ogc:Filter>
  </wfs:Query>
</wfs:GetFeature>
                                </ctl:body>
                                <p:XMLValidatingParser.GMLSF1/>
                        </ctl:request>
                </xsl:variable>
                <xsl:choose>
                        <xsl:when test="not($response/*)">
                        <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                <ctl:fail/>
                    </xsl:when>
                    <xsl:otherwise>
              <xsl:variable name="featureCount" select="count($response//sf:EntitéGénérique)"/>
              <xsl:if test="$featureCount != 1">
                <ctl:message>FAILURE: Expected one sf:EntitéGénérique instance in response (<xsl:value-of select="$featureCount"/> features included)</ctl:message>
                <ctl:fail/>
              </xsl:if>
              <xsl:if test="not($response//sf:EntitéGénérique/gml:name = 'name-f004')">
                <ctl:message>FAILURE: Missing feature (gml:name="name-f004").</ctl:message>
                <ctl:fail/>
              </xsl:if>
                        </xsl:otherwise>
                </xsl:choose>
          </ctl:code>
    </ctl:test>

    <ctl:test name="wfs:wfs-1.1.0-Basic-GetFeature-tc204.2">
      <ctl:param name="wfs.GetFeature.post.url"/>
      <ctl:assertion>
      The response to a GetFeature request that includes an ogc:Filter containing
      the Overlaps spatial predicate must include only features that overlap the
      given geometry value.
      </ctl:assertion>
      <ctl:link>wfs-1.1.0-Basic-GetFeature-atc204</ctl:link>
      <ctl:code>
                <xsl:variable name="response">
                        <ctl:request>
                                <ctl:url>
                                        <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                </ctl:url>
                                <ctl:method>POST</ctl:method>
                            <ctl:body>
                                        <!-- test case id: wfs-1.1.0-Basic-GetFeature-tc204.2 --><wfs:GetFeature version="1.1.0" service="WFS">
  <wfs:Query typeName="sf:AggregateGeoFeature">
    <ogc:Filter>
      <ogc:Overlaps>
        <ogc:PropertyName>sf:multiSurfaceProperty</ogc:PropertyName>
        <gml:MultiSurface srsName="urn:ogc:def:crs:EPSG::4326">
          <gml:surfaceMember>
			<gml:Polygon>
              <gml:exterior>
                <gml:LinearRing>
                  <gml:posList>48.0 18.0 48.0 23.0 54.0 23.0 54.0 18.0 48.0 18.0</gml:posList>
                </gml:LinearRing>
              </gml:exterior>
			</gml:Polygon>
		  </gml:surfaceMember>
		  <gml:surfaceMember>
            <gml:Polygon>
              <gml:exterior>
                <gml:LinearRing>
                  <gml:posList>59.0 4.0 55.0 8.0 59.0 12.0 59.0 4.0</gml:posList>
                </gml:LinearRing>
              </gml:exterior>
            </gml:Polygon>
          </gml:surfaceMember>
        </gml:MultiSurface>
      </ogc:Overlaps>
    </ogc:Filter>
  </wfs:Query>
</wfs:GetFeature>
                                </ctl:body>
                                <p:XMLValidatingParser.GMLSF1/>
                        </ctl:request>
                </xsl:variable>
                <xsl:choose>
                        <xsl:when test="not($response/*)">
                        <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                <ctl:fail/>
                    </xsl:when>
                    <xsl:otherwise>
              <xsl:variable name="featureCount" select="count($response//sf:AggregateGeoFeature)"/>
              <xsl:if test="$featureCount lt 2">
                <ctl:message>FAILURE: Expected two or more sf:AggregateGeoFeature instances in response (<xsl:value-of select="$featureCount"/> features included)</ctl:message>
                <ctl:fail/>
              </xsl:if>
              <xsl:if test="not($response//sf:AggregateGeoFeature/gml:name = 'name-f016')">
                <ctl:message>FAILURE: Missing feature (gml:name="name-f016").</ctl:message>
                <ctl:fail/>
              </xsl:if>
              <xsl:if test="not($response//sf:AggregateGeoFeature/gml:name = 'name-f010')">
                <ctl:message>FAILURE: Missing feature (gml:name="name-f010").</ctl:message>
                <ctl:fail/>
              </xsl:if>
                        </xsl:otherwise>
                </xsl:choose>
          </ctl:code>
    </ctl:test>

    <ctl:test name="wfs:wfs-1.1.0-Basic-GetFeature-tc204.3">
      <ctl:param name="wfs.GetFeature.post.url"/>
      <ctl:assertion>
      The response to a GetFeature request that includes an ogc:Filter containing
      the Overlaps spatial predicate must include only features that overlap the
      given geometry value.
      </ctl:assertion>
      <ctl:link>wfs-1.1.0-Basic-GetFeature-atc204</ctl:link>
      <ctl:code>
                <xsl:variable name="response">
                        <ctl:request>
                                <ctl:url>
                                        <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                </ctl:url>
                                <ctl:method>POST</ctl:method>
                            <ctl:body>
                                        <!-- test case id: wfs-1.1.0-Basic-GetFeature-tc204.3 --><wfs:GetFeature version="1.1.0" service="WFS">
  <wfs:Query typeName="sf:PrimitiveGeoFeature">
    <ogc:Filter>
      <ogc:Overlaps>
        <ogc:PropertyName>sf:curveProperty</ogc:PropertyName>
        <gml:LineString srsName="urn:ogc:def:crs:EPSG::4326">
          <gml:posList>46.652 10.466 47.114 11.021 46.114 12.114 45.725 12.523</gml:posList>
        </gml:LineString>
      </ogc:Overlaps>
    </ogc:Filter>
  </wfs:Query>
</wfs:GetFeature>
                                </ctl:body>
                                <p:XMLValidatingParser.GMLSF1/>
                        </ctl:request>
                </xsl:variable>
                <xsl:choose>
                        <xsl:when test="not($response/*)">
                        <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                <ctl:fail/>
                    </xsl:when>
                    <xsl:otherwise>
              <xsl:variable name="featureCount" select="count($response//sf:PrimitiveGeoFeature)"/>
              <xsl:if test="$featureCount != 1">
                <ctl:message>FAILURE: Expected one sf:PrimitiveGeoFeature instance in response (<xsl:value-of select="$featureCount"/> features included)</ctl:message>
                <ctl:fail/>
              </xsl:if>
              <xsl:if test="not($response//sf:PrimitiveGeoFeature/gml:name = 'name-f003')">
                <ctl:message>FAILURE: Missing feature (gml:name="name-f003").</ctl:message>
                <ctl:fail/>
              </xsl:if>
                        </xsl:otherwise>
                </xsl:choose>
          </ctl:code>
    </ctl:test>

    <ctl:test name="wfs:wfs-1.1.0-Basic-GetFeature-tc204.4">
      <ctl:param name="wfs.GetFeature.post.url"/>
      <ctl:assertion>
      The response to a GetFeature request that includes an ogc:Filter containing
      the Overlaps spatial predicate must include only features that overlap the
      given geometry value.
      </ctl:assertion>
      <ctl:link>wfs-1.1.0-Basic-GetFeature-atc204</ctl:link>
      <ctl:code>
                <xsl:variable name="response">
                        <ctl:request>
                                <ctl:url>
                                        <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                </ctl:url>
                                <ctl:method>POST</ctl:method>
                            <ctl:body>
                                        <!-- test case id: wfs-1.1.0-Basic-GetFeature-tc204.4 --><wfs:GetFeature version="1.1.0" service="WFS">
  <wfs:Query typeName="sf:PrimitiveGeoFeature">
    <ogc:Filter>
      <ogc:Overlaps>
        <ogc:PropertyName>sf:surfaceProperty</ogc:PropertyName>
        <gml:LineString srsName="urn:ogc:def:crs:EPSG::4326">
          <gml:posList>44.80 30.75 46.50 30.75 48.00 31.25</gml:posList>
        </gml:LineString>
      </ogc:Overlaps>
    </ogc:Filter>
  </wfs:Query>
</wfs:GetFeature>
                                </ctl:body>
                                <p:XMLValidatingParser.GMLSF1/>
                        </ctl:request>
                </xsl:variable>
                <xsl:choose>
                        <xsl:when test="not($response/*)">
                        <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                <ctl:fail/>
                    </xsl:when>
                    <xsl:otherwise>
              <xsl:variable name="featureCount" select="count($response//gml:featureMember) + count($response//gml:featureMembers/*)"/>
              <xsl:if test="$featureCount gt 0">
                <ctl:message>FAILURE: Expected empty response (<xsl:value-of select="$featureCount"/> features were included)</ctl:message>
                <ctl:fail/>
              </xsl:if>
                        </xsl:otherwise>
                </xsl:choose>
          </ctl:code>
    </ctl:test>

    <ctl:test name="wfs:wfs-1.1.0-Basic-GetFeature-tc205.1">
      <ctl:param name="wfs.GetFeature.post.url"/>
      <ctl:assertion>
      The response to a GetFeature request that includes an ogc:Filter containing
      the Equals spatial predicate must include only features that have a geometry
      value exactly equal to the given geometry value.
      </ctl:assertion>
      <ctl:link>wfs-1.1.0-Basic-GetFeature-atc205</ctl:link>
      <ctl:code>
                <xsl:variable name="response">
                        <ctl:request>
                                <ctl:url>
                                        <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                </ctl:url>
                                <ctl:method>POST</ctl:method>
                            <ctl:body>
                                        <!-- test case id: wfs-1.1.0-Basic-GetFeature-tc205.1 --><wfs:GetFeature version="1.1.0" service="WFS">
  <wfs:Query typeName="sf:AggregateGeoFeature">
    <ogc:Filter>
      <ogc:Equals>
        <ogc:PropertyName>sf:multiPointProperty</ogc:PropertyName>
        <gml:MultiPoint srsName="urn:ogc:def:crs:EPSG::4326">
          <gml:pointMember>
            <gml:Point><gml:pos>70.83 29.86</gml:pos></gml:Point>
          </gml:pointMember>
          <gml:pointMember>
            <gml:Point><gml:pos>68.87 31.08</gml:pos></gml:Point>
          </gml:pointMember>
          <gml:pointMember>
            <gml:Point><gml:pos>71.96 32.19</gml:pos></gml:Point>
          </gml:pointMember>
        </gml:MultiPoint>
      </ogc:Equals>
    </ogc:Filter>
  </wfs:Query>
</wfs:GetFeature>
                                </ctl:body>
                                <p:XMLValidatingParser.GMLSF1/>
                        </ctl:request>
                </xsl:variable>
                <xsl:choose>
                        <xsl:when test="not($response/*)">
                        <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                <ctl:fail/>
                    </xsl:when>
                    <xsl:otherwise>
              <xsl:variable name="featureCount" select="count($response//sf:AggregateGeoFeature)"/>
              <xsl:if test="$featureCount lt 1">
                <ctl:message>FAILURE: Expected one or more sf:AggregateGeoFeature instance in response (<xsl:value-of select="$featureCount"/> features included)</ctl:message>
                <ctl:fail/>
              </xsl:if>
              <xsl:if test="not($response//sf:AggregateGeoFeature/gml:name = 'name-f005')">
                <ctl:message>FAILURE: Missing feature (gml:name="name-f005").</ctl:message>
                <ctl:fail/>
              </xsl:if>
                        </xsl:otherwise>
                </xsl:choose>
          </ctl:code>
    </ctl:test>

    <ctl:test name="wfs:wfs-1.1.0-Basic-GetFeature-tc205.2">
      <ctl:param name="wfs.GetFeature.post.url"/>
      <ctl:assertion>
      The response to a GetFeature request that includes an ogc:Filter containing
      the Equals spatial predicate must include only features that have a geometry
      value exactly equal to the given geometry value.
      </ctl:assertion>
      <ctl:link>wfs-1.1.0-Basic-GetFeature-atc205</ctl:link>
      <ctl:code>
                <xsl:variable name="response">
                        <ctl:request>
                                <ctl:url>
                                        <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                </ctl:url>
                                <ctl:method>POST</ctl:method>
                            <ctl:body>
                                        <!-- test case id: wfs-1.1.0-Basic-GetFeature-tc205.2 --><wfs:GetFeature version="1.1.0" service="WFS">
  <wfs:Query typeName="sf:AggregateGeoFeature">
    <ogc:Filter>
      <ogc:Equals>
        <ogc:PropertyName>sf:pointProperty</ogc:PropertyName>
        <gml:Point srsName="urn:ogc:def:crs:EPSG::4326">
          <gml:pos>59.41276 0.22601</gml:pos>
        </gml:Point>
      </ogc:Equals>
    </ogc:Filter>
  </wfs:Query>
</wfs:GetFeature>
                                </ctl:body>
                                <p:XMLValidatingParser.GMLSF1/>
                        </ctl:request>
                </xsl:variable>
                <xsl:choose>
                        <xsl:when test="not($response/*)">
                        <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                <ctl:fail/>
                    </xsl:when>
                    <xsl:otherwise>
              <xsl:variable name="featureCount" select="count($response//gml:featureMember) + count($response//gml:featureMembers/*)"/>
              <xsl:if test="$featureCount gt 0">
                <ctl:message>FAILURE: Expected empty response (<xsl:value-of select="$featureCount"/> features were included)</ctl:message>
                <ctl:fail/>
              </xsl:if>
                        </xsl:otherwise>
                </xsl:choose>
          </ctl:code>
    </ctl:test>

    <ctl:test name="wfs:wfs-1.1.0-Basic-GetFeature-tc205.3">
      <ctl:param name="wfs.GetFeature.post.url"/>
      <ctl:assertion>
      The response to a GetFeature request that includes an ogc:Filter containing
      the Equals spatial predicate must include only features that have a geometry
      value exactly equal to the given geometry value.
      </ctl:assertion>
      <ctl:link>wfs-1.1.0-Basic-GetFeature-atc205</ctl:link>
      <ctl:code>
                <xsl:variable name="response">
                        <ctl:request>
                                <ctl:url>
                                        <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                </ctl:url>
                                <ctl:method>POST</ctl:method>
                            <ctl:body>
                                        <!-- test case id: wfs-1.1.0-Basic-GetFeature-tc205.3 --><wfs:GetFeature version="1.1.0" service="WFS">
  <wfs:Query typeName="sf:EntitéGénérique">
    <ogc:Filter>
      <ogc:Equals>
        <ogc:PropertyName>sf:attribut.Géométrie</ogc:PropertyName>
        <gml:Polygon srsName="urn:ogc:def:crs:EPSG::4326">
          <gml:exterior>
            <gml:LinearRing>
              <gml:posList>60.5 0 64 0 64 6.25 60.5 6.25 60.5 0</gml:posList>
            </gml:LinearRing>
          </gml:exterior>
          <gml:interior>
            <gml:LinearRing>
              <gml:posList>61.5 2 62.5 2 62 4 61.5 2</gml:posList>
            </gml:LinearRing>
          </gml:interior>
        </gml:Polygon>
      </ogc:Equals>
    </ogc:Filter>
  </wfs:Query>
</wfs:GetFeature>
                                </ctl:body>
                                <p:XMLValidatingParser.GMLSF1/>
                        </ctl:request>
                </xsl:variable>
                <xsl:choose>
                        <xsl:when test="not($response/*)">
                        <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                <ctl:fail/>
                    </xsl:when>
                    <xsl:otherwise>
              <xsl:variable name="featureCount" select="count($response//sf:EntitéGénérique)"/>
              <xsl:if test="$featureCount lt 1">
                <ctl:message>FAILURE: Expected one or more sf:EntitéGénérique instance in response (<xsl:value-of select="$featureCount"/> features included)</ctl:message>
                <ctl:fail/>
              </xsl:if>
              <xsl:if test="not($response//sf:EntitéGénérique/gml:name = 'name-f004')">
                <ctl:message>FAILURE: Missing feature (gml:name="name-f004").</ctl:message>
                <ctl:fail/>
              </xsl:if>
                        </xsl:otherwise>
                </xsl:choose>
          </ctl:code>
    </ctl:test>

<ctl:test name="wfs:wfs-1.1.0-Basic-GetFeature-tc206.1">
      <ctl:param name="wfs.GetFeature.post.url"/>
      <ctl:assertion>
      The response to a GetFeature request that includes an ogc:Filter containing
      the Contains spatial predicate must include only features that contain
      the given geometry value.
      </ctl:assertion>
      <ctl:link>wfs-1.1.0-Basic-GetFeature-atc206</ctl:link>
      <ctl:code>
                <xsl:variable name="response">
                        <ctl:request>
                                <ctl:url>
                                        <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                </ctl:url>
                                <ctl:method>POST</ctl:method>
                            <ctl:body>
                                        <!-- test case id: wfs-1.1.0-Basic-GetFeature-tc206.1 --><wfs:GetFeature version="1.1.0" service="WFS">
  <wfs:Query typeName="sf:PrimitiveGeoFeature">
    <ogc:Filter>
      <ogc:Contains>
        <ogc:PropertyName>sf:curveProperty</ogc:PropertyName>
        <gml:LineString srsName="urn:ogc:def:crs:EPSG::4326">
          <gml:posList>46.074 9.799 46.652 10.466</gml:posList>
        </gml:LineString>
      </ogc:Contains>
    </ogc:Filter>
  </wfs:Query>
</wfs:GetFeature>
                                </ctl:body>
                                <p:XMLValidatingParser.GMLSF1/>
                        </ctl:request>
                </xsl:variable>
                <xsl:choose>
                        <xsl:when test="not($response/*)">
                        <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                <ctl:fail/>
                    </xsl:when>
                    <xsl:otherwise>
              <xsl:variable name="featureCount" select="count($response//sf:PrimitiveGeoFeature)"/>
              <xsl:if test="$featureCount != 1">
                <ctl:message>FAILURE: Expected one sf:PrimitiveGeoFeature instance in response (<xsl:value-of select="$featureCount"/> features included)</ctl:message>
                <ctl:fail/>
              </xsl:if>
              <xsl:if test="not($response//sf:PrimitiveGeoFeature/gml:name = 'name-f003')">
                <ctl:message>FAILURE: Missing feature (gml:name="name-f003").</ctl:message>
                <ctl:fail/>
              </xsl:if>
                        </xsl:otherwise>
                </xsl:choose>
          </ctl:code>
    </ctl:test>

    <ctl:test name="wfs:wfs-1.1.0-Basic-GetFeature-tc206.2">
      <ctl:param name="wfs.GetFeature.post.url"/>
      <ctl:assertion>
      The response to a GetFeature request that includes an ogc:Filter containing
      the Contains spatial predicate must include only features that contain
      the given geometry value.
      </ctl:assertion>
      <ctl:link>wfs-1.1.0-Basic-GetFeature-atc206</ctl:link>
      <ctl:code>
                <xsl:variable name="response">
                        <ctl:request>
                                <ctl:url>
                                        <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                </ctl:url>
                                <ctl:method>POST</ctl:method>
                            <ctl:body>
                                        <!-- test case id: wfs-1.1.0-Basic-GetFeature-tc206.2 --><wfs:GetFeature version="1.1.0" service="WFS">
	<wfs:Query typeName="sf:EntitéGénérique">
		<ogc:Filter>
			<ogc:Contains>
				<ogc:PropertyName>sf:attribut.Géométrie</ogc:PropertyName>
				<gml:Point srsName="urn:ogc:def:crs:EPSG::4326">
					<gml:pos>63.123 5.321</gml:pos>
				</gml:Point>
			</ogc:Contains>
		</ogc:Filter>
	</wfs:Query>
</wfs:GetFeature>
                                </ctl:body>
                                <p:XMLValidatingParser.GMLSF1/>
                        </ctl:request>
                </xsl:variable>
                <xsl:choose>
                        <xsl:when test="not($response/*)">
                        <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                <ctl:fail/>
                    </xsl:when>
                    <xsl:otherwise>
              <xsl:variable name="featureCount" select="count($response//sf:EntitéGénérique)"/>
              <xsl:if test="$featureCount lt 1">
                <ctl:message>FAILURE: Expected one or more sf:EntitéGénérique instance in response (<xsl:value-of select="$featureCount"/> features included)</ctl:message>
                <ctl:fail/>
              </xsl:if>
              <xsl:if test="not($response//sf:EntitéGénérique/gml:name = 'name-f004')">
                <ctl:message>FAILURE: Missing feature (gml:name="name-f004").</ctl:message>
                <ctl:fail/>
              </xsl:if>
                        </xsl:otherwise>
                </xsl:choose>
          </ctl:code>
    </ctl:test>

    <ctl:test name="wfs:wfs-1.1.0-Basic-GetFeature-tc206.3">
      <ctl:param name="wfs.GetFeature.post.url"/>
      <ctl:assertion>
      The response to a GetFeature request that includes an ogc:Filter containing
      the Contains spatial predicate must include only features that contain
      the given geometry value.
      </ctl:assertion>
      <ctl:link>wfs-1.1.0-Basic-GetFeature-atc206</ctl:link>
      <ctl:code>
                <xsl:variable name="response">
                        <ctl:request>
                                <ctl:url>
                                        <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                </ctl:url>
                                <ctl:method>POST</ctl:method>
                            <ctl:body>
                                        <!-- test case id: wfs-1.1.0-Basic-GetFeature-tc206.3 --><wfs:GetFeature version="1.1.0" service="WFS">
  <wfs:Query typeName="sf:AggregateGeoFeature">
    <ogc:Filter>
      <ogc:Contains>
        <ogc:PropertyName>sf:multiSurfaceProperty</ogc:PropertyName>
        <gml:Polygon srsName="urn:ogc:def:crs:EPSG::4326">
          <gml:exterior>
            <gml:LinearRing>
              <gml:posList>35.1 -8.0 35.1 -8.4 35.2 -8.4 35.2 -8.0 35.1 -8.0</gml:posList>
            </gml:LinearRing>
          </gml:exterior>
        </gml:Polygon>
      </ogc:Contains>
    </ogc:Filter>
  </wfs:Query>
</wfs:GetFeature>
                                </ctl:body>
                                <p:XMLValidatingParser.GMLSF1/>
                        </ctl:request>
                </xsl:variable>
                <xsl:choose>
                        <xsl:when test="not($response/*)">
                        <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                <ctl:fail/>
                    </xsl:when>
                    <xsl:otherwise>
              <xsl:variable name="featureCount" select="count($response//gml:featureMember) + count($response//gml:featureMembers/*)"/>
              <xsl:if test="$featureCount gt 0">
                <ctl:message>FAILURE: Expected empty response (<xsl:value-of select="$featureCount"/> features were included)</ctl:message>
                <ctl:fail/>
              </xsl:if>
                        </xsl:otherwise>
                </xsl:choose>
          </ctl:code>
    </ctl:test>

 <ctl:test name="wfs:wfs-1.1.0-Basic-GetFeature-tc207.1">
      <ctl:param name="wfs.GetFeature.post.url"/>
      <ctl:assertion>
      The response to a GetFeature request that includes an ogc:Filter having a
      Touches spatial predicate must include only features that are touching
      with respect to the provided geometry value.
      </ctl:assertion>
      <ctl:link>wfs-1.1.0-Basic-GetFeature-atc207</ctl:link>
      <ctl:code>
                <xsl:variable name="response">
                        <ctl:request>
                                <ctl:url>
                                        <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                </ctl:url>
                                <ctl:method>POST</ctl:method>
                            <ctl:body>
                                        <!-- test case id: wfs-1.1.0-Basic-GetFeature-tc207.1 --><wfs:GetFeature version="1.1.0" service="WFS">
  <wfs:Query typeName="sf:PrimitiveGeoFeature">
    <ogc:Filter>
      <ogc:Touches>
          <ogc:PropertyName>sf:surfaceProperty</ogc:PropertyName>
          <gml:Envelope srsName="urn:ogc:def:crs:EPSG::4326">
            <gml:lowerCorner>0.1 -1.0</gml:lowerCorner>
            <gml:upperCorner>0.2 -0.9</gml:upperCorner>
          </gml:Envelope>
      </ogc:Touches>
    </ogc:Filter>
  </wfs:Query>
</wfs:GetFeature>
                                </ctl:body>
                                <p:XMLValidatingParser.GMLSF1/>
                        </ctl:request>
                </xsl:variable>
                <xsl:choose>
                        <xsl:when test="not($response/*)">
                        <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                <ctl:fail/>
                    </xsl:when>
                    <xsl:otherwise>
              <xsl:variable name="featureCount" select="count($response//sf:PrimitiveGeoFeature)"/>
              <xsl:if test="$featureCount gt 0">
                <ctl:message>FAILURE: Expected empty feature collection (<xsl:value-of select="$featureCount"/> features included)</ctl:message>
                <ctl:fail/>
              </xsl:if>
                        </xsl:otherwise>
                </xsl:choose>
          </ctl:code>
    </ctl:test>

    <ctl:test name="wfs:wfs-1.1.0-Basic-GetFeature-tc207.2">
      <ctl:param name="wfs.GetFeature.post.url"/>
      <ctl:assertion>
      The response to a GetFeature request that includes an ogc:Filter having a
      Touches spatial predicate must include only features that are touching
      with respect to the provided geometry value.
      </ctl:assertion>
      <ctl:link>wfs-1.1.0-Basic-GetFeature-atc207</ctl:link>
      <ctl:code>
                <xsl:variable name="response">
                        <ctl:request>
                                <ctl:url>
                                        <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                </ctl:url>
                                <ctl:method>POST</ctl:method>
                            <ctl:body>
                                        <!-- test case id: wfs-1.1.0-Basic-GetFeature-tc207.2 --><wfs:GetFeature version="1.1.0" service="WFS">
	<wfs:Query typeName="sf:AggregateGeoFeature">
		<ogc:Filter>
			<ogc:Touches>
				<ogc:PropertyName>sf:multiCurveProperty</ogc:PropertyName>
				<gml:Point srsName="urn:ogc:def:crs:EPSG::4326">
					<gml:pos>55.174 -5.899</gml:pos>
				</gml:Point>
			</ogc:Touches>
		</ogc:Filter>
	</wfs:Query>
</wfs:GetFeature>
                                </ctl:body>
                                <p:XMLValidatingParser.GMLSF1/>
                        </ctl:request>
                </xsl:variable>
                <xsl:choose>
                        <xsl:when test="not($response/*)">
                        <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                <ctl:fail/>
                    </xsl:when>
                    <xsl:otherwise>
              <xsl:variable name="featureCount" select="count($response//sf:AggregateGeoFeature)"/>
              <xsl:if test="$featureCount lt 1">
                <ctl:message>FAILURE: Expected one or more sf:AggregateGeoFeature instances in response (<xsl:value-of select="$featureCount"/> features included)</ctl:message>
                <ctl:fail/>
              </xsl:if>
              <xsl:if test="not($response//sf:AggregateGeoFeature/gml:name = 'name-f009')">
                <ctl:message>FAILURE: Unexpected feature in response (gml:name="name-f009").</ctl:message>
                <ctl:fail/>
              </xsl:if>
                        </xsl:otherwise>
                </xsl:choose>
          </ctl:code>
    </ctl:test>

    <ctl:test name="wfs:wfs-1.1.0-Basic-GetFeature-tc207.3">
      <ctl:param name="wfs.GetFeature.post.url"/>
      <ctl:assertion>
      The response to a GetFeature request that includes an ogc:Filter having a
      Touches spatial predicate must include only features that are touching
      with respect to the provided geometry value.
      </ctl:assertion>
      <ctl:link>wfs-1.1.0-Basic-GetFeature-atc207</ctl:link>
      <ctl:code>
                <xsl:variable name="response">
                        <ctl:request>
                                <ctl:url>
                                        <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                </ctl:url>
                                <ctl:method>POST</ctl:method>
                            <ctl:body>
                                        <!-- test case id: wfs-1.1.0-Basic-GetFeature-tc207.3 --><wfs:GetFeature version="1.1.0" service="WFS">
  <wfs:Query typeName="sf:AggregateGeoFeature">
    <ogc:Filter>
      <ogc:Touches>
          <ogc:PropertyName>sf:multiSurfaceProperty</ogc:PropertyName>
			<gml:LineString srsName="urn:ogc:def:crs:EPSG::4326">
			  <gml:posList>54 19 54 18 54 17</gml:posList>
			</gml:LineString>
      </ogc:Touches>
    </ogc:Filter>
  </wfs:Query>
</wfs:GetFeature>
                                </ctl:body>
                                <p:XMLValidatingParser.GMLSF1/>
                        </ctl:request>
                </xsl:variable>
                <xsl:choose>
                        <xsl:when test="not($response/*)">
                        <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                <ctl:fail/>
                    </xsl:when>
                    <xsl:otherwise>
              <xsl:variable name="featureCount" select="count($response//sf:AggregateGeoFeature)"/>
              <xsl:if test="$featureCount lt 1">
                <ctl:message>FAILURE: Expected one or more sf:AggregateGeoFeature instances in response (<xsl:value-of select="$featureCount"/> features included)</ctl:message>
                <ctl:fail/>
              </xsl:if>
              <xsl:if test="not($response//sf:AggregateGeoFeature/gml:name = 'name-f010')">
                <ctl:message>FAILURE: Expected feature not in response (gml:name="name-f010").</ctl:message>
                <ctl:fail/>
              </xsl:if>
                        </xsl:otherwise>
                </xsl:choose>
          </ctl:code>
    </ctl:test>

 <ctl:test name="wfs:wfs-1.1.0-Basic-GetFeature-tc208.1">
      <ctl:param name="wfs.GetFeature.post.url"/>
      <ctl:assertion>
      The response to a GetFeature request that includes an ogc:Filter having a
      Crosses spatial predicate must include only features that are crossing
      with respect to the provided geometry value.
      </ctl:assertion>
      <ctl:link>wfs-1.1.0-Basic-GetFeature-atc208</ctl:link>
      <ctl:code>
                <xsl:variable name="response">
                        <ctl:request>
                                <ctl:url>
                                        <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                </ctl:url>
                                <ctl:method>POST</ctl:method>
                            <ctl:body>
                                        <!-- test case id: wfs-1.1.0-Basic-GetFeature-tc208.1 --><wfs:GetFeature version="1.1.0" service="WFS">
  <wfs:Query typeName="sf:PrimitiveGeoFeature">
    <ogc:Filter>
      <ogc:Crosses>
          <ogc:PropertyName>sf:surfaceProperty</ogc:PropertyName>
			<gml:LineString srsName="urn:ogc:def:crs:EPSG::4326">
			  <gml:posList>0 0 1 1 2 2</gml:posList>
			</gml:LineString>
      </ogc:Crosses>
    </ogc:Filter>
  </wfs:Query>
</wfs:GetFeature>
                                </ctl:body>
                                <p:XMLValidatingParser.GMLSF1/>
                        </ctl:request>
                </xsl:variable>
                <xsl:choose>
                        <xsl:when test="not($response/*)">
                        <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                <ctl:fail/>
                    </xsl:when>
                    <xsl:otherwise>
              <xsl:variable name="featureCount" select="count($response//sf:PrimitiveGeoFeature)"/>
              <xsl:if test="$featureCount gt 0">
                <ctl:message>FAILURE: Expected empty feature collection (<xsl:value-of select="$featureCount"/> features included)</ctl:message>
                <ctl:fail/>
              </xsl:if>
                        </xsl:otherwise>
                </xsl:choose>
          </ctl:code>
    </ctl:test>

    <ctl:test name="wfs:wfs-1.1.0-Basic-GetFeature-tc208.2">
      <ctl:param name="wfs.GetFeature.post.url"/>
      <ctl:assertion>
      The response to a GetFeature request that includes an ogc:Filter having a
      Crosses spatial predicate must include only features that are crossing
      with respect to the provided geometry value.
      </ctl:assertion>
      <ctl:link>wfs-1.1.0-Basic-GetFeature-atc208</ctl:link>
      <ctl:code>
                <xsl:variable name="response">
                        <ctl:request>
                                <ctl:url>
                                        <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                </ctl:url>
                                <ctl:method>POST</ctl:method>
                            <ctl:body>
                                        <!-- test case id: wfs-1.1.0-Basic-GetFeature-tc208.2 --><wfs:GetFeature version="1.1.0" service="WFS">
	<wfs:Query typeName="sf:PrimitiveGeoFeature">
		<ogc:Filter>
			<ogc:Crosses>
				<ogc:PropertyName>sf:curveProperty</ogc:PropertyName>
				<gml:LineString srsName="urn:ogc:def:crs:EPSG::4326">
					<gml:posList>47.1 9.8 46.1 11.0</gml:posList>
				</gml:LineString>
			</ogc:Crosses>
		</ogc:Filter>
	</wfs:Query>
</wfs:GetFeature>
                                </ctl:body>
                                <p:XMLValidatingParser.GMLSF1/>
                        </ctl:request>
                </xsl:variable>
                <xsl:choose>
                        <xsl:when test="not($response/*)">
                        <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                <ctl:fail/>
                    </xsl:when>
                    <xsl:otherwise>
              <xsl:variable name="featureCount" select="count($response//sf:PrimitiveGeoFeature)"/>
              <xsl:if test="$featureCount lt 1">
                <ctl:message>FAILURE: Expected one or more sf:PrimitiveGeoFeature instances in response (<xsl:value-of select="$featureCount"/> features included)</ctl:message>
                <ctl:fail/>
              </xsl:if>
              <xsl:if test="not($response//sf:PrimitiveGeoFeature/gml:name = 'name-f003')">
                <ctl:message>FAILURE: Unexpected feature in response (gml:name="name-f003").</ctl:message>
                <ctl:fail/>
              </xsl:if>
                        </xsl:otherwise>
                </xsl:choose>
          </ctl:code>
    </ctl:test>

    <ctl:test name="wfs:wfs-1.1.0-Basic-GetFeature-tc208.3">
      <ctl:param name="wfs.GetFeature.post.url"/>
      <ctl:assertion>
      The response to a GetFeature request that includes an ogc:Filter having a
      Crosses spatial predicate must include only features that are crossing
      with respect to the provided geometry value.
      </ctl:assertion>
      <ctl:link>wfs-1.1.0-Basic-GetFeature-atc208</ctl:link>
      <ctl:code>
                <xsl:variable name="response">
                        <ctl:request>
                                <ctl:url>
                                        <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                </ctl:url>
                                <ctl:method>POST</ctl:method>
                            <ctl:body>
                                        <!-- test case id: wfs-1.1.0-Basic-GetFeature-tc208.3 --><wfs:GetFeature version="1.1.0" service="WFS">
  <wfs:Query typeName="sf:AggregateGeoFeature">
    <ogc:Filter>
      <ogc:Crosses>
          <ogc:PropertyName>sf:multiSurfaceProperty</ogc:PropertyName>
			<gml:LineString srsName="urn:ogc:def:crs:EPSG::4326">
			  <gml:posList>53 22 54 21 54 20 54 19 54 18 54 17</gml:posList>
			</gml:LineString>
      </ogc:Crosses>
    </ogc:Filter>
  </wfs:Query>
</wfs:GetFeature>
                                </ctl:body>
                                <p:XMLValidatingParser.GMLSF1/>
                        </ctl:request>
                </xsl:variable>
                <xsl:choose>
                        <xsl:when test="not($response/*)">
                        <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                <ctl:fail/>
                    </xsl:when>
                    <xsl:otherwise>
              <xsl:variable name="featureCount" select="count($response//sf:AggregateGeoFeature)"/>
              <xsl:if test="$featureCount lt 1">
                <ctl:message>FAILURE: Expected one or more sf:AggregateGeoFeature instances in response (<xsl:value-of select="$featureCount"/> features included)</ctl:message>
                <ctl:fail/>
              </xsl:if>
              <xsl:if test="not($response//sf:AggregateGeoFeature/gml:name = 'name-f010')">
                <ctl:message>FAILURE: Expected feature not in response (gml:name="name-f010").</ctl:message>
                <ctl:fail/>
              </xsl:if>
                        </xsl:otherwise>
                </xsl:choose>
          </ctl:code>
    </ctl:test>

    <ctl:test name="wfs:wfs-1.1.0-Basic-GetFeature-tc209.1">
      <ctl:param name="wfs.GetFeature.post.url"/>
      <ctl:assertion>
      The response to a GetFeature request that specifies the default
      EPSG:4326 CRS should return coordinates that exactly match
      the original test data coordinates.
      </ctl:assertion>
      <ctl:link>wfs-1.1.0-Basic-GetFeature-atc209</ctl:link>
      <ctl:code>
                <xsl:variable name="response">
                        <ctl:request>
                                <ctl:url>
                                        <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                </ctl:url>
                                <ctl:method>POST</ctl:method>
                            <ctl:body>
                                        <!-- test case id: wfs-1.1.0-Basic-GetFeature-tc209.1 --><wfs:GetFeature version="1.1.0" service="WFS">
  <wfs:Query typeName="sf:PrimitiveGeoFeature" srsName="urn:ogc:def:crs:EPSG::4326">
    <ogc:Filter>
		<ogc:PropertyIsEqualTo>
			<ogc:PropertyName>gml:name</ogc:PropertyName>
			<ogc:Literal>name-f015</ogc:Literal>
		</ogc:PropertyIsEqualTo>
    </ogc:Filter>
  </wfs:Query>
</wfs:GetFeature>
                                </ctl:body>
                                <p:XMLValidatingParser.GMLSF1/>
                        </ctl:request>
                </xsl:variable>
                <xsl:choose>
                        <xsl:when test="not($response/*)">
                        <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                <ctl:fail/>
                    </xsl:when>
                    <xsl:otherwise>
              <xsl:variable name="featureCount" select="count($response//sf:PrimitiveGeoFeature)"/>
              <xsl:if test="not($featureCount = 1)">
                <ctl:message>FAILURE: Expected one sf:PrimitiveGeoFeature instance in response (<xsl:value-of select="$featureCount"/> features included).</ctl:message>
                <ctl:fail/>
              </xsl:if>
              <xsl:variable name="pos" select="$response//sf:PrimitiveGeoFeature/sf:pointProperty/gml:Point/gml:pos"/>
              <xsl:if test="not($pos = '34.94 -10.52')">
                <ctl:message>FAILURE: Expected gml:pos of "34.94 -10.52" (found: <xsl:value-of select="$pos"/>).</ctl:message>
                <ctl:fail/>
              </xsl:if>
                        </xsl:otherwise>
                </xsl:choose>
          </ctl:code>
    </ctl:test>

    <ctl:test name="wfs:wfs-1.1.0-Basic-GetFeature-tc209.2">
      <ctl:param name="wfs.GetFeature.post.url"/>
      <ctl:assertion>
      The response to a GetFeature request that specifies the EPSG:32629
      CRS should return the correctly translated coordinates.
      </ctl:assertion>
      <ctl:link>wfs-1.1.0-Basic-GetFeature-atc209</ctl:link>
      <ctl:code>
                <xsl:variable name="response">
                        <ctl:request>
                                <ctl:url>
                                        <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                </ctl:url>
                                <ctl:method>POST</ctl:method>
                            <ctl:body>
                                        <!-- test case id: wfs-1.1.0-Basic-GetFeature-tc209.2 --><wfs:GetFeature version="1.1.0" service="WFS">
  <wfs:Query typeName="sf:PrimitiveGeoFeature" srsName="urn:ogc:def:crs:EPSG:6.11:32629">
    <ogc:Filter>
                <ogc:And>
                        <ogc:BBOX>
                                <ogc:PropertyName>sf:pointProperty</ogc:PropertyName>
                                <gml:Envelope srsName="urn:ogc:def:crs:EPSG::4326">
                                        <gml:lowerCorner>30 -12</gml:lowerCorner>
                                        <gml:upperCorner>60 -6</gml:upperCorner>
                                </gml:Envelope>
                        </ogc:BBOX>
                        <ogc:PropertyIsEqualTo>
                                <ogc:PropertyName>gml:name</ogc:PropertyName>
                                <ogc:Literal>name-f015</ogc:Literal>
                        </ogc:PropertyIsEqualTo>
                </ogc:And>
    </ogc:Filter>
  </wfs:Query>
</wfs:GetFeature>
                                </ctl:body>
                                <p:XMLValidatingParser.GMLSF1/>
                        </ctl:request>
                </xsl:variable>
                <xsl:choose>
                        <xsl:when test="not($response/*)">
                        <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                <ctl:fail/>
                    </xsl:when>
                    <xsl:otherwise>
              <xsl:variable name="featureCount" select="count($response//sf:PrimitiveGeoFeature)"/>
              <xsl:if test="not($featureCount = 1)">
                <ctl:message>FAILURE: Expected one sf:PrimitiveGeoFeature instance in response (<xsl:value-of select="$featureCount"/> features included).</ctl:message>
                <ctl:fail/>
              </xsl:if>
              <xsl:variable name="pos" select="$response//sf:PrimitiveGeoFeature/sf:pointProperty/gml:Point/gml:pos"/>
              <xsl:variable name="pos.components" select="tokenize($pos, ' ')"/>
              <xsl:if test="not(round($pos.components[1]) = '361191') and not(round($pos.components[2]) = '3867444')">
                <ctl:message>FAILURE: Expected rounded gml:pos of "361191 3867444" (found: <xsl:value-of select="concat($pos.components[1], ' ', $pos.components[2])"/>).</ctl:message>
                <ctl:fail/>
              </xsl:if>
                        </xsl:otherwise>
                </xsl:choose>
          </ctl:code>
    </ctl:test>

    <ctl:test name="wfs:wfs-1.1.0-Basic-GetFeature-tc209.3">
      <ctl:param name="wfs.GetFeature.post.url"/>
      <ctl:assertion>
      The response to a GetFeature request that specifies the EPSG:32621
      CRS, but with an incorrect BBOX that is outside of the UTM zone, should
      return an exception.
      </ctl:assertion>
      <ctl:link>wfs-1.1.0-Basic-GetFeature-atc209</ctl:link>
      <ctl:code>
                <xsl:variable name="response">
                        <ctl:request>
                                <ctl:url>
                                        <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                </ctl:url>
                                <ctl:method>POST</ctl:method>
                            <ctl:body>
                                        <!-- test case id: wfs-1.1.0-Basic-GetFeature-tc209.3 --><wfs:GetFeature version="1.1.0" service="WFS">
  <wfs:Query typeName="sf:PrimitiveGeoFeature" srsName="urn:ogc:def:crs:EPSG:6.11:32631">
    <ogc:Filter>
                <ogc:And>
                        <ogc:BBOX>
                                <ogc:PropertyName>sf:pointProperty</ogc:PropertyName>
                                <gml:Envelope srsName="urn:ogc:def:crs:EPSG::4326">
                                        <gml:lowerCorner>30 -12</gml:lowerCorner>
                                        <gml:upperCorner>60 -6</gml:upperCorner>
                                </gml:Envelope>
                        </ogc:BBOX>
                        <ogc:PropertyIsEqualTo>
                                <ogc:PropertyName>gml:name</ogc:PropertyName>
                                <ogc:Literal>name-f015</ogc:Literal>
                        </ogc:PropertyIsEqualTo>
                </ogc:And>
    </ogc:Filter>
  </wfs:Query>
</wfs:GetFeature>
                                </ctl:body>
                                <p:XMLValidatingParser.OWS/>
                        </ctl:request>
                </xsl:variable>
                <xsl:choose>
                        <xsl:when test="not($response/*)">
                        <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                <ctl:fail/>
                    </xsl:when>
                    <xsl:otherwise>
                                        <ctl:call-test name="ctl:SchematronValidatingParser">
                                                <ctl:with-param name="doc" select="$response"/>
                                                <ctl:with-param name="schema">sch/ows/1.0.0/ExceptionReport.sch</ctl:with-param>
                                                <ctl:with-param name="phase">InvalidParameterValuePhase</ctl:with-param>
                                        </ctl:call-test>
                        </xsl:otherwise>
                </xsl:choose>
          </ctl:code>
    </ctl:test>

    <ctl:test name="wfs:wfs-1.1.0-Basic-GetFeature-tc210.1">
      <ctl:param name="wfs.GetFeature.post.url"/>
      <ctl:assertion>
      The response to a GetFeature request that includes geogrpahic properties
      must indicated the srsName within the FeatureCollection.
      </ctl:assertion>
      <ctl:comment>Check for the srsName, in order of precedence, on
      (a) the gml:boundedBy Envelope for the top-level container, (b) the
      gml:boundedBy Envelope of the feature, (c) the GML geometry
      property (i.e. gml:Point, gml:Polygon, etc), or (d) the GML
      geometry child (i.e. gml:pos or gml:posList).</ctl:comment>
      <ctl:link>wfs-1.1.0-Basic-GetFeature-atc210</ctl:link>
      <ctl:code>
                <xsl:variable name="response">
                        <ctl:request>
                                <ctl:url>
                                        <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                </ctl:url>
                                <ctl:method>POST</ctl:method>
                            <ctl:body>
                                        <!-- test case id: wfs-1.1.0-Basic-GetFeature-tc210.1 --><wfs:GetFeature version="1.1.0" service="WFS">
  <wfs:Query typeName="sf:PrimitiveGeoFeature" srsName="urn:ogc:def:crs:EPSG::4326">
    <ogc:Filter>
		<ogc:BBOX>
			<ogc:PropertyName>sf:pointProperty</ogc:PropertyName>
			<gml:Envelope srsName="urn:ogc:def:crs:EPSG::4326">
				<gml:lowerCorner>-90 -180</gml:lowerCorner>
				<gml:upperCorner>90 180</gml:upperCorner>
			</gml:Envelope>
		</ogc:BBOX>
    </ogc:Filter>
    </wfs:Query>
</wfs:GetFeature>
                                </ctl:body>
                                <p:XMLValidatingParser.GMLSF1/>
                        </ctl:request>
                </xsl:variable>
                <xsl:choose>
                        <xsl:when test="not($response/*)">
                        <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                <ctl:fail/>
                    </xsl:when>
                    <xsl:otherwise>
                                <xsl:choose>
                                        <xsl:when test="$response//wfs:FeatureCollection/gml:boundedBy/gml:Envelope/@srsName"/>
                                        <xsl:otherwise>
                                                <xsl:for-each select="$response//*[local-name()='featureMember' or local-name()='featureMembers']/*">
                                                        <xsl:choose>
                                                                <xsl:when test="./gml:boundedBy/gml:Envelope/@srsName or .//gml:Point/@srsName or .//gml:LineString/@srsName or .//gml:Curve/@srsName or .//gml:Polygon/@srsName or .//gml:Surface/@srsName or .//gml:Geometry/@srsName or .//gml:MultiPoint/@srsName or .//gml:MultiCurve/@srsName or .//gml:MultiSurface/@srsName or .//gml:MultiGeometry/@srsName or .//gml:pos/@srsName or .//gml:posList/@srsName"/>
                                                                <xsl:otherwise>
                                                                        <ctl:message>FAILURE: Expected @srsName in the resulting FeatureCollection (on top-level boundedBy, feature-level boundedBy, GML geometry, or GML geometry child), yet found none.</ctl:message>
                                                                        <ctl:fail/>
                                                                </xsl:otherwise>
                                                        </xsl:choose>
                                                </xsl:for-each>
                                        </xsl:otherwise>
                                </xsl:choose>
                        </xsl:otherwise>
                </xsl:choose>
          </ctl:code>
    </ctl:test>

</ctl:package>
    <ctl:package>

    <ctl:test name="wfs:run-GetFeature-POST-arithmeticops">
      <ctl:param name="wfs.GetCapabilities.document"/>
      <ctl:assertion>Run test group for GetFeature requests (POST) with simple arithmetic operators: Add, Sub, Mul, Div.</ctl:assertion>
      <ctl:code>
		<xsl:variable name="wfs.GetFeature.post.url">
			<xsl:value-of select="$wfs.GetCapabilities.document//ows:OperationsMetadata/ows:Operation[@name='GetFeature']/ows:DCP/ows:HTTP/ows:Post/@xlink:href"/>
		</xsl:variable>

        <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc300.1">
			<ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
		</ctl:call-test>
        <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc300.2">
			<ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
		</ctl:call-test>
        <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc301.1">
			<ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
		</ctl:call-test>
        <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc302.1">
			<ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
		</ctl:call-test>
        <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc302.2">
			<ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
		</ctl:call-test>
        <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc303.1">
			<ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
		</ctl:call-test>
        <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc303.2">
			<ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
		</ctl:call-test>
        <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc304.1">
			<ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
		</ctl:call-test>
        <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc304.2">
			<ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
		</ctl:call-test>

      </ctl:code>
    </ctl:test>

	<test name="wfs:wfs-1.1.0-Basic-GetFeature-tc300.1">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>All supported (including arithmetic) functions should be defined in the service capabilities document. A defined function accepts 0 or more arguments and returns a single value.</assertion>
      <comment>Arithmetic function Add, using PropertyIsEqualTo to find a feature with an sf:intProperty of a feature + 149.97.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the number of result features is &gt;= 1; (3) the result feature set contains the expected feature instance.</comment>
      <link>filter-1.1.0-functions-atc300</link>
      <link>OGC 04-095, 15.1, p.17</link>
		<code>

			<xsl:variable name="request1">
				<request>
					<url>
						<xsl:value-of select="$wfs.GetFeature.post.url"/>
					</url>
				   <method>post</method>
				   <body>
						<wfs:GetFeature version="1.1.0" service="WFS">
	<wfs:Query typeName="sf:PrimitiveGeoFeature" srsName="urn:ogc:def:crs:EPSG::4326">
		<ogc:Filter>
			<ogc:PropertyIsEqualTo>
				<ogc:PropertyName>sf:intProperty</ogc:PropertyName>
				<ogc:Add>
					<ogc:PropertyName>sf:decimalProperty</ogc:PropertyName>
					<ogc:Literal>149.97</ogc:Literal>
				</ogc:Add>
			</ogc:PropertyIsEqualTo>
		</ogc:Filter>
	</wfs:Query>
</wfs:GetFeature>
					</body>
					<p:XMLValidatingParser.GMLSF1/>
				</request>
			</xsl:variable>

			<xsl:choose>
				<xsl:when test="not($request1/*)">
			        <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
					<ctl:fail/>
			    </xsl:when>
  			    <xsl:otherwise>
					<xsl:variable name="expression">//wfs:FeatureCollection</xsl:variable>
					<ctl:call-test name="ctl:assert-xpath">
						<ctl:with-param name="expr" select="$expression"/>
						<ctl:with-param name="doc" select="$request1"/>
					</ctl:call-test>
					<xsl:variable name="expression">(count(//gml:featureMember) + count(//gml:featureMembers/*)) &gt;= 1</xsl:variable>
					<ctl:call-test name="ctl:assert-xpath">
						<ctl:with-param name="expr" select="$expression"/>
						<ctl:with-param name="doc" select="$request1"/>
					</ctl:call-test>
					<xsl:variable name="expression">//sf:PrimitiveGeoFeature/sf:intProperty=155</xsl:variable>
					<ctl:call-test name="ctl:assert-xpath">
						<ctl:with-param name="expr" select="$expression"/>
						<ctl:with-param name="doc" select="$request1"/>
					</ctl:call-test>
				</xsl:otherwise>
			</xsl:choose>

		</code>
	</test>

	<test name="wfs:wfs-1.1.0-Basic-GetFeature-tc300.2">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>All supported (including arithmetic) functions should be defined in the service capabilities document. A defined function accepts 0 or more arguments and returns a single value.</assertion>
      <comment>Arithmetic function Add, using PropertyIsGreaterThan to find a feature with an sf:intProperty of a feature's sf:decimalProperty of + 1 (all features with int values greater than features with decimal value + 1).  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the number of result features is &gt;= 1; (3) the result feature set contains the expected feature instances.</comment>
      <link>filter-1.1.0-functions-atc300</link>
      <link>OGC 04-095, 15.1, p.17</link>
		<code>

			<xsl:variable name="request1">
				<request>
					<url>
						<xsl:value-of select="$wfs.GetFeature.post.url"/>
					</url>
				   <method>post</method>
				   <body>
						<wfs:GetFeature version="1.1.0" service="WFS">
	<wfs:Query typeName="sf:PrimitiveGeoFeature" srsName="urn:ogc:def:crs:EPSG::4326">
		<ogc:Filter>
			<ogc:PropertyIsGreaterThan>
				<ogc:PropertyName>sf:intProperty</ogc:PropertyName>
				<ogc:Add>
					<ogc:PropertyName>sf:decimalProperty</ogc:PropertyName>
					<ogc:Literal>1</ogc:Literal>
				</ogc:Add>
			</ogc:PropertyIsGreaterThan>
		</ogc:Filter>
	</wfs:Query>
</wfs:GetFeature>
					</body>
					<p:XMLValidatingParser.GMLSF1/>
				</request>
			</xsl:variable>

			<xsl:choose>
				<xsl:when test="not($request1/*)">
			        <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
					<ctl:fail/>
			    </xsl:when>
  			    <xsl:otherwise>
					<xsl:variable name="expression">//wfs:FeatureCollection</xsl:variable>
					<ctl:call-test name="ctl:assert-xpath">
						<ctl:with-param name="expr" select="$expression"/>
						<ctl:with-param name="doc" select="$request1"/>
					</ctl:call-test>
					<xsl:variable name="expression">(count(//gml:featureMember) + count(//gml:featureMembers/*)) &gt;= 4</xsl:variable>
					<ctl:call-test name="ctl:assert-xpath">
						<ctl:with-param name="expr" select="$expression"/>
						<ctl:with-param name="doc" select="$request1"/>
					</ctl:call-test>
				</xsl:otherwise>
			</xsl:choose>

		</code>
	</test>

	<test name="wfs:wfs-1.1.0-Basic-GetFeature-tc301.1">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>Invoking an unknown function shall produce an exception report.</assertion>
      <comment>A bogus function name, ASDF, is used which should give an exception.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the response document element is ows:ExceptionReport.</comment>
      <link>filter-1.1.0-functions-atc301</link>
      <link>OGC 04-095, ?</link>
		<code>

			<xsl:variable name="request1">
				<request>
					<url>
						<xsl:value-of select="$wfs.GetFeature.post.url"/>
					</url>
				   <method>post</method>
				   <body>
						<wfs:GetFeature version="1.1.0" service="WFS">
	<wfs:Query typeName="sf:PrimitiveGeoFeature" srsName="urn:ogc:def:crs:EPSG::4326">
		<ogc:Filter>
			<ogc:PropertyIsEqualTo>
				<ogc:Function name="ASDF">
					<ogc:PropertyName>sf:intProperty</ogc:PropertyName>
				</ogc:Function>
				<ogc:Literal>1</ogc:Literal>
			</ogc:PropertyIsEqualTo>
		</ogc:Filter>
	</wfs:Query>
</wfs:GetFeature>
					</body>
					<p:XMLValidatingParser.OWS/>
				</request>
			</xsl:variable>

			<xsl:choose>
				<xsl:when test="not($request1/*)">
			        <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
					<ctl:fail/>
			    </xsl:when>
  			    <xsl:otherwise>
					<xsl:variable name="expression">//ows:ExceptionReport</xsl:variable>
					<ctl:call-test name="ctl:assert-xpath">
						<ctl:with-param name="expr" select="$expression"/>
						<ctl:with-param name="doc" select="$request1"/>
					</ctl:call-test>
				</xsl:otherwise>
			</xsl:choose>

		</code>
	</test>

<test name="wfs:wfs-1.1.0-Basic-GetFeature-tc302.1">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>All supported (including arithmetic) functions should be defined in the service capabilities document. A defined function accepts 0 or more arguments and returns a single value.</assertion>
      <comment>Arithmetic function Sub, using PropertyIsEqualTo to find a feature with an sf:decimalProperty of a feature - 149.98.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the number of result features is &gt;= 1; (3) the result feature set contains the expected feature instance.</comment>
      <link>filter-1.1.0-functions-atc300</link>
      <link>OGC 04-095, 15.1, p.17</link>
		<code>

			<xsl:variable name="request1">
				<request>
					<url>
						<xsl:value-of select="$wfs.GetFeature.post.url"/>
					</url>
				   <method>post</method>
				   <body>
						<wfs:GetFeature version="1.1.0" service="WFS">
	<wfs:Query typeName="sf:PrimitiveGeoFeature" srsName="urn:ogc:def:crs:EPSG::4326">
		<ogc:Filter>
			<ogc:PropertyIsEqualTo>
				<ogc:PropertyName>sf:decimalProperty</ogc:PropertyName>
				<ogc:Sub>
					<ogc:PropertyName>sf:intProperty</ogc:PropertyName>
					<ogc:Literal>149.98</ogc:Literal>
				</ogc:Sub>
			</ogc:PropertyIsEqualTo>
		</ogc:Filter>
	</wfs:Query>
</wfs:GetFeature>
					</body>
					<p:XMLValidatingParser.GMLSF1/>
				</request>
			</xsl:variable>

			<xsl:choose>
				<xsl:when test="not($request1/*)">
			        <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
					<ctl:fail/>
			    </xsl:when>
  			    <xsl:otherwise>
					<xsl:variable name="expression">//wfs:FeatureCollection</xsl:variable>
					<ctl:call-test name="ctl:assert-xpath">
						<ctl:with-param name="expr" select="$expression"/>
						<ctl:with-param name="doc" select="$request1"/>
					</ctl:call-test>
					<xsl:variable name="expression">(count(//gml:featureMember) + count(//gml:featureMembers/*)) &gt;= 1</xsl:variable>
					<ctl:call-test name="ctl:assert-xpath">
						<ctl:with-param name="expr" select="$expression"/>
						<ctl:with-param name="doc" select="$request1"/>
					</ctl:call-test>
					<xsl:variable name="expression">//sf:PrimitiveGeoFeature/sf:decimalProperty=4.02</xsl:variable>
					<ctl:call-test name="ctl:assert-xpath">
						<ctl:with-param name="expr" select="$expression"/>
						<ctl:with-param name="doc" select="$request1"/>
					</ctl:call-test>
				</xsl:otherwise>
			</xsl:choose>

		</code>
	</test>

	<test name="wfs:wfs-1.1.0-Basic-GetFeature-tc302.2">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>All supported (including arithmetic) functions should be defined in the service capabilities document. A defined function accepts 0 or more arguments and returns a single value.</assertion>
      <comment>Arithmetic function Sub, using PropertyIsLessThan to find a feature with an sf:decimalProperty of a feature's sf:intProperty of -10 (all features with decimal values less than features with int value - 10).  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the number of result features is &gt;= 1; (3) the result feature set contains the expected feature instances.</comment>
      <link>filter-1.1.0-functions-atc300</link>
      <link>OGC 04-095, 15.1, p.17</link>
		<code>

			<xsl:variable name="request1">
				<request>
					<url>
						<xsl:value-of select="$wfs.GetFeature.post.url"/>
					</url>
				   <method>post</method>
				   <body>
						<wfs:GetFeature version="1.1.0" service="WFS">
	<wfs:Query typeName="sf:PrimitiveGeoFeature" srsName="urn:ogc:def:crs:EPSG::4326">
		<ogc:Filter>
			<ogc:PropertyIsLessThan>
				<ogc:PropertyName>sf:decimalProperty</ogc:PropertyName>
				<ogc:Sub>
					<ogc:PropertyName>sf:intProperty</ogc:PropertyName>
					<ogc:Literal>10</ogc:Literal>
				</ogc:Sub>
			</ogc:PropertyIsLessThan>
		</ogc:Filter>
	</wfs:Query>
</wfs:GetFeature>
					</body>
					<p:XMLValidatingParser.GMLSF1/>
				</request>
			</xsl:variable>

			<xsl:choose>
				<xsl:when test="not($request1/*)">
			        <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
					<ctl:fail/>
			    </xsl:when>
  			    <xsl:otherwise>
					<xsl:variable name="expression">//wfs:FeatureCollection</xsl:variable>
					<ctl:call-test name="ctl:assert-xpath">
						<ctl:with-param name="expr" select="$expression"/>
						<ctl:with-param name="doc" select="$request1"/>
					</ctl:call-test>
					<xsl:variable name="expression">(count(//gml:featureMember) + count(//gml:featureMembers/*)) &gt;= 4</xsl:variable>
					<ctl:call-test name="ctl:assert-xpath">
						<ctl:with-param name="expr" select="$expression"/>
						<ctl:with-param name="doc" select="$request1"/>
					</ctl:call-test>
				</xsl:otherwise>
			</xsl:choose>

		</code>
	</test>

<test name="wfs:wfs-1.1.0-Basic-GetFeature-tc303.1">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>All supported (including arithmetic) functions should be defined in the service capabilities document. A defined function accepts 0 or more arguments and returns a single value.</assertion>
      <comment>Arithmetic function Mul, using PropertyIsGreaterThan to find a feature with an sf:intProperty of a feature's sf:decimalProperty * 2.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the number of result features is &gt;= 1; (3) the result feature set contains the expected feature instances.</comment>
      <link>filter-1.1.0-functions-atc300</link>
      <link>OGC 04-095, 15.1, p.17</link>
		<code>

			<xsl:variable name="request1">
				<request>
					<url>
						<xsl:value-of select="$wfs.GetFeature.post.url"/>
					</url>
				   <method>post</method>
				   <body>
						<wfs:GetFeature version="1.1.0" service="WFS">
	<wfs:Query typeName="sf:PrimitiveGeoFeature" srsName="urn:ogc:def:crs:EPSG::4326">
		<ogc:Filter>
			<ogc:PropertyIsGreaterThan>
				<ogc:PropertyName>sf:intProperty</ogc:PropertyName>
				<ogc:Mul>
					<ogc:PropertyName>sf:decimalProperty</ogc:PropertyName>
					<ogc:Literal>2</ogc:Literal>
				</ogc:Mul>
			</ogc:PropertyIsGreaterThan>
		</ogc:Filter>
	</wfs:Query>
</wfs:GetFeature>
					</body>
					<p:XMLValidatingParser.GMLSF1/>
				</request>
			</xsl:variable>

			<xsl:choose>
				<xsl:when test="not($request1/*)">
			        <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
					<ctl:fail/>
			    </xsl:when>
  			    <xsl:otherwise>
					<xsl:variable name="expression">//wfs:FeatureCollection</xsl:variable>
					<ctl:call-test name="ctl:assert-xpath">
						<ctl:with-param name="expr" select="$expression"/>
						<ctl:with-param name="doc" select="$request1"/>
					</ctl:call-test>
					<xsl:variable name="expression">(count(//gml:featureMember) + count(//gml:featureMembers/*)) &gt;= 4</xsl:variable>
					<ctl:call-test name="ctl:assert-xpath">
						<ctl:with-param name="expr" select="$expression"/>
						<ctl:with-param name="doc" select="$request1"/>
					</ctl:call-test>
					<xsl:variable name="expression">not(//sf:intProperty=-900)</xsl:variable>
					<ctl:call-test name="ctl:assert-xpath">
						<ctl:with-param name="expr" select="$expression"/>
						<ctl:with-param name="doc" select="$request1"/>
					</ctl:call-test>
				</xsl:otherwise>
			</xsl:choose>

		</code>
	</test>

<test name="wfs:wfs-1.1.0-Basic-GetFeature-tc303.2">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>All supported (including arithmetic) functions should be defined in the service capabilities document. A defined function accepts 0 or more arguments and returns a single value.</assertion>
      <comment>Arithmetic function Mul, using PropertyIsLessThanOrEqualTo to find a feature with an sf:intProperty of a feature's sf:decimalProperty * -1.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the number of result features is &gt;= 1; (3) the result feature set contains the expected feature instances.</comment>
      <link>filter-1.1.0-functions-atc300</link>
      <link>OGC 04-095, 15.1, p.17</link>
		<code>

			<xsl:variable name="request1">
				<request>
					<url>
						<xsl:value-of select="$wfs.GetFeature.post.url"/>
					</url>
				   <method>post</method>
				   <body>
						<wfs:GetFeature version="1.1.0" service="WFS">
	<wfs:Query typeName="sf:PrimitiveGeoFeature" srsName="urn:ogc:def:crs:EPSG::4326">
		<ogc:Filter>
			<ogc:PropertyIsLessThanOrEqualTo>
				<ogc:PropertyName>sf:intProperty</ogc:PropertyName>
				<ogc:Mul>
					<ogc:PropertyName>sf:decimalProperty</ogc:PropertyName>
					<ogc:Literal>-1</ogc:Literal>
				</ogc:Mul>
			</ogc:PropertyIsLessThanOrEqualTo>
		</ogc:Filter>
	</wfs:Query>
</wfs:GetFeature>
					</body>
					<p:XMLValidatingParser.GMLSF1/>
				</request>
			</xsl:variable>

			<xsl:choose>
				<xsl:when test="not($request1/*)">
			        <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
					<ctl:fail/>
			    </xsl:when>
  			    <xsl:otherwise>
					<xsl:variable name="expression">//wfs:FeatureCollection</xsl:variable>
					<ctl:call-test name="ctl:assert-xpath">
						<ctl:with-param name="expr" select="$expression"/>
						<ctl:with-param name="doc" select="$request1"/>
					</ctl:call-test>
					<xsl:variable name="expression">(count(//gml:featureMember) + count(//gml:featureMembers/*)) &gt;= 1</xsl:variable>
					<ctl:call-test name="ctl:assert-xpath">
						<ctl:with-param name="expr" select="$expression"/>
						<ctl:with-param name="doc" select="$request1"/>
					</ctl:call-test>
					<xsl:variable name="expression">//sf:intProperty=-900</xsl:variable>
					<ctl:call-test name="ctl:assert-xpath">
						<ctl:with-param name="expr" select="$expression"/>
						<ctl:with-param name="doc" select="$request1"/>
					</ctl:call-test>
				</xsl:otherwise>
			</xsl:choose>

		</code>
	</test>

<test name="wfs:wfs-1.1.0-Basic-GetFeature-tc304.1">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>All supported (including arithmetic) functions should be defined in the service capabilities document. A defined function accepts 0 or more arguments and returns a single value.</assertion>
      <comment>Arithmetic function Div, using PropertyIsEqualTo to find a feature with an sf:doubleProperty of a feature / 9999.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the number of result features is &gt;= 1; (3) the result feature set contains the expected feature instances (0).</comment>
      <link>filter-1.1.0-functions-atc300</link>
      <link>OGC 04-095, 15.1, p.17</link>
		<code>

			<xsl:variable name="request1">
				<request>
					<url>
						<xsl:value-of select="$wfs.GetFeature.post.url"/>
					</url>
				   <method>post</method>
				   <body>
						<wfs:GetFeature version="1.1.0" service="WFS">
	<wfs:Query typeName="sf:AggregateGeoFeature" srsName="urn:ogc:def:crs:EPSG::4326">
		<ogc:Filter>
			<ogc:PropertyIsEqualTo>
				<ogc:PropertyName>sf:doubleProperty</ogc:PropertyName>
				<ogc:Div>
					<ogc:PropertyName>sf:doubleProperty</ogc:PropertyName>
					<ogc:Literal>9999</ogc:Literal>
				</ogc:Div>
			</ogc:PropertyIsEqualTo>
		</ogc:Filter>
	</wfs:Query>
</wfs:GetFeature>
					</body>
					<p:XMLValidatingParser.GMLSF1/>
				</request>
			</xsl:variable>

			<xsl:choose>
				<xsl:when test="not($request1/*)">
			        <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
					<ctl:fail/>
			    </xsl:when>
  			    <xsl:otherwise>
					<xsl:variable name="expression">//wfs:FeatureCollection</xsl:variable>
					<ctl:call-test name="ctl:assert-xpath">
						<ctl:with-param name="expr" select="$expression"/>
						<ctl:with-param name="doc" select="$request1"/>
					</ctl:call-test>
					<xsl:variable name="expression">(count(//gml:featureMember) + count(//gml:featureMembers/*)) = 0</xsl:variable>
					<ctl:call-test name="ctl:assert-xpath">
						<ctl:with-param name="expr" select="$expression"/>
						<ctl:with-param name="doc" select="$request1"/>
					</ctl:call-test>
				</xsl:otherwise>
			</xsl:choose>

		</code>
	</test>

<test name="wfs:wfs-1.1.0-Basic-GetFeature-tc304.2">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>All supported (including arithmetic) functions should be defined in the service capabilities document. A defined function accepts 0 or more arguments and returns a single value.</assertion>
      <comment>Arithmetic function Div, using PropertyIsGreaterThan to find a feature with an sf:intProperty of a feature / 3.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the number of result features is &gt;= 1; (3) the result feature set contains the expected feature instances.</comment>
      <link>filter-1.1.0-functions-atc300</link>
      <link>OGC 04-095, 15.1, p.17</link>
		<code>

			<xsl:variable name="request1">
				<request>
					<url>
						<xsl:value-of select="$wfs.GetFeature.post.url"/>
					</url>
				   <method>post</method>
				   <body>
						<wfs:GetFeature version="1.1.0" service="WFS">
	<wfs:Query typeName="sf:PrimitiveGeoFeature" srsName="urn:ogc:def:crs:EPSG::4326">
		<ogc:Filter>
			<ogc:PropertyIsGreaterThan>
				<ogc:PropertyName>sf:decimalProperty</ogc:PropertyName>
				<ogc:Div>
					<ogc:PropertyName>sf:intProperty</ogc:PropertyName>
					<ogc:Literal>2</ogc:Literal>
				</ogc:Div>
			</ogc:PropertyIsGreaterThan>
		</ogc:Filter>
	</wfs:Query>
</wfs:GetFeature>
					</body>
					<p:XMLValidatingParser.GMLSF1/>
				</request>
			</xsl:variable>

			<xsl:choose>
				<xsl:when test="not($request1/*)">
			        <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
					<ctl:fail/>
			    </xsl:when>
  			    <xsl:otherwise>
					<xsl:variable name="expression">//wfs:FeatureCollection</xsl:variable>
					<ctl:call-test name="ctl:assert-xpath">
						<ctl:with-param name="expr" select="$expression"/>
						<ctl:with-param name="doc" select="$request1"/>
					</ctl:call-test>
					<xsl:variable name="expression">(count(//gml:featureMember) + count(//gml:featureMembers/*)) &gt;= 1</xsl:variable>
					<ctl:call-test name="ctl:assert-xpath">
						<ctl:with-param name="expr" select="$expression"/>
						<ctl:with-param name="doc" select="$request1"/>
					</ctl:call-test>
					<xsl:variable name="expression">//sf:PrimitiveGeoFeature/sf:intProperty=-900</xsl:variable>
					<ctl:call-test name="ctl:assert-xpath">
						<ctl:with-param name="expr" select="$expression"/>
						<ctl:with-param name="doc" select="$request1"/>
					</ctl:call-test>
				</xsl:otherwise>
			</xsl:choose>

		</code>
	</test>

</ctl:package>
    <ctl:package>

    <ctl:test name="wfs:run-GetFeature-POST-gmlsf1">
      <ctl:param name="wfs.GetCapabilities.document"/>
      <ctl:assertion>Run test group for GetFeature requests (POST) at GMLSF Level 1.</ctl:assertion>
      <ctl:code>
                <xsl:variable name="wfs.GetFeature.post.url">
                        <xsl:value-of select="$wfs.GetCapabilities.document//ows:OperationsMetadata/ows:Operation[@name='GetFeature']/ows:DCP/ows:HTTP/ows:Post/@xlink:href"/>
                </xsl:variable>

                <xsl:variable name="wfs.between.supported" select="boolean($wfs.GetCapabilities.document//ogc:Filter_Capabilities/ogc:Scalar_Capabilities/ogc:ComparisonOperators/ogc:ComparisonOperator[contains(text(),'Between')])"/>

                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc400.1">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc400.2">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc400.3">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc401.1">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc402.1">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc402.2">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc402.3">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc403.1">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc404.1">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc405.1">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc405.2">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc405.3">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc405.4">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc405.5">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc405.6">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc405.7">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc405.8">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc405.9">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
                <xsl:choose>
                  <xsl:when test="$wfs.between.supported">
                    <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc405.10">
                      <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                    </ctl:call-test>
                  </xsl:when>
                  <xsl:otherwise>
                    <ctl:message>PropertyIsBetween is not supported, skipping test wfs:wfs-1.1.0-Basic-GetFeature-tc405.10.</ctl:message>
                  </xsl:otherwise>
                </xsl:choose>

      </ctl:code>
    </ctl:test>

<test name="wfs:wfs-1.1.0-Basic-GetFeature-tc400.1">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>The response entity must be schema valid and include any optional feature properties requested by the client. The document element must be a wfs:FeatureCollection.</assertion>
      <comment>Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is an wfs:FeatureCollection document.</comment>
      <link>wfs-1.1.0-Basic-GetFeature-atc5</link>
      <link>OGC 04-094, 9.2, p.37</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                        <method>post</method>
                                    <body>
                                                <foo:GetFeature xmlns:foo="http://www.opengis.net/wfs" version="1.1.0" service="WFS">
	<foo:Query typeName="sf:ComplexGeoFeature" srsName="urn:ogc:def:crs:EPSG::4326"/>
</foo:GetFeature>
                                        </body>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                                        <xsl:variable name="expression">//wfs:FeatureCollection</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

        <test name="wfs:wfs-1.1.0-Basic-GetFeature-tc400.2">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>The response entity must be schema valid and include any optional feature properties requested by the client. The document element must be a wfs:FeatureCollection.</assertion>
      <comment>Looking for the optional property sf:b64BinaryProperty; other OPTIONAL elements (sf:hexBinaryProperty and sf:reference) should not be included in the response.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is an wfs:FeatureCollection document; (3) the response must have properties specified the propertyName(s) requested and no other optional properties.</comment>
      <link>wfs-1.1.0-Basic-GetFeature-atc5</link>
      <link>OGC 04-094, 9.2, p.37</link>
                <code>
                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                        <method>post</method>
                                    <body>
                                                <foo:GetFeature xmlns:foo="http://www.opengis.net/wfs" version="1.1.0" service="WFS">
	<foo:Query typeName="sf:ComplexGeoFeature" srsName="urn:ogc:def:crs:EPSG::4326">
		<foo:PropertyName>sf:b64BinaryProperty</foo:PropertyName>
	</foo:Query>
</foo:GetFeature>
                                        </body>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                    <xsl:if test="not($request1//wfs:FeatureCollection)">
                      <ctl:message>FAILURE: Invalid response entity, expected wfs:FeatureCollection.</ctl:message>
                      <ctl:fail/>
                    </xsl:if>
                  <xsl:for-each select="$request1//sf:ComplexGeoFeature">
                    <!--<xsl:if test="not(sf:b64BinaryProperty)">
                      <ctl:message>FAILURE: Missing sf:b64BinaryProperty (gml:id = <xsl:value-of select="@gml:id"/>)</ctl:message>
                      <ctl:fail/>
                    </xil:if>-->
                    <xsl:if test="sf:hexBinaryProperty or sf:reference">
                      <ctl:message>FAILURE: Optional properties (sf:hexBinaryProperty or sf:reference) are included, but were not requested (gml:id = <xsl:value-of select="@gml:id"/>)</ctl:message>
                      <ctl:fail/>
                    </xsl:if>
                  </xsl:for-each>
                                </xsl:otherwise>
                        </xsl:choose>
                </code>
        </test>

        <test name="wfs:wfs-1.1.0-Basic-GetFeature-tc400.3">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>The response entity must be schema valid and include any optional feature properties requested by the client. The document element must be a wfs:FeatureCollection.</assertion>
      <comment>Looking for the mandatory property sf:observation, as well as other mandatory elements, (no optional properties should not be included in the response).  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is an wfs:FeatureCollection document; (3) the response must have properties specified the propertyName(s) requested and no other optional properties.</comment>
      <link>wfs-1.1.0-Basic-GetFeature-atc5</link>
      <link>OGC 04-094, 9.2, p.37</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                        <method>post</method>
                                    <body>
                                                <wfs:GetFeature version="1.1.0" service="WFS">
	<wfs:Query typeName="sf:ComplexGeoFeature" srsName="urn:ogc:def:crs:EPSG::4326">
		<wfs:PropertyName>sf:observation</wfs:PropertyName>
		<ogc:Filter>
			<ogc:PropertyIsEqualTo>
				<ogc:PropertyName>gml:name</ogc:PropertyName>
				<ogc:Literal>name-f103</ogc:Literal>
			</ogc:PropertyIsEqualTo>
		</ogc:Filter>
	</wfs:Query>
</wfs:GetFeature>
                                        </body>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                                        <xsl:variable name="expression">//wfs:FeatureCollection</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                        <xsl:variable name="expression">//sf:observation</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                        <xsl:variable name="expression">not(//sf:hexBinaryProperty) and not(//sf:b64BinaryProperty) and not(//sf:reference)</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

        <test name="wfs:wfs-1.1.0-Basic-GetFeature-tc401.1">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>The @typeName attribute must identify a list of known feature types. Aliases may be declared for use in a filter expression.</assertion>
      <comment>GetFeature with a known typename in the query (from test data).  Note: no lists to be used as they are to be phased out in 1.2.0.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is a wfs:FeatureCollection document; (3)  there must be at least the requested features in the response.</comment>
      <link>wfs-1.1.0-Basic-GetFeature-atc7</link>
      <link>OGC 04-094, 9.2, p.35</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                   <method>post</method>
                                   <body>
                                           <wfs:GetFeature service="WFS" version="1.1.0">
	<wfs:Query typeName="sf:ComplexGeoFeature" srsName="urn:ogc:def:crs:EPSG::4326"/>
</wfs:GetFeature>
                                   </body>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                                        <xsl:variable name="expression">//wfs:FeatureCollection</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                        <xsl:variable name="expression">count(//sf:ComplexGeoFeature) &gt;= 3</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>


<test name="wfs:wfs-1.1.0-Basic-GetFeature-tc402.1">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>The resulting feature collection must contain only those features that satisfy the specified constraints, or all instances of the requested types if no filter expression is provided.</assertion>
      <comment>GetFeature looking for a feature by gml:name.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is a wfs:FeatureCollection document; (3)  the response must contain the feature requested.</comment>
      <link>wfs-1.1.0-Basic-GetFeature-atc9</link>
      <link>OGC 04-094, 9.2, p.37</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                   <method>post</method>
                                   <body>
                                           <wfs:GetFeature service="WFS" version="1.1.0">
	<wfs:Query typeName="sf:ComplexGeoFeature" srsName="urn:ogc:def:crs:EPSG::4326">
		<ogc:Filter>
			<ogc:PropertyIsEqualTo>
				<ogc:PropertyName>gml:name</ogc:PropertyName>
				<ogc:Literal>name-f103</ogc:Literal>
			</ogc:PropertyIsEqualTo>
		</ogc:Filter>
	</wfs:Query>
</wfs:GetFeature>
                                   </body>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                                        <xsl:variable name="expression">//wfs:FeatureCollection</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                        <xsl:variable name="expression">(count(//gml:featureMember) + count(//gml:featureMembers/*)) &gt;= 1</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                        <xsl:variable name="expression">
                                          <xsl:choose>
                                            <xsl:when test="boolean($request1//gml:featureMember/sf:ComplexGeoFeature)">//gml:featureMember/sf:ComplexGeoFeature/gml:name = 'name-f103'</xsl:when>
                                            <xsl:otherwise>//gml:featureMembers/sf:ComplexGeoFeature/gml:name = 'name-f103'</xsl:otherwise>
                                          </xsl:choose>
                                        </xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

        <test name="wfs:wfs-1.1.0-Basic-GetFeature-tc402.2">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>The resulting feature collection must contain only those features that satisfy the specified constraints, or all instances of the requested types if no filter expression is provided.</assertion>
      <comment>GetFeature looking for all feature with all properties except sf:hexBinaryProperty and sf:reference.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is a wfs:FeatureCollection document; (3)  the response must contain the features requested; (4) the result features must not contain any optional properties not specified in the propertyNames of the request.</comment>
      <link>wfs-1.1.0-Basic-GetFeature-atc9</link>
      <link>OGC 04-094, 9.2, p.37</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                   <method>post</method>
                                   <body>
                                           <wfs:GetFeature service="WFS" version="1.1.0">
	<wfs:Query typeName="sf:ComplexGeoFeature" srsName="urn:ogc:def:crs:EPSG::4326">
		<wfs:PropertyName>sf:b64BinaryProperty</wfs:PropertyName>
	</wfs:Query>
</wfs:GetFeature>
                                   </body>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                                        <xsl:variable name="expression">//wfs:FeatureCollection</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                        <xsl:variable name="expression">(count(//gml:featureMember) + count(//gml:featureMembers/*)) &gt;= 3</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                        <xsl:variable name="expression">not(//sf:hexBinaryProperty) and not(//sf:reference)</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

        <test name="wfs:wfs-1.1.0-Basic-GetFeature-tc402.3">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>The resulting feature collection must contain only those features that satisfy the specified constraints, or all instances of the requested types if no filter expression is provided.</assertion>
      <comment>GetFeature looking for a feature by type (sf:PrimitiveGeoFeature and sf:ComplexGeoFeature).  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is a wfs:FeatureCollection document; (3)  the response must only contain the features requested.</comment>
      <link>wfs-1.1.0-Basic-GetFeature-atc9</link>
      <link>OGC 04-094, 9.2, p.37</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                   <method>post</method>
                                   <body>
                                           <wfs:GetFeature service="WFS" version="1.1.0">
	<wfs:Query typeName="sf:PrimitiveGeoFeature" srsName="urn:ogc:def:crs:EPSG::4326"/>
	<wfs:Query typeName="sf:ComplexGeoFeature" srsName="urn:ogc:def:crs:EPSG::4326"/>
</wfs:GetFeature>
                                   </body>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                                        <xsl:variable name="expression">//wfs:FeatureCollection</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                        <xsl:variable name="expression">(count(//gml:featureMember) + count(//gml:featureMembers/*)) &gt;= 8</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                        <xsl:variable name="expression">not(//sf:AggregateGeoFeature) and not(//sf:EntitéGénérique)</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

<test name="wfs:wfs-1.1.0-Basic-GetFeature-tc403.1">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>Correctly evaluate the BBOX predicate (equivalent to ogc:Intersects with a gml:Envelope argument) expressed by a valid ogc:BBOX element</assertion>
      <comment>GetFeature spatial query for a BBOX for all level 1 features, including those with curve and surface properties.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is an wfs:FeatureCollection document; (3) the response shall have the feature members expected from the request.</comment>
      <link>filter-1.1.0-spatial-</link>
      <link>OGC 04-095, 8.2, p.10</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                   <method>post</method>
                                   <body>
                                           <wfs:GetFeature version="1.1.0" service="WFS">
	<wfs:Query typeName="sf:ComplexGeoFeature">
		<ogc:Filter>
			<ogc:BBOX>
				<ogc:PropertyName>sf:geometryProperty</ogc:PropertyName>
				<gml:Envelope srsName="urn:ogc:def:crs:EPSG::4326">
					<gml:lowerCorner>34.94 -10.52</gml:lowerCorner>
					<gml:upperCorner>71.96 32.19</gml:upperCorner>
				</gml:Envelope>
			</ogc:BBOX>
		</ogc:Filter>
	</wfs:Query>
</wfs:GetFeature>
                                        </body>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                                        <xsl:variable name="expression">count(//sf:ComplexGeoFeature) &gt;= 3</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                        <xsl:variable name="expression">//gml:Surface and //gml:Curve</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

<test name="wfs:wfs-1.1.0-Basic-GetFeature-tc404.1">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>Correctly select the objects specified by the list of supplied identifiers. The  identification scheme is service-specific, but valid identifiers must substitute for ogc:_Id.</assertion>
      <comment>GetFeature to first get more than one feature id (gml:id), then another GetFeature filtering on the gml:ids.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is an wfs:FeatureCollection document; (3) the response shall have at least the three feature members expected from the request.</comment>
      <link>filter-1.1.0-objectid-atc2</link>
      <link>OGC 04-095, 11.1, p.14</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                   <method>post</method>
                                   <body>
                                           <wfs:GetFeature version="1.1.0" service="WFS">
	<wfs:Query typeName="sf:ComplexGeoFeature" srsName="urn:ogc:def:crs:EPSG::4326"/>
</wfs:GetFeature>
                                        </body>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1//wfs:FeatureCollection)">
                                <ctl:message>FAILURE: Expected valid wfs:FeatureCollection.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                                <xsl:otherwise>

            <xsl:variable name="gml.id1">
              <xsl:value-of select="$request1//sf:ComplexGeoFeature[1]/@gml:id"/>
            </xsl:variable>
            <xsl:variable name="gml.id2">
              <xsl:value-of select="$request1//sf:ComplexGeoFeature[2]/@gml:id"/>
            </xsl:variable>
            <xsl:variable name="gml.id3">
              <xsl:value-of select="$request1//sf:ComplexGeoFeature[3]/@gml:id"/>
            </xsl:variable>

                        <xsl:variable name="request2">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                   <method>post</method>
                                   <body>
                                           <wfs:GetFeature version="1.1.0" service="WFS">
	<wfs:Query typeName="sf:ComplexGeoFeature" srsName="urn:ogc:def:crs:EPSG::4326">
		<ogc:Filter>
			<ogc:GmlObjectId gml:id="{$gml.id1}"/>
			<ogc:GmlObjectId gml:id="{$gml.id2}"/>
			<ogc:GmlObjectId gml:id="{$gml.id3}"/>
		</ogc:Filter>
	</wfs:Query>
</wfs:GetFeature>
                                        </body>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request2/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                                        <xsl:for-each select="$request2//sf:ComplexGeoFeature">
                      <xsl:variable name="id"><xsl:value-of select="@gml:id"/></xsl:variable>
                      <xsl:if test="empty(index-of(($gml.id1, $gml.id2, $gml.id3), $id))">
                        <ctl:message>FAILURE: Unexpected gml:id value (<xsl:value-of select="$id"/>)</ctl:message>
                        <ctl:fail/>
                      </xsl:if>
                    </xsl:for-each>
                                </xsl:otherwise>
                        </xsl:choose>

                </xsl:otherwise>
                </xsl:choose>

                </code>
        </test>

<test name="wfs:wfs-1.1.0-Basic-GetFeature-tc405.1">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>Correctly evaluate the PropertyIsEqualTo predicate expressed by a valid ogc:PropertyIsEqualTo element.</assertion>
      <comment>PropertyIsEqualTo filter request, for the gml:name of 'name-f102'.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the number of result features is &gt;= 1; (3) the result feature set contains the expected feature instance.</comment>
      <link>filter-</link>
      <link>OGC 04-095, 9.2, p.12</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                   <method>post</method>
                                   <body>
                                           <wfs:GetFeature version="1.1.0" service="WFS">
	<wfs:Query typeName="sf:ComplexGeoFeature" srsName="urn:ogc:def:crs:EPSG::4326">
		<ogc:Filter>
			<ogc:PropertyIsEqualTo>
				<ogc:PropertyName>gml:name</ogc:PropertyName>
				<ogc:Literal>name-f102</ogc:Literal>
			</ogc:PropertyIsEqualTo>
		</ogc:Filter>
	</wfs:Query>
</wfs:GetFeature>
                                        </body>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                                        <xsl:variable name="featureCount" select="count($request1//sf:ComplexGeoFeature)"/>
                    <xsl:if test="$featureCount != 1">
                      <ctl:message>FAILURE: Expected one sf:ComplexGeoFeature instance in response (<xsl:value-of select="$featureCount"/> features included)</ctl:message>
                      <ctl:fail/>
                    </xsl:if>
                    <xsl:for-each select="$request1//sf:ComplexGeoFeature">
                      <xsl:if test="compare(gml:name, 'name-f102') != 0">
                        <ctl:message>FAILURE: gml:name != "name-f102" (gml:id = <xsl:value-of select="@gml:id"/>)</ctl:message>
                        <ctl:fail/>
                      </xsl:if>
                   </xsl:for-each>
                                </xsl:otherwise>
                        </xsl:choose>
                </code>
        </test>

        <test name="wfs:wfs-1.1.0-Basic-GetFeature-tc405.2">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>Correctly evaluate the PropertyIsEqualTo predicate expressed by a valid ogc:PropertyIsEqualTo element.</assertion>
      <comment>PropertyIsEqualTo filter request, for the gml:name of 'Vivamus Blandit'.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the number of result features is &gt;= 1; (3) the result feature set contains the expected feature instance.</comment>
      <link>filter-</link>
      <link>OGC 04-095, 9.2, p.12</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                   <method>post</method>
                                   <body>
                                           <wfs:GetFeature version="1.1.0" service="WFS">
	<wfs:Query typeName="sf:ComplexGeoFeature" srsName="urn:ogc:def:crs:EPSG::4326">
		<ogc:Filter>
			<ogc:PropertyIsEqualTo>
				<ogc:PropertyName>gml:name</ogc:PropertyName>
				<ogc:Literal>Vivamus blandit</ogc:Literal>
			</ogc:PropertyIsEqualTo>
		</ogc:Filter>
	</wfs:Query>
</wfs:GetFeature>
                                        </body>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                                        <xsl:variable name="featureCount" select="count($request1//sf:ComplexGeoFeature)"/>
                    <xsl:if test="$featureCount != 1">
                      <ctl:message>FAILURE: Expected one sf:ComplexGeoFeature instance in response (<xsl:value-of select="$featureCount"/> features included)</ctl:message>
                      <ctl:fail/>
                    </xsl:if>
                    <xsl:for-each select="$request1//sf:ComplexGeoFeature">
                      <xsl:if test="not(boolean(gml:name[text() = 'Vivamus blandit']))">
                        <ctl:message>FAILURE: gml:name != "Vivamus blandit" (gml:id = <xsl:value-of select="@gml:id"/>)</ctl:message>
                        <ctl:fail/>
                      </xsl:if>
                   </xsl:for-each>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

        <test name="wfs:wfs-1.1.0-Basic-GetFeature-tc405.3">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>Correctly evaluate the PropertyIsEqualTo predicate expressed by a valid ogc:PropertyIsEqualTo element.</assertion>
      <comment>PropertyIsEqualTo filter request, for sf:observation of '2.4'.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the number of result features is &gt;= 1; (3) the result feature set contains the expected feature instance.</comment>
      <link>filter-</link>
      <link>OGC 04-095, 9.2, p.12</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                   <method>post</method>
                                   <body>
                                           <wfs:GetFeature version="1.1.0" service="WFS">
	<wfs:Query typeName="sf:ComplexGeoFeature" srsName="urn:ogc:def:crs:EPSG::4326">
		<ogc:Filter>
			<ogc:PropertyIsEqualTo>
				<ogc:PropertyName>sf:observation</ogc:PropertyName>
				<ogc:Literal>2.4</ogc:Literal>
			</ogc:PropertyIsEqualTo>
		</ogc:Filter>
	</wfs:Query>
</wfs:GetFeature>
                                        </body>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                                        <xsl:variable name="featureCount" select="count($request1//sf:ComplexGeoFeature)"/>
                    <xsl:if test="$featureCount != 1">
                      <ctl:message>FAILURE: Expected one sf:ComplexGeoFeature instance in response (<xsl:value-of select="$featureCount"/> features included)</ctl:message>
                      <ctl:fail/>
                    </xsl:if>
                    <xsl:for-each select="$request1//sf:ComplexGeoFeature">
                      <xsl:if test="sf:observation != 2.4">
                        <ctl:message>FAILURE: sf:observation != 2.4 (gml:id = <xsl:value-of select="@gml:id"/>)</ctl:message>
                        <ctl:fail/>
                      </xsl:if>
                   </xsl:for-each>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

        <test name="wfs:wfs-1.1.0-Basic-GetFeature-tc405.4">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>Correctly evaluate the PropertyIsEqualTo predicate expressed by a valid ogc:PropertyIsEqualTo element.</assertion>
      <comment>PropertyIsEqualTo filter request, for the sf:typeCode of 'AQ064'.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the number of result features is &gt;= 1; (3) the result feature set contains the expected feature instance.</comment>
      <link>filter-</link>
      <link>OGC 04-095, 9.2, p.12</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                   <method>post</method>
                                   <body>
                                           <wfs:GetFeature version="1.1.0" service="WFS">
	<wfs:Query typeName="sf:ComplexGeoFeature" srsName="urn:ogc:def:crs:EPSG::4326">
		<ogc:Filter>
			<ogc:PropertyIsEqualTo>
				<ogc:PropertyName>sf:typeCode</ogc:PropertyName>
				<ogc:Literal>AQ064</ogc:Literal>
			</ogc:PropertyIsEqualTo>
		</ogc:Filter>
	</wfs:Query>
</wfs:GetFeature>
                                        </body>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                                        <xsl:variable name="featureCount" select="count($request1//sf:ComplexGeoFeature)"/>
                    <xsl:if test="$featureCount lt 1">
                      <ctl:message>FAILURE: Expected at least one sf:ComplexGeoFeature instance in response (<xsl:value-of select="$featureCount"/> features included)</ctl:message>
                      <ctl:fail/>
                    </xsl:if>
                    <xsl:for-each select="$request1//sf:ComplexGeoFeature">
                      <xsl:if test="compare(sf:typeCode, 'AQ064') != 0">
                        <ctl:message>FAILURE: sf:typeCode != "AQ064" (gml:id = <xsl:value-of select="@gml:id"/>)</ctl:message>
                        <ctl:fail/>
                      </xsl:if>
                   </xsl:for-each>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

        <test name="wfs:wfs-1.1.0-Basic-GetFeature-tc405.5">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>Correctly evaluate the PropertyIsEqualTo predicate expressed by a valid ogc:PropertyIsEqualTo element.</assertion>
      <comment>PropertyIsEqualTo filter request, for sf:b64BinaryProperty attribute mimeType of 'text/plain'.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the number of result features is &gt;= 1; (3) the result feature set contains the expected feature instance.</comment>
      <link>filter-</link>
      <link>OGC 04-095, 9.2, p.12</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                   <method>post</method>
                                   <body>
                                           <wfs:GetFeature version="1.1.0" service="WFS">
	<wfs:Query typeName="sf:ComplexGeoFeature" srsName="urn:ogc:def:crs:EPSG::4326">
		<ogc:Filter>
			<ogc:PropertyIsEqualTo>
				<ogc:PropertyName>//@mimeType</ogc:PropertyName>
				<ogc:Literal>text/plain</ogc:Literal>
			</ogc:PropertyIsEqualTo>
		</ogc:Filter>
	</wfs:Query>
</wfs:GetFeature>
                                        </body>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                                        <xsl:variable name="featureCount" select="count($request1//sf:ComplexGeoFeature)"/>
                    <xsl:if test="$featureCount lt 1">
                      <ctl:message>FAILURE: Expected at least one sf:ComplexGeoFeature instance in response (<xsl:value-of select="$featureCount"/> features included)</ctl:message>
                      <ctl:fail/>
                    </xsl:if>
                    <xsl:for-each select="$request1//sf:ComplexGeoFeature">
                      <xsl:if test="compare(//@mimeType, 'text/plain') != 0">
                        <ctl:message>FAILURE: //@mimeType != "text/plain" (gml:id = <xsl:value-of select="@gml:id"/>)</ctl:message>
                        <ctl:fail/>
                      </xsl:if>
                   </xsl:for-each>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

        <test name="wfs:wfs-1.1.0-Basic-GetFeature-tc405.6">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>Correctly evaluate the PropertyIsEqualTo predicate expressed by a valid ogc:PropertyIsEqualTo element.</assertion>
      <comment>PropertyIsEqualTo filter request, for an sf:Event's userid of 'Phineas.Fogg' within the sf:auditTrail.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the number of result features is &gt;= 2; (3) the result feature set contains the expected feature instance.</comment>
      <link>filter-</link>
      <link>OGC 04-095, 9.2, p.12</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                   <method>post</method>
                                   <body>
                                           <wfs:GetFeature version="1.1.0" service="WFS">
	<wfs:Query typeName="sf:ComplexGeoFeature" srsName="urn:ogc:def:crs:EPSG::4326">
		<ogc:Filter>
			<ogc:PropertyIsEqualTo>
				<ogc:PropertyName>sf:auditTrail/sf:Event/sf:userid</ogc:PropertyName>
				<ogc:Literal>Phineas.Fogg</ogc:Literal>
			</ogc:PropertyIsEqualTo>
		</ogc:Filter>
	</wfs:Query>
</wfs:GetFeature>
                                        </body>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                                        <xsl:variable name="featureCount" select="count($request1//sf:ComplexGeoFeature)"/>
                    <xsl:if test="$featureCount lt 2">
                      <ctl:message>FAILURE: Expected at least two sf:ComplexGeoFeature instances in response (<xsl:value-of select="$featureCount"/> features included)</ctl:message>
                      <ctl:fail/>
                    </xsl:if>
                    <xsl:for-each select="$request1//sf:ComplexGeoFeature">
                      <xsl:if test="not(boolean(sf:auditTrail[sf:Event/sf:userid = 'Phineas.Fogg']))">
                        <ctl:message>FAILURE: sf:auditTrail/sf:Event/sf:userid != "Phineas.Fogg" (gml:id = <xsl:value-of select="@gml:id"/>)</ctl:message>
                        <ctl:fail/>
                      </xsl:if>
                   </xsl:for-each>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

        <test name="wfs:wfs-1.1.0-Basic-GetFeature-tc405.7">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>Correctly evaluate the PropertyIsEqualTo predicate expressed by a valid ogc:PropertyIsEqualTo element.</assertion>
      <comment>PropertyIsEqualTo filter request, for the sf:hexBinaryProperty of '3f3c6d78206c657673726f693d6e3122302e20226e656f636964676e223d54552d4622383e3f'.  Pass if all of the following conditions are true: (1) the response is schema valid; (2)  the result feature set contains no features.</comment>
      <link>filter-</link>
      <link>OGC 04-095, 9.2, p.12</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                   <method>post</method>
                                   <body>
                                           <wfs:GetFeature version="1.1.0" service="WFS">
	<wfs:Query typeName="sf:ComplexGeoFeature" srsName="urn:ogc:def:crs:EPSG::4326">
		<ogc:Filter>
			<ogc:PropertyIsEqualTo>
				<ogc:PropertyName>sf:hexBinaryProperty</ogc:PropertyName>
				<ogc:Literal>3f3c6d78206c657673726f693d6e3122302e20226e656f636964676e223d54552d4622383e3f</ogc:Literal>
			</ogc:PropertyIsEqualTo>
		</ogc:Filter>
	</wfs:Query>
</wfs:GetFeature>
                                        </body>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                    <xsl:if test="not($request1//wfs:FeatureCollection)">
                      <ctl:message>FAILURE: Invalid response entity, expected wfs:FeatureCollection.</ctl:message>
                      <ctl:fail/>
                    </xsl:if>
                                        <xsl:variable name="featureCount" select="count($request1//sf:ComplexGeoFeature)"/>
                    <xsl:if test="$featureCount != 0">
                      <ctl:message>FAILURE: Expected an empty collection in response (<xsl:value-of select="$featureCount"/> features included)</ctl:message>
                      <ctl:fail/>
                    </xsl:if>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

        <test name="wfs:wfs-1.1.0-Basic-GetFeature-tc405.8">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>Correctly evaluate the PropertyIsEqualTo predicate expressed by a valid ogc:PropertyIsEqualTo element.</assertion>
      <comment>PropertyIsEqualTo filter request, for sf:observation attribute uom of 'http://www.bipm.fr/en/si/derived_units/Celsius'.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the number of result features is &gt;= 1; (3) the result feature set contains the expected feature instance.</comment>
      <link>filter-</link>
      <link>OGC 04-095, 9.2, p.12</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                   <method>post</method>
                                   <body>
                                           <wfs:GetFeature version="1.1.0" service="WFS">
	<wfs:Query typeName="sf:ComplexGeoFeature" srsName="urn:ogc:def:crs:EPSG::4326">
		<ogc:Filter>
			<ogc:PropertyIsEqualTo>
				<ogc:PropertyName>sf:observation/@uom</ogc:PropertyName>
				<ogc:Literal>http://www.bipm.fr/en/si/derived_units/Celsius</ogc:Literal>
			</ogc:PropertyIsEqualTo>
		</ogc:Filter>
	</wfs:Query>
</wfs:GetFeature>
                                        </body>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                                        <xsl:variable name="featureCount" select="count($request1//sf:ComplexGeoFeature)"/>
                    <xsl:if test="$featureCount lt 1">
                      <ctl:message>FAILURE: Expected at least one sf:ComplexGeoFeature instance in response (<xsl:value-of select="$featureCount"/> features included)</ctl:message>
                      <ctl:fail/>
                    </xsl:if>
                    <xsl:for-each select="$request1//sf:ComplexGeoFeature">
                      <xsl:if test="compare(sf:observation/@uom, 'http://www.bipm.fr/en/si/derived_units/Celsius') != 0">
                        <ctl:message>FAILURE: sf:observation/@uom != "http://www.bipm.fr/en/si/derived_units/Celsius" (gml:id = <xsl:value-of select="@gml:id"/>)</ctl:message>
                        <ctl:fail/>
                      </xsl:if>
                   </xsl:for-each>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

        <test name="wfs:wfs-1.1.0-Basic-GetFeature-tc405.9">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>Correctly evaluate the PropertyIsEqualTo predicate expressed by a valid ogc:PropertyIsEqualTo element.</assertion>
      <comment>PropertyIsEqualTo filter request, for sf:typeCode attribute codeSpace of 'https://www.dgiwg.org/FAD'.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the number of result features is &gt;= 3; (3) the result feature set contains the expected feature instance.</comment>
      <link>filter-</link>
      <link>OGC 04-095, 9.2, p.12</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                   <method>post</method>
                                   <body>
                                           <wfs:GetFeature version="1.1.0" service="WFS">
	<wfs:Query typeName="sf:ComplexGeoFeature" srsName="urn:ogc:def:crs:EPSG::4326">
		<ogc:Filter>
			<ogc:PropertyIsEqualTo>
				<ogc:PropertyName>sf:typeCode/@codeSpace</ogc:PropertyName>
				<ogc:Literal>https://www.dgiwg.org/FAD</ogc:Literal>
			</ogc:PropertyIsEqualTo>
		</ogc:Filter>
	</wfs:Query>
</wfs:GetFeature>
                                        </body>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                                        <xsl:variable name="featureCount" select="count($request1//sf:ComplexGeoFeature)"/>
                    <xsl:if test="$featureCount lt 3">
                      <ctl:message>FAILURE: Expected at least three sf:ComplexGeoFeature instance in response (<xsl:value-of select="$featureCount"/> features included)</ctl:message>
                      <ctl:fail/>
                    </xsl:if>
                    <xsl:for-each select="$request1//sf:ComplexGeoFeature">
                      <xsl:if test="compare(sf:typeCode/@codeSpace, 'https://www.dgiwg.org/FAD') != 0">
                        <ctl:message>FAILURE: sf:typeCode/@codeSpace != "https://www.dgiwg.org/FAD" (gml:id = <xsl:value-of select="@gml:id"/>)</ctl:message>
                        <ctl:fail/>
                      </xsl:if>
                   </xsl:for-each>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

        <test name="wfs:wfs-1.1.0-Basic-GetFeature-tc405.10">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>Correctly evaluate the PropertyIsBetween predicate expressed by a valid ogc:PropertyIsBetween element.</assertion>
      <comment>PropertyIsBetween filter request, for a datetime property (sf:timestamp in sf:Event), for a value between '2006-10-21T11:27:00+01:00' and '2006-10-21T11:29:00+01:00'.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the number of result features is &gt;= 2; (3) the result feature set does not have a value outside the boundary values given in the request.</comment>
      <link>filter-</link>
      <link>OGC 04-095, 9.2, p.12</link>
                <code>
                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                   <method>post</method>
                                   <body>
                                           <wfs:GetFeature version="1.1.0" service="WFS">
	<wfs:Query typeName="sf:ComplexGeoFeature" srsName="urn:ogc:def:crs:EPSG::4326">
		<ogc:Filter>
			<ogc:PropertyIsBetween>
				<ogc:PropertyName>//sf:timestamp</ogc:PropertyName>
				<ogc:LowerBoundary>
					<ogc:Literal>2006-10-21T11:27:00+01:00</ogc:Literal>
				</ogc:LowerBoundary>
				<ogc:UpperBoundary>
					<ogc:Literal>2006-10-21T11:29:00+01:00</ogc:Literal>
				</ogc:UpperBoundary>
			</ogc:PropertyIsBetween>
		</ogc:Filter>
	</wfs:Query>
</wfs:GetFeature>
                                        </body>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                                        <xsl:variable name="featureCount" select="count($request1//sf:ComplexGeoFeature)"/>
                    <xsl:if test="$featureCount lt 2">
                      <ctl:message>FAILURE: Expected at least two sf:ComplexGeoFeature instance in response (<xsl:value-of select="$featureCount"/> features included)</ctl:message>
                      <ctl:fail/>
                    </xsl:if>
                    <xsl:for-each select="$request1//sf:ComplexGeoFeature">
                      <xsl:if test="not(boolean(.//sf:timestamp[(xsd:dateTime(.) ge xsd:dateTime('2006-10-21T11:27:00+01:00')) or (xsd:dateTime(.) le xsd:dateTime('2006-10-21T11:29:00+01:00'))]))">
                        <ctl:message>FAILURE: //sf:timestamp not in interval "2006-10-21T11:27:00+01:00" to "2006-10-21T11:29:00+01:00" (gml:id = <xsl:value-of select="@gml:id"/>)</ctl:message>
                        <ctl:fail/>
                      </xsl:if>
                   </xsl:for-each>
                                </xsl:otherwise>
                        </xsl:choose>
                </code>
        </test>

</ctl:package>

    <ctl:test name="wfs:run-GetFeature-POST">
      <ctl:param name="wfs.GetCapabilities.document"/>
          <ctl:param name="gmlsf.profile.level"/>
          <ctl:param name="wfs-xlink"/>

      <ctl:assertion>
      Run test group for GetFeature requests using the POST method. Target endpoint is {$wfs.GetCapabilities.document//ows:OperationsMetadata/ows:Operation[@name='GetFeature']/ows:DCP/ows:HTTP/ows:Post/@xlink:href}.
      </ctl:assertion>
      <ctl:code>

                <xsl:variable name="wfs.GetFeature.post.url">
                        <xsl:value-of select="$wfs.GetCapabilities.document//ows:OperationsMetadata/ows:Operation[@name='GetFeature']/ows:DCP/ows:HTTP/ows:Post/@xlink:href"/>
                </xsl:variable>
                <xsl:variable name="kvp-post-supported" select="boolean($wfs.GetCapabilities.document//ows:OperationsMetadata/ows:Operation[@name='GetFeature']/ows:DCP/ows:HTTP/ows:Post/ows:Constraint[@name='InputFormat' and ows:Value='application/x-www-form-urlencoded'])"/>

                <xsl:variable name="wfs.between.supported" select="boolean($wfs.GetCapabilities.document//ogc:Filter_Capabilities/ogc:Scalar_Capabilities/ogc:ComparisonOperators/ogc:ComparisonOperator[contains(text(),'Between')])"/>

                <xsl:variable name="wfs.PrimitiveGeoFeature.DefaultSRS">
                        <xsl:value-of select="$wfs.GetCapabilities.document//wfs:FeatureTypeList/wfs:FeatureType[wfs:Name='sf:PrimitiveGeoFeature']/wfs:DefaultSRS"/>
                </xsl:variable>

                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc1.1">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc2.1">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc3.1">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
                <xsl:if test="not(string-length($wfs-xlink) gt 0)">
                        <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc4.1">
                                <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                        </ctl:call-test>
                </xsl:if>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc5.1">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc5.2">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc5.3">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc6.1">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc7.1">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc9.1">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc9.2">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc11.1">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc11.2">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc11.3">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc11.4">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc11.5">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc11.6">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc12.1">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc13.1">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc13.2">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc14.1">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc14.2">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc15.1">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc15.2">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc15.3">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc16.1">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc16.2">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc16.3">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc16.4">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc17.1">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc17.2">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
                <xsl:if test="$kvp-post-supported">
                        <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc18.1">
                                <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                        </ctl:call-test>
                </xsl:if>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc19.1">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc19.2">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc20.1">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc21.1">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc21.2">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc21.3">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc22.1">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc22.2">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc25.1">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc27.1">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc27.2">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc28.1">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                        <ctl:with-param name="wfs.PrimitiveGeoFeature.DefaultSRS" select="$wfs.PrimitiveGeoFeature.DefaultSRS"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc29.1">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc29.2">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc29.3">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc29.4">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc33.1">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc34.1">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc35.1">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc35.2">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc35.3">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc35.4">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc35.5">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc35.6">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc35.7">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc36.1">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc36.2">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc36.3">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc36.4">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc36.5">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc37.1">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc37.2">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc37.3">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc37.4">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc38.1">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc38.2">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc38.3">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc38.4">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc39.1">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc39.2">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc39.3">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc39.4">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc40.1">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc40.2">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc40.3">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc40.4">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
                <xsl:choose>
                  <xsl:when test="$wfs.between.supported">
                    <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc41.1">
                      <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                    </ctl:call-test>
                    <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc41.2">
                      <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                    </ctl:call-test>
                    <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc41.3">
                      <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                    </ctl:call-test>
                    <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc41.4">
                      <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                    </ctl:call-test>
                  </xsl:when>
                  <xsl:otherwise>
                    <ctl:message>PropertyIsBetween is not supported, skipping tests wfs:wfs-1.1.0-Basic-GetFeature-tc41.1 through 41.4.</ctl:message>
                  </xsl:otherwise>
                </xsl:choose>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc43.1">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc49.1">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc51.1">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc51.2">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc51.3">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc51.4">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc51.5">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc51.6">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>

        <!-- run tests for optional capabilities that have been implemented -->
                <xsl:if test="$wfs.GetCapabilities.document//ogc:Scalar_Capabilities/ogc:ComparisonOperators/ogc:ComparisonOperator = 'Like'">
                        <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc42.1">
                                <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                        </ctl:call-test>
                        <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc42.2">
                                <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                        </ctl:call-test>
                        <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc42.3">
                                <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                        </ctl:call-test>
                </xsl:if>
                <xsl:if test="$wfs.GetCapabilities.document//ogc:Scalar_Capabilities/ogc:ComparisonOperators/ogc:ComparisonOperator = 'NullCheck'">
                        <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc45.1">
                                <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                        </ctl:call-test>
            <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc45.2">
                                <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                        </ctl:call-test>
            <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc45.3">
                                <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                        </ctl:call-test>
                </xsl:if>
        <xsl:if test="$wfs.GetCapabilities.document//ogc:Filter_Capabilities/ogc:Scalar_Capabilities/ogc:LogicalOperators">
          <ctl:call-test name="wfs:run-GetFeature-POST-logicalops">
                    <ctl:with-param name="wfs.GetCapabilities.document" select="$wfs.GetCapabilities.document"/>
                  </ctl:call-test>
        </xsl:if>
        <xsl:if test="count($wfs.GetCapabilities.document//ogc:Spatial_Capabilities/ogc:SpatialOperators/ogc:SpatialOperator) gt 1">
          <ctl:call-test name="wfs:run-GetFeature-POST-spatialops">
                    <ctl:with-param name="wfs.GetCapabilities.document" select="$wfs.GetCapabilities.document"/>
                  </ctl:call-test>
        </xsl:if>
        <xsl:if test="$wfs.GetCapabilities.document//ogc:Scalar_Capabilities/ogc:ArithmeticOperators/ogc:SimpleArithmetic">
          <ctl:call-test name="wfs:run-GetFeature-POST-arithmeticops">
                    <ctl:with-param name="wfs.GetCapabilities.document" select="$wfs.GetCapabilities.document"/>
                  </ctl:call-test>
        </xsl:if>
        <!--TODO: Also check if some GMLSF1 instances are inserted before running these tests (similar to readiness tests fro GMLSF0)-->
        <xsl:if test="$gmlsf.profile.level = 'sf-1'">
          <ctl:call-test name="wfs:run-GetFeature-POST-gmlsf1">
                    <ctl:with-param name="wfs.GetCapabilities.document" select="$wfs.GetCapabilities.document"/>
                  </ctl:call-test>
        </xsl:if>
      </ctl:code>
    </ctl:test>

        <test name="wfs:wfs-1.1.0-Basic-GetFeature-tc1.1">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>The default output format is XML that complies with GML 3.1.1.</assertion>
      <comment>GML 3.1.1 in this case is the GMLSF schema, for the level supported, 0 or 1.  Pass if all of the following conditions are true: (1) the response is schema valid (for the GMLSF level supported); (2) the root document is an wfs:FeatureCollection document.</comment>
      <link>wfs-1.1.0-Basic-GetFeature-atc1</link>
      <link>OGC 04-094, 9.2, p.34</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                        <method>post</method>
                                    <body>
                                                <wfs:GetFeature version="1.1.0" service="WFS">
	<wfs:Query typeName="sf:PrimitiveGeoFeature" srsName="urn:ogc:def:crs:EPSG::4326"/>
</wfs:GetFeature>
                                        </body>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                                        <xsl:variable name="expression">//wfs:FeatureCollection</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

    <test name="wfs:wfs-1.1.0-Basic-GetFeature-tc2.1">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>If @resultType='hits', then only the size of the resulting feature collection and a timestamp is returned (i.e. @numberOfFeatures, @timeStamp). Only instances of requested feature types are included in the total.</assertion>
      <comment>GetFeature with resulttype of 'hits'.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is an wfs:FeatureCollection document; (3) there are no features in the response; (4) the numberOfFeatures and timeStamp attributes are present.</comment>
      <link>wfs-1.1.0-Basic-GetFeature-atc2</link>
      <link>OGC 04-094, 9.3, p.38</link>
                <code>
                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                        <method>post</method>
                                    <body>
                                                <wfs:GetFeature version="1.1.0" service="WFS" resultType="hits">
	<wfs:Query typeName="sf:PrimitiveGeoFeature" srsName="urn:ogc:def:crs:EPSG::4326"/>
</wfs:GetFeature>
                                        </body>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:variable name="expression">//wfs:FeatureCollection</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                        <xsl:variable name="expression">boolean(//wfs:FeatureCollection/@numberOfFeatures) and boolean(//wfs:FeatureCollection/@timeStamp)</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                        <xsl:variable name="expression">(count(//gml:featureMember) + count(//gml:featureMembers/*)) = 0</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

        <test name="wfs:wfs-1.1.0-Basic-GetFeature-tc3.1">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>If @maxFeatures &gt; 0, then the number of features included in the response shall not exceed the specified number. Members of a feature collection do NOT count toward the total.</assertion>
      <comment>GetFeature with maxfeatures of '2'.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is an wfs:FeatureCollection document; (3) there are no more than the maxfeatures number of features in the response (and more than 0).</comment>
      <link>wfs-1.1.0-Basic-GetFeature-atc3</link>
      <link>OGC 04-094, 9.2, p.35</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                        <method>post</method>
                                    <body>
                                                <wfs:GetFeature version="1.1.0" service="WFS" maxFeatures="2">
	<wfs:Query typeName="sf:PrimitiveGeoFeature" srsName="urn:ogc:def:crs:EPSG::4326"/>
</wfs:GetFeature>
                                        </body>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                                        <xsl:variable name="expression">//wfs:FeatureCollection</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                        <xsl:variable name="expression">(count(//gml:featureMember) + count(//gml:featureMembers/*)) &gt;= 2</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

        <test name="wfs:wfs-1.1.0-Basic-GetFeature-tc4.1">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>The @traverseXlinkDepth and @traverseXlinkExpiry attributes shall be ignored if the service does not implement the WFS-XLink conformance class.</assertion>
      <comment>GetFeature with values for the  traverseXlinkDepth and traverseXlinkExpiry parameters.  If it is supported then it should give a correct response, and ignore if not supported.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is an wfs:FeatureCollection document.</comment>
      <link>wfs-1.1.0-Basic-GetFeature-atc4</link>
      <link>OGC 04-094, 9.1, p.33</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                        <method>post</method>
                                    <body>
                                                <wfs:GetFeature version="1.1.0" service="WFS" traverseXlinkDepth="*" traverseXlinkExpiry="3">
	<wfs:Query typeName="sf:PrimitiveGeoFeature" srsName="urn:ogc:def:crs:EPSG::4326"/>
</wfs:GetFeature>
                                        </body>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                                        <xsl:variable name="expression">//wfs:FeatureCollection</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

        <test name="wfs:wfs-1.1.0-Basic-GetFeature-tc5.1">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>The response entity must be schema valid and include any optional feature properties requested by the client. The document element must be a wfs:FeatureCollection.</assertion>
      <comment>Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is an wfs:FeatureCollection document.</comment>
      <link>wfs-1.1.0-Basic-GetFeature-atc5</link>
      <link>OGC 04-094, 9.2, p.37</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                        <method>post</method>
                                    <body>
                                                <foo:GetFeature xmlns:foo="http://www.opengis.net/wfs" version="1.1.0" service="WFS">
	<foo:Query typeName="sf:PrimitiveGeoFeature" srsName="urn:ogc:def:crs:EPSG::4326"/>
</foo:GetFeature>
                                        </body>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                                        <xsl:variable name="expression">//wfs:FeatureCollection</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

        <test name="wfs:wfs-1.1.0-Basic-GetFeature-tc5.2">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>The response entity must be schema valid and include any optional feature properties requested by the client. The document element must be a wfs:FeatureCollection.</assertion>
      <comment>Looking for the optional property sf:dateProperty; other OPTIONAL elements (sf:uriProperty and sf:dateTimeProperty) should not be included in the response).  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is an wfs:FeatureCollection document; (3) the response must have properties specified the propertyName(s) requested and no other optional properties.</comment>
      <link>wfs-1.1.0-Basic-GetFeature-atc5</link>
      <link>OGC 04-094, 9.2, p.37</link>
                <code>
                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                        <method>post</method>
                                    <body>
                                                <foo:GetFeature xmlns:foo="http://www.opengis.net/wfs" version="1.1.0" service="WFS">
	<foo:Query typeName="sf:PrimitiveGeoFeature" srsName="urn:ogc:def:crs:EPSG::4326">
		<foo:PropertyName>sf:dateProperty</foo:PropertyName>
	</foo:Query>
</foo:GetFeature>
                                        </body>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                  <xsl:for-each select="$request1//sf:PrimitiveGeoFeature">
                    <xsl:if test="sf:dateTimeProperty or sf:uriProperty">
                      <ctl:message>FAILURE: Optional properties (sf:dateTimeProperty or sf:uriProperty) are included, but were not requested (gml:id = <xsl:value-of select="@gml:id"/>)</ctl:message>
                      <ctl:fail/>
                    </xsl:if>
                  </xsl:for-each>
                                </xsl:otherwise>
                        </xsl:choose>
                </code>
        </test>

        <test name="wfs:wfs-1.1.0-Basic-GetFeature-tc5.3">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>The response entity must be schema valid and include any optional feature properties requested by the client. The document element must be a wfs:FeatureCollection.</assertion>
      <comment>Looking for the mandatory property sf:measurand, as well as other mandatory elements, (no optional properties should not be included in the response).  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is an wfs:FeatureCollection document; (3) the response must have properties specified the propertyName(s) requested and no other optional properties.</comment>
      <link>wfs-1.1.0-Basic-GetFeature-atc5</link>
      <link>OGC 04-094, 9.2, p.37</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                        <method>post</method>
                                    <body>
                                                <wfs:GetFeature version="1.1.0" service="WFS">
	<wfs:Query typeName="sf:PrimitiveGeoFeature" srsName="urn:ogc:def:crs:EPSG::4326">
		<wfs:PropertyName>sf:measurand</wfs:PropertyName>
		<ogc:Filter>
			<ogc:PropertyIsEqualTo>
				<ogc:PropertyName>gml:name</ogc:PropertyName>
				<ogc:Literal>name-f001</ogc:Literal>
			</ogc:PropertyIsEqualTo>
		</ogc:Filter>
	</wfs:Query>
</wfs:GetFeature>
                                        </body>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                                        <xsl:variable name="expression">//wfs:FeatureCollection</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                        <xsl:variable name="expression">//sf:measurand</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                        <xsl:variable name="expression">not(//sf:dateTimeProperty) and not(//sf:uriProperty) and not(//sf:dateProperty)</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

        <test name="wfs:wfs-1.1.0-Basic-GetFeature-tc6.1">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>The response entity must include the @xsi:schemaLocation attribute to identify the set of GML application schemas against which the matching features are valid.</assertion>
      <comment>Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is an wfs:FeatureCollection document; (3) the @xsi:schemaLocation parameter must be present.</comment>
      <link>wfs-1.1.0-Basic-GetFeature-atc6</link>
      <link>OGC 04-094, 9.3.1, p.39</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                        <method>post</method>
                                    <body>
                                                <wfs:GetFeature version="1.1.0" service="WFS">
	<wfs:Query typeName="sf:PrimitiveGeoFeature" srsName="urn:ogc:def:crs:EPSG::4326"/>
</wfs:GetFeature>
                                        </body>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                  <xsl:if test="not($request1//wfs:FeatureCollection/@xsi:schemaLocation)">
                      <ctl:message>FAILURE: Missing required attribute, wfs:FeatureCollection/@xsi:schemaLocation</ctl:message>
                      <ctl:fail/>
                  </xsl:if>
                                </xsl:otherwise>
                        </xsl:choose>
                </code>
        </test>

        <test name="wfs:wfs-1.1.0-Basic-GetFeature-tc7.1">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>The @featureVersion attribute shall be ignored if versioning is not supported.</assertion>
      <comment>GetFeature with featureVersion of 'ALL'.  Should ignore if not supported, or give the all versions of this feature.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is an wfs:FeatureCollection document.</comment>
      <link>wfs-1.1.0-Basic-GetFeature-atc10</link>
      <link>OGC 04-094, 9.2, p.35</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                        <method>post</method>
                                    <body>
                                                <wfs:GetFeature version="1.1.0" service="WFS">
	<wfs:Query typeName="sf:PrimitiveGeoFeature" featureVersion="ALL" srsName="urn:ogc:def:crs:EPSG::4326"/>
</wfs:GetFeature>
                                        </body>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                                        <xsl:variable name="expression">//wfs:FeatureCollection</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

        <test name="wfs:wfs-1.1.0-Basic-GetFeature-tc9.1">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>If a request is unrecognizable or the service cannot process the request, a valid exception report must be returned.</assertion>
      <comment>GetFeature with an incorrect typename ('sf:Asdf') in the query.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is an ows:ServiceException document.</comment>
      <link>wfs-1.1.0-Basic-atc10</link>
      <link>OGC 04-094, 7.7, p. 23</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                   <method>post</method>
                                   <body>
                                           <wfs:GetFeature version="1.1.0" service="WFS">
	<wfs:Query typeName="sf:Asdf" srsName="urn:ogc:def:crs:EPSG::4326"/>
</wfs:GetFeature>
                                        </body>
                                        <p:XMLValidatingParser.OWS/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                                        <xsl:variable name="expression">//ows:ExceptionReport</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

        <test name="wfs:wfs-1.1.0-Basic-GetFeature-tc9.2">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>If a request is unrecognizable or the service cannot process the request, a valid exception report must be returned.</assertion>
      <comment>GetFeature with an incorrect propertyname ('sf:asdfProperty') requested in the query.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is an ows:ServiceException document.</comment>
      <link>wfs-1.1.0-Basic-atc10</link>
      <link>OGC 04-094, 7.7, p. 23</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                   <method>post</method>
                                   <body>
                                           <wfs:GetFeature service="WFS" version="1.1.0">
	<wfs:Query typeName="sf:PrimitiveGeoFeature" srsName="urn:ogc:def:crs:EPSG::4326">
		<wfs:PropertyName>sf:asdfProperty</wfs:PropertyName>
	</wfs:Query>
</wfs:GetFeature>
                                        </body>
                                        <p:XMLValidatingParser.OWS/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                                        <xsl:variable name="expression">//ows:ExceptionReport</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

        <test name="wfs:wfs-1.1.0-Basic-GetFeature-tc11.1">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>The following attributes are required for all XML request entities: @version (default '1.1.0'); @service (default 'WFS').</assertion>
      <comment>GetFeature with @version='1.1.0' and @service is an empty string (default of 'WFS').  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is an wfs:FeatureCollection document.</comment>
      <link>wfs-1.1.0-Basic-atc9</link>
      <link>OGC 04-094, 7.8, p.24</link>
                <code>
                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                   <method>post</method>
                                   <body>
                                           <wfs:GetFeature version="1.1.0">
	<wfs:Query typeName="sf:PrimitiveGeoFeature" srsName="urn:ogc:def:crs:EPSG::4326"/>
</wfs:GetFeature>
                                   </body>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                  <xsl:variable name="featureCount" select="count($request1//sf:PrimitiveGeoFeature)"/>
                  <xsl:if test="$featureCount lt 5">
                    <ctl:message>FAILURE: Expected 5 sf:PrimitiveGeoFeature instances in response (<xsl:value-of select="$featureCount"/> were included)</ctl:message>
                    <ctl:fail/>
                  </xsl:if>
                                </xsl:otherwise>
                        </xsl:choose>
                </code>
        </test>

        <test name="wfs:wfs-1.1.0-Basic-GetFeature-tc11.2">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>The following attributes are required for all XML request entities: @version (default '1.1.0'); @service (default 'WFS').</assertion>
      <comment>GetFeature with a version '1.1.0' and no @service (deduce from namespace).  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is an wfs:FeatureCollection document.</comment>
      <link>wfs-1.1.0-Basic-atc9</link>
      <link>OGC 04-094, 7.8, p.24</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                   <method>post</method>
                                   <body>
                                           <wfs:GetFeature version="1.1.0">
	<wfs:Query typeName="sf:PrimitiveGeoFeature" srsName="urn:ogc:def:crs:EPSG::4326"/>
</wfs:GetFeature>
                                   </body>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                                  <xsl:variable name="featureCount" select="count($request1//sf:PrimitiveGeoFeature)"/>
                  <xsl:if test="$featureCount lt 5">
                    <ctl:message>FAILURE: Expected 5 sf:PrimitiveGeoFeature instances in response (<xsl:value-of select="$featureCount"/> were included)</ctl:message>
                    <ctl:fail/>
                  </xsl:if>
                                </xsl:otherwise>
                        </xsl:choose>
                </code>
        </test>

        <test name="wfs:wfs-1.1.0-Basic-GetFeature-tc11.3">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>The following attributes are required for all XML request entities: @version (default '1.1.0'); @service (default 'WFS').</assertion>
      <comment>GetFeature with no version and a service 'WFS', expecting version '1.1.0'.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is an wfs:FeatureCollection document.</comment>
      <link>wfs-1.1.0-Basic-atc9</link>
      <link>OGC 04-094, 7.8, p.24</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                   <method>post</method>
                                   <body>
                                           <wfs:GetFeature service="WFS">
	<wfs:Query typeName="sf:PrimitiveGeoFeature" srsName="urn:ogc:def:crs:EPSG::4326"/>
</wfs:GetFeature>
                                   </body>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                                  <xsl:variable name="featureCount" select="count($request1//sf:PrimitiveGeoFeature)"/>
                  <xsl:if test="$featureCount lt 5">
                    <ctl:message>FAILURE: Expected 5 sf:PrimitiveGeoFeature instances in response (<xsl:value-of select="$featureCount"/> were included)</ctl:message>
                    <ctl:fail/>
                  </xsl:if>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

        <test name="wfs:wfs-1.1.0-Basic-GetFeature-tc11.4">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>The following attributes are required for all XML request entities: @version (default '1.1.0'); @service (default 'WFS').</assertion>
      <comment>GetFeature with @version an empty string and @service='WFS', expecting version '1.1.0'.  Multiple versions may be implemented so generatees an exception.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is an wfs:FeatureCollection document.</comment>
      <link>wfs-1.1.0-Basic-atc9</link>
      <link>OGC 04-094, 7.8, p.24</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                   <method>post</method>
                                   <body>
                                           <wfs:GetFeature version="" service="WFS">
	<wfs:Query typeName="sf:PrimitiveGeoFeature" srsName="urn:ogc:def:crs:EPSG::4326"/>
</wfs:GetFeature>
                                   </body>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                                  <xsl:variable name="featureCount" select="count($request1//sf:PrimitiveGeoFeature)"/>
                  <xsl:if test="$featureCount lt 5">
                    <ctl:message>FAILURE: Expected 5 sf:PrimitiveGeoFeature instances in response (<xsl:value-of select="$featureCount"/> were included)</ctl:message>
                    <ctl:fail/>
                  </xsl:if>
                                </xsl:otherwise>
                        </xsl:choose>
                </code>
        </test>

        <test name="wfs:wfs-1.1.0-Basic-GetFeature-tc11.5">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>The following attributes are required for all XML request entities: @version (default '1.1.0'); @service (default 'WFS').</assertion>
      <comment>GetFeature with a version of '1.1.0' and a bogus service of 'FOO'.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is an ows:ExceptionReport document.</comment>
      <link>wfs-1.1.0-Basic-atc9</link>
      <link>OGC 04-094, 7.8, p.24</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                   <method>post</method>
                                   <body>
                                           <wfs:GetFeature version="1.1.0" service="FOO">
	<wfs:Query typeName="sf:PrimitiveGeoFeature" srsName="urn:ogc:def:crs:EPSG::4326"/>
</wfs:GetFeature>
                                   </body>
                                        <p:XMLValidatingParser.OWS/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                                  <ctl:call-test name="ctl:SchematronValidatingParser">
                            <ctl:with-param name="doc" select="$request1"/>
                            <ctl:with-param name="schema">sch/ows/1.0.0/ExceptionReport.sch</ctl:with-param>
                            <ctl:with-param name="phase">InvalidParameterValuePhase</ctl:with-param>
                      </ctl:call-test>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

        <test name="wfs:wfs-1.1.0-Basic-GetFeature-tc11.6">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>The following attributes are required for all XML request entities: @version (default '1.1.0'); @service (default 'WFS').</assertion>
      <comment>GetFeature with a bogus version of '2005.05.03' and a service of 'WFS'.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is an ows:ExceptionReport document.</comment>
      <link>wfs-1.1.0-Basic-atc9</link>
      <link>OGC 04-094, 7.8, p.24</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                   <method>post</method>
                                   <body>
                                           <wfs:GetFeature version="2005.05.03" service="WFS">
        <wfs:Query typeName="sf:PrimitiveGeoFeature" srsName="urn:ogc:def:crs:EPSG::4326"/>
</wfs:GetFeature>
                                   </body>
                                        <p:XMLValidatingParser.OWS/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                                  <ctl:call-test name="ctl:SchematronValidatingParser">
                            <ctl:with-param name="doc" select="$request1"/>
                            <ctl:with-param name="schema">sch/ows/1.0.0/ExceptionReport.sch</ctl:with-param>
                            <ctl:with-param name="phase">InvalidParameterValuePhase</ctl:with-param>
                      </ctl:call-test>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

        <test name="wfs:wfs-1.1.0-Basic-GetFeature-tc12.1">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>The Content-Type of all XML request entities must be 'application/xml'.</assertion>
      <comment>GetFeature with the encoding as 'application/xml' (default).  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is a wfs:FeatureCollection document.</comment>
      <link>wfs-1.1.0-Basic-atc11</link>
      <link>OGC 04-094, 6.5.1, p.13</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                   <method>post</method>
                                   <body>
                                           <wfs:GetFeature service="WFS" version="1.1.0">
	<wfs:Query typeName="sf:PrimitiveGeoFeature" srsName="urn:ogc:def:crs:EPSG::4326"/>
</wfs:GetFeature>
                                   </body>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                                        <xsl:variable name="expression">//wfs:FeatureCollection</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

        <test name="wfs:wfs-1.1.0-Basic-GetFeature-tc13.1">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>The @typeName attribute must identify a list of known feature types. Aliases may be declared for use in a filter expression.</assertion>
      <comment>GetFeature with a known typename in the query (from test data).  Note: no lists to be used as they are to be phased out in 1.2.0.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is a wfs:FeatureCollection document; (3)  there must be at least the requested features in the response.</comment>
      <link>wfs-1.1.0-Basic-GetFeature-atc7</link>
      <link>OGC 04-094, 9.2, p.35</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                   <method>post</method>
                                   <body>
                                           <wfs:GetFeature service="WFS" version="1.1.0">
	<wfs:Query typeName="sf:PrimitiveGeoFeature" srsName="urn:ogc:def:crs:EPSG::4326"/>
</wfs:GetFeature>
                                   </body>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                                        <xsl:variable name="expression">//wfs:FeatureCollection</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                        <xsl:variable name="expression">count(//sf:PrimitiveGeoFeature) &gt;= 4</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

        <test name="wfs:wfs-1.1.0-Basic-GetFeature-tc13.2">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>The @typeName attribute must identify a list of known feature types. Aliases may be declared for use in a filter expression.</assertion>
      <comment>GetFeature with an unknown typename in the query.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is a ows:ExceptionReport document.</comment>
      <link>wfs-1.1.0-Basic-GetFeature-atc7</link>
      <link>OGC 04-094, 9.2, p.35</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                   <method>post</method>
                                   <body>
                                           <wfs:GetFeature service="WFS" version="1.1.0">
	<wfs:Query xmlns:sf="http://www.opengis.net/ASDF" typeName="sf:Asdf" srsName="urn:ogc:def:crs:EPSG::4326"/>
</wfs:GetFeature>
                                   </body>
                                        <p:XMLValidatingParser.OWS/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                                        <xsl:variable name="expression">//ows:ExceptionReport</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

        <test name="wfs:wfs-1.1.0-Basic-GetFeature-tc14.1">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>The geometry representations in the response must correspond to the CRS specified in the @srsName attribute, or the service default if not specified or unknown. Use values as recommended in RFC 5165 (e.g. 'urn:ogc:def:crs:EPSG:6.10.2:4326').</assertion>
      <comment>GetFeature with the srs 'urn:ogc:def:crs:EPSG::4326'.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is a wfs:FeatureCollection document; (3)  the response srs must be that which was requested.</comment>
      <link>wfs-1.1.0-Basic-GetFeature-atc8</link>
      <link>OGC 04-094, 9.2, p.36</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                   <method>post</method>
                                   <body>
                                           <wfs:GetFeature service="WFS" version="1.1.0">
	<wfs:Query typeName="sf:PrimitiveGeoFeature" srsName="urn:ogc:def:crs:EPSG::4326"/>
</wfs:GetFeature>
                                   </body>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                                  <xsl:variable name="featureCount" select="count($request1//sf:PrimitiveGeoFeature)"/>
                  <xsl:if test="$featureCount lt 5">
                    <ctl:message>FAILURE: Expected 5 sf:PrimitiveGeoFeature instances in response (<xsl:value-of select="$featureCount"/> were included)</ctl:message>
                    <ctl:fail/>
                  </xsl:if>
                                  <xsl:variable name="expression">//@srsName='urn:ogc:def:crs:EPSG::4326'</xsl:variable>
                                  <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                  </ctl:call-test>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

        <test name="wfs:wfs-1.1.0-Basic-GetFeature-tc14.2">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>The geometry representations in the response must correspond to the CRS specified in the @srsName attribute, or the service default if not specified or unknown. Use values as recommended in RFC 5165 (e.g. 'urn:ogc:def:crs:EPSG:6.10.2:4326').</assertion>
      <comment>GetFeature with the bogus srs 'urn:ogc:def:crs:EPSG:9.99.9:99999'.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is a ows:ExceptionReport document.</comment>
      <link>wfs-1.1.0-Basic-GetFeature-atc8</link>
      <link>OGC 04-094, 9.2, p.36</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                   <method>post</method>
                                   <body>
                                           <wfs:GetFeature service="WFS" version="1.1.0">
        <wfs:Query typeName="sf:PrimitiveGeoFeature" srsName="urn:ogc:def:crs:EPSG:9.99.9:99999"/>
</wfs:GetFeature>
                                   </body>
                                        <p:XMLValidatingParser.OWS/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                                  <xsl:variable name="expression">//ows:ExceptionReport</xsl:variable>
                                  <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                  </ctl:call-test>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

        <test name="wfs:wfs-1.1.0-Basic-GetFeature-tc15.1">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>The resulting feature collection must contain only those features that satisfy the specified constraints, or all instances of the requested types if no filter expression is provided.</assertion>
      <comment>GetFeature looking for a feature by gml:name.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is a wfs:FeatureCollection document; (3)  the response must contain the feature requested.</comment>
      <link>wfs-1.1.0-Basic-GetFeature-atc9</link>
      <link>OGC 04-094, 9.2, p.37</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                   <method>post</method>
                                   <body>
                                           <wfs:GetFeature service="WFS" version="1.1.0">
	<wfs:Query typeName="sf:PrimitiveGeoFeature" srsName="urn:ogc:def:crs:EPSG::4326">
		<ogc:Filter>
			<ogc:PropertyIsEqualTo>
				<ogc:PropertyName>gml:name</ogc:PropertyName>
				<ogc:Literal>name-f002</ogc:Literal>
			</ogc:PropertyIsEqualTo>
		</ogc:Filter>
	</wfs:Query>
</wfs:GetFeature>
                                   </body>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                                        <xsl:variable name="expression">//wfs:FeatureCollection</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                        <xsl:variable name="expression">(count(//gml:featureMember) + count(//gml:featureMembers/*)) &gt;= 1</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                        <xsl:variable name="expression">//sf:PrimitiveGeoFeature/gml:name = 'name-f002'</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

        <test name="wfs:wfs-1.1.0-Basic-GetFeature-tc15.2">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>The resulting feature collection must contain only those features that satisfy the specified constraints, or all instances of the requested types if no filter expression is provided.</assertion>
      <comment>GetFeature looking for all feature with all properties except sf:uriProperty.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is a wfs:FeatureCollection document; (3)  the response must contain the features requested; (4) the result features must not contain any optional properties not specified in the propertyNames of the request.</comment>
      <link>wfs-1.1.0-Basic-GetFeature-atc9</link>
      <link>OGC 04-094, 9.2, p.37</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                   <method>post</method>
                                   <body>
                                           <wfs:GetFeature service="WFS" version="1.1.0">
	<wfs:Query typeName="sf:PrimitiveGeoFeature" srsName="urn:ogc:def:crs:EPSG::4326">
		<wfs:PropertyName>sf:dateProperty</wfs:PropertyName>
		<wfs:PropertyName>sf:dateTimeProperty</wfs:PropertyName>
	</wfs:Query>
</wfs:GetFeature>
                                   </body>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                                        <xsl:variable name="expression">//wfs:FeatureCollection</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                        <xsl:variable name="expression">(count(//gml:featureMember) + count(//gml:featureMembers/*)) &gt;= 4</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                        <xsl:variable name="expression">not(//sf:uriProperty)</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

        <test name="wfs:wfs-1.1.0-Basic-GetFeature-tc15.3">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>The resulting feature collection must contain only those features that satisfy the specified constraints, or all instances of the requested types if no filter expression is provided.</assertion>
      <comment>GetFeature looking for a feature by type (sf:PrimitiveGeoFeature and sf:EntitéGénérique).  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is a wfs:FeatureCollection document; (3)  the response must only contain the features requested.</comment>
      <link>wfs-1.1.0-Basic-GetFeature-atc9</link>
      <link>OGC 04-094, 9.2, p.37</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                   <method>post</method>
                                   <body>
                                           <wfs:GetFeature service="WFS" version="1.1.0">
	<wfs:Query typeName="sf:PrimitiveGeoFeature" srsName="urn:ogc:def:crs:EPSG::4326"/>
	<wfs:Query typeName="sf:EntitéGénérique" srsName="urn:ogc:def:crs:EPSG::4326"/>
</wfs:GetFeature>
                                   </body>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                                        <xsl:variable name="expression">//wfs:FeatureCollection</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                        <xsl:variable name="expression">(count(//gml:featureMember) + count(//gml:featureMembers/*)) &gt;= 6</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                        <xsl:variable name="expression">not(//sf:AggregateGeoFeature)</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

<test name="wfs:wfs-1.1.0-Basic-GetFeature-tc16.1">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>All OGC web services must generate an exception report in response to an invalid request or whenever a condition arises that prevents request processing. A valid XML response entity must conform to the declaration of the ows:ExceptionReport element.  The values of common information items must be constrained as indicated in Tables 17-19. Additional service-specific exception codes may be defined as needed.</assertion>
      <comment>GetFeature with a bogus version '11-02-2006', causing the InvalidParameterValue exception.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is a ows:ExceptionReport document; (3)  the exception must have the 'OperationNotSupported' exception code; (4) the exception must have the @locator value of the unsupported operation ('GetFeature').</comment>
      <link>ows-1.0.0-exception-atc1</link>
      <link>OGC 05-008c1, 8.3, p.34</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                        <method>post</method>
                                        <body>
                                                <wfs:GetFeature version="11-02-2006" service="WFS">
	<wfs:Query typeName="sf:PrimitiveGeoFeature" srsName="urn:ogc:def:crs:EPSG::4326"/>
</wfs:GetFeature>
                                        </body>
                                        <p:XMLValidatingParser.OWS/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                                        <ctl:call-test name="ctl:SchematronValidatingParser">
                                                <ctl:with-param name="doc" select="$request1"/>
                                                <ctl:with-param name="schema">sch/ows/1.0.0/ExceptionReport.sch</ctl:with-param>
                                                <ctl:with-param name="phase">InvalidParameterValuePhase</ctl:with-param>
                                        </ctl:call-test>
                    <xsl:if test="not(lower-case($request1//ows:Exception/@locator) = 'version')">
                      <ctl:message>
                      FAILURE: ows:Exception/@locator is absent or does not identify the invalid version attribute.
                      </ctl:message>
                      <ctl:fail/>
                    </xsl:if>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

<test name="wfs:wfs-1.1.0-Basic-GetFeature-tc16.2">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>All OGC web services must generate an exception report in response to an invalid request or whenever a condition arises that prevents request processing. A valid XML response entity must conform to the declaration of the ows:ExceptionReport element.  The values of common information items must be constrained as indicated in Tables 17-19. Additional service-specific exception codes may be defined as needed.</assertion>
      <comment>GetFeature with a bogus operation 'GetFeatureLOL', causing the OperationNotSupprted exception.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is a ows:ExceptionReport document; (3) the exception must have the 'OperationNotSupported' exception code; (4) the exception must have the @locator value of the unsupported operation ('GetFeatureLOL').</comment>
      <link>ows-1.0.0-exception-atc1</link>
      <link>OGC 05-008c1, 8.3, p.34</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                        <method>post</method>
                                        <body>
                                                <wfs:GetFeatureLOL service="WFS" version="1.1.0">
	<wfs:Query typeName="sf:PrimitiveGeoFeature" srsName="urn:ogc:def:crs:EPSG::4326"/>
</wfs:GetFeatureLOL>
                                                </body>
                                        <p:XMLValidatingParser.OWS/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                                        <ctl:call-test name="ctl:SchematronValidatingParser">
                                                <ctl:with-param name="doc" select="$request1"/>
                                                <ctl:with-param name="schema">sch/ows/1.0.0/ExceptionReport.sch</ctl:with-param>
                                                <ctl:with-param name="phase">OperationNotSupportedPhase</ctl:with-param>
                                        </ctl:call-test>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

        <test name="wfs:wfs-1.1.0-Basic-GetFeature-tc16.3">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>All OGC web services must generate an exception report in response to an invalid request or whenever a condition arises that prevents request processing. A valid XML response entity must conform to the declaration of the ows:ExceptionReport element.  The values of common information items must be constrained as indicated in Tables 17-19. Additional service-specific exception codes may be defined as needed.</assertion>
      <comment>GetFeature with query element in the incorrect namespace, causing the MissingParameterValue exception.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is a ows:ExceptionReport document; (3) the exception must have the 'MissingParameterValue' exception code.</comment>
      <link>ows-1.0.0-exception-atc1</link>
      <link>OGC 05-008c1, 8.3, p.34</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                        <method>post</method>
                                        <body>
                                                <wfs:GetFeature service="WFS" version="1.1.0">
	<sf:Query typeName="sf:PrimitiveGeoFeature" srsName="urn:ogc:def:crs:EPSG::4326"/>
</wfs:GetFeature>
                                        </body>
                                        <p:XMLValidatingParser.OWS/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                                <xsl:when test="$request1//@exceptionCode='MissingParameterValue'">
                                        <ctl:call-test name="ctl:SchematronValidatingParser">
                                                <ctl:with-param name="doc" select="$request1"/>
                                                <ctl:with-param name="schema">sch/ows/1.0.0/ExceptionReport.sch</ctl:with-param>
                                                <ctl:with-param name="phase">MissingParameterValuePhase</ctl:with-param>
                                        </ctl:call-test>
                            </xsl:when>
                            <xsl:otherwise>
                                        <ctl:call-test name="ctl:SchematronValidatingParser">
                                                <ctl:with-param name="doc" select="$request1"/>
                                                <ctl:with-param name="schema">sch/ows/1.0.0/ExceptionReport.sch</ctl:with-param>
                                                <ctl:with-param name="phase">InvalidParameterValuePhase</ctl:with-param>
                                        </ctl:call-test>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

        <test name="wfs:wfs-1.1.0-Basic-GetFeature-tc16.4">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>All OGC web services must generate an exception report in response to an invalid request or whenever a condition arises that prevents request processing. A valid XML response entity must conform to the declaration of the ows:ExceptionReport element.  The values of common information items must be constrained as indicated in Tables 17-19. Additional service-specific exception codes may be defined as needed.</assertion>
      <comment>GetFeature with a bogus 'Smuery' element, causing the InvalidParameterValue exception.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is a ows:ExceptionReport document; (3)  the exception must have the 'InvalidParameterValue' exception code.</comment>
      <link>ows-1.0.0-exception-atc1</link>
      <link>OGC 05-008c1, 8.3, p.34</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                        <method>post</method>
                                        <body>
                                                <wfs:GetFeature service="WFS" version="1.1.0">
	<wfs:Query typeName="sf:PrimitiveGeoFeature" srsName="urn:ogc:def:crs:EPSG::4326"/>
	<wfs:Smuery typeName="sf:PrimitiveGeoFeature" srsName="urn:ogc:def:crs:EPSG::4326"/>
</wfs:GetFeature>
                                        </body>
                                        <p:XMLValidatingParser.OWS/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                                        <ctl:call-test name="ctl:SchematronValidatingParser">
                                                <ctl:with-param name="doc" select="$request1"/>
                                                <ctl:with-param name="schema">sch/ows/1.0.0/ExceptionReport.sch</ctl:with-param>
                                                <ctl:with-param name="phase">InvalidParameterValuePhase</ctl:with-param>
                                        </ctl:call-test>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

        <test name="wfs:wfs-1.1.0-Basic-GetFeature-tc17.1">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>A reference to a coordinate reference system (CRS) shall be a URI value that conforms to a known URI scheme. Provide a URL for definitions that can be accessed from an online source; otherwise provide a URN that SHOULD conform to the syntax described in RFC 5165.</assertion>
      <comment>GetFeature with the srs as a URN.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is a wfs:FeatureCollection document; (3) the response must use the srs that was requested.</comment>
      <link>ows-1.0.0-common-atc6</link>
      <link>OGC 05-008c1, 10.3.1, p.43</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                        <method>post</method>
                                        <body>
                                                <wfs:GetFeature service="WFS" version="1.1.0">
	<wfs:Query typeName="sf:PrimitiveGeoFeature" srsName="urn:ogc:def:crs:EPSG::4326"/>
</wfs:GetFeature>
                                        </body>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                                        <xsl:variable name="expression">//wfs:FeatureCollection</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                        <xsl:variable name="expression">//@srsName='urn:ogc:def:crs:EPSG::4326'</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

        <test name="wfs:wfs-1.1.0-Basic-GetFeature-tc17.2">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>A reference to a coordinate reference system (CRS) shall be a URI value that conforms to a known URI scheme. Provide a URL for definitions that can be accessed from an online source; otherwise provide a URN that SHOULD conform to the syntax described in RFC 5165.</assertion>
      <comment>GetFeature with the srs as a URI (not valid, only as a URN).  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is a ows:ExceptionReport document.</comment>
      <link>ows-1.0.0-common-atc6</link>
      <link>OGC 05-008c1, 10.3.1, p.43</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                        <method>post</method>
                                        <body>
                        <wfs:GetFeature service="WFS" version="1.1.0">
	<wfs:Query typeName="sf:PrimitiveGeoFeature" srsName="http://www.epsg.org/6.11.2/4326"/>
</wfs:GetFeature>
                                        </body>
                                        <p:XMLValidatingParser.OWS/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                                        <xsl:variable name="expression">//ows:ExceptionReport</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

   <test name="wfs:wfs-1.1.0-Basic-GetFeature-tc18.1">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>The Content-Type of all POST KVP-encoded request entities must be 'application/x-www-form-urlencoded'.</assertion>
      <comment>GetFeature KVP over POST, with the request encoded as 'application/x-www-form-urlencoded'.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is a wfs:FeatureCollection document.</comment>
      <link>wfs-1.1.0-Basic-atc7</link>
      <link>OGC 04-094, 6.5.1, p.13</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                        <method>post</method>
                                        <param name="service">WFS</param>
                                        <param name="version">1.1.0</param>
                                        <param name="request">GetFeature</param>
                                        <param name="typename">sf:PrimitiveGeoFeature</param>
                                        <param name="namespace">xmlns(sf=http://cite.opengeospatial.org/gmlsf)</param>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                    <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                                <ctl:fail/>
                                 </xsl:when>
                                 <xsl:otherwise>
                                        <xsl:variable name="expression">//wfs:FeatureCollection</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

        <test name="wfs:wfs-1.1.0-Basic-GetFeature-tc19.1">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>Qualified property names must conform to the QName production rule defined in the Namespaces in XML specification http://www.w3.org/TR/REC-xml-names/. QName ::= (Prefix ':')? LocalPart.</assertion>
      <comment>GetFeature with a properly qualified property name 'gml:name'.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is a wfs:FeatureCollection document; (3)  the response must contain the feature that was requested.</comment>
      <link>filter-1.1.0-common-atc1</link>
      <link>OGC 04-095, 6.2, p.4</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                        <method>post</method>
                                        <body>
                                                <wfs:GetFeature service="WFS" version="1.1.0">
	<wfs:Query typeName="sf:PrimitiveGeoFeature" srsName="urn:ogc:def:crs:EPSG::4326">
		<ogc:Filter>
			<ogc:PropertyIsEqualTo>
				<ogc:PropertyName>gml:name</ogc:PropertyName>
				<ogc:Literal>name-f003</ogc:Literal>
			</ogc:PropertyIsEqualTo>
		</ogc:Filter>
	</wfs:Query>
</wfs:GetFeature>
                                        </body>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                                        <xsl:variable name="expression">//wfs:FeatureCollection</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                        <xsl:variable name="expression">(count(//gml:featureMember) + count(//gml:featureMembers/*)) &gt;= 1</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                        <xsl:variable name="expression">//gml:name = 'name-f003'</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

        <test name="wfs:wfs-1.1.0-Basic-GetFeature-tc19.2">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>Qualified property names must conform to the QName production rule defined in the Namespaces in XML specification http://www.w3.org/TR/REC-xml-names/. QName ::= (Prefix ':')? LocalPart.</assertion>
      <comment>GetFeature with a properly qualified property name 'gml:name', yet an incorrect namespace binding for gml casuing an exception.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is a ows:ExceptionReport document.</comment>
      <link>filter-1.1.0-common-atc1</link>
      <link>OGC 04-095, 6.2, p.4</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                        <method>post</method>
                                        <body>
                                                <wfs:GetFeature service="WFS" version="1.1.0">
	<wfs:Query typeName="sf:PrimitiveGeoFeature" srsName="urn:ogc:def:crs:EPSG::4326">
		<ogc:Filter>
			<ogc:PropertyIsEqualTo>
				<ogc:PropertyName xmlns:gml="http://www.opengis.net/ASDF">gml:name</ogc:PropertyName>
				<ogc:Literal>name-f003</ogc:Literal>
			</ogc:PropertyIsEqualTo>
		</ogc:Filter>
	</wfs:Query>
</wfs:GetFeature>
                                        </body>
                                        <p:XMLValidatingParser.OWS/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                                        <xsl:variable name="expression">//ows:ExceptionReport</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

        <test name="wfs:wfs-1.1.0-Basic-GetFeature-tc20.1">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>A valid filter expression must conform to the content model declared for the ogc:Filter element.</assertion>
      <comment>GetFeature with a proper filter element'.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is a wfs:FeatureCollection document; (3)  the response must contain the features that were requested (one or more).</comment>
      <link>filter-1.1.0-common-atc3</link>
      <link>OGC 04-095, 7.2, p.9</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                        <method>post</method>
                                        <body>
                                                <wfs:GetFeature service="WFS" version="1.1.0">
	<wfs:Query typeName="sf:PrimitiveGeoFeature" srsName="urn:ogc:def:crs:EPSG::4326">
		<ogc:Filter>
			<ogc:PropertyIsGreaterThan>
				<ogc:PropertyName>sf:intProperty</ogc:PropertyName>
				<ogc:Literal>100</ogc:Literal>
			</ogc:PropertyIsGreaterThan>
		</ogc:Filter>
	</wfs:Query>
</wfs:GetFeature>
                                        </body>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                                        <xsl:variable name="expression">//wfs:FeatureCollection</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                        <xsl:variable name="expression">(count(//gml:featureMember) + count(//gml:featureMembers/*)) &gt;= 1</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

        <test name="wfs:wfs-1.1.0-Basic-GetFeature-tc21.1">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>XPath 1.0 shall be used to address parts of an XML representation using ogc:PropertyName. Support for the AbbreviatedRelativeLocationPath construct is required; the position() function may appear in a predicate to refer to a child node by position relative to the context node.</assertion>
      <comment>GetFeature using the abbreviated local path predicate.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is a wfs:FeatureCollection document; (3)  the response must contain the feature that was requested.</comment>
      <link>filter-1.1.0-common-atc2</link>
      <link>OGC 04-095, 6.3.2, p.5</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                   <method>post</method>
                                   <body>
                                           <wfs:GetFeature version="1.1.0" service="WFS">
        <wfs:Query typeName="sf:PrimitiveGeoFeature" srsName="urn:ogc:def:crs:EPSG::4326">
                <ogc:Filter>
                        <ogc:PropertyIsEqualTo>
                                <ogc:PropertyName>gml:description</ogc:PropertyName>
                                <ogc:Literal>description-f008</ogc:Literal>
                        </ogc:PropertyIsEqualTo>
                </ogc:Filter>
        </wfs:Query>
</wfs:GetFeature>
                                        </body>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                                        <xsl:variable name="expression">//wfs:FeatureCollection</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                        <xsl:variable name="expression">(count(//gml:featureMember) + count(//gml:featureMembers/*)) &gt;= 1</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                        <xsl:variable name="expression">//gml:description = 'description-f008'</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

        <test name="wfs:wfs-1.1.0-Basic-GetFeature-tc21.2">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>XPath 1.0 shall be used to address parts of an XML representation using ogc:PropertyName. Support for the AbbreviatedRelativeLocationPath construct is required; the position() function may appear in a predicate to refer to a child node by position relative to the context node.</assertion>
      <comment>GetFeature with a filter using the simplified position predicate ('[n]').  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is an wfs:FeatureCollection document; (3) the requested feature is in the response as expected.</comment>
      <link>filter-1.1.0-common-atc2</link>
      <link>OGC 04-095, 6.3.2, p.5</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                   <method>post</method>
                                   <body>
                                           <wfs:GetFeature version="1.1.0" service="WFS">
        <wfs:Query typeName="sf:PrimitiveGeoFeature" srsName="urn:ogc:def:crs:EPSG::4326">
                <ogc:Filter>
                        <ogc:PropertyIsEqualTo>
                                <ogc:PropertyName>gml:description[1]</ogc:PropertyName>
                                <ogc:Literal>description-f001</ogc:Literal>
                        </ogc:PropertyIsEqualTo>
                </ogc:Filter>
        </wfs:Query>
</wfs:GetFeature>
                                        </body>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                                        <xsl:variable name="expression">//wfs:FeatureCollection</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                        <xsl:variable name="expression">(count(//gml:featureMember) + count(//gml:featureMembers/*)) &gt;= 1</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                        <xsl:variable name="expression">//gml:description = 'description-f001'</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

        <test name="wfs:wfs-1.1.0-Basic-GetFeature-tc21.3">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>XPath 1.0 shall be used to address parts of an XML representation using ogc:PropertyName. Support for the AbbreviatedRelativeLocationPath construct is required; the position() function may appear in a predicate to refer to a child node by position relative to the context node.</assertion>
      <comment>GetFeature with a filter using the position predicate ('[position()==1]').  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is an wfs:FeatureCollection document; (3) the requested feature is in the response as expected.</comment>
      <link>filter-1.1.0-common-atc2</link>
      <link>OGC 04-095, 6.3.2, p.5</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                   <method>post</method>
                                   <body>
                                           <wfs:GetFeature version="1.1.0" service="WFS">
        <wfs:Query typeName="sf:PrimitiveGeoFeature" srsName="urn:ogc:def:crs:EPSG::4326">
                <ogc:Filter>
                        <ogc:PropertyIsEqualTo>
                                <ogc:PropertyName>gml:description[1]</ogc:PropertyName>
                                <ogc:Literal>description-f001</ogc:Literal>
                        </ogc:PropertyIsEqualTo>
                </ogc:Filter>
        </wfs:Query>
</wfs:GetFeature>
                                        </body>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                                        <xsl:variable name="expression">//wfs:FeatureCollection</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                        <xsl:variable name="expression">(count(//gml:featureMember) + count(//gml:featureMembers/*)) &gt;= 1</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                        <xsl:variable name="expression">//gml:description = 'description-f001'</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

        <test name="wfs:wfs-1.1.0-Basic-GetFeature-tc22.1">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>An ogc:Literal element may include simple or complex content. If a child element appears it may belong to any target namespace, but a top-level declaration for the item must be available.</assertion>
      <comment>GetFeature with a literal value of type string ('description-f02').  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is an wfs:FeatureCollection document; (3) the requested feature is in the response as expected.</comment>
      <link>filter-1.1.0-common-atc4</link>
      <link>OGC 04-095, 14.2, p.17</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                   <method>post</method>
                                   <body>
                                           <wfs:GetFeature version="1.1.0" service="WFS">
	<wfs:Query typeName="sf:PrimitiveGeoFeature" srsName="urn:ogc:def:crs:EPSG::4326">
		<ogc:Filter>
			<ogc:PropertyIsEqualTo>
				<ogc:PropertyName>gml:name</ogc:PropertyName>
				<ogc:Literal>name-f002</ogc:Literal>
			</ogc:PropertyIsEqualTo>
		</ogc:Filter>
	</wfs:Query>
</wfs:GetFeature>
                                        </body>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                                        <xsl:variable name="expression">//wfs:FeatureCollection</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                        <xsl:variable name="expression">(count(//gml:featureMember) + count(//gml:featureMembers/*)) &gt;= 1</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                        <xsl:variable name="expression">//gml:name = 'name-f002'</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

        <test name="wfs:wfs-1.1.0-Basic-GetFeature-tc22.2">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>An ogc:Literal element may include simple or complex content. If a child element appears it may belong to any target namespace, but a top-level declaration for the item must be available.</assertion>
      <comment>GetFeature with a literal value of complex type.  No features are expected, but no exception either.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is an wfs:FeatureCollection document; (3) the response should have no feature members.</comment>
      <link>filter-1.1.0-common-atc4</link>
      <link>OGC 04-095, 14.2, p.17</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                   <method>post</method>
                                   <body>
                                           <wfs:GetFeature version="1.1.0" service="WFS">
	<wfs:Query typeName="sf:PrimitiveGeoFeature" srsName="urn:ogc:def:crs:EPSG::4326">
		<ogc:Filter>
			<ogc:PropertyIsEqualTo>
				<ogc:PropertyName>gml:name</ogc:PropertyName>
				<ogc:Literal>
					<wfs:Native vendorId="ASDF" safeToIgnore="true"/>
				</ogc:Literal>
			</ogc:PropertyIsEqualTo>
		</ogc:Filter>
	</wfs:Query>
</wfs:GetFeature>
                                        </body>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                                        <xsl:variable name="expression">//wfs:FeatureCollection</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                        <xsl:variable name="expression">(count(//gml:featureMember) + count(//gml:featureMembers/*)) = 0</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

        <test name="wfs:wfs-1.1.0-Basic-GetFeature-tc25.1">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>An unsupported CRS shall generate an exception report.</assertion>
      <comment>GetFeature with a a bogus CRS 'urn:ogc:def:crs:ASDF:9.99:9999'.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is an ows:ExceptionReport document.</comment>
      <link>filter-</link>
      <link>OGC 04-095, 8.3, p.12</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                   <method>post</method>
                                   <body>
                                           <wfs:GetFeature version="1.1.0" service="WFS">
        <wfs:Query typeName="sf:PrimitiveGeoFeature">
                <ogc:Filter>
                        <ogc:BBOX>
                                <ogc:PropertyName>sf:pointProperty</ogc:PropertyName>
                                <gml:Envelope srsName="urn:ogc:def:crs:ASDF:9.99:9999">
                                        <gml:lowerCorner>47.0 -4.5</gml:lowerCorner>
                                        <gml:upperCorner>52.0 1.0</gml:upperCorner>
                                </gml:Envelope>
                        </ogc:BBOX>
                </ogc:Filter>
        </wfs:Query>
</wfs:GetFeature>
                                        </body>
                                        <p:XMLValidatingParser.OWS/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                                        <xsl:variable name="expression">//ows:ExceptionReport</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

        <test name="wfs:wfs-1.1.0-Basic-GetFeature-tc27.1">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>The ogc:PropertyName element in any spatial predicate must refer to a geometry-valued property and the supplied literal geometry value must be in the gml:_Geometry substitution group.</assertion>
      <comment>GetFeature with a spatial property name, on a BBOX query.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is an wfs:FeatureCollection document; (3) the response should have the requested features.</comment>
      <link>filter-1.1.0-spatial-atc1</link>
      <link>OGC 04-095, 8.2, p.10</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                   <method>post</method>
                                   <body>
                                           <wfs:GetFeature version="1.1.0" service="WFS">
	<wfs:Query typeName="sf:PrimitiveGeoFeature">
		<ogc:Filter>
			<ogc:BBOX>
				<ogc:PropertyName>sf:pointProperty</ogc:PropertyName>
				<gml:Envelope srsName="urn:ogc:def:crs:EPSG::4326">
					<gml:lowerCorner>57.0 -4.5</gml:lowerCorner>
					<gml:upperCorner>62.0 1.0</gml:upperCorner>
				</gml:Envelope>
			</ogc:BBOX>
		</ogc:Filter>
	</wfs:Query>
</wfs:GetFeature>
                                        </body>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                    <xsl:variable name="featureCount" select="count($request1//sf:PrimitiveGeoFeature)"/>
                    <xsl:if test="$featureCount != 1">
                      <ctl:message>FAILURE: Expected one sf:PrimitiveGeoFeature instance in response (<xsl:value-of select="$featureCount"/> features included)</ctl:message>
                      <ctl:fail/>
                    </xsl:if>
                    <xsl:if test="not($request1//sf:PrimitiveGeoFeature/gml:name = 'name-f002')">
                      <ctl:message>FAILURE: Missing feature (gml:name="name-f002").</ctl:message>
                      <ctl:fail/>
                    </xsl:if>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

        <test name="wfs:wfs-1.1.0-Basic-GetFeature-tc27.2">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>The ogc:PropertyName element in any spatial predicate must refer to a geometry-valued property and the supplied literal geometry value must be in the gml:_Geometry substitution group.</assertion>
      <comment>GetFeature with an integer property name, on a BBOX query, causing an exception.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is an ows:ExceptionReport document.</comment>
      <link>filter-1.1.0-spatial-atc1</link>
      <link>OGC 04-095, 8.2, p.10</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                   <method>post</method>
                                   <body>
                                           <wfs:GetFeature version="1.1.0" service="WFS">
	<wfs:Query typeName="sf:PrimitiveGeoFeature">
		<ogc:Filter>
			<ogc:BBOX>
				<ogc:PropertyName>sf:intProperty</ogc:PropertyName>
				<gml:Envelope srsName="urn:ogc:def:crs:EPSG::4326">
					<gml:lowerCorner>47.0 -4.5</gml:lowerCorner>
					<gml:upperCorner>52.0 1.0</gml:upperCorner>
				</gml:Envelope>
			</ogc:BBOX>
		</ogc:Filter>
	</wfs:Query>
</wfs:GetFeature>
                                        </body>
                                        <p:XMLValidatingParser.OWS/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                                        <xsl:variable name="expression">//ows:ExceptionReport</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

        <test name="wfs:wfs-1.1.0-Basic-GetFeature-tc28.1">
      <param name="wfs.GetFeature.post.url"/>
      <param name="wfs.PrimitiveGeoFeature.DefaultSRS"/>
      <assertion>If the @srsName of the Query is unspecified, it shall be handled as if it corresponded to the advertised default CRS.</assertion>
      <comment>GetFeature spatial query, with no srsName specified, the default is expected (from the capabilities document).  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is an wfs:FeatureCollection document; (3) the response shall use the default srs value from the capabilities document.</comment>
      <link>filter-1.1.0-spatial-atc3</link>
      <link>OGC 04-095, 8.3, p.12</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                   <method>post</method>
                                   <body>
                                           <wfs:GetFeature version="1.1.0" service="WFS">
        <wfs:Query typeName="sf:PrimitiveGeoFeature">
                <ogc:Filter>
                        <ogc:BBOX>
                                <ogc:PropertyName>sf:pointProperty</ogc:PropertyName>
                                <gml:Envelope srsName="urn:ogc:def:crs:EPSG::4326">
                                        <gml:lowerCorner>37.0 -2.5</gml:lowerCorner>
                                        <gml:upperCorner>42.0 2.5</gml:upperCorner>
                                </gml:Envelope>
                        </ogc:BBOX>
                </ogc:Filter>
        </wfs:Query>
</wfs:GetFeature>
                                        </body>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                    <xsl:if test="not($request1//sf:PrimitiveGeoFeature/gml:name = 'name-f001')">
                      <ctl:message>FAILURE: Missing feature (gml:name="name-f001").</ctl:message>
                      <ctl:fail/>
                    </xsl:if>
                    <xsl:for-each select="$request1//@srsName">
                      <xsl:if test=". != $wfs.PrimitiveGeoFeature.DefaultSRS">
                                                <ctl:message>FAILURE: @srsName="<xsl:value-of select="."/>" does not match expected DefaultSRS (<xsl:value-of select="$wfs.PrimitiveGeoFeature.DefaultSRS"/>)</ctl:message>
                                                <ctl:fail/>
                                          </xsl:if>
                    </xsl:for-each>
                                </xsl:otherwise>
                        </xsl:choose>
                </code>
        </test>

        <test name="wfs:wfs-1.1.0-Basic-GetFeature-tc29.1">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>Correctly evaluate the BBOX predicate (equivalent to ogc:Intersects with a gml:Envelope argument) expressed by a valid ogc:BBOX element</assertion>
      <comment>GetFeature spatial query for a BBOX around a feature.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is an wfs:FeatureCollection document; (3) the response shall have the feature member expected from the request.</comment>
      <link>filter-1.1.0-spatial-</link>
      <link>OGC 04-095, 8.2, p.10</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                   <method>post</method>
                                   <body>
                                           <wfs:GetFeature version="1.1.0" service="WFS">
	<wfs:Query typeName="sf:PrimitiveGeoFeature">
		<ogc:Filter>
			<ogc:BBOX>
				<ogc:PropertyName>sf:pointProperty</ogc:PropertyName>
				<gml:Envelope srsName="urn:ogc:def:crs:EPSG::4326">
					<gml:lowerCorner>39.63245 1.90342</gml:lowerCorner>
					<gml:upperCorner>39.83245 2.10342</gml:upperCorner>
				</gml:Envelope>
			</ogc:BBOX>
		</ogc:Filter>
	</wfs:Query>
</wfs:GetFeature>
                                        </body>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                                        <xsl:variable name="expression">//wfs:FeatureCollection</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                        <xsl:variable name="expression">(count(//gml:featureMember) + count(//gml:featureMembers/*)) &gt;= 1</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

        <test name="wfs:wfs-1.1.0-Basic-GetFeature-tc29.2">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>Correctly evaluate the BBOX predicate (equivalent to ogc:Intersects with a gml:Envelope argument) expressed by a valid ogc:BBOX element</assertion>
      <comment>GetFeature spatial query for a BBOX touching a feature.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is an wfs:FeatureCollection document; (3) the response shall have the feature member expected from the request.</comment>
      <link>filter-1.1.0-spatial-</link>
      <link>OGC 04-095, 8.2, p.10</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                   <method>post</method>
                                   <body>
                                           <wfs:GetFeature version="1.1.0" service="WFS">
	<wfs:Query typeName="sf:PrimitiveGeoFeature">
		<ogc:Filter>
			<ogc:BBOX>
				<ogc:PropertyName>sf:pointProperty</ogc:PropertyName>
				<gml:Envelope srsName="urn:ogc:def:crs:EPSG::4326">
					<gml:lowerCorner>39.63245 1.90342</gml:lowerCorner>
					<gml:upperCorner>39.73245 2.00342</gml:upperCorner>
				</gml:Envelope>
			</ogc:BBOX>
		</ogc:Filter>
	</wfs:Query>
</wfs:GetFeature>
                                        </body>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                                        <xsl:variable name="expression">//wfs:FeatureCollection</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                        <xsl:variable name="expression">(count(//gml:featureMember) + count(//gml:featureMembers/*)) &gt;= 1</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

        <test name="wfs:wfs-1.1.0-Basic-GetFeature-tc29.3">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>Correctly evaluate the BBOX predicate (equivalent to ogc:Intersects with a gml:Envelope argument) expressed by a valid ogc:BBOX element</assertion>
      <comment>GetFeature spatial query for a BBOX with no features in it (0,0 0.01,0.01).  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is an wfs:FeatureCollection document; (3) the response shall not have any feature members.</comment>
      <link>filter-1.1.0-spatial-</link>
      <link>OGC 04-095, 8.2, p.10</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                   <method>post</method>
                                   <body>
                                           <wfs:GetFeature version="1.1.0" service="WFS">
	<wfs:Query typeName="sf:PrimitiveGeoFeature">
		<ogc:Filter>
			<ogc:BBOX>
				<ogc:PropertyName>sf:pointProperty</ogc:PropertyName>
				<gml:Envelope srsName="urn:ogc:def:crs:EPSG::4326">
					<gml:lowerCorner>0 0</gml:lowerCorner>
					<gml:upperCorner>0.01 0.01</gml:upperCorner>
				</gml:Envelope>
			</ogc:BBOX>
		</ogc:Filter>
	</wfs:Query>
</wfs:GetFeature>
                                        </body>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                                        <xsl:variable name="expression">//wfs:FeatureCollection</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                        <xsl:variable name="expression">(count(//gml:featureMember) + count(//gml:featureMembers/*)) = 0</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

        <test name="wfs:wfs-1.1.0-Basic-GetFeature-tc29.4">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>Correctly evaluate the BBOX predicate (equivalent to ogc:Intersects with a gml:Envelope argument) expressed by a valid ogc:BBOX element</assertion>
      <comment>GetFeature spatial query for a BBOX around a number of different feature.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is an wfs:FeatureCollection document; (3) the response shall have the exact number of features in that BBOX requested.</comment>
      <link>filter-1.1.0-spatial-</link>
      <link>OGC 04-095, 8.2, p.10</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                   <method>post</method>
                                   <body>
                                           <wfs:GetFeature version="1.1.0" service="WFS">
	<wfs:Query typeName="sf:PrimitiveGeoFeature">
		<ogc:Filter>
			<ogc:BBOX>
				<ogc:PropertyName>sf:pointProperty</ogc:PropertyName>
				<gml:Envelope srsName="urn:ogc:def:crs:EPSG::4326">
					<gml:lowerCorner>50 -15</gml:lowerCorner>
					<gml:upperCorner>72 5</gml:upperCorner>
				</gml:Envelope>
			</ogc:BBOX>
		</ogc:Filter>
	</wfs:Query>
	<wfs:Query typeName="sf:EntitéGénérique">
		<ogc:Filter>
			<ogc:BBOX>
				<ogc:PropertyName>sf:attribut.Géométrie</ogc:PropertyName>
				<gml:Envelope srsName="urn:ogc:def:crs:EPSG::4326">
					<gml:lowerCorner>50 -15</gml:lowerCorner>
					<gml:upperCorner>72 5</gml:upperCorner>
				</gml:Envelope>
			</ogc:BBOX>
		</ogc:Filter>
	</wfs:Query>
	<wfs:Query typeName="sf:AggregateGeoFeature">
		<ogc:Filter>
			<ogc:BBOX>
				<ogc:PropertyName>sf:multiCurveProperty</ogc:PropertyName>
				<gml:Envelope srsName="urn:ogc:def:crs:EPSG::4326">
					<gml:lowerCorner>50 -15</gml:lowerCorner>
					<gml:upperCorner>72 5</gml:upperCorner>
				</gml:Envelope>
			</ogc:BBOX>
		</ogc:Filter>
	</wfs:Query>
</wfs:GetFeature>
                                        </body>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                  <xsl:if test="count($request1//sf:PrimitiveGeoFeature) lt 1">
                    <ctl:message>FAILURE: Expected at least one sf:PrimitiveGeoFeature instance in response</ctl:message>
                    <ctl:fail/>
                  </xsl:if>
                  <xsl:if test="count($request1//sf:EntitéGénérique) lt 1">
                    <ctl:message>FAILURE: Expected at least one sf:EntitéGénérique instance in response</ctl:message>
                    <ctl:fail/>
                  </xsl:if>
                  <xsl:if test="count($request1//sf:AggregateGeoFeature) lt 1">
                    <ctl:message>FAILURE: Expected at least one sf:AggregateGeoFeature instances in response</ctl:message>
                    <ctl:fail/>
                  </xsl:if>
                                </xsl:otherwise>
                        </xsl:choose>
                </code>
        </test>

        <test name="wfs:wfs-1.1.0-Basic-GetFeature-tc33.1">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>The ogc:GmlObjectId/@gml:id attribute shall be used to identify a GML3-based object representation.</assertion>
      <comment>GetFeature to first get a feature id (gml:id), then another GetFeature filtering on the gml:id.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is an wfs:FeatureCollection document; (3) the response shall have the feature member expected from the request.</comment>
      <link>filter-1.1.0-objectid-atc1</link>
      <link>OGC 04-095, 11.1, p.15</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                   <method>post</method>
                                   <body>
                                           <wfs:GetFeature version="1.1.0" service="WFS">
	<wfs:Query typeName="sf:PrimitiveGeoFeature" srsName="urn:ogc:def:crs:EPSG::4326"/>
</wfs:GetFeature>
                                        </body>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1//wfs:FeatureCollection)">
                                <ctl:message>FAILURE: Expected valid wfs:FeatureCollection.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                                <xsl:otherwise>

            <xsl:variable name="gml.id">
              <xsl:value-of select="$request1//sf:PrimitiveGeoFeature[1]/@gml:id"/>
            </xsl:variable>

                        <xsl:variable name="request2">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                   <method>post</method>
                                   <body>
                                           <wfs:GetFeature version="1.1.0" service="WFS">
	<wfs:Query typeName="sf:PrimitiveGeoFeature" srsName="urn:ogc:def:crs:EPSG::4326">
		<ogc:Filter>
			<ogc:GmlObjectId gml:id="{$gml.id}"/>
		</ogc:Filter>
	</wfs:Query>
</wfs:GetFeature>
                                        </body>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request2/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                    <xsl:variable name="id">
                      <xsl:value-of select="$request2//sf:PrimitiveGeoFeature/@gml:id"/>
                    </xsl:variable>
                    <xsl:if test="$id != $gml.id">
                      <ctl:message>FAILURE: Expected gml:id = <xsl:value-of select="$gml.id"/> (received <xsl:value-of select="$id"/>)</ctl:message>
                      <ctl:fail/>
                    </xsl:if>
                                </xsl:otherwise>
                        </xsl:choose>

                </xsl:otherwise>
                </xsl:choose>

                </code>
        </test>

        <test name="wfs:wfs-1.1.0-Basic-GetFeature-tc34.1">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>A filter expression may include only one type of identifier element.</assertion>
      <comment>GetFeature with a filter on two different Id predicates (GmlObjectId and FeatureId), causing an exception.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is an ows:ExceptionReport document.</comment>
      <link>filter-1.1.0-objectid-atc3</link>
      <link>OGC 04-095, 11.2, p.15</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                   <method>post</method>
                                   <body>
                                           <wfs:GetFeature version="1.1.0" service="WFS">
	<wfs:Query typeName="sf:PrimitiveGeoFeature" srsName="urn:ogc:def:crs:EPSG::4326">
		<ogc:Filter>
			<ogc:GmlObjectId gml:id="f001"/>
			<ogc:FeatureId fid="f002"/>
		</ogc:Filter>
	</wfs:Query>
</wfs:GetFeature>
                                        </body>
                                        <p:XMLValidatingParser.OWS/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                                        <xsl:variable name="expression">//ows:ExceptionReport</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

        <test name="wfs:wfs-1.1.0-Basic-GetFeature-tc35.1">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>Correctly evaluate the PropertyIsEqualTo predicate expressed by a valid ogc:PropertyIsEqualTo element.</assertion>
      <comment>PropertyIsEqualTo filter request, for a string-type property on sf:strProperty, expecting at least one match (case sensitive).  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the number of result features is &gt;= 1; (3) the result feature set contains the expected feature instance.</comment>
      <link>filter-</link>
      <link>OGC 04-095, 9.2, p.12</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                   <method>post</method>
                                   <body>
                                           <wfs:GetFeature version="1.1.0" service="WFS">
	<wfs:Query typeName="sf:AggregateGeoFeature" srsName="urn:ogc:def:crs:EPSG::4326">
		<ogc:Filter>
			<ogc:PropertyIsEqualTo>
				<ogc:PropertyName>sf:strProperty</ogc:PropertyName>
				<ogc:Literal>Ma quande lingues coalesce, li grammatica del resultant.</ogc:Literal>
			</ogc:PropertyIsEqualTo>
		</ogc:Filter>
	</wfs:Query>
</wfs:GetFeature>
                                        </body>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                                        <xsl:variable name="featureCount" select="count($request1//sf:AggregateGeoFeature)"/>
                    <xsl:if test="$featureCount != 1">
                      <ctl:message>FAILURE: Expected one sf:AggregateGeoFeature instance in response (<xsl:value-of select="$featureCount"/> features included)</ctl:message>
                      <ctl:fail/>
                    </xsl:if>
                    <xsl:for-each select="$request1//sf:AggregateGeoFeature">
                      <xsl:if test="compare(sf:strProperty, 'Ma quande lingues coalesce, li grammatica del resultant.') != 0">
                        <ctl:message>FAILURE: sf:strProperty != "Ma quande lingues coalesce, li grammatica del resultant." (gml:id = <xsl:value-of select="@gml:id"/>)</ctl:message>
                        <ctl:fail/>
                      </xsl:if>
                   </xsl:for-each>
                                </xsl:otherwise>
                        </xsl:choose>
                </code>
        </test>

        <test name="wfs:wfs-1.1.0-Basic-GetFeature-tc35.2">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>Correctly evaluate the PropertyIsEqualTo predicate expressed by a valid ogc:PropertyIsEqualTo element.</assertion>
      <comment>PropertyIsEqualTo filter request, for a string-type property on sf:strProperty, expecting at least one match (case insensitive).  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the number of result features is &gt;= 1; (3) the result feature set contains the expected feature instance.</comment>
      <link>filter-</link>
      <link>OGC 04-095, 9.2, p.12</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                   <method>post</method>
                                   <body>
                                           <wfs:GetFeature version="1.1.0" service="WFS">
	<wfs:Query typeName="sf:AggregateGeoFeature" srsName="urn:ogc:def:crs:EPSG::4326">
		<ogc:Filter>
			<ogc:PropertyIsEqualTo matchCase="false">
				<ogc:PropertyName>sf:strProperty</ogc:PropertyName>
				<ogc:Literal>mA quANde lIngues COALEsce, li graMMatiCa dEl reSULtAnt.</ogc:Literal>
			</ogc:PropertyIsEqualTo>
		</ogc:Filter>
	</wfs:Query>
</wfs:GetFeature>
                                        </body>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                                        <xsl:variable name="expression">//wfs:FeatureCollection</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                        <xsl:variable name="expression">(count(//gml:featureMember) + count(//gml:featureMembers/*)) &gt;= 1</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                        <xsl:variable name="expression">//sf:AggregateGeoFeature/sf:strProperty='Ma quande lingues coalesce, li grammatica del resultant.'</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

        <test name="wfs:wfs-1.1.0-Basic-GetFeature-tc35.3">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>Correctly evaluate the PropertyIsEqualTo predicate expressed by a valid ogc:PropertyIsEqualTo element.</assertion>
      <comment>PropertyIsEqualTo filter request, for an int-type property of '300' on sd:intProperty, expecting at least one match.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the number of result features is &gt;= 1; (3) the result feature set contains the expected feature instance.</comment>
      <link>filter-</link>
      <link>OGC 04-095, 9.2, p.12</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                   <method>post</method>
                                   <body>
                                           <wfs:GetFeature version="1.1.0" service="WFS">
	<wfs:Query typeName="sf:PrimitiveGeoFeature" srsName="urn:ogc:def:crs:EPSG::4326">
		<ogc:Filter>
			<ogc:PropertyIsEqualTo>
				<ogc:PropertyName>sf:intProperty</ogc:PropertyName>
				<ogc:Literal>300</ogc:Literal>
			</ogc:PropertyIsEqualTo>
		</ogc:Filter>
	</wfs:Query>
</wfs:GetFeature>
                                        </body>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                                        <xsl:variable name="expression">//wfs:FeatureCollection</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                        <xsl:variable name="expression">(count(//gml:featureMember) + count(//gml:featureMembers/*)) &gt;= 1</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                        <xsl:variable name="expression">//sf:PrimitiveGeoFeature/sf:intProperty=300</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

        <test name="wfs:wfs-1.1.0-Basic-GetFeature-tc35.4">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>Correctly evaluate the PropertyIsEqualTo predicate expressed by a valid ogc:PropertyIsEqualTo element.</assertion>
      <comment>PropertyIsEqualTo filter request, for a boolean-type property of true ('1') on sf:boolProperty, expecting at least one match.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the number of result features is &gt;= 1; (3) the result feature set contains the expected feature instance.</comment>
      <link>filter-</link>
      <link>OGC 04-095, 9.2, p.12</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                   <method>post</method>
                                   <body>
                                           <wfs:GetFeature version="1.1.0" service="WFS">
	<wfs:Query typeName="sf:EntitéGénérique" srsName="urn:ogc:def:crs:EPSG::4326">
		<ogc:Filter>
			<ogc:PropertyIsEqualTo>
				<ogc:PropertyName>sf:boolProperty</ogc:PropertyName>
				<ogc:Literal>1</ogc:Literal>
			</ogc:PropertyIsEqualTo>
		</ogc:Filter>
	</wfs:Query>
</wfs:GetFeature>
                                        </body>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                                        <xsl:variable name="expression">//wfs:FeatureCollection</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                        <xsl:variable name="expression">(count(//gml:featureMember) + count(//gml:featureMembers/*)) &gt;= 1</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                        <xsl:variable name="expression">boolean(//sf:EntitéGénérique/sf:boolProperty) = true()</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

        <test name="wfs:wfs-1.1.0-Basic-GetFeature-tc35.5">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>Correctly evaluate the PropertyIsEqualTo predicate expressed by a valid ogc:PropertyIsEqualTo element.</assertion>
      <comment>PropertyIsEqualTo filter request, for a date-type property of '2006-12-12' on sf:dateProperty, expecting at least one match.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the number of result features is &gt;= 1; (3) the result feature set contains the expected feature instance.</comment>
      <link>filter-</link>
      <link>OGC 04-095, 9.2, p.12</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                   <method>post</method>
                                   <body>
                                           <wfs:GetFeature version="1.1.0" service="WFS">
	<wfs:Query typeName="sf:PrimitiveGeoFeature" srsName="urn:ogc:def:crs:EPSG::4326">
		<ogc:Filter>
			<ogc:PropertyIsEqualTo>
				<ogc:PropertyName>sf:dateProperty</ogc:PropertyName>
				<ogc:Literal>2006-12-12Z</ogc:Literal>
			</ogc:PropertyIsEqualTo>
		</ogc:Filter>
	</wfs:Query>
</wfs:GetFeature>
                                        </body>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                                        <xsl:variable name="expression">//wfs:FeatureCollection</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                        <xsl:variable name="expression">(count(//gml:featureMember) + count(//gml:featureMembers/*)) &gt;= 1</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                        <xsl:variable name="expression">xsd:date(//sf:PrimitiveGeoFeature/sf:dateProperty) = xsd:date('2006-12-12Z') or //sf:PrimitiveGeoFeature/sf:dateProperty = '2006-12-12'</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

        <test name="wfs:wfs-1.1.0-Basic-GetFeature-tc35.6">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>Correctly evaluate the PropertyIsEqualTo predicate expressed by a valid ogc:PropertyIsEqualTo element.</assertion>
      <comment>PropertyIsEqualTo filter request, for a date-type property of '2999-12-12' on sf:dateProperty, expecting no matches.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the number of result features is = 0.</comment>
      <link>filter-</link>
      <link>OGC 04-095, 9.2, p.12</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                   <method>post</method>
                                   <body>
                                           <wfs:GetFeature version="1.1.0" service="WFS">
	<wfs:Query typeName="sf:PrimitiveGeoFeature" srsName="urn:ogc:def:crs:EPSG::4326">
		<ogc:Filter>
			<ogc:PropertyIsEqualTo>
				<ogc:PropertyName>sf:dateProperty</ogc:PropertyName>
				<ogc:Literal>2999-12-12</ogc:Literal>
			</ogc:PropertyIsEqualTo>
		</ogc:Filter>
	</wfs:Query>
</wfs:GetFeature>
                                        </body>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                                        <xsl:variable name="expression">//wfs:FeatureCollection</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                        <xsl:variable name="expression">(count(//gml:featureMember) + count(//gml:featureMembers/*)) = 0</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

        <test name="wfs:wfs-1.1.0-Basic-GetFeature-tc35.7">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>Correctly evaluate the PropertyIsEqualTo predicate expressed by a valid ogc:PropertyIsEqualTo element.</assertion>
      <comment>PropertyIsEqualTo filter request, for a string-type property on gml:description for 'description-f004', expecting at least one match (case sensitive).  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the number of result features is &gt;= 1; (3) the result feature set contains the expected feature instance.</comment>
      <link>filter-</link>
      <link>OGC 04-095, 9.2, p.12</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                   <method>post</method>
                                   <body>
                                           <wfs:GetFeature version="1.1.0" service="WFS">
	<wfs:Query typeName="sf:EntitéGénérique" srsName="urn:ogc:def:crs:EPSG::4326">
		<ogc:Filter>
			<ogc:PropertyIsEqualTo>
				<ogc:PropertyName>gml:description</ogc:PropertyName>
				<ogc:Literal>description-f004</ogc:Literal>
			</ogc:PropertyIsEqualTo>
		</ogc:Filter>
	</wfs:Query>
</wfs:GetFeature>
                                        </body>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                                        <xsl:variable name="expression">//wfs:FeatureCollection</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                        <xsl:variable name="expression">(count(//gml:featureMember) + count(//gml:featureMembers/*)) &gt;= 1</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                        <xsl:variable name="expression">//sf:EntitéGénérique/gml:description='description-f004'</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

        <test name="wfs:wfs-1.1.0-Basic-GetFeature-tc36.1">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>Correctly evaluate the PropertyIsNotEqualTo predicate expressed by a valid ogc:PropertyIsNotEqualTo element.</assertion>
      <comment>PropertyIsNotEqualTo filter request, for a string-type property 'description-f003' on gml:description, expecting at least 3 matches (case sensitive).  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the number of result features is &gt;= 3; (3) the result feature set does not contain the feature from the PropertyIsNotEqualTo predicate.</comment>
      <link>filter-</link>
      <link>OGC 04-095, 9.2, p.12</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                   <method>post</method>
                                   <body>
                                           <wfs:GetFeature version="1.1.0" service="WFS">
	<wfs:Query typeName="sf:PrimitiveGeoFeature" srsName="urn:ogc:def:crs:EPSG::4326">
		<ogc:Filter>
			<ogc:PropertyIsNotEqualTo>
				<ogc:PropertyName>gml:description</ogc:PropertyName>
				<ogc:Literal>description-f003</ogc:Literal>
			</ogc:PropertyIsNotEqualTo>
		</ogc:Filter>
	</wfs:Query>
</wfs:GetFeature>
                                        </body>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                                        <xsl:variable name="expression">//wfs:FeatureCollection</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                        <xsl:variable name="expression">(count(//gml:featureMember) + count(//gml:featureMembers/*)) &gt;= 3</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                        <xsl:variable name="expression">not(//sf:PrimitiveGeoFeature/sf:strProperty='description-f003')</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

        <test name="wfs:wfs-1.1.0-Basic-GetFeature-tc36.2">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>Correctly evaluate the PropertyIsNotEqualTo predicate expressed by a valid ogc:PropertyIsNotEqualTo element.</assertion>
      <comment>PropertyIsNotEqualTo filter request, for a string-type property 'deSCRIption-F003' on gml:description, expecting at least 3 matches (case insensitive).  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the number of result features is &gt;= 3; (3) the result feature set does not contain the feature from the PropertyIsNotEqualTo predicate.</comment>
      <link>filter-</link>
      <link>OGC 04-095, 9.2, p.12</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                   <method>post</method>
                                   <body>
                                           <wfs:GetFeature version="1.1.0" service="WFS">
	<wfs:Query typeName="sf:PrimitiveGeoFeature" srsName="urn:ogc:def:crs:EPSG::4326">
		<ogc:Filter>
			<ogc:PropertyIsNotEqualTo matchCase="false">
				<ogc:PropertyName>gml:description</ogc:PropertyName>
				<ogc:Literal>deSCRIption-F003</ogc:Literal>
			</ogc:PropertyIsNotEqualTo>
		</ogc:Filter>
	</wfs:Query>
</wfs:GetFeature>
                                        </body>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                                        <xsl:variable name="expression">//wfs:FeatureCollection</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                        <xsl:variable name="expression">(count(//gml:featureMember) + count(//gml:featureMembers/*)) &gt;= 3</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                        <xsl:variable name="expression">not(//sf:PrimitiveGeoFeature/gml:description='description-f003')</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

        <test name="wfs:wfs-1.1.0-Basic-GetFeature-tc36.3">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>Correctly evaluate the PropertyIsNotEqualTo predicate expressed by a valid ogc:PropertyIsNotEqualTo element.</assertion>
      <comment>PropertyIsNotEqualTo filter request, for an int-type property of '300' on sf:intProperty, expecting at least 3 matches.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the number of result features is &gt;= 3; (3) the result feature set does not contain the feature from the PropertyIsNotEqualTo predicate.</comment>
      <link>filter-</link>
      <link>OGC 04-095, 9.2, p.12</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                   <method>post</method>
                                   <body>
                                           <wfs:GetFeature version="1.1.0" service="WFS">
	<wfs:Query typeName="sf:PrimitiveGeoFeature" srsName="urn:ogc:def:crs:EPSG::4326">
		<ogc:Filter>
			<ogc:PropertyIsNotEqualTo>
				<ogc:PropertyName>sf:intProperty</ogc:PropertyName>
				<ogc:Literal>300</ogc:Literal>
			</ogc:PropertyIsNotEqualTo>
		</ogc:Filter>
	</wfs:Query>
</wfs:GetFeature>
                                        </body>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                                        <xsl:variable name="expression">//wfs:FeatureCollection</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                        <xsl:variable name="expression">(count(//gml:featureMember) + count(//gml:featureMembers/*)) &gt;= 3</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                        <xsl:variable name="expression">not(//sf:PrimitiveGeoFeature/sf:intProperty=300)</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

        <test name="wfs:wfs-1.1.0-Basic-GetFeature-tc36.4">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>Correctly evaluate the PropertyIsNotEqualTo predicate expressed by a valid ogc:PropertyIsNotEqualTo element.</assertion>
      <comment>PropertyIsNotEqualTo filter request, for a boolean-type property of false ('0') on sf:boolProperty, expecting at least one match.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the number of result features is &gt;= 1; (3) the result feature set does not contain the feature from the PropertyIsNotEqualTo predicate.</comment>
      <link>filter-</link>
      <link>OGC 04-095, 9.2, p.12</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                   <method>post</method>
                                   <body>
                                           <wfs:GetFeature version="1.1.0" service="WFS">
	<wfs:Query typeName="sf:EntitéGénérique" srsName="urn:ogc:def:crs:EPSG::4326">
		<ogc:Filter>
			<ogc:PropertyIsNotEqualTo>
				<ogc:PropertyName>sf:boolProperty</ogc:PropertyName>
				<ogc:Literal>0</ogc:Literal>
			</ogc:PropertyIsNotEqualTo>
		</ogc:Filter>
	</wfs:Query>
</wfs:GetFeature>
                                        </body>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                                        <xsl:variable name="expression">//wfs:FeatureCollection</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                        <xsl:variable name="expression">(count(//gml:featureMember) + count(//gml:featureMembers/*)) &gt;= 1</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                        <xsl:variable name="expression">boolean(//sf:EntitéGénérique/sf:boolProperty) = true()</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

        <test name="wfs:wfs-1.1.0-Basic-GetFeature-tc36.5">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>Correctly evaluate the PropertyIsNotEqualTo predicate expressed by a valid ogc:PropertyIsNotEqualTo element.</assertion>
      <comment>PropertyIsNotEqualTo filter request, for a date-type property of '2006-12-12' on sf:dateProperty, expecting at least 3 matches.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the number of result features is &gt;= 3; (3) the result feature set does not contain the feature from the PropertyIsNotEqualTo predicate.</comment>
      <link>filter-</link>
      <link>OGC 04-095, 9.2, p.12</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                   <method>post</method>
                                   <body>
                                           <wfs:GetFeature version="1.1.0" service="WFS">
	<wfs:Query typeName="sf:PrimitiveGeoFeature" srsName="urn:ogc:def:crs:EPSG::4326">
		<ogc:Filter>
			<ogc:PropertyIsNotEqualTo>
				<ogc:PropertyName>sf:dateProperty</ogc:PropertyName>
				<ogc:Literal>2006-12-12Z</ogc:Literal>
			</ogc:PropertyIsNotEqualTo>
		</ogc:Filter>
	</wfs:Query>
</wfs:GetFeature>
                                        </body>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                                        <xsl:variable name="expression">//wfs:FeatureCollection</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                        <xsl:variable name="expression">(count(//gml:featureMember) + count(//gml:featureMembers/*)) &gt;= 3</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                        <xsl:variable name="expression">not(//sf:PrimitiveGeoFeature[sf:dateProperty=xsd:date('2006-12-12Z')])</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

        <test name="wfs:wfs-1.1.0-Basic-GetFeature-tc37.1">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>Correctly evaluate the PropertyIsLessThan predicate expressed by a valid ogc:PropertyIsLessThan element.</assertion>
      <comment>PropertyIsLessThan filter request, for a decimal-type property, for a value under '15' expecting at least 3 matches.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the number of result features is &gt;= 3; (3) the result feature set does not have a value equal to or above the literal value given in the request.</comment>
      <link>filter-</link>
      <link>OGC 04-095, 9.2, p.12</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                   <method>post</method>
                                   <body>
                                           <wfs:GetFeature version="1.1.0" service="WFS">
	<wfs:Query typeName="sf:PrimitiveGeoFeature" srsName="urn:ogc:def:crs:EPSG::4326">
		<ogc:Filter>
			<ogc:PropertyIsLessThan>
				<ogc:PropertyName>sf:decimalProperty</ogc:PropertyName>
				<ogc:Literal>15</ogc:Literal>
			</ogc:PropertyIsLessThan>
		</ogc:Filter>
	</wfs:Query>
</wfs:GetFeature>
                                        </body>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                                        <xsl:variable name="expression">//wfs:FeatureCollection</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                        <xsl:variable name="expression">(count(//gml:featureMember) + count(//gml:featureMembers/*)) &gt;= 3</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                        <xsl:variable name="expression">not((//gml:featureMember | //gml:featureMembers)/sf:PrimitiveGeoFeature/sf:decimalProperty &gt;= 15)</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

        <test name="wfs:wfs-1.1.0-Basic-GetFeature-tc37.2">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>Correctly evaluate the PropertyIsLessThan predicate expressed by a valid ogc:PropertyIsLessThan element.</assertion>
      <comment>PropertyIsLessThan filter request, for a double-type property, for a value under '2200.11' expecting at least 2 matches.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the number of result features is &gt;= 2; (3) the result feature set does not have a value equal to or above the literal value given in the request.</comment>
      <link>filter-</link>
      <link>OGC 04-095, 9.2, p.12</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                   <method>post</method>
                                   <body>
                                           <wfs:GetFeature version="1.1.0" service="WFS">
	<wfs:Query typeName="sf:AggregateGeoFeature" srsName="urn:ogc:def:crs:EPSG::4326">
		<ogc:Filter>
			<ogc:PropertyIsLessThan>
				<ogc:PropertyName>sf:doubleProperty</ogc:PropertyName>
				<ogc:Literal>2200.11</ogc:Literal>
			</ogc:PropertyIsLessThan>
		</ogc:Filter>
	</wfs:Query>
</wfs:GetFeature>
                                        </body>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                                        <xsl:variable name="expression">//wfs:FeatureCollection</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                        <xsl:variable name="expression">(count(//gml:featureMember) + count(//gml:featureMembers/*)) &gt;= 2</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                        <xsl:variable name="expression">not(//sf:AggregateGeoFeature/sf:doubleProperty &gt;= 2200.11)</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

        <test name="wfs:wfs-1.1.0-Basic-GetFeature-tc37.3">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>Correctly evaluate the PropertyIsLessThan predicate expressed by a valid ogc:PropertyIsLessThan element.</assertion>
      <comment>PropertyIsLessThan filter request, for an integer-type property, for a value under '100' expecting at least one match.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the number of result features is 1 (or more).</comment>
      <link>filter-</link>
      <link>OGC 04-095, 9.2, p.12</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                   <method>post</method>
                                   <body>
                                           <wfs:GetFeature version="1.1.0" service="WFS">
	<wfs:Query typeName="sf:PrimitiveGeoFeature" srsName="urn:ogc:def:crs:EPSG::4326">
		<ogc:Filter>
			<ogc:PropertyIsLessThan>
				<ogc:PropertyName>sf:intProperty</ogc:PropertyName>
				<ogc:Literal>100</ogc:Literal>
			</ogc:PropertyIsLessThan>
		</ogc:Filter>
	</wfs:Query>
</wfs:GetFeature>
                                        </body>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                                        <xsl:variable name="expression">//wfs:FeatureCollection</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                        <xsl:variable name="expression">(count(//gml:featureMember) + count(//gml:featureMembers/*)) &gt;= 1</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                        <xsl:variable name="expression">//sf:intProperty = -900</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

        <test name="wfs:wfs-1.1.0-Basic-GetFeature-tc37.4">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>Correctly evaluate the PropertyIsLessThan predicate expressed by a valid ogc:PropertyIsLessThan element.</assertion>
      <comment>PropertyIsLessThan filter request, for a date-type property, for a value under '2006-10-23' expecting one or more matches.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the number of result features is &gt;= 1; (3) the result feature set does not have a value equal to or above the literal value given in the request.</comment>
      <link>filter-</link>
      <link>OGC 04-095, 9.2, p.12</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                   <method>post</method>
                                   <body>
                                           <wfs:GetFeature version="1.1.0" service="WFS">
	<wfs:Query typeName="sf:PrimitiveGeoFeature" srsName="urn:ogc:def:crs:EPSG::4326">
		<ogc:Filter>
			<ogc:PropertyIsLessThan>
				<ogc:PropertyName>sf:dateProperty</ogc:PropertyName>
				<ogc:Literal>2006-10-23Z</ogc:Literal>
			</ogc:PropertyIsLessThan>
		</ogc:Filter>
	</wfs:Query>
</wfs:GetFeature>
                                        </body>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                  <xsl:if test="count($request1//sf:PrimitiveGeoFeature) lt 1">
                    <ctl:message>FAILURE: Empty response</ctl:message>
                    <ctl:fail/>
                  </xsl:if>
                  <xsl:for-each select="$request1//sf:PrimitiveGeoFeature">
                    <xsl:if test="xsd:date(sf:dateProperty) ge xsd:date('2006-10-23Z')">
                      <ctl:message>FAILURE: sf:dateProperty value is on or after 2006-10-23Z (gml:id = <xsl:value-of select="@gml:id"/>)</ctl:message>
                      <ctl:fail/>
                    </xsl:if>
                  </xsl:for-each>
                                </xsl:otherwise>
                        </xsl:choose>
                </code>
        </test>

        <test name="wfs:wfs-1.1.0-Basic-GetFeature-tc38.1">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>Correctly evaluate the PropertyIsGreaterThan predicate expressed by a valid ogc:PropertyIsGreaterThan element.</assertion>
      <comment>PropertyIsGreaterThan filter request, for a decimal-type property, for a value over '12.5' expecting at least 2 matches.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the number of result features is &gt;= 2; (3) the result feature set does not have a value less than or equal to the literal value given in the request.</comment>
      <link>filter-</link>
      <link>OGC 04-095, 9.2, p.12</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                   <method>post</method>
                                   <body>
                                           <wfs:GetFeature version="1.1.0" service="WFS">
	<wfs:Query typeName="sf:PrimitiveGeoFeature" srsName="urn:ogc:def:crs:EPSG::4326">
		<ogc:Filter>
			<ogc:PropertyIsGreaterThan>
				<ogc:PropertyName>sf:decimalProperty</ogc:PropertyName>
				<ogc:Literal>12.5</ogc:Literal>
			</ogc:PropertyIsGreaterThan>
		</ogc:Filter>
	</wfs:Query>
</wfs:GetFeature>
                                        </body>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                                        <xsl:variable name="expression">//wfs:FeatureCollection</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                        <xsl:variable name="expression">(count(//gml:featureMember) + count(//gml:featureMembers/*)) &gt;= 2</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                        <xsl:variable name="expression">not(//sf:PrimitiveGeoFeature/sf:decimalProperty &lt;= 12.5)</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

        <test name="wfs:wfs-1.1.0-Basic-GetFeature-tc38.2">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>Correctly evaluate the PropertyIsGreaterThan predicate expressed by a valid ogc:PropertyIsGreaterThan element.</assertion>
      <comment>PropertyIsGreaterThan filter request, for a double-type property, for a value over '2012.78' expecting at least one match.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the number of result features is &gt;= 1; (3) the result feature set does not have a value less than or equal to the literal value given in the request.</comment>
      <link>filter-</link>
      <link>OGC 04-095, 9.2, p.12</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                   <method>post</method>
                                   <body>
                                           <wfs:GetFeature version="1.1.0" service="WFS">
	<wfs:Query typeName="sf:AggregateGeoFeature" srsName="urn:ogc:def:crs:EPSG::4326">
		<ogc:Filter>
			<ogc:PropertyIsGreaterThan>
				<ogc:PropertyName>sf:doubleProperty</ogc:PropertyName>
				<ogc:Literal>2012.78</ogc:Literal>
			</ogc:PropertyIsGreaterThan>
		</ogc:Filter>
	</wfs:Query>
</wfs:GetFeature>
                                        </body>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                                        <xsl:variable name="expression">//wfs:FeatureCollection</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                        <xsl:variable name="expression">(count(//gml:featureMember) + count(//gml:featureMembers/*)) &gt;= 1</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                        <xsl:variable name="expression">not(//sf:AggregateGeoFeature/sf:doubleProperty &lt;= 2012.78)</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

        <test name="wfs:wfs-1.1.0-Basic-GetFeature-tc38.3">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>Correctly evaluate the PropertyIsGreaterThan predicate expressed by a valid ogc:PropertyIsGreaterThan element.</assertion>
      <comment>PropertyIsGreaterThan filter request, for a date-type property, for a value over '2006-10-22' expecting at least 3 matches.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the number of result features is &gt;= 3; (3) the result feature set does not have a value less than or equal to the literal value given in the request.</comment>
      <link>filter-</link>
      <link>OGC 04-095, 9.2, p.12</link>
                <code>
                        <xsl:variable name="response">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                   <method>post</method>
                                   <body>
                                           <wfs:GetFeature version="1.1.0" service="WFS">
	<wfs:Query typeName="sf:PrimitiveGeoFeature" srsName="urn:ogc:def:crs:EPSG::4326">
		<ogc:Filter>
			<ogc:PropertyIsGreaterThan>
				<ogc:PropertyName>sf:dateProperty</ogc:PropertyName>
				<ogc:Literal>2006-10-22Z</ogc:Literal>
			</ogc:PropertyIsGreaterThan>
		</ogc:Filter>
	</wfs:Query>
</wfs:GetFeature>
                                        </body>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($response/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                      <xsl:variable name="featureCount" select="count($response//sf:PrimitiveGeoFeature)"/>
                      <xsl:if test="$featureCount lt 1">
                        <ctl:message>FAILURE: No sf:PrimitiveGeoFeature instances in response.</ctl:message>
                        <ctl:fail/>
                      </xsl:if>
                      <xsl:for-each select="$response//sf:PrimitiveGeoFeature">
                        <xsl:if test="xsd:date(sf:dateProperty) le xsd:date('2006-10-22Z')">
                          <ctl:message>FAILURE: sf:dateProperty value on or before 2006-10-22Z (gml:id = <xsl:value-of select="@gml:id"/>)</ctl:message>
                          <ctl:fail/>
                        </xsl:if>
                      </xsl:for-each>
                                </xsl:otherwise>
                        </xsl:choose>
                </code>
        </test>

        <test name="wfs:wfs-1.1.0-Basic-GetFeature-tc38.4">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>Correctly evaluate the PropertyIsGreaterThan predicate expressed by a valid ogc:PropertyIsGreaterThan element.</assertion>
      <comment>PropertyIsGreaterThan filter request, for a datetime-type property, for a value over '2006-06-28T19:08:00+02:00' expecting no matches.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the number of result features is = 0.</comment>
      <link>filter-</link>
      <link>OGC 04-095, 9.2, p.12</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                   <method>post</method>
                                   <body>
                                           <wfs:GetFeature version="1.1.0" service="WFS">
        <wfs:Query typeName="sf:PrimitiveGeoFeature" srsName="urn:ogc:def:crs:EPSG::4326">
                <ogc:Filter>
                        <ogc:PropertyIsGreaterThan>
                                <ogc:PropertyName>sf:dateTimeProperty</ogc:PropertyName>
                                <ogc:Literal>2006-06-28T19:08:00+02:00</ogc:Literal>
                        </ogc:PropertyIsGreaterThan>
                </ogc:Filter>
        </wfs:Query>
</wfs:GetFeature>
                                        </body>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                    <xsl:if test="not($request1//wfs:FeatureCollection)">
                      <ctl:message>[FAILURE] Expected wfs:FeatureCollection in response.</ctl:message>
                      <ctl:fail/>
                    </xsl:if>
                                        <xsl:for-each select="$request1//sf:PrimitiveGeoFeature">
                      <xsl:if test="not(xsd:dateTime(sf:dateTimeProperty) gt xsd:dateTime('2006-06-28T19:08:00+02:00'))">
                                        <ctl:message>[FAILURE] Expected sf:dateTimeProperty value after '2006-06-28T19:08:00+02:00' (where feature id = <xsl:value-of select="./@gml:id"/>)</ctl:message>
                                        <ctl:fail/>
                                      </xsl:if>
                    </xsl:for-each>
                                </xsl:otherwise>
                        </xsl:choose>
                </code>
        </test>

<test name="wfs:wfs-1.1.0-Basic-GetFeature-tc39.1">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>Correctly evaluate the PropertyIsLessThanOrEqualTo predicate expressed by a valid ogc:PropertyIsLessThanOrEqualTo element.</assertion>
      <comment>PropertyIsLessThanOrEqualTo filter request, for a decimal-type property, for a value under '5.03' expecting at least 2 matches.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the number of result features is &gt;= 2; (3) the result feature set does not have a value greater than the literal value given in the request.</comment>
      <link>filter-</link>
      <link>OGC 04-095, 9.2, p.12</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                   <method>post</method>
                                   <body>
                                           <wfs:GetFeature version="1.1.0" service="WFS">
	<wfs:Query typeName="sf:PrimitiveGeoFeature" srsName="urn:ogc:def:crs:EPSG::4326">
		<ogc:Filter>
			<ogc:PropertyIsLessThanOrEqualTo>
				<ogc:PropertyName>sf:decimalProperty</ogc:PropertyName>
				<ogc:Literal>5.03</ogc:Literal>
			</ogc:PropertyIsLessThanOrEqualTo>
		</ogc:Filter>
	</wfs:Query>
</wfs:GetFeature>
                                        </body>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                                        <xsl:variable name="expression">//wfs:FeatureCollection</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                        <xsl:variable name="expression">(count(//gml:featureMember) + count(//gml:featureMembers/*)) &gt;= 2</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                        <xsl:variable name="expression">not((//gml:featureMember | //gml:featureMembers)/sf:PrimitiveGeoFeature/sf:decimalProperty &gt; 5.03)</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

        <test name="wfs:wfs-1.1.0-Basic-GetFeature-tc39.2">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>Correctly evaluate the PropertyIsLessThanOrEqualTo predicate expressed by a valid ogc:PropertyIsLessThanOrEqualTo element.</assertion>
      <comment>PropertyIsLessThanOrEqualTo filter request, for a double-type property, for a value under '-200.009' expecting no matches.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the number of result features is = 0.</comment>
      <link>filter-</link>
      <link>OGC 04-095, 9.2, p.12</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                   <method>post</method>
                                   <body>
                                           <wfs:GetFeature version="1.1.0" service="WFS">
	<wfs:Query typeName="sf:AggregateGeoFeature" srsName="urn:ogc:def:crs:EPSG::4326">
		<ogc:Filter>
			<ogc:PropertyIsLessThanOrEqualTo>
				<ogc:PropertyName>sf:doubleProperty</ogc:PropertyName>
				<ogc:Literal>-200.009</ogc:Literal>
			</ogc:PropertyIsLessThanOrEqualTo>
		</ogc:Filter>
	</wfs:Query>
</wfs:GetFeature>
                                        </body>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                                        <xsl:variable name="expression">//wfs:FeatureCollection</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                        <xsl:variable name="expression">(count(//gml:featureMember) + count(//gml:featureMembers/*)) = 0</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

        <test name="wfs:wfs-1.1.0-Basic-GetFeature-tc39.3">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>Correctly evaluate the PropertyIsLessThanOrEqualTo predicate expressed by a valid ogc:PropertyIsLessThanOrEqualTo element.</assertion>
      <comment>PropertyIsLessThanOrEqualTo filter request, for an integer-type property, for a value under '180' expecting at least 3 matches.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the number of result features is &gt;= 3; (3) the result set must not contain any instances of features that are greater than the supplied literal.</comment>
      <link>filter-</link>
      <link>OGC 04-095, 9.2, p.12</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                   <method>post</method>
                                   <body>
                                           <wfs:GetFeature version="1.1.0" service="WFS">
	<wfs:Query typeName="sf:PrimitiveGeoFeature" srsName="urn:ogc:def:crs:EPSG::4326">
		<ogc:Filter>
			<ogc:PropertyIsLessThanOrEqualTo>
				<ogc:PropertyName>sf:intProperty</ogc:PropertyName>
				<ogc:Literal>180</ogc:Literal>
			</ogc:PropertyIsLessThanOrEqualTo>
		</ogc:Filter>
	</wfs:Query>
</wfs:GetFeature>
                                        </body>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                                        <xsl:variable name="expression">//wfs:FeatureCollection</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                        <xsl:variable name="expression">(count(//gml:featureMember) + count(//gml:featureMembers/*)) &gt;= 3</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                        <xsl:variable name="expression">not(//sf:PrimitiveGeoFeature/sf:intProperty &gt; 180)</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

        <test name="wfs:wfs-1.1.0-Basic-GetFeature-tc39.4">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>Correctly evaluate the PropertyIsLessThanOrEqualTo predicate expressed by a valid ogc:PropertyIsLessThanOrEqualTo element.</assertion>
      <comment>PropertyIsLessThanOrEqualTo filter request, for a datetime-type property, for a value under '2006-06-28T19:08:00+02:00' expecting at least 2 matches.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the number of result features is &gt;= 2; (3) the result feature set does not have a value above the literal value given in the request.</comment>
      <link>filter-</link>
      <link>OGC 04-095, 9.2, p.12</link>
                <code>

                        <xsl:variable name="response">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                   <method>post</method>
                                   <body>
                                           <wfs:GetFeature version="1.1.0" service="WFS">
	<wfs:Query typeName="sf:PrimitiveGeoFeature" srsName="urn:ogc:def:crs:EPSG::4326">
		<ogc:Filter>
			<ogc:PropertyIsLessThanOrEqualTo>
				<ogc:PropertyName>sf:dateTimeProperty</ogc:PropertyName>
				<ogc:Literal>2006-06-28T19:08:00+02:00</ogc:Literal>
			</ogc:PropertyIsLessThanOrEqualTo>
		</ogc:Filter>
	</wfs:Query>
</wfs:GetFeature>
                                        </body>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($response/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                      <xsl:variable name="featureCount" select="count($response//sf:PrimitiveGeoFeature)"/>
                      <xsl:if test="$featureCount lt 1">
                        <ctl:message>FAILURE: No sf:PrimitiveGeoFeature instances in response.</ctl:message>
                        <ctl:fail/>
                      </xsl:if>
                      <xsl:for-each select="$response//sf:PrimitiveGeoFeature">
                        <xsl:if test="xsd:dateTime(sf:dateTimeProperty) gt xsd:dateTime('2006-06-28T19:08:00+02:00')">
                          <ctl:message>FAILURE: sf:dateTimeProperty after 2006-06-28T19:08:00+02:00 (gml:id = <xsl:value-of select="@gml:id"/>)</ctl:message>
                          <ctl:fail/>
                        </xsl:if>
                      </xsl:for-each>
                                </xsl:otherwise>
                        </xsl:choose>
                </code>
        </test>

    <test name="wfs:wfs-1.1.0-Basic-GetFeature-tc40.1">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>Correctly evaluate the PropertyIsGreaterThanOrEqualTo predicate expressed by a valid ogc:PropertyIsGreaterThanOrEqualTo element.</assertion>
      <comment>PropertyIsGreaterThanOrEqualTo filter request, for a decimal-type property, for a value over or equal to '12.5' expecting at least 2 matches.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the number of result features is &gt;= 2; (3) the result feature set does not have a value less than the literal value given in the request.</comment>
      <link>filter-</link>
      <link>OGC 04-095, 9.2, p.12</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                   <method>post</method>
                                   <body>
                                           <wfs:GetFeature version="1.1.0" service="WFS">
	<wfs:Query typeName="sf:PrimitiveGeoFeature" srsName="urn:ogc:def:crs:EPSG::4326">
		<ogc:Filter>
			<ogc:PropertyIsGreaterThanOrEqualTo>
				<ogc:PropertyName>sf:decimalProperty</ogc:PropertyName>
				<ogc:Literal>12.5</ogc:Literal>
			</ogc:PropertyIsGreaterThanOrEqualTo>
		</ogc:Filter>
	</wfs:Query>
</wfs:GetFeature>
                                        </body>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                                        <xsl:variable name="expression">//wfs:FeatureCollection</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                        <xsl:variable name="expression">(count(//gml:featureMember) + count(//gml:featureMembers/*)) &gt;= 2</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                        <xsl:variable name="expression">not(//sf:PrimitiveGeoFeature/sf:decimalProperty &lt; 12.5)</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

        <test name="wfs:wfs-1.1.0-Basic-GetFeature-tc40.2">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>Correctly evaluate the PropertyIsGreaterThanOrEqualTo predicate expressed by a valid ogc:PropertyIsGreaterThanOrEqualTo element.</assertion>
      <comment>PropertyIsGreaterThanOrEqualTo filter request, for a double-type property, for a value over or equal to '2012.78' expecting at least 2 matches.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the number of result features is &gt;= 2; (3) the result feature set does not have a value less than the literal value given in the request.</comment>
      <link>filter-</link>
      <link>OGC 04-095, 9.2, p.12</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                   <method>post</method>
                                   <body>
                                           <wfs:GetFeature version="1.1.0" service="WFS">
	<wfs:Query typeName="sf:AggregateGeoFeature" srsName="urn:ogc:def:crs:EPSG::4326">
		<ogc:Filter>
			<ogc:PropertyIsGreaterThanOrEqualTo>
				<ogc:PropertyName>sf:doubleProperty</ogc:PropertyName>
				<ogc:Literal>2012.78</ogc:Literal>
			</ogc:PropertyIsGreaterThanOrEqualTo>
		</ogc:Filter>
	</wfs:Query>
</wfs:GetFeature>
                                        </body>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                                        <xsl:variable name="expression">//wfs:FeatureCollection</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                        <xsl:variable name="expression">(count(//gml:featureMember) + count(//gml:featureMembers/*)) &gt;= 2</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                        <xsl:variable name="expression">not(//sf:AggregateGeoFeature/sf:doubleProperty &lt; 2012.78)</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

        <test name="wfs:wfs-1.1.0-Basic-GetFeature-tc40.3">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>Correctly evaluate the PropertyIsGreaterThanOrEqualTo predicate expressed by a valid ogc:PropertyIsGreaterThanOrEqualTo element.</assertion>
      <comment>PropertyIsGreaterThanOrEqualTo filter request, for a date-type property, for a value over or equal to '2999-10-22' expecting no matches.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the number of result features is = 0.</comment>
      <link>filter-</link>
      <link>OGC 04-095, 9.2, p.12</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                   <method>post</method>
                                   <body>
                                           <wfs:GetFeature version="1.1.0" service="WFS">
	<wfs:Query typeName="sf:PrimitiveGeoFeature" srsName="urn:ogc:def:crs:EPSG::4326">
		<ogc:Filter>
			<ogc:PropertyIsGreaterThanOrEqualTo>
				<ogc:PropertyName>sf:dateProperty</ogc:PropertyName>
				<ogc:Literal>2999-10-22</ogc:Literal>
			</ogc:PropertyIsGreaterThanOrEqualTo>
		</ogc:Filter>
	</wfs:Query>
</wfs:GetFeature>
                                        </body>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                                        <xsl:variable name="expression">//wfs:FeatureCollection</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                        <xsl:variable name="expression">(count(//gml:featureMember) + count(//gml:featureMembers/*)) = 0</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

        <test name="wfs:wfs-1.1.0-Basic-GetFeature-tc40.4">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>Correctly evaluate the PropertyIsGreaterThanOrEqualTo predicate expressed by a valid ogc:PropertyIsGreaterThanOrEqualTo element.</assertion>
      <comment>PropertyIsGreaterThanOrEqualTo filter request, for a datetime-type property, for a value over or equal to '2006-06-28T07:06:00+02:00' expecting at least 2 matches.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the number of result features is &gt;= 2; (3) the result must not contain any features that are less than the literal given in the request.</comment>
      <link>filter-</link>
      <link>OGC 04-095, 9.2, p.12</link>
                <code>

                        <xsl:variable name="response">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                   <method>post</method>
                                   <body>
                                           <wfs:GetFeature version="1.1.0" service="WFS">
	<wfs:Query typeName="sf:PrimitiveGeoFeature" srsName="urn:ogc:def:crs:EPSG::4326">
		<ogc:Filter>
			<ogc:PropertyIsGreaterThanOrEqualTo>
				<ogc:PropertyName>sf:dateTimeProperty</ogc:PropertyName>
				<ogc:Literal>2006-06-28T07:06:00+02:00</ogc:Literal>
			</ogc:PropertyIsGreaterThanOrEqualTo>
		</ogc:Filter>
	</wfs:Query>
</wfs:GetFeature>
                                        </body>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($response/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                      <xsl:variable name="featureCount" select="count($response//sf:PrimitiveGeoFeature)"/>
                      <xsl:if test="$featureCount lt 1">
                        <ctl:message>FAILURE: No sf:PrimitiveGeoFeature instances in response.</ctl:message>
                        <ctl:fail/>
                      </xsl:if>
                      <xsl:for-each select="$response//sf:PrimitiveGeoFeature">
                        <xsl:if test="xsd:dateTime(sf:dateTimeProperty) lt xsd:dateTime('2006-06-28T07:06:00+02:00')">
                          <ctl:message>FAILURE: sf:dateTimeProperty before 2006-06-28T07:06:00+02:00 (gml:id = <xsl:value-of select="@gml:id"/>)</ctl:message>
                          <ctl:fail/>
                        </xsl:if>
                      </xsl:for-each>
                                </xsl:otherwise>
                        </xsl:choose>
                </code>
        </test>

<test name="wfs:wfs-1.1.0-Basic-GetFeature-tc41.1">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>Correctly evaluate the PropertyIsBetween predicate expressed by a valid ogc:PropertyIsBetween element.</assertion>
      <comment>PropertyIsBetween filter request, for a decimal-type property, for a value between '10' and '20' expecting at least 2 matches.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the number of result features is &gt;= 2; (3) the result feature set does not have a value outside the boundary values given in the request.</comment>
      <link>filter-</link>
      <link>OGC 04-095, 9.2, p.12</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                   <method>post</method>
                                   <body>
                                           <wfs:GetFeature version="1.1.0" service="WFS">
	<wfs:Query typeName="sf:PrimitiveGeoFeature" srsName="urn:ogc:def:crs:EPSG::4326">
		<ogc:Filter>
			<ogc:PropertyIsBetween>
				<ogc:PropertyName>sf:decimalProperty</ogc:PropertyName>
				<ogc:LowerBoundary><ogc:Literal>10</ogc:Literal></ogc:LowerBoundary>
				<ogc:UpperBoundary><ogc:Literal>20</ogc:Literal></ogc:UpperBoundary>
			</ogc:PropertyIsBetween>
		</ogc:Filter>
	</wfs:Query>
</wfs:GetFeature>
                                        </body>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                                        <xsl:variable name="expression">//wfs:FeatureCollection</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                        <xsl:variable name="expression">(count(//gml:featureMember) + count(//gml:featureMembers/*)) &gt;= 2</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                        <xsl:variable name="expression">(not(//sf:PrimitiveGeoFeature/sf:decimalProperty &lt; 10) and not(//sf:PrimitiveGeoFeature/sf:decimalProperty &gt; 20))</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

<test name="wfs:wfs-1.1.0-Basic-GetFeature-tc41.2">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>Correctly evaluate the PropertyIsBetween predicate expressed by a valid ogc:PropertyIsBetween element.</assertion>
      <comment>PropertyIsBetween filter request, for a double-type property, for a value between '20.1' and '24509.5' expecting at least one match.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the number of result features is &gt;= 1; (3) the result feature set does not have a value outside the boundary values given in the request.</comment>
      <link>filter-</link>
      <link>OGC 04-095, 9.2, p.12</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                   <method>post</method>
                                   <body>
                                           <wfs:GetFeature version="1.1.0" service="WFS">
	<wfs:Query typeName="sf:AggregateGeoFeature" srsName="urn:ogc:def:crs:EPSG::4326">
		<ogc:Filter>
			<ogc:PropertyIsBetween>
				<ogc:PropertyName>sf:doubleProperty</ogc:PropertyName>
				<ogc:LowerBoundary><ogc:Literal>20.1</ogc:Literal></ogc:LowerBoundary>
				<ogc:UpperBoundary><ogc:Literal>24509.5</ogc:Literal></ogc:UpperBoundary>
			</ogc:PropertyIsBetween>
		</ogc:Filter>
	</wfs:Query>
</wfs:GetFeature>
                                        </body>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                                        <xsl:variable name="expression">//wfs:FeatureCollection</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                        <xsl:variable name="expression">(count(//gml:featureMember) + count(//gml:featureMembers/*)) &gt;= 1</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                        <xsl:variable name="expression">(not(//sf:AggregateGeoFeature/sf:doubleProperty &lt; 20.1) and not(//sf:AggregateGeoFeature/sf:doubleProperty &gt; 24509.5))</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

        <test name="wfs:wfs-1.1.0-Basic-GetFeature-tc41.3">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>Correctly evaluate the PropertyIsBetween predicate expressed by a valid ogc:PropertyIsBetween element.</assertion>
      <comment>PropertyIsBetween filter request, for a date-type property, for a value between '2006-09-01' and '2006-11-01' expecting at least 3 matches.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the number of result features is &gt;= 3; (3) the result feature set does not have a value outside the boundary values given in the request.</comment>
      <link>filter-</link>
      <link>OGC 04-095, 9.2, p.12</link>
                <code>
                        <xsl:variable name="response">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                   <method>post</method>
                                   <body>
                                           <wfs:GetFeature version="1.1.0" service="WFS">
	<wfs:Query typeName="sf:PrimitiveGeoFeature" srsName="urn:ogc:def:crs:EPSG::4326">
		<ogc:Filter>
			<ogc:PropertyIsBetween>
				<ogc:PropertyName>sf:dateProperty</ogc:PropertyName>
				<ogc:LowerBoundary><ogc:Literal>2006-09-01Z</ogc:Literal></ogc:LowerBoundary>
				<ogc:UpperBoundary><ogc:Literal>2006-11-01Z</ogc:Literal></ogc:UpperBoundary>
			</ogc:PropertyIsBetween>
		</ogc:Filter>
	</wfs:Query>
</wfs:GetFeature>
                                        </body>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($response/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                      <xsl:variable name="featureCount" select="count($response//sf:PrimitiveGeoFeature)"/>
                      <xsl:if test="$featureCount lt 1">
                        <ctl:message>FAILURE: No sf:PrimitiveGeoFeature instances in response.</ctl:message>
                        <ctl:fail/>
                      </xsl:if>
                      <xsl:for-each select="$response//sf:dateProperty">
                        <xsl:if test="(xsd:date(.) lt xsd:date('2006-09-01Z')) or (xsd:date(.) gt xsd:date('2006-11-01Z'))">
                          <ctl:message>FAILURE: sf:dateProperty value is not in interval 2006-09-01Z/2006-11-01Z (gml:id = <xsl:value-of select="../@gml:id"/>)</ctl:message>
                          <ctl:fail/>
                        </xsl:if>
                      </xsl:for-each>
                                </xsl:otherwise>
                        </xsl:choose>
                </code>
        </test>

        <test name="wfs:wfs-1.1.0-Basic-GetFeature-tc41.4">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>Correctly evaluate the PropertyIsBetween predicate expressed by a valid ogc:PropertyIsBetween element.</assertion>
      <comment>PropertyIsBetween filter request, for a date-type property, for a value between '2999-09-01' and '2999-11-01' expecting no matches.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the number of result features is = 0.</comment>
      <link>filter-</link>
      <link>OGC 04-095, 9.2, p.12</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                   <method>post</method>
                                   <body>
                                           <wfs:GetFeature version="1.1.0" service="WFS">
	<wfs:Query typeName="sf:PrimitiveGeoFeature" srsName="urn:ogc:def:crs:EPSG::4326">
		<ogc:Filter>
			<ogc:PropertyIsBetween>
				<ogc:PropertyName>sf:dateProperty</ogc:PropertyName>
				<ogc:LowerBoundary><ogc:Literal>2999-09-01</ogc:Literal></ogc:LowerBoundary>
				<ogc:UpperBoundary><ogc:Literal>2999-11-01</ogc:Literal></ogc:UpperBoundary>
			</ogc:PropertyIsBetween>
		</ogc:Filter>
	</wfs:Query>
</wfs:GetFeature>
                                        </body>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                                        <xsl:variable name="expression">//wfs:FeatureCollection</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                        <xsl:variable name="expression">(count(//gml:featureMember) + count(//gml:featureMembers/*)) = 0</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

    <test name="wfs:wfs-1.1.0-Basic-GetFeature-tc42.1">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>Correctly evaluate the PropertyIsLike predicate expressed by a valid ogc:PropertyIsLike element.</assertion>
      <comment>PropertyIsLike filter request, for a string-type property using the wildcard character on sf:strProperty expecting at least 3 matches.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the number of result features is &gt;= 3; (3) the result feature set contains the expected feature instance.</comment>
      <link>filter-</link>
      <link>OGC 04-095, 9.2, p.12</link>
                <code>
                        <xsl:variable name="response">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                   <method>post</method>
                                   <body>
                                           <wfs:GetFeature version="1.1.0" service="WFS">
	<wfs:Query typeName="sf:AggregateGeoFeature" srsName="urn:ogc:def:crs:EPSG::4326">
		<ogc:Filter>
			<ogc:PropertyIsLike wildCard="*" singleChar="?" escapeChar="\">
				<ogc:PropertyName>sf:strProperty</ogc:PropertyName>
				<ogc:Literal>*Ma quande lingues coalesce*</ogc:Literal>
			</ogc:PropertyIsLike>
		</ogc:Filter>
	</wfs:Query>
</wfs:GetFeature>
                                        </body>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($response/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                    <xsl:if test="count($response//sf:AggregateGeoFeature) lt 1">
                      <ctl:message>FAILURE: Empty response</ctl:message>
                      <ctl:fail/>
                    </xsl:if>
                    <xsl:for-each select="$response//sf:AggregateGeoFeature">
                      <xsl:if test="matches(sf:strProperty,'.*Ma quande lingues coalesce.*') != true()">
                        <ctl:message>FAILURE: sf:strProperty value does not match expression "*Ma quande lingues coalesce*" (gml:id = <xsl:value-of select="@gml:id"/>)</ctl:message>
                        <ctl:fail/>
                      </xsl:if>
                    </xsl:for-each>
                                </xsl:otherwise>
                        </xsl:choose>
                </code>
        </test>

<test name="wfs:wfs-1.1.0-Basic-GetFeature-tc42.2">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>Correctly evaluate the PropertyIsLike predicate expressed by a valid ogc:PropertyIsLike element.</assertion>
      <comment>PropertyIsLike filter request, for a string-type property using the single character element on gml:name expecting at least 1 match.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the number of result features is &gt;= 1; (3) the result feature set contains the expected feature instance.</comment>
      <link>filter-</link>
      <link>OGC 04-095, 9.2, p.12</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                   <method>post</method>
                                   <body>
                                           <wfs:GetFeature version="1.1.0" service="WFS">
	<wfs:Query typeName="sf:PrimitiveGeoFeature" srsName="urn:ogc:def:crs:EPSG::4326">
		<ogc:Filter>
			<ogc:PropertyIsLike wildCard="*" singleChar="?" escapeChar="\">
				<ogc:PropertyName>gml:name</ogc:PropertyName>
				<ogc:Literal>name-f01?</ogc:Literal>
			</ogc:PropertyIsLike>
		</ogc:Filter>
	</wfs:Query>
</wfs:GetFeature>
                                        </body>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                    <xsl:variable name="featureCount" select="count($request1//sf:PrimitiveGeoFeature)"/>
                    <xsl:if test="$featureCount lt 1">
                      <ctl:message>FAILURE: Expected at least 1 sf:PrimitiveGeoFeature instance in response (<xsl:value-of select="$featureCount"/> included)</ctl:message>
                      <ctl:fail/>
                    </xsl:if>
                    <!-- WARNING: multiple gml:name elements are allowed, but only one appears in test data features -->
                    <xsl:for-each select="$request1//sf:PrimitiveGeoFeature">
                      <xsl:if test="matches(gml:name,'name-f01.') != true()">
                        <ctl:message>FAILURE: gml:name does not match expression "name-f01." (gml:id = <xsl:value-of select="@gml:id"/>)</ctl:message>
                        <ctl:fail/>
                      </xsl:if>
                    </xsl:for-each>
                                </xsl:otherwise>
                        </xsl:choose>
                </code>
        </test>

<test name="wfs:wfs-1.1.0-Basic-GetFeature-tc42.3">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>Correctly evaluate the PropertyIsLike predicate expressed by a valid ogc:PropertyIsLike element.</assertion>
      <comment>PropertyIsLike filter request, for a string-type property using the single character element on gml:name expecting no matches.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the number of result features is = 0.</comment>
      <link>filter-</link>
      <link>OGC 04-095, 9.2, p.12</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                   <method>post</method>
                                   <body>
                                           <wfs:GetFeature version="1.1.0" service="WFS">
	<wfs:Query typeName="sf:PrimitiveGeoFeature" srsName="urn:ogc:def:crs:EPSG::4326">
		<ogc:Filter>
			<ogc:PropertyIsLike wildCard="*" singleChar="?" escapeChar="\">
				<ogc:PropertyName>gml:name</ogc:PropertyName>
				<ogc:Literal>nam??-f00?</ogc:Literal>
			</ogc:PropertyIsLike>
		</ogc:Filter>
	</wfs:Query>
</wfs:GetFeature>
                                        </body>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                                        <xsl:variable name="expression">//wfs:FeatureCollection</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                        <xsl:variable name="expression">(count(//gml:featureMember) + count(//gml:featureMembers/*)) = 0</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

<test name="wfs:wfs-1.1.0-Basic-GetFeature-tc43.1">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>Correctly select the objects specified by the list of supplied identifiers. The  identification scheme is service-specific, but valid identifiers must substitute for ogc:_Id.</assertion>
      <comment>GetFeature to first get more than one feature id (gml:id), then another GetFeature filtering on the gml:ids.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is an wfs:FeatureCollection document; (3) the response shall have at least the two feature members expected from the request.</comment>
      <link>filter-1.1.0-objectid-atc2</link>
      <link>OGC 04-095, 11.1, p.14</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                   <method>post</method>
                                   <body>
                                           <wfs:GetFeature version="1.1.0" service="WFS">
	<wfs:Query typeName="sf:EntitéGénérique" srsName="urn:ogc:def:crs:EPSG::4326"/>
</wfs:GetFeature>
                                        </body>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1//wfs:FeatureCollection)">
                                <ctl:message>FAILURE: Expected valid wfs:FeatureCollection.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                                <xsl:otherwise>

            <xsl:variable name="gml.id1">
              <xsl:value-of select="$request1//sf:EntitéGénérique[1]/@gml:id"/>
            </xsl:variable>
            <xsl:variable name="gml.id2">
              <xsl:value-of select="$request1//sf:EntitéGénérique[2]/@gml:id"/>
            </xsl:variable>

                        <xsl:variable name="request2">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                   <method>post</method>
                                   <body>
                                           <wfs:GetFeature version="1.1.0" service="WFS">
	<wfs:Query typeName="sf:EntitéGénérique" srsName="urn:ogc:def:crs:EPSG::4326">
		<ogc:Filter>
			<ogc:GmlObjectId gml:id="{$gml.id1}"/>
			<ogc:GmlObjectId gml:id="{$gml.id2}"/>
		</ogc:Filter>
	</wfs:Query>
</wfs:GetFeature>
                                        </body>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request2/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                                        <xsl:for-each select="$request2//sf:EntitéGénérique">
                      <xsl:variable name="id"><xsl:value-of select="@gml:id"/></xsl:variable>
                      <xsl:if test="empty(index-of(($gml.id1, $gml.id2), $id))">
                        <ctl:message>FAILURE: Unexpected gml:id value (<xsl:value-of select="$id"/>)</ctl:message>
                        <ctl:fail/>
                      </xsl:if>
                    </xsl:for-each>
                                </xsl:otherwise>
                        </xsl:choose>

                </xsl:otherwise>
                </xsl:choose>

                </code>
        </test>

    <ctl:test name="wfs:wfs-1.1.0-Basic-GetFeature-tc45.1">
      <ctl:param name="wfs.GetFeature.post.url"/>
      <ctl:assertion>
      The response to a GetFeature request that includes an ogc:Filter expression
      with a PropertyIsNull predicate must include only feature representations
      for which the specified property is either absent or has no value. Mandatory
      properties cannot be null.
      </ctl:assertion>
      <ctl:comment>
      Pass if the response entity is a valid wfs:FeatureCollection that contains
      only feature members satisfying the PropertyIsNull constraint.
      </ctl:comment>
      <ctl:link>OGC 04-095, 9.2, p.13</ctl:link>
          <ctl:code>
        <xsl:variable name="response">
            <ctl:request>
                <ctl:url>
                    <xsl:value-of select="$wfs.GetFeature.post.url"/>
                </ctl:url>
               <ctl:method>POST</ctl:method>
               <ctl:body>
                                   <!-- test case id: wfs-1.1.0-Basic-GetFeature-tc45.1 --><wfs:GetFeature version="1.1.0" service="WFS">
  <wfs:Query typeName="sf:PrimitiveGeoFeature">
    <wfs:PropertyName>sf:uriProperty</wfs:PropertyName>
    <ogc:Filter>
      <ogc:PropertyIsNull>
        <ogc:PropertyName>sf:uriProperty</ogc:PropertyName>										
      </ogc:PropertyIsNull>
    </ogc:Filter>
  </wfs:Query>
</wfs:GetFeature>
               </ctl:body>
               <p:XMLValidatingParser.GMLSF1/>
            </ctl:request>
        </xsl:variable>

        <xsl:choose>
            <xsl:when test="not($response/*)">
                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                <ctl:fail/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:variable name="featureCount" select="count($response//sf:PrimitiveGeoFeature)"/>
              <xsl:if test="$featureCount lt 1">
                <ctl:message>FAILURE: Empty response</ctl:message>
                <ctl:fail/>
              </xsl:if>
              <xsl:for-each select="$response//sf:PrimitiveGeoFeature">
                <xsl:if test="sf:uriProperty and (string-length(sf:uriProperty) gt 0)">
                  <ctl:message>FAILURE: sf:uriProperty value is not null (gml:id = <xsl:value-of select="@gml:id"/>)</ctl:message>
                  <ctl:fail/>
                </xsl:if>
              </xsl:for-each>
            </xsl:otherwise>
        </xsl:choose>
      </ctl:code>
        </ctl:test>

    <ctl:test name="wfs:wfs-1.1.0-Basic-GetFeature-tc45.2">
      <ctl:param name="wfs.GetFeature.post.url"/>
      <ctl:assertion>
      The response to a GetFeature request that includes an ogc:Filter expression
      with a PropertyIsNull predicate must include only feature representations
      for which the specified property is either absent or has no value. Mandatory
      properties cannot be null.
      </ctl:assertion>
      <ctl:comment>
      Pass if the response entity is an empty wfs:FeatureCollection.
      </ctl:comment>
      <ctl:link>OGC 04-095, 9.2, p.13</ctl:link>
          <ctl:code>
        <xsl:variable name="response">
            <ctl:request>
                <ctl:url>
                    <xsl:value-of select="$wfs.GetFeature.post.url"/>
                </ctl:url>
               <ctl:method>POST</ctl:method>
               <ctl:body>
                                   <!-- test case id: wfs-1.1.0-Basic-GetFeature-tc45.2 --><wfs:GetFeature version="1.1.0" service="WFS">
  <wfs:Query typeName="sf:PrimitiveGeoFeature">
    <ogc:Filter>
      <ogc:PropertyIsNull>
        <ogc:PropertyName>sf:intProperty</ogc:PropertyName>										
      </ogc:PropertyIsNull>
    </ogc:Filter>
  </wfs:Query>
</wfs:GetFeature>
               </ctl:body>
               <p:XMLValidatingParser.GMLSF1/>
            </ctl:request>
        </xsl:variable>

        <xsl:choose>
            <xsl:when test="not($response/*)">
                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                <ctl:fail/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:variable name="featureCount" select="count($response//sf:PrimitiveGeoFeature)"/>
              <xsl:if test="$featureCount gt 0">
                <ctl:message>FAILURE: Mandatory properties cannot be null. Expected empty response (<xsl:value-of select="$featureCount"/> features included)</ctl:message>
                <ctl:fail/>
              </xsl:if>
              <xsl:for-each select="$response//sf:PrimitiveGeoFeature">
                <xsl:if test="not(sf:intProperty) or (string-length(sf:intProperty) = 0)">
                  <ctl:message>FAILURE: sf:intProperty cannot be null (gml:id = <xsl:value-of select="@gml:id"/>)</ctl:message>
                  <ctl:fail/>
                </xsl:if>
              </xsl:for-each>
            </xsl:otherwise>
        </xsl:choose>
      </ctl:code>
        </ctl:test>

    <ctl:test name="wfs:wfs-1.1.0-Basic-GetFeature-tc45.3">
      <ctl:param name="wfs.GetFeature.post.url"/>
      <ctl:assertion>
      The response to a GetFeature request that includes an ogc:Filter expression
      with a PropertyIsNull predicate must include only feature representations
      for which the specified property is either absent or has no value. Mandatory
      properties cannot be null.
      </ctl:assertion>
      <ctl:comment>
      Pass if the response entity is a valid wfs:FeatureCollection that contains
      only feature members satisfying the PropertyIsNull constraint.
      </ctl:comment>
      <ctl:link>OGC 04-095, 9.2, p.13</ctl:link>
          <ctl:code>
        <xsl:variable name="response">
            <ctl:request>
                <ctl:url>
                    <xsl:value-of select="$wfs.GetFeature.post.url"/>
                </ctl:url>
               <ctl:method>POST</ctl:method>
               <ctl:body>
                                   <!-- test case id: wfs-1.1.0-Basic-GetFeature-tc45.3 --><wfs:GetFeature version="1.1.0" service="WFS">
  <wfs:Query typeName="sf:AggregateGeoFeature">
    <ogc:Filter>
      <ogc:PropertyIsNull>
        <ogc:PropertyName>sf:multiCurveProperty</ogc:PropertyName>
      </ogc:PropertyIsNull>
    </ogc:Filter>
  </wfs:Query>
</wfs:GetFeature>
               </ctl:body>
               <p:XMLValidatingParser.GMLSF1/>
            </ctl:request>
        </xsl:variable>

        <xsl:choose>
            <xsl:when test="not($response/*)">
                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                <ctl:fail/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:if test="count($response//sf:AggregateGeoFeature) lt 1">
                <ctl:message>FAILURE: Empty response</ctl:message>
                <ctl:fail/>
              </xsl:if>
              <xsl:for-each select="$response//sf:AggregateGeoFeature">
                <xsl:if test="sf:multiCurveProperty">
                  <ctl:message>FAILURE: sf:multiCurveProperty value is not null (missing) (gml:id = <xsl:value-of select="@gml:id"/>)</ctl:message>
                  <ctl:fail/>
                </xsl:if>
              </xsl:for-each>
            </xsl:otherwise>
        </xsl:choose>
      </ctl:code>
        </ctl:test>

        <test name="wfs:wfs-1.1.0-Basic-GetFeature-tc49.1">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>If the @srsName of the supplied literal geometry or gml:Envelope is supported, then the coordinate values in the response shall correspond to that CRS.</assertion>
      <comment>GetFeature spatial query, with an srsName specified (default), and the response should use the requested SRS.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is an wfs:FeatureCollection document; (3) the response shall use the default srs value requested.</comment>
      <link>filter-1.1.0-spatial-</link>
      <link>OGC 04-095, 8.3, p.11</link>
                <code>
                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                   <method>post</method>
                                   <body>
                                           <!-- test case id: wfs-1.1.0-Basic-GetFeature-tc49.1 --><wfs:GetFeature version="1.1.0" service="WFS">
        <wfs:Query typeName="sf:PrimitiveGeoFeature" srsName="urn:ogc:def:crs:EPSG::4326">
                <ogc:Filter>
                        <ogc:BBOX>
                                <ogc:PropertyName>sf:pointProperty</ogc:PropertyName>
                                <gml:Envelope srsName="urn:ogc:def:crs:EPSG::4326">
                                        <gml:lowerCorner>37.0 -2.5</gml:lowerCorner>
                                        <gml:upperCorner>42.0 2.5</gml:upperCorner>
                                </gml:Envelope>
                        </ogc:BBOX>
                </ogc:Filter>
        </wfs:Query>
</wfs:GetFeature>
                                        </body>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                  <xsl:if test="count($request1//sf:PrimitiveGeoFeature) lt 1">
                    <ctl:message>FAILURE: Empty response</ctl:message>
                    <ctl:fail/>
                  </xsl:if>
                  <xsl:for-each select="$request1//@srsName">
                    <xsl:if test=". != 'urn:ogc:def:crs:EPSG::4326'">
                                                <ctl:message>FAILURE: @srsName="<xsl:value-of select="."/>" does not match expected value ("urn:ogc:def:crs:EPSG::4326")</ctl:message>
                                                <ctl:fail/>
                                        </xsl:if>
                  </xsl:for-each>
                                </xsl:otherwise>
                        </xsl:choose>
                </code>
        </test>

   <test name="wfs:wfs-1.1.0-Basic-GetFeature-tc51.1">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>When the SortBy parameter is used the resulting feature set must be properly sorted according to the sort criteria.</assertion>
      <comment>GetFeature for all PrimitiveGeoFeature sorting by the intProperty in ascending order.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is an wfs:FeatureCollection document; (3) the response shall have the features sorted by the proper feature property in the described ascending or descending manner.</comment>
      <link>wfs-</link>
      <link>OGC 04-094, 14.7.3.1, p.100</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                        <method>post</method>
                                        <body>
                                                <!-- test case id: wfs-1.1.0-Basic-GetFeature-tc51.1 --><wfs:GetFeature version="1.1.0" service="WFS">
  <wfs:Query typeName="sf:PrimitiveGeoFeature" srsName="urn:ogc:def:crs:EPSG::4326">
    <ogc:SortBy>
      <ogc:SortProperty>
        <ogc:PropertyName>sf:intProperty</ogc:PropertyName>
        <ogc:SortOrder>ASC</ogc:SortOrder>
      </ogc:SortProperty>
    </ogc:SortBy>
  </wfs:Query>
</wfs:GetFeature>
                                        </body>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1//wfs:FeatureCollection)">
                                <ctl:message>[FAILURE] Expected wfs:FeatureCollection in response.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                                <xsl:otherwise>
                  <xsl:variable name="features" select="$request1//sf:PrimitiveGeoFeature"/>
                  <xsl:variable name="f1.int" select="xsd:integer($features[1]/sf:intProperty)"/>
                  <xsl:variable name="f2.int" select="xsd:integer($features[2]/sf:intProperty)"/>
                  <xsl:variable name="f3.int" select="xsd:integer($features[3]/sf:intProperty)"/>
                                  <xsl:if test="($f1.int gt $f2.int) or ($f2.int gt $f3.int)">
                                          <ctl:message>[FAILURE] Features are not sorted by sf:intProperty in ascending order.</ctl:message>
                                          <ctl:fail/>
                                  </xsl:if>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

   <test name="wfs:wfs-1.1.0-Basic-GetFeature-tc51.2">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>When the SortBy parameter is used the resulting feature set must be properly sorted according to the sort criteria.</assertion>
      <comment>GetFeature for all PrimitiveGeoFeature sorting by the intProperty in descending order.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is an wfs:FeatureCollection document; (3) the response shall have the features sorted by the proper feature property in the described ascending or descending manner.</comment>
      <link>wfs-</link>
      <link>OGC 04-094, 14.7.3.1, p.100</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                        <method>post</method>
                                        <body>
                                                <!-- test case id: wfs-1.1.0-Basic-GetFeature-tc51.1 --><wfs:GetFeature version="1.1.0" service="WFS">
  <wfs:Query typeName="sf:PrimitiveGeoFeature" srsName="urn:ogc:def:crs:EPSG::4326">
    <ogc:SortBy>
      <ogc:SortProperty>
        <ogc:PropertyName>sf:intProperty</ogc:PropertyName>
        <ogc:SortOrder>DESC</ogc:SortOrder>
      </ogc:SortProperty>
    </ogc:SortBy>
  </wfs:Query>
</wfs:GetFeature>
                                        </body>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1//wfs:FeatureCollection)">
                                <ctl:message>[FAILURE] Expected wfs:FeatureCollection in response.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                                <xsl:otherwise>
                  <xsl:variable name="features" select="$request1//sf:PrimitiveGeoFeature"/>
                                  <xsl:variable name="f1.int" select="xsd:integer($features[1]/sf:intProperty)"/>
                                  <xsl:variable name="f2.int" select="xsd:integer($features[2]/sf:intProperty)"/>
                                  <xsl:variable name="f3.int" select="xsd:integer($features[3]/sf:intProperty)"/>
                                  <xsl:if test="($f1.int lt $f2.int) or ($f2.int lt $f3.int)">
                                          <ctl:message>FAILURE: Features are not sorted by sf:intProperty in descending order.</ctl:message>
                                          <ctl:fail/>
                                  </xsl:if>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

   <test name="wfs:wfs-1.1.0-Basic-GetFeature-tc51.3">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>When the SortBy parameter is used the resulting feature set must be properly sorted according to the sort criteria.</assertion>
      <comment>GetFeature for all AggregateGeoFeature sorting by the featureCode in ascending order.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is an wfs:FeatureCollection document; (3) the response shall have the features sorted by the proper feature property in the described ascending or descending manner.</comment>
      <link>wfs-</link>
      <link>OGC 04-094, 14.7.3.1, p.100</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                        <method>post</method>
                                        <body>
                                                <!-- test case id: wfs-1.1.0-Basic-GetFeature-tc51.3 --><wfs:GetFeature version="1.1.0" service="WFS">
  <wfs:Query typeName="sf:AggregateGeoFeature" srsName="urn:ogc:def:crs:EPSG::4326">
    <ogc:SortBy>
      <ogc:SortProperty>
        <ogc:PropertyName>sf:featureCode</ogc:PropertyName>
        <ogc:SortOrder>ASC</ogc:SortOrder>
      </ogc:SortProperty>
    </ogc:SortBy>
  </wfs:Query>
</wfs:GetFeature>
                                        </body>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1//wfs:FeatureCollection)">
                                <ctl:message>[FAILURE] Expected wfs:FeatureCollection in response.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                                <xsl:otherwise>
                  <xsl:variable name="features" select="$request1//sf:AggregateGeoFeature"/>
                                  <xsl:variable name="f1.str" select="$features[1]/sf:featureCode"/>
                                  <xsl:variable name="f2.str" select="$features[2]/sf:featureCode"/>
                                  <xsl:variable name="f3.str" select="$features[3]/sf:featureCode"/>
                                  <xsl:if test="(compare($f1.str,$f2.str) gt 0) or (compare($f2.str,$f3.str) gt 0)">
                                          <ctl:message>FAILURE: Features are not sorted by sf:featureCode in ascending order.</ctl:message>
                                          <ctl:fail/>
                                  </xsl:if>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

   <test name="wfs:wfs-1.1.0-Basic-GetFeature-tc51.4">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>When the SortBy parameter is used the resulting feature set must be properly sorted according to the sort criteria.</assertion>
      <comment>GetFeature for all AggregateGeoFeature sorting by the featureCode in descending order.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is an wfs:FeatureCollection document; (3) the response shall have the features sorted by the proper feature property in the described ascending or descending manner.</comment>
      <link>wfs-</link>
      <link>OGC 04-094, 14.7.3.1, p.100</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                        <method>post</method>
                                        <body>
                                                <!-- test case id: wfs-1.1.0-Basic-GetFeature-tc51.4 --><wfs:GetFeature version="1.1.0" service="WFS">
  <wfs:Query typeName="sf:AggregateGeoFeature" srsName="urn:ogc:def:crs:EPSG::4326">
    <ogc:SortBy>
      <ogc:SortProperty>
        <ogc:PropertyName>sf:featureCode</ogc:PropertyName>
        <ogc:SortOrder>DESC</ogc:SortOrder>
      </ogc:SortProperty>
    </ogc:SortBy>
  </wfs:Query>
</wfs:GetFeature>
                                        </body>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1//wfs:FeatureCollection)">
                                <ctl:message>[FAILURE] Expected wfs:FeatureCollection in response.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                                <xsl:otherwise>
                  <xsl:variable name="features" select="$request1//sf:AggregateGeoFeature"/>
                                  <xsl:variable name="f1.str" select="$features[1]/sf:featureCode"/>
                                  <xsl:variable name="f2.str" select="$features[2]/sf:featureCode"/>
                                  <xsl:variable name="f3.str" select="$features[3]/sf:featureCode"/>
                                  <xsl:if test="(compare($f1.str,$f2.str) lt 0) or (compare($f2.str,$f3.str) lt 0)">
                                          <ctl:message>FAILURE: Features are not sorted by sf:featureCode in descending order.</ctl:message>
                                          <ctl:fail/>
                                  </xsl:if>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

   <test name="wfs:wfs-1.1.0-Basic-GetFeature-tc51.5">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>When the SortBy parameter is used the resulting feature set must be properly sorted according to the sort criteria.</assertion>
      <comment>GetFeature for all PrimitiveGeoFeature sorting by the dateProperty in ascending order.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is an wfs:FeatureCollection document; (3) the response shall have the features sorted by the proper feature property in the described ascending or descending manner.</comment>
      <link>wfs-</link>
      <link>OGC 04-094, 14.7.3.1, p.100</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                        <method>post</method>
                                        <body>
                                                <!-- test case id: wfs-1.1.0-Basic-GetFeature-tc51.5 --><wfs:GetFeature version="1.1.0" service="WFS">
  <wfs:Query typeName="sf:PrimitiveGeoFeature" srsName="urn:ogc:def:crs:EPSG::4326">
    <ogc:SortBy>
      <ogc:SortProperty>
        <ogc:PropertyName>sf:dateProperty</ogc:PropertyName>
        <ogc:SortOrder>ASC</ogc:SortOrder>
      </ogc:SortProperty>
    </ogc:SortBy>
  </wfs:Query>
</wfs:GetFeature>
                                        </body>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1//wfs:FeatureCollection)">
                                <ctl:message>[FAILURE] Expected wfs:FeatureCollection in response.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                                <xsl:otherwise>
                  <xsl:variable name="features" select="$request1//sf:PrimitiveGeoFeature"/>
                                  <xsl:variable name="f1.date" select="$features[1]/sf:dateProperty"/>
                                  <xsl:variable name="f2.date" select="$features[2]/sf:dateProperty"/>
                                  <xsl:variable name="f3.date" select="$features[3]/sf:dateProperty"/>
                                  <xsl:if test="(xsd:date($f1.date) gt xsd:date($f2.date)) or (xsd:date($f2.date) gt xsd:date($f3.date))">
                                          <ctl:message>FAILURE: Features are not sorted by sf:dateProperty in ascending order.</ctl:message>
                                          <ctl:fail/>
                                  </xsl:if>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

   <test name="wfs:wfs-1.1.0-Basic-GetFeature-tc51.6">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>When the SortBy parameter is used the resulting feature set must be properly sorted according to the sort criteria.</assertion>
      <comment>GetFeature for all PrimitiveGeoFeature sorting by the dateProperty in descending order.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is an wfs:FeatureCollection document; (3) the response shall have the features sorted by the proper feature property in the described ascending or descending manner.</comment>
      <link>wfs-</link>
      <link>OGC 04-094, 14.7.3.1, p.100</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                        <method>post</method>
                                        <body>
                                                <!-- test case id: wfs-1.1.0-Basic-GetFeature-tc51.6 --><wfs:GetFeature version="1.1.0" service="WFS">
  <wfs:Query typeName="sf:PrimitiveGeoFeature" srsName="urn:ogc:def:crs:EPSG::4326">
    <ogc:SortBy>
      <ogc:SortProperty>
        <ogc:PropertyName>sf:dateProperty</ogc:PropertyName>
        <ogc:SortOrder>DESC</ogc:SortOrder>
      </ogc:SortProperty>
    </ogc:SortBy>
  </wfs:Query>
</wfs:GetFeature>
                                        </body>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1//wfs:FeatureCollection)">
                                <ctl:message>[FAILURE] Expected wfs:FeatureCollection in response.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                                <xsl:otherwise>
                  <xsl:variable name="features" select="$request1//sf:PrimitiveGeoFeature"/>
                                  <xsl:variable name="f1.date" select="$features[1]/sf:dateProperty"/>
                                  <xsl:variable name="f2.date" select="$features[2]/sf:dateProperty"/>
                                  <xsl:variable name="f3.date" select="$features[3]/sf:dateProperty"/>
                                  <xsl:if test="(xsd:date($f1.date) lt xsd:date($f2.date)) or (xsd:date($f2.date) lt xsd:date($f3.date))">
                                          <ctl:message>FAILURE: Features are not sorted by sf:dateProperty in descending order.</ctl:message>
                                          <ctl:fail/>
                                  </xsl:if>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

</ctl:package>

	<ctl:test name="wfs:basic-main">
      <ctl:param name="wfs.GetCapabilities.document"/>
      <ctl:param name="gmlsf.profile.level"/>
	  <ctl:param name="wfs-xlink"/>

		<ctl:assertion>Tests the WFS 1.1.0 basic capabilities and operations.</ctl:assertion>
		<ctl:code>
		
			<!-- Discover endpoints to be used in tests -->
			<xsl:variable name="wfs.GetCapabilities.get.url">
				<xsl:value-of select="$wfs.GetCapabilities.document//ows:OperationsMetadata/ows:Operation[@name='GetCapabilities']/ows:DCP/ows:HTTP/ows:Get/@xlink:href"/>
			</xsl:variable>
			<xsl:variable name="wfs.GetCapabilities.post.url">
				<xsl:value-of select="$wfs.GetCapabilities.document//ows:OperationsMetadata/ows:Operation[@name='GetCapabilities']/ows:DCP/ows:HTTP/ows:Post/@xlink:href"/>
			</xsl:variable>	
			<xsl:variable name="wfs.DescribeFeatureType.get.url">
				<xsl:value-of select="$wfs.GetCapabilities.document//ows:OperationsMetadata/ows:Operation[@name='DescribeFeatureType']/ows:DCP/ows:HTTP/ows:Get/@xlink:href"/>
			</xsl:variable>	
			<xsl:variable name="wfs.DescribeFeatureType.post.url">
				<xsl:value-of select="$wfs.GetCapabilities.document//ows:OperationsMetadata/ows:Operation[@name='DescribeFeatureType']/ows:DCP/ows:HTTP/ows:Post/@xlink:href"/>
			</xsl:variable>	
			<xsl:variable name="wfs.GetFeature.get.url">
				<xsl:value-of select="$wfs.GetCapabilities.document//ows:OperationsMetadata/ows:Operation[@name='GetFeature']/ows:DCP/ows:HTTP/ows:Get/@xlink:href"/>
			</xsl:variable>	
			<xsl:variable name="wfs.GetFeature.post.url">
				<xsl:value-of select="$wfs.GetCapabilities.document//ows:OperationsMetadata/ows:Operation[@name='GetFeature']/ows:DCP/ows:HTTP/ows:Post/@xlink:href"/>
			</xsl:variable> 				  
			
			<xsl:choose>
				<xsl:when test="$wfs.GetCapabilities.get.url = '' or      ($wfs.DescribeFeatureType.post.url = '' and $wfs.DescribeFeatureType.get.url = '') or      ($wfs.GetFeature.post.url = '' and $wfs.GetFeature.get.url = '')">
					<ctl:message>ERROR: Mandatory endpoints not found!</ctl:message>
					<ctl:fail/>				
				</xsl:when>
				<xsl:otherwise>
				
					<!-- Run mandatory test groups -->
					<ctl:call-test name="wfs:run-GetCapabilities-GET">
						<ctl:with-param name="wfs.GetCapabilities.document" select="$wfs.GetCapabilities.document"/>
					</ctl:call-test>
					<!--At least one DescribeFeatureType expected-->
					<xsl:if test="not($wfs.DescribeFeatureType.post.url = '')">					
						<ctl:call-test name="wfs:run-DescribeFeatureType-POST">
							<ctl:with-param name="wfs.GetCapabilities.document" select="$wfs.GetCapabilities.document"/>
							<ctl:with-param name="gmlsf.profile.level" select="$gmlsf.profile.level"/>							
						</ctl:call-test>
					</xsl:if>
					<xsl:if test="not($wfs.DescribeFeatureType.get.url = '')">
						<ctl:call-test name="wfs:run-DescribeFeatureType-GET">
							<ctl:with-param name="wfs.GetCapabilities.document" select="$wfs.GetCapabilities.document"/>
							<ctl:with-param name="gmlsf.profile.level" select="$gmlsf.profile.level"/>								
						</ctl:call-test>
					</xsl:if>				
					<!--At least one GetFeature expected-->	
					<xsl:if test="not($wfs.GetFeature.post.url = '')">					
						<ctl:call-test name="wfs:run-GetFeature-POST">
							<ctl:with-param name="wfs.GetCapabilities.document" select="$wfs.GetCapabilities.document"/>
							<ctl:with-param name="gmlsf.profile.level" select="$gmlsf.profile.level"/>
							<ctl:with-param name="wfs-xlink" select="$wfs-xlink"/>
						</ctl:call-test>
					</xsl:if>
					<xsl:if test="not($wfs.GetFeature.get.url = '')">
						<ctl:call-test name="wfs:run-GetFeature-GET">
							<ctl:with-param name="wfs.GetCapabilities.document" select="$wfs.GetCapabilities.document"/>
						</ctl:call-test>
					</xsl:if>
					
					<!-- Run test groups for optional capabilities that are implemented (operation level) -->
					<xsl:if test="not($wfs.GetCapabilities.post.url = '')">
						<ctl:call-test name="wfs:run-GetCapabilities-POST">
							<ctl:with-param name="wfs.GetCapabilities.document" select="$wfs.GetCapabilities.document"/>
						</ctl:call-test>
					</xsl:if>
							
				</xsl:otherwise>
			</xsl:choose>

		</ctl:code>
	</ctl:test>	
	
</ctl:package>
	<ctl:package xmlns:p="http://teamengine.sourceforge.net/parsers" xmlns:gml="http://www.opengis.net/gml">

  <!-- include test groups for the WFS-Transaction conformance class -->
  <ctl:package xmlns="http://www.occamlab.com/ctl" xmlns:ogc="http://www.opengis.net/ogc">

   <!-- Include the cleanup (delete) group -->
   <ctl:package>
   
   <ctl:test name="wfs:run-Transaction-Cleanup">
    <ctl:param name="wfs.GetCapabilities.document"/>
    <ctl:param name="gmlsf.level"/>
    <ctl:assertion>Run test group for cleaning up (deleting) the features inserted by the Transactions.</ctl:assertion>
    <ctl:code>
      <xsl:variable name="wfs.Transaction.post.url">
        <xsl:value-of select="$wfs.GetCapabilities.document//ows:OperationsMetadata/ows:Operation[@name='Transaction']/ows:DCP/ows:HTTP/ows:Post/@xlink:href"/>
	  </xsl:variable>
       
	<ctl:call-test name="wfs:delete-test-data">
		<ctl:with-param name="wfs.Transaction.post.url" select="$wfs.Transaction.post.url"/>
		<ctl:with-param name="gmlsf.level" select="$gmlsf.level"/>
	</ctl:call-test>

	<!-- Delete initial test data -->
	<!--<ctl:call-test name="wfs:delete-original-test-data">
		<ctl:with-param name="wfs.Transaction.post.url" select="$wfs.Transaction.post.url"/>
		<ctl:with-param name="gmlsf.level" select="$gmlsf.level"/>
	</ctl:call-test>-->
	   
      </ctl:code>
    </ctl:test>

   <ctl:test name="wfs:delete-test-data">
      <ctl:param name="wfs.Transaction.post.url"/>
      <ctl:param name="gmlsf.level"/>
      <assertion>Deletes the test data used in transactions during the test run.</assertion>
      <comment>Deletes a number of features, always passes.</comment>
	  <ctl:code>

  <ctl:call-test name="wfs:delete-feature">
    <ctl:with-param name="wfs.Transaction.post.url" select="$wfs.Transaction.post.url"/>
    <ctl:with-param name="typename" select="'sf:PrimitiveGeoFeature'"/>
    <ctl:with-param name="gml.name" select="'cite.gmlsf0-f01'"/>
  </ctl:call-test>
  <ctl:call-test name="wfs:delete-feature">
    <ctl:with-param name="wfs.Transaction.post.url" select="$wfs.Transaction.post.url"/>
    <ctl:with-param name="typename" select="'sf:AggregateGeoFeature'"/>
    <ctl:with-param name="gml.name" select="'cite.gmlsf0-f02'"/>
  </ctl:call-test>
  <ctl:call-test name="wfs:delete-feature">
    <ctl:with-param name="wfs.Transaction.post.url" select="$wfs.Transaction.post.url"/>
    <ctl:with-param name="typename" select="'sf:EntitéGénérique'"/>
    <ctl:with-param name="gml.name" select="'cite.gmlsf0-f03'"/>
  </ctl:call-test>
  <ctl:call-test name="wfs:delete-feature">
    <ctl:with-param name="wfs.Transaction.post.url" select="$wfs.Transaction.post.url"/>
    <ctl:with-param name="typename" select="'sf:PrimitiveGeoFeature'"/>
    <ctl:with-param name="gml.name" select="'cite.gmlsf0-f04'"/>
  </ctl:call-test>
  <ctl:call-test name="wfs:delete-feature">
    <ctl:with-param name="wfs.Transaction.post.url" select="$wfs.Transaction.post.url"/>
    <ctl:with-param name="typename" select="'sf:PrimitiveGeoFeature'"/>
    <ctl:with-param name="gml.name" select="'cite.gmlsf0-f05'"/>
  </ctl:call-test>
  <ctl:call-test name="wfs:delete-feature">
    <ctl:with-param name="wfs.Transaction.post.url" select="$wfs.Transaction.post.url"/>
    <ctl:with-param name="typename" select="'sf:EntitéGénérique'"/>
    <ctl:with-param name="gml.name" select="'cite.gmlsf0-f06'"/>
  </ctl:call-test>
  <ctl:call-test name="wfs:delete-feature">
    <ctl:with-param name="wfs.Transaction.post.url" select="$wfs.Transaction.post.url"/>
    <ctl:with-param name="typename" select="'sf:PrimitiveGeoFeature'"/>
    <ctl:with-param name="gml.name" select="'cite.gmlsf0-f07'"/>
  </ctl:call-test>
  <ctl:call-test name="wfs:delete-feature">
    <ctl:with-param name="wfs.Transaction.post.url" select="$wfs.Transaction.post.url"/>
    <ctl:with-param name="typename" select="'sf:AggregateGeoFeature'"/>
    <ctl:with-param name="gml.name" select="'cite.gmlsf0-f26'"/>
  </ctl:call-test>
  <ctl:call-test name="wfs:delete-feature">
    <ctl:with-param name="wfs.Transaction.post.url" select="$wfs.Transaction.post.url"/>
    <ctl:with-param name="typename" select="'sf:AggregateGeoFeature'"/>
    <ctl:with-param name="gml.name" select="'cite.gmlsf0-f26bis'"/>
  </ctl:call-test>  
  <ctl:call-test name="wfs:delete-feature">
    <ctl:with-param name="wfs.Transaction.post.url" select="$wfs.Transaction.post.url"/>
    <ctl:with-param name="typename" select="'sf:EntitéGénérique'"/>
    <ctl:with-param name="gml.name" select="'cite.gmlsf0-f08'"/>
  </ctl:call-test>
  <ctl:call-test name="wfs:delete-feature">
    <ctl:with-param name="wfs.Transaction.post.url" select="$wfs.Transaction.post.url"/>
    <ctl:with-param name="typename" select="'sf:PrimitiveGeoFeature'"/>
    <ctl:with-param name="gml.name" select="'cite.gmlsf0-f94'"/>
  </ctl:call-test>
  <ctl:call-test name="wfs:delete-feature">
    <ctl:with-param name="wfs.Transaction.post.url" select="$wfs.Transaction.post.url"/>
    <ctl:with-param name="typename" select="'sf:PrimitiveGeoFeature'"/>
    <ctl:with-param name="gml.name" select="'cite.gmlsf0-f10'"/>
  </ctl:call-test>
  <ctl:call-test name="wfs:delete-feature">
    <ctl:with-param name="wfs.Transaction.post.url" select="$wfs.Transaction.post.url"/>
    <ctl:with-param name="typename" select="'sf:AggregateGeoFeature'"/>
    <ctl:with-param name="gml.name" select="'cite.gmlsf0-f12'"/>
  </ctl:call-test>
  <ctl:call-test name="wfs:delete-feature">
    <ctl:with-param name="wfs.Transaction.post.url" select="$wfs.Transaction.post.url"/>
    <ctl:with-param name="typename" select="'sf:PrimitiveGeoFeature'"/>
    <ctl:with-param name="gml.name" select="'cite.gmlsf0-f13'"/>
  </ctl:call-test>
  <ctl:call-test name="wfs:delete-feature">
    <ctl:with-param name="wfs.Transaction.post.url" select="$wfs.Transaction.post.url"/>
    <ctl:with-param name="typename" select="'sf:PrimitiveGeoFeature'"/>
    <ctl:with-param name="gml.name" select="'cite.gmlsf0-f13bis'"/>
  </ctl:call-test>  
  <ctl:call-test name="wfs:delete-feature">
    <ctl:with-param name="wfs.Transaction.post.url" select="$wfs.Transaction.post.url"/>
    <ctl:with-param name="typename" select="'sf:PrimitiveGeoFeature'"/>
    <ctl:with-param name="gml.name" select="'cite.gmlsf0-f14'"/>
  </ctl:call-test>
  <ctl:call-test name="wfs:delete-feature">
    <ctl:with-param name="wfs.Transaction.post.url" select="$wfs.Transaction.post.url"/>
    <ctl:with-param name="typename" select="'sf:PrimitiveGeoFeature'"/>
    <ctl:with-param name="gml.name" select="'cite.gmlsf0-f16'"/>
  </ctl:call-test>
  <ctl:call-test name="wfs:delete-feature">
    <ctl:with-param name="wfs.Transaction.post.url" select="$wfs.Transaction.post.url"/>
    <ctl:with-param name="typename" select="'sf:PrimitiveGeoFeature'"/>
    <ctl:with-param name="gml.name" select="'cite.gmlsf0-f17'"/>
  </ctl:call-test>
  <ctl:call-test name="wfs:delete-feature">
    <ctl:with-param name="wfs.Transaction.post.url" select="$wfs.Transaction.post.url"/>
    <ctl:with-param name="typename" select="'sf:EntitéGénérique'"/>
    <ctl:with-param name="gml.name" select="'cite.gmlsf0-f18'"/>
  </ctl:call-test>

    <!-- For GMLSF level 1 -->
	<xsl:if test="$gmlsf.level = 'sf-1'">
	  <ctl:call-test name="wfs:delete-feature">
		<ctl:with-param name="wfs.Transaction.post.url" select="$wfs.Transaction.post.url"/>
		<ctl:with-param name="typename" select="'sf:ComplexGeoFeature'"/>
		<ctl:with-param name="gml.name" select="'cite.gmlsf1-f200'"/>
	  </ctl:call-test>
	  <ctl:call-test name="wfs:delete-feature">
		<ctl:with-param name="wfs.Transaction.post.url" select="$wfs.Transaction.post.url"/>
		<ctl:with-param name="typename" select="'sf:ComplexGeoFeature'"/>
		<ctl:with-param name="gml.name" select="'cite.gmlsf1-f201'"/>
	  </ctl:call-test>  
	  <ctl:call-test name="wfs:delete-feature">
		<ctl:with-param name="wfs.Transaction.post.url" select="$wfs.Transaction.post.url"/>
		<ctl:with-param name="typename" select="'sf:ComplexGeoFeature'"/>
		<ctl:with-param name="gml.name" select="'cite.gmlsf1-f202'"/>
	  </ctl:call-test>
	</xsl:if>

  <!-- Delete a couple without names -->
  <ctl:call-test name="wfs:filter-delete-feature">
    <ctl:with-param name="wfs.Transaction.post.url" select="$wfs.Transaction.post.url"/>
  </ctl:call-test>  

	  </ctl:code>
   </ctl:test>

   <ctl:test name="wfs:delete-original-test-data">
      <ctl:param name="wfs.Transaction.post.url"/>
      <ctl:param name="gmlsf.level"/>
      <assertion>Deletes the original test data (loaded before testing).</assertion>
      <comment>Deletes a number of features, always passes.</comment>
	  <ctl:code>
		
  <!-- For GMLSF level 0 -->        
  <ctl:call-test name="wfs:delete-feature">
    <ctl:with-param name="wfs.Transaction.post.url" select="$wfs.Transaction.post.url"/>
    <ctl:with-param name="typename" select="'sf:PrimitiveGeoFeature'"/>
    <ctl:with-param name="gml.name" select="'name-f001'"/>
  </ctl:call-test>
  <ctl:call-test name="wfs:delete-feature">
    <ctl:with-param name="wfs.Transaction.post.url" select="$wfs.Transaction.post.url"/>
    <ctl:with-param name="typename" select="'sf:PrimitiveGeoFeature'"/>
    <ctl:with-param name="gml.name" select="'name-f002'"/>
  </ctl:call-test>  
  <ctl:call-test name="wfs:delete-feature">
    <ctl:with-param name="wfs.Transaction.post.url" select="$wfs.Transaction.post.url"/>
    <ctl:with-param name="typename" select="'sf:PrimitiveGeoFeature'"/>
    <ctl:with-param name="gml.name" select="'name-f003'"/>
  </ctl:call-test>  
  <ctl:call-test name="wfs:delete-feature">
    <ctl:with-param name="wfs.Transaction.post.url" select="$wfs.Transaction.post.url"/>
    <ctl:with-param name="typename" select="'sf:PrimitiveGeoFeature'"/>
    <ctl:with-param name="gml.name" select="'name-f008'"/>
  </ctl:call-test>  
  <ctl:call-test name="wfs:delete-feature">
    <ctl:with-param name="wfs.Transaction.post.url" select="$wfs.Transaction.post.url"/>
    <ctl:with-param name="typename" select="'sf:PrimitiveGeoFeature'"/>
    <ctl:with-param name="gml.name" select="'name-f015'"/>
  </ctl:call-test>  
  <ctl:call-test name="wfs:delete-feature">
    <ctl:with-param name="wfs.Transaction.post.url" select="$wfs.Transaction.post.url"/>
    <ctl:with-param name="typename" select="'sf:PrimitiveGeoFeature'"/>
    <ctl:with-param name="gml.name" select="'name-f091'"/>
  </ctl:call-test>  
  <ctl:call-test name="wfs:delete-feature">
    <ctl:with-param name="wfs.Transaction.post.url" select="$wfs.Transaction.post.url"/>
    <ctl:with-param name="typename" select="'sf:PrimitiveGeoFeature'"/>
    <ctl:with-param name="gml.name" select="'name-f092'"/>
  </ctl:call-test>  
  <ctl:call-test name="wfs:delete-feature">
    <ctl:with-param name="wfs.Transaction.post.url" select="$wfs.Transaction.post.url"/>
    <ctl:with-param name="typename" select="'sf:PrimitiveGeoFeature'"/>
    <ctl:with-param name="gml.name" select="'name-f093'"/>
  </ctl:call-test>  
  <ctl:call-test name="wfs:delete-feature">
    <ctl:with-param name="wfs.Transaction.post.url" select="$wfs.Transaction.post.url"/>
    <ctl:with-param name="typename" select="'sf:PrimitiveGeoFeature'"/>
    <ctl:with-param name="gml.name" select="'name-f094'"/>
  </ctl:call-test>
  <ctl:call-test name="wfs:delete-feature">
    <ctl:with-param name="wfs.Transaction.post.url" select="$wfs.Transaction.post.url"/>
    <ctl:with-param name="typename" select="'sf:AggregateGeoFeature'"/>
    <ctl:with-param name="gml.name" select="'name-f005'"/>
  </ctl:call-test>
  <ctl:call-test name="wfs:delete-feature">
    <ctl:with-param name="wfs.Transaction.post.url" select="$wfs.Transaction.post.url"/>
    <ctl:with-param name="typename" select="'sf:AggregateGeoFeature'"/>
    <ctl:with-param name="gml.name" select="'name-f009'"/>
  </ctl:call-test>
  <ctl:call-test name="wfs:delete-feature">
    <ctl:with-param name="wfs.Transaction.post.url" select="$wfs.Transaction.post.url"/>
    <ctl:with-param name="typename" select="'sf:AggregateGeoFeature'"/>
    <ctl:with-param name="gml.name" select="'name-f010'"/>
  </ctl:call-test>
  <ctl:call-test name="wfs:delete-feature">
    <ctl:with-param name="wfs.Transaction.post.url" select="$wfs.Transaction.post.url"/>
    <ctl:with-param name="typename" select="'sf:AggregateGeoFeature'"/>
    <ctl:with-param name="gml.name" select="'name-f016'"/>
  </ctl:call-test>
  <ctl:call-test name="wfs:delete-feature">
    <ctl:with-param name="wfs.Transaction.post.url" select="$wfs.Transaction.post.url"/>
    <ctl:with-param name="typename" select="'sf:EntitéGénérique'"/>
    <ctl:with-param name="gml.name" select="'name-f004'"/>
  </ctl:call-test>
  <ctl:call-test name="wfs:delete-feature">
    <ctl:with-param name="wfs.Transaction.post.url" select="$wfs.Transaction.post.url"/>
    <ctl:with-param name="typename" select="'sf:EntitéGénérique'"/>
    <ctl:with-param name="gml.name" select="'name-f007'"/>
  </ctl:call-test>
  <ctl:call-test name="wfs:delete-feature">
    <ctl:with-param name="wfs.Transaction.post.url" select="$wfs.Transaction.post.url"/>
    <ctl:with-param name="typename" select="'sf:EntitéGénérique'"/>
    <ctl:with-param name="gml.name" select="'name-f017'"/>
  </ctl:call-test>
 
    <!-- For GMLSF level 1 -->
	<xsl:if test="$gmlsf.level = 'sf-1' or $gmlsf.level = 'sf-2'">
	  <ctl:call-test name="wfs:delete-feature">
		<ctl:with-param name="wfs.Transaction.post.url" select="$wfs.Transaction.post.url"/>
		<ctl:with-param name="typename" select="'sf:ComplexGeoFeature'"/>
		<ctl:with-param name="gml.name" select="'name-f101'"/>
	  </ctl:call-test>
	  <ctl:call-test name="wfs:delete-feature">
		<ctl:with-param name="wfs.Transaction.post.url" select="$wfs.Transaction.post.url"/>
		<ctl:with-param name="typename" select="'sf:ComplexGeoFeature'"/>
		<ctl:with-param name="gml.name" select="'name-f102'"/>
	  </ctl:call-test>  
	  <ctl:call-test name="wfs:delete-feature">
		<ctl:with-param name="wfs.Transaction.post.url" select="$wfs.Transaction.post.url"/>
		<ctl:with-param name="typename" select="'sf:ComplexGeoFeature'"/>
		<ctl:with-param name="gml.name" select="'name-f103'"/>
	  </ctl:call-test>  
		<xsl:if test="$gmlsf.level = 'sf-2'">
		  <ctl:call-test name="wfs:delete-feature">
			<ctl:with-param name="wfs.Transaction.post.url" select="$wfs.Transaction.post.url"/>
			<ctl:with-param name="typename" select="'sf:LinkedFeature'"/>
			<ctl:with-param name="gml.name" select="'name-f201'"/>
		  </ctl:call-test>
		  <ctl:call-test name="wfs:delete-feature">
			<ctl:with-param name="wfs.Transaction.post.url" select="$wfs.Transaction.post.url"/>
			<ctl:with-param name="typename" select="'sf:LinkedFeature'"/>
			<ctl:with-param name="gml.name" select="'name-f202'"/>
		  </ctl:call-test>
		  <ctl:call-test name="wfs:delete-feature">
			<ctl:with-param name="wfs.Transaction.post.url" select="$wfs.Transaction.post.url"/>
			<ctl:with-param name="typename" select="'sf:LinkedFeature'"/>
			<ctl:with-param name="gml.name" select="'name-f203'"/>
		  </ctl:call-test>
		  <ctl:call-test name="wfs:delete-feature">
			<ctl:with-param name="wfs.Transaction.post.url" select="$wfs.Transaction.post.url"/>
			<ctl:with-param name="typename" select="'sf:LinkedFeature'"/>
			<ctl:with-param name="gml.name" select="'name-f204'"/>
		  </ctl:call-test>
		  <ctl:call-test name="wfs:delete-feature">
			<ctl:with-param name="wfs.Transaction.post.url" select="$wfs.Transaction.post.url"/>
			<ctl:with-param name="typename" select="'sf:LinkedFeature'"/>
			<ctl:with-param name="gml.name" select="'name-f205'"/>
		  </ctl:call-test>
		  <ctl:call-test name="wfs:delete-feature">
			<ctl:with-param name="wfs.Transaction.post.url" select="$wfs.Transaction.post.url"/>
			<ctl:with-param name="typename" select="'sf:LinkedFeature'"/>
			<ctl:with-param name="gml.name" select="'name-f206'"/>
		  </ctl:call-test>
		  <ctl:call-test name="wfs:delete-feature">
			<ctl:with-param name="wfs.Transaction.post.url" select="$wfs.Transaction.post.url"/>
			<ctl:with-param name="typename" select="'sf:LinkedFeature'"/>
			<ctl:with-param name="gml.name" select="'name-f207'"/>
		  </ctl:call-test>
		  <ctl:call-test name="wfs:delete-feature">
			<ctl:with-param name="wfs.Transaction.post.url" select="$wfs.Transaction.post.url"/>
			<ctl:with-param name="typename" select="'sf:LinkedFeature'"/>
			<ctl:with-param name="gml.name" select="'name-f208'"/>
		  </ctl:call-test>
		  <ctl:call-test name="wfs:delete-feature">
			<ctl:with-param name="wfs.Transaction.post.url" select="$wfs.Transaction.post.url"/>
			<ctl:with-param name="typename" select="'sf:LinkedFeature'"/>
			<ctl:with-param name="gml.name" select="'name-f209'"/>
		  </ctl:call-test>
		  <ctl:call-test name="wfs:delete-feature">
			<ctl:with-param name="wfs.Transaction.post.url" select="$wfs.Transaction.post.url"/>
			<ctl:with-param name="typename" select="'sf:LinkedFeature'"/>
			<ctl:with-param name="gml.name" select="'name-f210'"/>
		  </ctl:call-test>		  
		</xsl:if>	  
	</xsl:if>

		</ctl:code>
	</ctl:test>

    <test name="wfs:filter-delete-feature">
      <param name="wfs.Transaction.post.url"/>
      <assertion>
      Deletes a feature by by a manual filter.
      </assertion>
      <comment>Deletes a feature instance by a manual filter, for features without a unique name (no checks for errors, always pass).</comment>
		<code>

			<request>
			<url>
				<xsl:value-of select="$wfs.Transaction.post.url"/>
			</url>
			<method>POST</method>
			<body>
				<wfs:Transaction service="WFS" version="1.1.0">
				<wfs:Delete typeName="sf:PrimitiveGeoFeature">
					<ogc:Filter>
						<ogc:And>		
						<ogc:PropertyIsEqualTo>
							<ogc:PropertyName>sf:measurand</ogc:PropertyName>
							<ogc:Literal>270.6</ogc:Literal>
						</ogc:PropertyIsEqualTo> 		
						<ogc:PropertyIsEqualTo>
							<ogc:PropertyName>sf:intProperty</ogc:PropertyName>
							<ogc:Literal>987654321</ogc:Literal>
						</ogc:PropertyIsEqualTo>
						</ogc:And>
					</ogc:Filter>
				</wfs:Delete>
			</wfs:Transaction>                      
			</body>
			</request>
			
			<request>
			<url>
				<xsl:value-of select="$wfs.Transaction.post.url"/>
			</url>
			<method>POST</method>
			<body>
				<wfs:Transaction service="WFS" version="1.1.0">
				<wfs:Delete typeName="sf:PrimitiveGeoFeature">
					<ogc:Filter>
					<ogc:And>		
						<ogc:PropertyIsEqualTo>
							<ogc:PropertyName>sf:measurand</ogc:PropertyName>
							<ogc:Literal>94.6</ogc:Literal>
						</ogc:PropertyIsEqualTo>        
						<ogc:PropertyIsEqualTo>
							<ogc:PropertyName>sf:intProperty</ogc:PropertyName>
							<ogc:Literal>71921</ogc:Literal>
						</ogc:PropertyIsEqualTo>
					</ogc:And>			
					</ogc:Filter>
				</wfs:Delete>
			</wfs:Transaction>                      
			</body>
			</request>
			
			<request>
			<url>
				<xsl:value-of select="$wfs.Transaction.post.url"/>
			</url>
			<method>POST</method>
			<body>
				<wfs:Transaction service="WFS" version="1.1.0">
				<wfs:Delete typeName="sf:PrimitiveGeoFeature">
					<ogc:Filter>
					<ogc:And>		
						<ogc:PropertyIsEqualTo>
							<ogc:PropertyName>sf:measurand</ogc:PropertyName>
							<ogc:Literal>3731</ogc:Literal>
						</ogc:PropertyIsEqualTo>        
						<ogc:PropertyIsEqualTo>
							<ogc:PropertyName>sf:intProperty</ogc:PropertyName>
							<ogc:Literal>111222</ogc:Literal>
						</ogc:PropertyIsEqualTo>
					</ogc:And>			
					</ogc:Filter>
				</wfs:Delete>
			</wfs:Transaction>                      
			</body>
			</request>

</code>
</test>

    <test name="wfs:delete-feature">
      <param name="wfs.Transaction.post.url"/>
      <param name="typename"/>
      <param name="gml.name"/>
      <assertion>
      Deletes a feature by typename and gml:name.
      </assertion>
      <comment>Deletes a feature instance by the passed typename and gml:name (no checks for errors, always pass).</comment>
		<code>
		
			<xsl:variable name="response">
				<request>
					<url>
						<xsl:value-of select="$wfs.Transaction.post.url"/>
					</url>
                    <method>POST</method>
					<body>
<wfs:Transaction service="WFS" version="1.1.0">
    <wfs:Delete typeName="{$typename}">
      <ogc:Filter>
        <ogc:PropertyIsEqualTo>
          <ogc:PropertyName>gml:name</ogc:PropertyName>
          <ogc:Literal><xsl:value-of select="$gml.name"/></ogc:Literal>
        </ogc:PropertyIsEqualTo>
      </ogc:Filter>
    </wfs:Delete>
</wfs:Transaction>                      
					</body>
				</request>
			</xsl:variable>
			
		</code>
	</test>
    
</ctl:package>

   <!-- include test groups for optional capabilities (GMLSF level 1) -->
   <ctl:package>

    <ctl:test name="wfs:run-Transaction-XML-gmlsf1">
      <ctl:param name="wfs.Transaction.post.url"/>
      <ctl:param name="wfs.GetFeature.get.url"/>
      <ctl:assertion>Run test group for Transaction requests (XML) at GMLSF Level 1.</ctl:assertion>
      <ctl:code>
        <ctl:call-test name="wfs:wfs-1.1.0-Transaction-tc20.1">
          <ctl:with-param name="wfs.Transaction.post.url" select="$wfs.Transaction.post.url"/>
          <ctl:with-param name="wfs.GetFeature.get.url" select="$wfs.GetFeature.get.url"/>
        </ctl:call-test>
        <ctl:call-test name="wfs:wfs-1.1.0-Transaction-tc21.1">
          <ctl:with-param name="wfs.Transaction.post.url" select="$wfs.Transaction.post.url"/>
          <ctl:with-param name="wfs.GetFeature.get.url" select="$wfs.GetFeature.get.url"/>
        </ctl:call-test>
      </ctl:code>
    </ctl:test>

    <ctl:test name="wfs:wfs-1.1.0-Transaction-tc20.1">
      <ctl:param name="wfs.Transaction.post.url"/>
      <ctl:param name="wfs.GetFeature.get.url"/>
      <ctl:assertion>
      The response to a transaction request containing an insert statement must
      include a list of identifiers for all successfully inserted features.
      </ctl:assertion>
      <ctl:comment>Pass if all of the following conditions are true: (1) the response
      is schema valid; (2) TransactionSummary/totalInserted = 1; and (3) the
      wfs:InsertResults element has one child wfs:Feature element.</ctl:comment>
      <ctl:code>
			<xsl:variable name="response">
				<ctl:request>
					<ctl:url>
						<xsl:value-of select="$wfs.Transaction.post.url"/>
					</ctl:url>
                    <ctl:method>POST</ctl:method>
					<ctl:body>
						<!-- test case id: wfs-1.1.0-Transaction-tc20.1 --><wfs:Transaction service="WFS" version="1.1.0">
	<wfs:Insert handle="insert-1">
    <sf:ComplexGeoFeature gml:id="cite.gmlsf1-f200">
      <gml:description>
      Maecenas hendrerit venenatis lacus. Curabitur lobortis ullamcorper ipsum.
      In eget turpis et metus gravida tempor.
      </gml:description>
      <gml:name codeSpace="http://cite.opengeospatial.org/gmlsf">cite.gmlsf1-f200</gml:name>
      <gml:name>Nam dignissim</gml:name>
      <sf:geometryProperty>
        <gml:Curve srsName="urn:ogc:def:crs:EPSG::4326">
          <gml:segments>
            <gml:LineStringSegment interpolation="linear">
              <gml:posList>48.18662 17.18412 49.024483 18.455578 45.291733 20.709015</gml:posList>
            </gml:LineStringSegment>
            <gml:LineStringSegment interpolation="linear">
              <gml:posList>45.291733 20.709015 41.291733 20.810226 39.976074 23.579952 38.28941 27.545017</gml:posList>
            </gml:LineStringSegment>
          </gml:segments>
        </gml:Curve>
      </sf:geometryProperty>
      <sf:observation uom="http://www.bipm.fr/en/si/si_brochure/chapter2/2-1/metre.html">6.0</sf:observation>
      <sf:typeCode codeSpace="https://www.dgiwg.org/FAD">AN010</sf:typeCode>
      <sf:auditTrail>
        <sf:Event>
          <sf:action>Insert</sf:action>
          <sf:timestamp>2006-12-06T14:18:00+01:00</sf:timestamp>
          <sf:userid>Axel.Lidenbrock</sf:userid>
        </sf:Event>
      </sf:auditTrail>
    </sf:ComplexGeoFeature>
    </wfs:Insert>
</wfs:Transaction>
					</ctl:body>
					<p:XMLValidatingParser.GMLSF1/>
				</ctl:request>
			</xsl:variable>

            <xsl:choose>
              <xsl:when test="not($response/*)">
                  <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                  <ctl:fail/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:variable name="totalInserted" select="$response//wfs:totalInserted"/>
                <xsl:if test="$totalInserted != 1">
                  <ctl:message>FAILURE: Expected totalInserted = 1 (reported total is <xsl:value-of select="$totalInserted"/>)</ctl:message>
                  <ctl:fail/>
                </xsl:if>
                <ctl:call-test name="ctl:SchematronValidatingParser">
		            <ctl:with-param name="doc" select="$response"/>
		            <ctl:with-param name="schema">sch/wfs/1.1.0/Transaction.sch</ctl:with-param>
		            <ctl:with-param name="phase">DefaultPhase</ctl:with-param>
	            </ctl:call-test>
                <ctl:call-test name="wfs:GetFeatureById-KVP">
                  <ctl:with-param name="wfs.GetFeature.get.url" select="$wfs.GetFeature.get.url"/>
                  <ctl:with-param name="id" select="$response//wfs:InsertResults/wfs:Feature[1]/ogc:FeatureId/@fid"/>
                  <ctl:with-param name="empty.response" select="'false'"/>
                </ctl:call-test>
              </xsl:otherwise>
            </xsl:choose>
		</ctl:code>
	</ctl:test>

    <ctl:test name="wfs:wfs-1.1.0-Transaction-tc21.1">
      <ctl:param name="wfs.Transaction.post.url"/>
      <ctl:param name="wfs.GetFeature.get.url"/>
      <ctl:assertion>
      The response to a transaction request containing an insert statement must
      include a list of identifiers for all successfully inserted features.
      Feature references must be preserved.
      </ctl:assertion>
      <ctl:comment>
      Pass if all of the following conditions are true: (1) all responses are schema
      valid; (2) two features are successfully inserted; and (3) feature references
      are preserved (i.e., can be resolved to obtain the target feature instance).
      </ctl:comment>
      <ctl:code>
			<xsl:variable name="response">
				<ctl:request>
					<ctl:url>
						<xsl:value-of select="$wfs.Transaction.post.url"/>
					</ctl:url>
                    <ctl:method>POST</ctl:method>
					<ctl:body>
						<!-- test case id: wfs-1.1.0-Transaction-tc21.1 --><wfs:Transaction service="WFS" version="1.1.0">

	<wfs:Insert handle="insert-1">
    <sf:ComplexGeoFeature gml:id="cite.gmlsf1-f201">
      <gml:description>
      Aliquam at enim eu nisl consequat scelerisque. In neque mi, tristique eu,
      adipiscing in, porttitor et, metus.
      </gml:description>
      <gml:name codeSpace="http://cite.opengeospatial.org/gmlsf">cite.gmlsf1-f201</gml:name>
      <sf:geometryProperty>
        <gml:Surface srsName="urn:ogc:def:crs:EPSG::4326">
            <gml:patches>
              <gml:PolygonPatch interpolation="planar">
                <gml:exterior>
                  <gml:LinearRing>
                    <gml:posList>46.5 5.0 46.5 7.0 49.0 7.0 49.0 5.0 46.5 5.0</gml:posList>
                  </gml:LinearRing>
                </gml:exterior>
              </gml:PolygonPatch>
              <gml:PolygonPatch interpolation="planar">
                <gml:exterior>
                  <gml:LinearRing>
                    <gml:posList>49.0 5.0 49.0 7.0 51.5 8.0 51.5 4.0 49.0 5.0</gml:posList>
                  </gml:LinearRing>
                </gml:exterior>
              </gml:PolygonPatch>
            </gml:patches>
          </gml:Surface>
      </sf:geometryProperty>
      <sf:observation uom="http://www.bipm.fr/en/si/derived_units/square-metre">2.0E6</sf:observation>
      <sf:typeCode codeSpace="https://www.dgiwg.org/FAD">AL020</sf:typeCode>
      <sf:b64BinaryProperty mimeType="text/plain">
      VHdhcyBicmlsbGlnLCBhbmQgdGhlIHNsaXRoeSB0b3Zlcw==
      </sf:b64BinaryProperty>
      <sf:auditTrail>
        <sf:Event>
          <sf:action>Insert</sf:action>
          <sf:timestamp>2006-12-02T11:20:00+01:00</sf:timestamp>
          <sf:userid>Axel.Lidenbrock</sf:userid>
        </sf:Event>
      </sf:auditTrail>
    </sf:ComplexGeoFeature>
    <sf:ComplexGeoFeature gml:id="cite.gmlsf1-f202">
      <gml:description>
      Morbi sollicitudin. Nam ullamcorper diam eu orci. Etiam tortor mètus,
      sagittis ut, pharetra ût, condimentum vel, justo.
      </gml:description>
      <gml:name codeSpace="http://cite.opengeospatial.org/gmlsf">cite.gmlsf1-f202</gml:name>
      <sf:geometryProperty>
       <gml:Point srsName="urn:ogc:def:crs:EPSG::4326">
          <gml:pos>47.46411 5.8375854</gml:pos>
        </gml:Point>
      </sf:geometryProperty>
      <sf:observation uom="http://www.bipm.fr/en/si/si_brochure/chapter2/2-1/second.html">7219</sf:observation>
      <sf:typeCode codeSpace="https://www.dgiwg.org/FAD">AD030</sf:typeCode>
      <sf:reference xlink:type="simple" xlink:href="#cite.gmlsf1-f201" xlink:role="http://cite.opengeospatial.org/gmlsf/ComplexGeoFeature"/>
      <sf:auditTrail>
        <sf:Event>
          <sf:action>Insert</sf:action>
          <sf:timestamp>2006-12-06T14:53:00Z</sf:timestamp>
          <sf:userid>Eugène.Rastignac</sf:userid>
        </sf:Event>
      </sf:auditTrail>
    </sf:ComplexGeoFeature>
    </wfs:Insert>
</wfs:Transaction>
					</ctl:body>
					<p:XMLValidatingParser.GMLSF1/>
				</ctl:request>
			</xsl:variable>

            <xsl:choose>
              <xsl:when test="not($response/*)">
                  <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                  <ctl:fail/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:variable name="totalInserted" select="$response//wfs:totalInserted"/>
                <xsl:if test="$totalInserted != 2">
                  <ctl:message>FAILURE: Expected totalInserted = 2 (reported total is <xsl:value-of select="$totalInserted"/>)</ctl:message>
                  <ctl:fail/>
                </xsl:if>
                <ctl:call-test name="ctl:SchematronValidatingParser">
		            <ctl:with-param name="doc" select="$response"/>
		            <ctl:with-param name="schema">sch/wfs/1.1.0/Transaction.sch</ctl:with-param>
		            <ctl:with-param name="phase">DefaultPhase</ctl:with-param>
	            </ctl:call-test>
                <!-- Retrieve second inserted feature -->
                <xsl:variable name="response2">
				  <ctl:request>
					<ctl:url>
						<xsl:value-of select="$wfs.GetFeature.get.url"/>
					</ctl:url>
					<ctl:method>GET</ctl:method>
					<ctl:param name="service">WFS</ctl:param>
                    <ctl:param name="version">1.1.0</ctl:param>
					<ctl:param name="request">GetFeature</ctl:param>
                    <ctl:param name="featureid"><xsl:value-of select="$response//wfs:InsertResults/wfs:Feature[2]/ogc:FeatureId/@fid"/></ctl:param>
                    <p:XMLValidatingParser.GMLSF1/>
				  </ctl:request>
	            </xsl:variable>
                <!-- Retrieve referenced feature -->
                <xsl:variable name="featureRef">
                  <xsl:value-of select="substring-after($response2//sf:ComplexGeoFeature[1]/sf:reference/@xlink:href, '#')"/>
		</xsl:variable>
                <xsl:variable name="response3">
				  <ctl:request>
					<ctl:url>
						<xsl:value-of select="$wfs.GetFeature.get.url"/>
					</ctl:url>
					<ctl:method>GET</ctl:method>
					<ctl:param name="service">WFS</ctl:param>
                    <ctl:param name="version">1.1.0</ctl:param>
					<ctl:param name="request">GetFeature</ctl:param>
                    <ctl:param name="featureid"><xsl:value-of select="$featureRef"/></ctl:param>
                    <p:XMLValidatingParser.GMLSF1/>
				  </ctl:request>
	            </xsl:variable>
                <xsl:if test="count($response3//sf:ComplexGeoFeature) != 1">
                  <ctl:message>FAILURE: Unable to resolve feature reference (<xsl:value-of select="$featureRef"/>)</ctl:message>
                  <ctl:fail/>
                </xsl:if>
              </xsl:otherwise>
            </xsl:choose>
		</ctl:code>
	</ctl:test>
</ctl:package>

   <ctl:test name="wfs:run-Transaction-POST">
    <ctl:param name="wfs.GetCapabilities.document"/>
    <ctl:param name="gmlsf.level"/>
    <ctl:param name="supports.atomic.trx"/>
    <ctl:assertion>Run test group for Transaction requests using the POST method</ctl:assertion>
    <ctl:code>

                <ctl:call-test name="wfs:Transaction-invalid-lock">
                        <ctl:with-param name="CAPABILITIES" select="$wfs.GetCapabilities.document"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:Transaction-idgen-generate-new">
                        <ctl:with-param name="CAPABILITIES" select="$wfs.GetCapabilities.document"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:Transaction-idgen-use-existing">
                        <ctl:with-param name="CAPABILITIES" select="$wfs.GetCapabilities.document"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:Transaction-idgen-use-existing-update">
                        <ctl:with-param name="CAPABILITIES" select="$wfs.GetCapabilities.document"/>
                </ctl:call-test>

      <xsl:variable name="wfs.Transaction.post.url">
        <xsl:value-of select="$wfs.GetCapabilities.document//ows:OperationsMetadata/ows:Operation[@name='Transaction']/ows:DCP/ows:HTTP/ows:Post/@xlink:href"/>
          </xsl:variable>
      <xsl:variable name="wfs.GetFeature.get.url">
        <xsl:value-of select="$wfs.GetCapabilities.document//ows:OperationsMetadata/ows:Operation[@name='GetFeature']/ows:DCP/ows:HTTP/ows:Get/@xlink:href"/>
          </xsl:variable>
      <xsl:variable name="wfs.GetFeature.post.url">
        <xsl:value-of select="$wfs.GetCapabilities.document//ows:OperationsMetadata/ows:Operation[@name='GetFeature']/ows:DCP/ows:HTTP/ows:Post/@xlink:href"/>
          </xsl:variable>
      <xsl:variable name="wfs.GetFeatureWithLock" select="boolean($wfs.GetCapabilities.document//ows:OperationsMetadata/ows:Operation[@name='GetFeatureWithLock'])"/>
      <xsl:variable name="wfs.LockFeature" select="boolean($wfs.GetCapabilities.document//ows:OperationsMetadata/ows:Operation[@name='LockFeature'])"/>
      <xsl:variable name="idgen.UseExisting" select="$wfs.GetCapabilities.document//ows:OperationsMetadata/ows:Operation[@name='Transaction']/ows:Parameter[@name='Idgen']//ows:Value = 'UseExisting'"/>
      <ctl:message>Target endpoint is <xsl:value-of select="$wfs.Transaction.post.url"/></ctl:message>

  <ctl:call-test name="wfs:wfs-1.1.0-Transaction-tc1.1">
    <ctl:with-param name="wfs.Transaction.post.url" select="$wfs.Transaction.post.url"/>
    <ctl:with-param name="wfs.GetFeature.get.url" select="$wfs.GetFeature.get.url"/>
  </ctl:call-test>
  <ctl:call-test name="wfs:wfs-1.1.0-Transaction-tc2.1">
    <ctl:with-param name="wfs.Transaction.post.url" select="$wfs.Transaction.post.url"/>
    <ctl:with-param name="wfs.GetFeature.get.url" select="$wfs.GetFeature.get.url"/>
  </ctl:call-test>
  <ctl:call-test name="wfs:wfs-1.1.0-Transaction-tc2.2">
    <ctl:with-param name="wfs.Transaction.post.url" select="$wfs.Transaction.post.url"/>
  </ctl:call-test>
  <ctl:call-test name="wfs:wfs-1.1.0-Transaction-tc3.1">
    <ctl:with-param name="wfs.Transaction.post.url" select="$wfs.Transaction.post.url"/>
    <ctl:with-param name="wfs.GetFeature.get.url" select="$wfs.GetFeature.get.url"/>
    <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
    <ctl:with-param name="supports.atomic.trx" select="$supports.atomic.trx"/>
  </ctl:call-test>
  <ctl:call-test name="wfs:wfs-1.1.0-Transaction-tc4.1">
    <ctl:with-param name="wfs.Transaction.post.url" select="$wfs.Transaction.post.url"/>
    <ctl:with-param name="wfs.GetFeature.get.url" select="$wfs.GetFeature.get.url"/>
    <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
  </ctl:call-test>
  <ctl:call-test name="wfs:wfs-1.1.0-Transaction-tc5.1">
    <ctl:with-param name="wfs.Transaction.post.url" select="$wfs.Transaction.post.url"/>
    <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
  </ctl:call-test>
  <ctl:call-test name="wfs:wfs-1.1.0-Transaction-tc6.1">
    <ctl:with-param name="wfs.Transaction.post.url" select="$wfs.Transaction.post.url"/>
  </ctl:call-test>
  <ctl:call-test name="wfs:wfs-1.1.0-Transaction-tc7.1">
    <ctl:with-param name="wfs.Transaction.post.url" select="$wfs.Transaction.post.url"/>
    <ctl:with-param name="wfs.GetFeature.get.url" select="$wfs.GetFeature.get.url"/>
  </ctl:call-test>
  <ctl:call-test name="wfs:wfs-1.1.0-Transaction-tc7.2">
    <ctl:with-param name="wfs.Transaction.post.url" select="$wfs.Transaction.post.url"/>
  </ctl:call-test>
  <ctl:call-test name="wfs:wfs-1.1.0-Transaction-tc8.1">
    <ctl:with-param name="wfs.Transaction.post.url" select="$wfs.Transaction.post.url"/>
    <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
  </ctl:call-test>
  <ctl:call-test name="wfs:wfs-1.1.0-Transaction-tc9.1">
    <ctl:with-param name="wfs.Transaction.post.url" select="$wfs.Transaction.post.url"/>
    <ctl:with-param name="wfs.GetFeature.get.url" select="$wfs.GetFeature.get.url"/>
    <ctl:with-param name="supports.atomic.trx" select="$supports.atomic.trx"/>
  </ctl:call-test>
  <ctl:call-test name="wfs:wfs-1.1.0-Transaction-tc10.1">
    <ctl:with-param name="wfs.Transaction.post.url" select="$wfs.Transaction.post.url"/>
    <ctl:with-param name="supports.atomic.trx" select="$supports.atomic.trx"/>
  </ctl:call-test>
  <ctl:call-test name="wfs:wfs-1.1.0-Transaction-tc11.1">
    <ctl:with-param name="wfs.Transaction.post.url" select="$wfs.Transaction.post.url"/>
    <ctl:with-param name="wfs.GetFeature.get.url" select="$wfs.GetFeature.get.url"/>
  </ctl:call-test>
  <ctl:call-test name="wfs:wfs-1.1.0-Transaction-tc12.1">
    <ctl:with-param name="wfs.Transaction.post.url" select="$wfs.Transaction.post.url"/>
  </ctl:call-test>
  <ctl:call-test name="wfs:wfs-1.1.0-Transaction-tc13.1">
    <ctl:with-param name="wfs.Transaction.post.url" select="$wfs.Transaction.post.url"/>
    <ctl:with-param name="wfs.GetFeature.get.url" select="$wfs.GetFeature.get.url"/>
  </ctl:call-test>

        <xsl:if test="$gmlsf.level = 'sf-1'">
          <ctl:call-test name="wfs:run-Transaction-XML-gmlsf1">
                    <ctl:with-param name="wfs.Transaction.post.url" select="$wfs.Transaction.post.url"/>
            <ctl:with-param name="wfs.GetFeature.get.url" select="$wfs.GetFeature.get.url"/>
                  </ctl:call-test>
        </xsl:if>
        <xsl:if test="idgen.UseExisting">
          <ctl:message>User-assigned gml:id values are supported.</ctl:message>
        </xsl:if>

      <!-- Cleanup the inserted features -->
          <ctl:call-test name="wfs:run-Transaction-Cleanup">
                <ctl:with-param name="wfs.GetCapabilities.document" select="$wfs.GetCapabilities.document"/>
                <ctl:with-param name="gmlsf.level" select="$gmlsf.level"/>
          </ctl:call-test>

      </ctl:code>
    </ctl:test>

    <test name="wfs:wfs-1.1.0-Transaction-tc1.1">
      <param name="wfs.Transaction.post.url"/>
      <param name="wfs.GetFeature.get.url"/>
      <assertion>
      The response to a transaction request containing an insert statement must
      include a listing of identifiers for all successfully inserted features.
      </assertion>
      <comment>Pass if all of the following conditions are true: (1) the response
      is schema valid; (2) TransactionSummary/totalInserted = 3; and (3) the
      wfs:InsertResults element has three child wfs:Feature elements.</comment>
      <link>wfs-1.1.0-Transaction-atc1</link>
                <code>
                        <xsl:variable name="response">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.Transaction.post.url"/>
                                        </url>
                    <method>POST</method>
                                        <body>
                      <!-- test case id: wfs-1.1.0-Transaction-tc1.1 --><wfs:Transaction service="WFS" version="1.1.0">
	<wfs:Insert handle="insert-1">
      <sf:PrimitiveGeoFeature gml:id="cite.gmlsf0-f01">
        <gml:description>
        Fusce tellus ante, tempus nonummy, ornare sed, accumsan nec, leo.
        Vivamus pulvinar molestie nisl.
        </gml:description>
        <gml:name codeSpace="http://cite.opengeospatial.org/gmlsf">cite.gmlsf0-f01</gml:name>
        <sf:curveProperty>
          <gml:LineString gml:id="cite.gmlsf0-g01" srsName="urn:ogc:def:crs:EPSG::4326">
            <gml:posList>47.608284 19.034142 51.286873 16.7836 49.849854 15.764992</gml:posList>
          </gml:LineString>
        </sf:curveProperty>
        <sf:intProperty>1025</sf:intProperty>
        <sf:measurand>7.405E2</sf:measurand>
        <sf:dateTimeProperty>2006-06-23T12:43:12+01:00</sf:dateTimeProperty>
        <sf:decimalProperty>90.62</sf:decimalProperty>
      </sf:PrimitiveGeoFeature>
    </wfs:Insert>

    <wfs:Insert handle="insert-2">
      <sf:AggregateGeoFeature gml:id="cite.gmlsf0-f02">
        <gml:description>
        Duis nulla nisi, molestie vel, rhoncus a, ullamcorper eu, justo. Sed bibendum.
        Ut sem. Mauris nec nunc a eros aliquet pharetra. Mauris nonummy, pede et
        tincidunt ultrices, mauris lectus fermentum massa, in ullamcorper lectus
        felis vitae metus. Quisqué viverra.
        </gml:description>
        <gml:name codeSpace="http://cite.opengeospatial.org/gmlsf">cite.gmlsf0-f02</gml:name>
        <gml:boundedBy>
          <gml:Envelope srsName="urn:ogc:def:crs:EPSG::4326">
            <gml:lowerCorner>36.1 8.0</gml:lowerCorner>
            <gml:upperCorner>52.0 21.1</gml:upperCorner>
          </gml:Envelope>
        </gml:boundedBy>
        <sf:multiPointProperty>
          <gml:MultiPoint srsName="urn:ogc:def:crs:EPSG::4326">
            <gml:pointMember>
              <gml:Point><gml:pos>49.325176 21.036873</gml:pos></gml:Point>
            </gml:pointMember>
            <gml:pointMember>
              <gml:Point><gml:pos>36.142586 13.56189</gml:pos></gml:Point>
            </gml:pointMember>
            <gml:pointMember>
              <gml:Point><gml:pos>51.920937 8.014193</gml:pos></gml:Point>
            </gml:pointMember>
          </gml:MultiPoint>
        </sf:multiPointProperty>
        <sf:doubleProperty>2012.78</sf:doubleProperty>
        <sf:intRangeProperty>43</sf:intRangeProperty>
        <sf:strProperty>
        Donec ligulä pede, sodales iń, vehicula eu, sodales et, lêo.
        </sf:strProperty>
        <sf:featureCode>AK121</sf:featureCode>
      </sf:AggregateGeoFeature>

      <sf:EntitéGénérique gml:id="cite.gmlsf0-f03">
        <gml:description>
        Suspendisse in odio sit amet lorem dictum semper. Integer ultrices purus
        vel orci. Donec felis massa, suscipit a, lacinia nec, rhoncus vulputate,
        tellus.
        </gml:description>
        <gml:name codeSpace="http://cite.opengeospatial.org/gmlsf">cite.gmlsf0-f03</gml:name>
        <sf:attribut.Géométrie>
          <gml:LineString gml:id="cite.gmlsf0-g04" srsName="urn:ogc:def:crs:EPSG::4326">
            <gml:description>Curabitur ut enim at metus vehicula</gml:description>
            <gml:posList>47.35948 0.06282902 45.62291 -0.6651201 44.34261 -2.341187 45.08817 -2.696537 45.953514 -3.793995 47.21312 -2.773082 48.644974 -3.131115</gml:posList>
          </gml:LineString>
        </sf:attribut.Géométrie>
        <sf:boolProperty>true</sf:boolProperty>
        <sf:str4Property>ghij</sf:str4Property>
        <sf:featureRef>cite.gmlsf0-f01</sf:featureRef>
      </sf:EntitéGénérique>
    </wfs:Insert>
</wfs:Transaction>
                                        </body>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

            <xsl:choose>
              <xsl:when test="not($response/*)">
                  <ctl:message>FAILURE: Missing response entity.</ctl:message>
                  <ctl:fail/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:variable name="totalInserted" select="$response//wfs:totalInserted"/>
                <ctl:call-test name="ctl:SchematronValidatingParser">
                            <ctl:with-param name="doc" select="$response"/>
                            <ctl:with-param name="schema">sch/wfs/1.1.0/Transaction.sch</ctl:with-param>
                            <ctl:with-param name="phase">DefaultPhase</ctl:with-param>
                    </ctl:call-test>
                <xsl:if test="$totalInserted != 3">
                  <ctl:message>FAILURE: Expected totalInserted = 3 (reported total is <xsl:value-of select="$totalInserted"/>)</ctl:message>
                  <ctl:fail/>
                </xsl:if>
                <xsl:for-each select="$response//wfs:InsertResults/wfs:Feature/ogc:FeatureId">
                  <ctl:call-test name="wfs:GetFeatureById-KVP">
                    <ctl:with-param name="wfs.GetFeature.get.url" select="$wfs.GetFeature.get.url"/>
                    <ctl:with-param name="id" select="./@fid"/>
                    <ctl:with-param name="empty.response" select="'false'"/>
                  </ctl:call-test>
                </xsl:for-each>
              </xsl:otherwise>
            </xsl:choose>
                </code>
        </test>

    <test name="wfs:wfs-1.1.0-Transaction-tc2.1">
      <param name="wfs.Transaction.post.url"/>
          <param name="wfs.GetFeature.get.url"/>
      <assertion>
      The global srsName attribute must be applied to all submitted geometries
      which do not specify an alternative supported CRS.
      </assertion>
      <comment>Pass if all of the following conditions are true: (1) the response
      is schema valid; (2) TransactionSummary/totalInserted = 1; and (3) the
      wfs:InsertResults element has one child wfs:Feature element.</comment>
      <link>wfs-1.1.0-Transaction-atc2</link>
                <code>
                        <xsl:variable name="response">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.Transaction.post.url"/>
                                        </url>
                    <method>POST</method>
                                        <body>
                      <!-- test case id: wfs-1.1.0-Transaction-tc2.1 --><wfs:Transaction service="WFS" version="1.1.0">
	<wfs:Insert handle="insert-1" srsName="urn:ogc:def:crs:EPSG::4326">
      <sf:PrimitiveGeoFeature gml:id="cite.gmlsf0-f04">
        <gml:description>
        Cras vehicula, ligula vel tincidunt imperdiet, ligula arcu convallis
        dolor, sed convallis diam dolor vitae urna. Mauris quis risus at urna
        interdum porttitor.
        </gml:description>
        <gml:name codeSpace="http://cite.opengeospatial.org/gmlsf">cite.gmlsf0-f04</gml:name>
        <sf:surfaceProperty>
          <gml:Polygon>
            <gml:exterior>
              <gml:LinearRing>
                <gml:posList>52.234646 11.661083 48.222664 21.77039 53.234585 29.490486 58.224674 22.1420336 52.234646 11.661083</gml:posList>
              </gml:LinearRing>
            </gml:exterior>
            <gml:interior>
              <gml:LinearRing>
                <gml:posList>54.78090 20.804808 53.01941 22.17321 54.02851 23.28652 54.78090 20.804808</gml:posList>
              </gml:LinearRing>
            </gml:interior>
          </gml:Polygon>
        </sf:surfaceProperty>
        <sf:pointProperty>
          <gml:Point><gml:pos>53.11942 22.27320</gml:pos></gml:Point>
        </sf:pointProperty>
        <sf:intProperty>10257</sf:intProperty>
        <sf:uriProperty>ftp://ftp.irisa.fr/pub/gnu/</sf:uriProperty>
        <sf:measurand>219.1</sf:measurand>
        <sf:dateProperty>2006-02-09</sf:dateProperty>
        <sf:decimalProperty>120.2</sf:decimalProperty>
      </sf:PrimitiveGeoFeature>
    </wfs:Insert>
</wfs:Transaction>
                                        </body>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

            <xsl:choose>
              <xsl:when test="not($response/*)">
                  <ctl:message>FAILURE: Missing response entity.</ctl:message>
                  <ctl:fail/>
              </xsl:when>
              <xsl:otherwise>
                <ctl:call-test name="ctl:SchematronValidatingParser">
                            <ctl:with-param name="doc" select="$response"/>
                            <ctl:with-param name="schema">sch/wfs/1.1.0/Transaction.sch</ctl:with-param>
                            <ctl:with-param name="phase">DefaultPhase</ctl:with-param>
                    </ctl:call-test>
                <xsl:variable name="totalInserted" select="$response//wfs:totalInserted"/>
                <xsl:if test="$totalInserted != 1">
                  <ctl:message>FAILURE: Expected totalInserted = 1 (reported total is <xsl:value-of select="$totalInserted"/>)</ctl:message>
                  <ctl:fail/>
                </xsl:if>
                <ctl:call-test name="wfs:GetFeatureById-KVP">
                  <ctl:with-param name="wfs.GetFeature.get.url" select="$wfs.GetFeature.get.url"/>
                  <ctl:with-param name="id" select="$response//wfs:InsertResults/wfs:Feature[1]/ogc:FeatureId/@fid"/>
                  <ctl:with-param name="empty.response" select="'false'"/>
                </ctl:call-test>
              </xsl:otherwise>
            </xsl:choose>
                </code>
        </test>

    <test name="wfs:wfs-1.1.0-Transaction-tc2.2">
      <param name="wfs.Transaction.post.url"/>
      <assertion>
      The response to a Transaction request that specifies an unsupported Insert/srsName
      value must include an exception report.
      </assertion>
      <comment>Pass if all of the following conditions are true: (1) the response
      is a valid ows:ExceptionReport; (2) the reported exceptionCode is "InvalidParameterValuePhase".
      </comment>
      <link>wfs-1.1.0-Transaction-atc2</link>
                <code>
                        <xsl:variable name="response">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.Transaction.post.url"/>
                                        </url>
                    <method>POST</method>
                                        <body>
                      <!-- test case id: wfs-1.1.0-Transaction-tc2.2 --><wfs:Transaction service="WFS" version="1.1.0">
        <wfs:Insert handle="insert-tc2.2" srsName="urn:ogc:def:crs:FOO::9999">
      <sf:PrimitiveGeoFeature gml:id="cite.gmlsf0-f94">
        <gml:name codeSpace="http://cite.opengeospatial.org/gmlsf">cite.gmlsf0-f94</gml:name>
        <sf:pointProperty>
          <gml:Point>
            <gml:pos>5311942 2227320</gml:pos>
          </gml:Point>
        </sf:pointProperty>
        <sf:intProperty>10257</sf:intProperty>
        <sf:uriProperty>ftp://ftp.irisa.fr/pub/gnu/</sf:uriProperty>
        <sf:measurand>219.1</sf:measurand>
        <sf:dateProperty>2006-02-09</sf:dateProperty>
        <sf:decimalProperty>120.2</sf:decimalProperty>
      </sf:PrimitiveGeoFeature>
    </wfs:Insert>
</wfs:Transaction>
                                        </body>
                                        <p:XMLValidatingParser.OWS/>
                                </request>
                        </xsl:variable>

            <xsl:choose>
              <xsl:when test="not($response/*)">
                  <ctl:message>FAILURE: Missing response entity.</ctl:message>
                  <ctl:fail/>
              </xsl:when>
              <xsl:otherwise>
                <ctl:call-test name="ctl:SchematronValidatingParser">
                            <ctl:with-param name="doc" select="$response"/>
                            <ctl:with-param name="schema">sch/ows/1.0.0/ExceptionReport.sch</ctl:with-param>
                            <ctl:with-param name="phase">InvalidParameterValuePhase</ctl:with-param>
                    </ctl:call-test>
              </xsl:otherwise>
            </xsl:choose>
                </code>
        </test>

    <test name="wfs:wfs-1.1.0-Transaction-tc3.1">
      <param name="wfs.Transaction.post.url"/>
      <param name="wfs.GetFeature.get.url"/>
      <param name="wfs.GetFeature.post.url"/>
      <ctl:param name="supports.atomic.trx"/>
      <assertion>
      Insert statements containing features having a geometry value in an unsupported
      CRS shall be skipped if atomic transactions are not supported. Otherwise the
      transaction must fail and an exception report is generated.
      </assertion>
      <comment>Pass if the features contained in failing insert statements are
      not inserted. The response must satify either of the following cases:
      (1) it includes a valid ows:ExceptionReport;
      (2) it includes a wfs:TransactionResponse/wfs:TransactionResults element
          indicating the failing statement.
      </comment>
      <link/>
                <code>
                        <xsl:variable name="response">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.Transaction.post.url"/>
                                        </url>
                    <method>POST</method>
                                        <body>
                      <!-- test case id: wfs-1.1.0-Transaction-tc3.1 --><wfs:Transaction service="WFS" version="1.1.0">
        <wfs:Insert handle="insert-1">
      <sf:PrimitiveGeoFeature gml:id="cite.gmlsf0-f05">
        <sf:pointProperty>
          <gml:Point srsName="urn:ogc:def:crs:FOO:2006.10:9999">
            <gml:pos>5311942 2227320</gml:pos>
          </gml:Point>
        </sf:pointProperty>
        <sf:intProperty>9999</sf:intProperty>
        <sf:measurand>283.5</sf:measurand>
        <sf:decimalProperty>12.18</sf:decimalProperty>
      </sf:PrimitiveGeoFeature>
    </wfs:Insert>
    <wfs:Insert handle="insert-2">
    <sf:EntitéGénérique gml:id="cite.gmlsf0-f06">
      <gml:description>Curabitur auctor ipsum condimentum tortor lacinia auctor.</gml:description>
      <gml:name codeSpace="http://cite.opengeospatial.org/gmlsf">cite.gmlsf0-f06</gml:name>
      <sf:attribut.Géométrie>
        <gml:MultiCurve gml:id="cite.gmlsf0-g04" srsName="urn:ogc:def:crs:EPSG::4326">
          <gml:name>Sed magna</gml:name>
          <gml:curveMember>
            <gml:LineString>
              <gml:posList>56.913918 4.5407763 56.09126 9.26674 53.98543 12.45352 52.68249 13.9302635</gml:posList>
            </gml:LineString>
          </gml:curveMember>
          <gml:curveMember>
            <gml:LineString>
              <gml:posList>35.285793 9.72645 36.75665 1.05434 38.630505 -5.7180705</gml:posList>
            </gml:LineString>
          </gml:curveMember>
        </gml:MultiCurve>
      </sf:attribut.Géométrie>
      <sf:boolProperty>true</sf:boolProperty>
      <sf:str4Property>ijk8</sf:str4Property>
    </sf:EntitéGénérique>
    </wfs:Insert>
</wfs:Transaction>
                                        </body>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>
                        <xsl:variable name="docElement" select="local-name($response/*[1])"/>
            <xsl:choose>
              <xsl:when test="not($supports.atomic.trx)">
                <ctl:call-test name="ctl:SchematronValidatingParser">
                            <ctl:with-param name="doc" select="$response"/>
                            <ctl:with-param name="schema">sch/wfs/1.1.0/Transaction.sch</ctl:with-param>
                            <ctl:with-param name="phase">DefaultPhase</ctl:with-param>
                    </ctl:call-test>
                <xsl:if test="count($response//wfs:InsertResults/*) != 1">
                  <ctl:message>FAILURE: Expected wfs:InsertResults to have 1 child element</ctl:message>
                  <ctl:fail/>
                </xsl:if>
                <xsl:if test="$response//wfs:TransactionResults/wfs:Action/@locator != 'insert-1'">
                  <ctl:message>FAILURE: Expected wfs:Action/@locator = 'insert-1'</ctl:message>
                  <ctl:fail/>
                </xsl:if>
                <ctl:call-test name="wfs:GetFeatureByName">
                  <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                  <ctl:with-param name="type" select="'sf:EntitéGénérique'"/>
                  <ctl:with-param name="name.value" select="'cite.gmlsf0-f06'"/>
                  <ctl:with-param name="empty.response" select="'true'"/>
                </ctl:call-test>
              </xsl:when>
              <xsl:otherwise>
                <ctl:call-test name="ctl:SchematronValidatingParser">
                            <ctl:with-param name="doc" select="$response"/>
                            <ctl:with-param name="schema">sch/ows/1.0.0/ExceptionReport.sch</ctl:with-param>
                            <ctl:with-param name="phase">DefaultPhase</ctl:with-param>
                    </ctl:call-test>
              </xsl:otherwise>
            </xsl:choose>
                </code>
        </test>

    <test name="wfs:wfs-1.1.0-Transaction-tc4.1">
      <param name="wfs.Transaction.post.url"/>
      <param name="wfs.GetFeature.get.url"/>
      <param name="wfs.GetFeature.post.url"/>
      <assertion>
      Transaction statements must be processed in document order.
      </assertion>
      <comment>Pass if the insert, update, and delete statements are processed
      in the correct order. The response message must report that one feature
      was inserted, one was deleted, and none were updated.
      </comment>
      <link>wfs-1.1.0-Transaction-atc4</link>
                <code>
                        <xsl:variable name="response">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.Transaction.post.url"/>
                                        </url>
                    <method>POST</method>
                                        <body>
                      <!-- test case id: wfs-1.1.0-Transaction-tc4.1 --><wfs:Transaction service="WFS" version="1.1.0">
	<wfs:Insert handle="ins-1">
      <sf:PrimitiveGeoFeature gml:id="cite.gmlsf0-f07">
        <gml:name codeSpace="http://cite.opengeospatial.org/gmlsf">cite.gmlsf0-f07</gml:name>
        <sf:surfaceProperty>
          <gml:Polygon srsName="urn:ogc:def:crs:EPSG:4326">
            <gml:exterior>
              <gml:LinearRing>
                <gml:posList>57.28665 21.368711 56.118668 22.280576 56.407759 23.579485 57.39861 22.919643 58.49861 22.756339 57.79861 21.919643 57.28665 21.368711</gml:posList>
              </gml:LinearRing>
            </gml:exterior>
            <gml:interior>
              <gml:LinearRing>
                <gml:posList>57.06574 22.079622 57.06574 22.660713 57.34563 22.950624 57.06574 22.079622</gml:posList>
              </gml:LinearRing>
            </gml:interior>
	      </gml:Polygon>
        </sf:surfaceProperty>
        <sf:intProperty>1234567890</sf:intProperty>
        <sf:measurand>285.1</sf:measurand>
        <sf:decimalProperty>22.71</sf:decimalProperty>
      </sf:PrimitiveGeoFeature>
    </wfs:Insert>

    <wfs:Delete handle="del-1" typeName="sf:PrimitiveGeoFeature">
      <ogc:Filter>
        <ogc:PropertyIsGreaterThanOrEqualTo>
          <ogc:PropertyName>sf:intProperty</ogc:PropertyName>
          <ogc:Literal>1234567890</ogc:Literal>
        </ogc:PropertyIsGreaterThanOrEqualTo>
      </ogc:Filter>
    </wfs:Delete>

    <wfs:Update handle="upd-1" typeName="sf:PrimitiveGeoFeature">
      <wfs:Property>
        <wfs:Name>sf:measurand</wfs:Name>
        <wfs:Value>286.0</wfs:Value>
      </wfs:Property>
      <ogc:Filter>
        <ogc:PropertyIsEqualTo matchCase="false">
          <ogc:PropertyName>gml:name</ogc:PropertyName>
          <ogc:Literal>cite.gmlsf0-f07</ogc:Literal>
        </ogc:PropertyIsEqualTo>
      </ogc:Filter>
    </wfs:Update>
</wfs:Transaction>
                                        </body>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>
            <xsl:choose>
              <xsl:when test="not($response/*)">
                  <ctl:message>FAILURE: Missing response entity.</ctl:message>
                  <ctl:fail/>
              </xsl:when>
              <xsl:otherwise>
                <ctl:call-test name="ctl:SchematronValidatingParser">
                            <ctl:with-param name="doc" select="$response"/>
                            <ctl:with-param name="schema">sch/wfs/1.1.0/Transaction.sch</ctl:with-param>
                            <ctl:with-param name="phase">DefaultPhase</ctl:with-param>
                    </ctl:call-test>
                <xsl:variable name="totalInserted" select="$response//wfs:totalInserted"/>
                <xsl:if test="$totalInserted != 1">
                  <ctl:message>FAILURE: Expected totalInserted = 1 (reported total is <xsl:value-of select="$totalInserted"/>)</ctl:message>
                  <ctl:fail/>
                </xsl:if>
                <xsl:variable name="totalUpdated" select="$response//wfs:totalUpdated"/>
                <xsl:if test="$totalUpdated != 0">
                  <ctl:message>FAILURE: Expected totalUpdated = 0 (reported total is <xsl:value-of select="$totalUpdated"/>)</ctl:message>
                  <ctl:fail/>
                </xsl:if>
                <xsl:variable name="totalDeleted" select="$response//wfs:totalDeleted"/>
                <xsl:if test="$totalDeleted != 1">
                  <ctl:message>FAILURE: Expected totalDeleted = 1 (reported total is <xsl:value-of select="$totalDeleted"/>)</ctl:message>
                  <ctl:fail/>
                </xsl:if>
                <!-- Attempt to retrieve feature in insert list that was subsequently deleted -->
                <ctl:call-test name="wfs:GetFeatureById-KVP">
                  <ctl:with-param name="wfs.GetFeature.get.url" select="$wfs.GetFeature.get.url"/>
                  <ctl:with-param name="id" select="$response//wfs:InsertResults/wfs:Feature[1]/ogc:FeatureId/@fid"/>
                  <ctl:with-param name="empty.response" select="'true'"/>
                </ctl:call-test>
                <!-- Should have been deleted -->
                <ctl:call-test name="wfs:GetFeatureByName">
                  <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                  <ctl:with-param name="type" select="'sf:PrimitiveGeoFeature'"/>
                  <ctl:with-param name="name.value" select="'cite.gmlsf0-f07'"/>
                  <ctl:with-param name="empty.response" select="'true'"/>
                </ctl:call-test>
              </xsl:otherwise>
            </xsl:choose>
                </code>
        </test>

    <test name="wfs:wfs-1.1.0-Transaction-tc5.1">
      <param name="wfs.Transaction.post.url"/>
      <param name="wfs.GetFeature.post.url"/>
      <assertion>
      The response to a Transaction request containing one or more update statements
      must report how many features were updated.
      </assertion>
      <comment>
      Pass if the update statements are processed correctly. The response message
      must report that one feature was inserted and one was updated.
      </comment>
      <link>wfs-1.1.0-Transaction-atc5</link>
                <code>
                        <xsl:variable name="response">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.Transaction.post.url"/>
                                        </url>
                    <method>POST</method>
                                        <body>
                      <!-- test case id: wfs-1.1.0-Transaction-tc5.1 --><wfs:Transaction service="WFS" version="1.1.0">
	<wfs:Insert handle="ins-1">
      <sf:AggregateGeoFeature gml:id="cite.gmlsf0-f26">
        <gml:description>Curabitur auctor ipsum condimentum tortor lacinia auctor.</gml:description>
        <gml:name codeSpace="http://cite.opengeospatial.org/gmlsf">cite.gmlsf0-f26</gml:name>
        <sf:multiSurfaceProperty>
          <gml:MultiSurface gml:id="cite.gmlsf0-g05" srsName="urn:ogc:def:crs:EPSG::4326">
            <gml:surfaceMember>
              <gml:Polygon>
                <gml:exterior>
                  <gml:LinearRing>
                  <gml:posList>41.929283 4.3031006 62.029465 16.708838 37.929283 10.3022007 41.929283 4.3031006</gml:posList>
                  </gml:LinearRing>
                </gml:exterior>
              </gml:Polygon>
            </gml:surfaceMember>
            <gml:surfaceMember>
              <gml:Polygon>
                <gml:exterior>
                  <gml:LinearRing>
                  <gml:posList>54.84978 -5.3175583 60.65348 -1.426458 50.93067 0.5084481 47.445404 -2.7623253 48.545404 -4.9623253 54.84978 -5.3175583</gml:posList>
                  </gml:LinearRing>
                </gml:exterior>
                <gml:interior>
                  <gml:LinearRing>
                  <gml:posList>51.913918 -4.0407763 52.09126 -3.26674 50.08543 -3.45352 51.913918 -4.0407763</gml:posList>
                  </gml:LinearRing>
                </gml:interior>
                <gml:interior>
                  <gml:LinearRing>
                  <gml:posList>55.922027 -2.1316851 58.18017 -1.46574 52.17441 -1.14361 55.922027 -2.1316851</gml:posList>
                  </gml:LinearRing>
                </gml:interior>
              </gml:Polygon>
            </gml:surfaceMember>
          </gml:MultiSurface>
        </sf:multiSurfaceProperty>
        <sf:doubleProperty>1267.09343</sf:doubleProperty>
        <sf:strProperty>Lorem ipsum dolor sit amet, consectetuer adipiscing elit.</sf:strProperty>
        <sf:featureCode>EA050</sf:featureCode>
      </sf:AggregateGeoFeature>
    </wfs:Insert>

    <wfs:Update handle="upd-1" typeName="sf:AggregateGeoFeature">
      <wfs:Property>
        <wfs:Name>gml:name</wfs:Name>
        <wfs:Value>cite.gmlsf0-f26bis</wfs:Value>
      </wfs:Property>
      <ogc:Filter>
        <ogc:PropertyIsEqualTo matchCase="false">
          <ogc:PropertyName>sf:featureCode</ogc:PropertyName>
          <ogc:Literal>ea050</ogc:Literal>
        </ogc:PropertyIsEqualTo>
      </ogc:Filter>
    </wfs:Update>
</wfs:Transaction>
                                        </body>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>
            <xsl:choose>
              <xsl:when test="not($response/*)">
                  <ctl:message>FAILURE: Missing response entity.</ctl:message>
                  <ctl:fail/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:variable name="totalInserted" select="$response//wfs:totalInserted"/>
                <xsl:if test="$totalInserted != 1">
                  <ctl:message>FAILURE: Expected totalInserted = 1 (reported total is <xsl:value-of select="$totalInserted"/>)</ctl:message>
                  <ctl:fail/>
                </xsl:if>
                <xsl:variable name="totalUpdated" select="$response//wfs:totalUpdated"/>
                <xsl:if test="$totalUpdated != 1">
                  <ctl:message>FAILURE: Expected totalUpdated = 1 (reported total is <xsl:value-of select="$totalUpdated"/>)</ctl:message>
                  <ctl:fail/>
                </xsl:if>
                <ctl:call-test name="wfs:GetFeatureByName">
                  <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                  <ctl:with-param name="type" select="'sf:AggregateGeoFeature'"/>
                  <ctl:with-param name="name.value" select="'cite.gmlsf0-f26bis'"/>
                  <ctl:with-param name="empty.response" select="'false'"/>
                </ctl:call-test>
              </xsl:otherwise>
            </xsl:choose>
                </code>
        </test>

    <test name="wfs:wfs-1.1.0-Transaction-tc6.1">
      <param name="wfs.Transaction.post.url"/>
      <assertion>
      The response to a wfs:Native statement in which safeToIgnore="false" must
      include an exception report.
      </assertion>
      <comment>Pass if all of the following conditions are true: (1) the response
      is a valid ows:ExceptionReport; (2) the reported exceptionCode is "InvalidParameterValuePhase".
      </comment>
      <ctl:link>wfs-1.1.0-Transaction-atc1</ctl:link>
      <ctl:link>OGC 04-094, 7.5, p.22</ctl:link>
                <code>
                        <xsl:variable name="response">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.Transaction.post.url"/>
                                        </url>
                    <method>POST</method>
                                        <body>
                      <!-- test case id: wfs-1.1.0-Transaction-tc6.1 --><wfs:Transaction version="1.1.0" service="WFS">
  <wfs:Native vendorId="cite.wfs.foo" safeToIgnore="false"/>
</wfs:Transaction>
                                        </body>
                                        <p:XMLValidatingParser.OWS/>
                                </request>
                        </xsl:variable>
            <xsl:choose>
              <xsl:when test="not($response/*)">
                  <ctl:message>FAILURE: Missing response entity.</ctl:message>
                  <ctl:fail/>
              </xsl:when>
              <xsl:otherwise>
                <ctl:call-test name="ctl:SchematronValidatingParser">
                            <ctl:with-param name="doc" select="$response"/>
                            <ctl:with-param name="schema">sch/ows/1.0.0/ExceptionReport.sch</ctl:with-param>
                            <ctl:with-param name="phase">InvalidParameterValuePhase</ctl:with-param>
                    </ctl:call-test>
              </xsl:otherwise>
            </xsl:choose>
                </code>
        </test>

    <test name="wfs:wfs-1.1.0-Transaction-tc7.1">
      <param name="wfs.Transaction.post.url"/>
      <param name="wfs.GetFeature.get.url"/>
      <assertion>
      The response to a Transaction request that updates a complex property
      value must report how many features were updated.
      </assertion>
      <comment>
      Pass if the update statement modifying a geometry property is processed
      correctly. The response message must report that one feature was inserted
      and one was updated.
      </comment>
      <link>wfs-1.1.0-Transaction-atc5</link>
                <code>
                        <xsl:variable name="response">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.Transaction.post.url"/>
                                        </url>
                    <method>POST</method>
                                        <body>
                      <!-- test case id: wfs-1.1.0-Transaction-tc7.1 --><wfs:Transaction service="WFS" version="1.1.0">
	<wfs:Insert handle="ins-1">
      <sf:EntitéGénérique gml:id="cite.gmlsf0-f08">
        <gml:description>
        Maecenas nisi. Cum sociis natoque penatibus et magnis dis parturient montes,
        nascetur ridiculus mŭs. Fuscè condimentum cursus ipsum. Proin at nisl quis
        massa accumsan aliquam. Aliquam erat volutpat. Morbi volutpat tempor mi.
        Ut eget libero in lacus aliquam dignissim. Vivamus aliquam odio ut libero.
        Ćurabitur bibendum felis vitae tellus
        </gml:description>
        <gml:name codeSpace="http://cite.opengeospatial.org/gmlsf">cite.gmlsf0-f08</gml:name>
        <sf:attribut.Géométrie>
          <gml:Polygon gml:id="cite.gmlsf0-g08" srsName="urn:ogc:def:crs:EPSG::4326">
            <gml:exterior>
              <gml:LinearRing>
                <gml:posList>65.52752 20.989298 52.09453 19.720014 49.102436 14.609264 60.92411 11.851856 60.04618 16.19630 65.52752 20.989298</gml:posList>
              </gml:LinearRing>
            </gml:exterior>
          </gml:Polygon>
        </sf:attribut.Géométrie>
        <sf:boolProperty>false</sf:boolProperty>
        <sf:str4Property>tuv7</sf:str4Property>
      </sf:EntitéGénérique>
    </wfs:Insert>

    <wfs:Update handle="upd-1" typeName="sf:EntitéGénérique">
      <wfs:Property>
        <wfs:Name>sf:attribut.Géométrie</wfs:Name>
        <wfs:Value>
          <gml:MultiSurface gml:id="cite.gmlsf0-g09" srsName="urn:ogc:def:crs:EPSG::4326">
            <gml:surfaceMember>
              <gml:Polygon>
                <gml:exterior>
                  <gml:LinearRing>
                    <gml:posList>65.52752 20.989298 52.09453 19.720014 49.102436 14.609264 60.92411 11.851856 60.04618 16.19630 65.52752 20.989298</gml:posList>
                  </gml:LinearRing>
                </gml:exterior>
              </gml:Polygon>
            </gml:surfaceMember>
            <gml:surfaceMember>
              <gml:Polygon>
                <gml:exterior>
                  <gml:LinearRing>
                    <gml:posList>48.41841 12.878309 42.19452 14.521905 39.102436 10.204653 45.82511 10.051956 48.41841 12.878309</gml:posList>
                  </gml:LinearRing>
                </gml:exterior>
              </gml:Polygon>
            </gml:surfaceMember>
          </gml:MultiSurface>
        </wfs:Value>
      </wfs:Property>
      <ogc:Filter>
        <ogc:PropertyIsEqualTo>
          <ogc:PropertyName>sf:str4Property</ogc:PropertyName>
          <ogc:Literal>tuv7</ogc:Literal>
        </ogc:PropertyIsEqualTo>
      </ogc:Filter>
    </wfs:Update>
</wfs:Transaction>
                                        </body>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>
            <xsl:choose>
              <xsl:when test="not($response/*)">
                  <ctl:message>FAILURE: Missing response entity.</ctl:message>
                  <ctl:fail/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:variable name="totalInserted" select="$response//wfs:totalInserted"/>
                <xsl:if test="$totalInserted != 1">
                  <ctl:message>FAILURE: Expected totalInserted = 1 (reported total is <xsl:value-of select="$totalInserted"/>)</ctl:message>
                  <ctl:fail/>
                </xsl:if>
                <xsl:variable name="totalUpdated" select="$response//wfs:totalUpdated"/>
                <xsl:if test="$totalUpdated != 1">
                  <ctl:message>FAILURE: Expected totalUpdated = 1 (reported total is <xsl:value-of select="$totalUpdated"/>)</ctl:message>
                  <ctl:fail/>
                </xsl:if>
                <!-- Confirm that geometry property was updated -->
                <xsl:variable name="fid">
                  <xsl:value-of select="$response//wfs:InsertResults/wfs:Feature[1]/ogc:FeatureId/@fid"/>
                </xsl:variable>
                <xsl:variable name="response2">
                                  <ctl:request>
                                        <ctl:url>
                                                <xsl:value-of select="$wfs.GetFeature.get.url"/>
                                        </ctl:url>
                                        <ctl:method>GET</ctl:method>
                                        <ctl:param name="service">WFS</ctl:param>
                    <ctl:param name="version">1.1.0</ctl:param>
                                        <ctl:param name="request">GetFeature</ctl:param>
                    <ctl:param name="featureid"><xsl:value-of select="encode-for-uri($fid)"/></ctl:param>
                    <p:XMLValidatingParser.GMLSF1/>
                                  </ctl:request>
                    </xsl:variable>
                <xsl:if test="local-name($response2//sf:attribut.Géométrie/*) != 'MultiSurface'">
                  <ctl:message>FAILURE: Expected geometry value is gml:MultiSurface (feature gml:id="<xsl:value-of select="$fid"/>")</ctl:message>
                  <ctl:fail/>
                </xsl:if>
              </xsl:otherwise>
            </xsl:choose>
                </code>
        </test>

    <test name="wfs:wfs-1.1.0-Transaction-tc7.2">
      <param name="wfs.Transaction.post.url"/>
      <assertion>
      The response to a Transaction/Update request that attempts to update a
      geometry property having coordinates that do not correspond to the default
      CRS shall report a failing update statement.
      </assertion>
      <comment>
      Pass if the wfs:TransactionResults/wfs:Action element in the response
      refers the failing insert statement.
      </comment>
      <link>wfs-1.1.0-Transaction-atc6</link>
                <code>
                        <xsl:variable name="response">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.Transaction.post.url"/>
                                        </url>
                    <method>POST</method>
                                        <body>
                      <!-- test case id: wfs-1.1.0-Transaction-tc7.2 --><wfs:Transaction service="WFS" version="1.1.0">
	<wfs:Insert handle="ins-1">
      <sf:PrimitiveGeoFeature gml:id="cite.gmlsf0-f10">
        <sf:pointProperty>
          <gml:Point srsName="urn:ogc:def:crs:EPSG::4326">
            <gml:pos>70.823555 -7.735101</gml:pos>
          </gml:Point>
        </sf:pointProperty>
        <sf:intProperty>987654321</sf:intProperty>
        <sf:measurand>270.6</sf:measurand>
        <sf:decimalProperty>2.71</sf:decimalProperty>
      </sf:PrimitiveGeoFeature>
    </wfs:Insert>

    <wfs:Update handle="upd-1" typeName="sf:PrimitiveGeoFeature">
      <wfs:Property>
        <wfs:Name>sf:pointProperty</wfs:Name>
        <wfs:Value>
          <gml:Point>
            <gml:pos>5311942 2227320 12.34</gml:pos>
          </gml:Point>
        </wfs:Value>
      </wfs:Property>
      <ogc:Filter>
        <ogc:PropertyIsEqualTo>
          <ogc:PropertyName>sf:intProperty</ogc:PropertyName>
          <ogc:Literal>987654321</ogc:Literal>
        </ogc:PropertyIsEqualTo>
      </ogc:Filter>
    </wfs:Update>
</wfs:Transaction>
                                        </body>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>
            <xsl:choose>
              <xsl:when test="not($response/*)">
                  <ctl:message>FAILURE: Missing response entity.</ctl:message>
                  <ctl:fail/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:variable name="totalInserted" select="$response//wfs:totalInserted"/>
                <xsl:if test="$totalInserted != 1">
                  <ctl:message>FAILURE: Expected totalInserted = 1 (reported total is <xsl:value-of select="$totalInserted"/>)</ctl:message>
                  <ctl:fail/>
                </xsl:if>
                <xsl:variable name="totalUpdated" select="$response//wfs:totalUpdated"/>
                <xsl:if test="$totalUpdated != 0">
                  <ctl:message>FAILURE: Expected totalUpdated = 0 (reported total is <xsl:value-of select="$totalUpdated"/>)</ctl:message>
                  <ctl:fail/>
                </xsl:if>
                <!-- Confirm that update statement failed -->
                <xsl:if test="$response//wfs:TransactionResults/wfs:Action/@locator != 'upd-1'">
                  <ctl:message>FAILURE: Expected wfs:Action/@locator = 'upd-1'</ctl:message>
                  <ctl:fail/>
                </xsl:if>
              </xsl:otherwise>
            </xsl:choose>
                </code>
        </test>

    <test name="wfs:wfs-1.1.0-Transaction-tc8.1">
      <param name="wfs.Transaction.post.url"/>
      <param name="wfs.GetFeature.post.url"/>
      <assertion>
      Update multiple properties.
      </assertion>
      <comment>
      Pass if all properties are successfully updated.
      </comment>
      <link>wfs-1.1.0-Transaction-atc6</link>
                <code>
                        <xsl:variable name="response">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.Transaction.post.url"/>
                                        </url>
                    <method>POST</method>
                                        <body>
                      <!-- test case id: wfs-1.1.0-Transaction-tc8.1 (1) --><wfs:Transaction service="WFS" version="1.1.0">
	<wfs:Insert handle="ins-1">
      <sf:PrimitiveGeoFeature gml:id="cite.gmlsf0-f13">
        <gml:name codeSpace="http://cite.opengeospatial.org/gmlsf">cite.gmlsf0-f13</gml:name>
        <sf:pointProperty>
          <gml:Point srsName="urn:ogc:def:crs:EPSG::4326">
            <gml:pos>62.12409 12.19653797</gml:pos>
          </gml:Point>
        </sf:pointProperty>
        <sf:intProperty>235711</sf:intProperty>
        <sf:measurand>6.12</sf:measurand>
        <sf:decimalProperty>10.16</sf:decimalProperty>
      </sf:PrimitiveGeoFeature>
    </wfs:Insert>
</wfs:Transaction>
                                        </body>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>
            <xsl:choose>
              <xsl:when test="not($response/*)">
                  <ctl:message>FAILURE: Missing response entity.</ctl:message>
                  <ctl:fail/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:variable name="totalInserted" select="$response//wfs:totalInserted"/>
                <xsl:if test="$totalInserted != 1">
                  <ctl:message>FAILURE: Expected totalInserted = 1 (reported total is <xsl:value-of select="$totalInserted"/>)</ctl:message>
                  <ctl:fail/>
                </xsl:if>
                <!-- Submit update request -->
                <xsl:variable name="fid">
                  <xsl:value-of select="$response//wfs:InsertResults/wfs:Feature[1]/ogc:FeatureId/@fid"/>
                </xsl:variable>
                <xsl:variable name="response2">
                                  <request>
                                        <url>
                                                <xsl:value-of select="$wfs.Transaction.post.url"/>
                                        </url>
                    <method>POST</method>
                                        <body>
                      <!-- test case id: wfs-1.1.0-Transaction-tc8.1 (2) --><wfs:Transaction service="WFS" version="1.1.0">
    
    <wfs:Update handle="upd-1" typeName="sf:PrimitiveGeoFeature">
      <wfs:Property>
        <wfs:Name>sf:measurand</wfs:Name>
        <wfs:Value>6.24</wfs:Value>
      </wfs:Property>
      <wfs:Property>
        <wfs:Name>gml:name</wfs:Name>
        <wfs:Value>cite.gmlsf0-f13bis</wfs:Value>
      </wfs:Property>
      <ogc:Filter>
        <ogc:GmlObjectId gml:id="{$fid}"/>
      </ogc:Filter>
    </wfs:Update>
</wfs:Transaction>
                                        </body>
                                        <p:XMLValidatingParser.GMLSF1/>
                                  </request>
                            </xsl:variable>
                <xsl:variable name="totalUpdated" select="$response2//wfs:totalUpdated"/>
                <xsl:if test="$totalUpdated != 1">
                  <ctl:message>FAILURE: Expected totalUpdated = 1 (reported total is <xsl:value-of select="$totalUpdated"/>)</ctl:message>
                  <ctl:fail/>
                </xsl:if>
                <!-- Attempt to fetch updated feature -->
                <ctl:call-test name="wfs:GetFeatureByName">
                  <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                  <ctl:with-param name="type" select="'sf:PrimitiveGeoFeature'"/>
                  <ctl:with-param name="name.value" select="'cite.gmlsf0-f13bis'"/>
                  <ctl:with-param name="empty.response" select="'false'"/>
                </ctl:call-test>
              </xsl:otherwise>
            </xsl:choose>
                </code>
        </test>

    <test name="wfs:wfs-1.1.0-Transaction-tc9.1">
      <param name="wfs.Transaction.post.url"/>
      <param name="wfs.GetFeature.get.url"/>
      <ctl:param name="supports.atomic.trx"/>
      <assertion>
      An update request that attempts to remove a required feature property must
      give rise to an exception report.
      </assertion>
      <comment>
      Pass if the update fails and an exception report is returned.
      </comment>
      <link>wfs-1.1.0-Transaction-atc7</link>
                <code>
                        <xsl:variable name="response">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.Transaction.post.url"/>
                                        </url>
                    <method>POST</method>
                                        <body>
                      <!-- test case id: wfs-1.1.0-Transaction-tc9.1 (1) --><wfs:Transaction service="WFS" version="1.1.0">
	<wfs:Insert handle="ins-1">
      <sf:AggregateGeoFeature gml:id="cite.gmlsf0-f12">
        <gml:description>
        Maecenas fermentum, massa ac ornare tristique, sem est tempus justo,
        sed euismod urna ante ut pede. Nam condimentum sapien ut quam.
        </gml:description>
        <gml:name codeSpace="http://cite.opengeospatial.org/gmlsf">cite.gmlsf0-f12</gml:name>
        <gml:boundedBy>
          <gml:Envelope srsName="urn:ogc:def:crs:EPSG::4326">
            <gml:lowerCorner>35.84 0.14</gml:lowerCorner>
            <gml:upperCorner>56.54 12.37</gml:upperCorner>
          </gml:Envelope>
        </gml:boundedBy>
        <sf:multiCurveProperty>
          <gml:MultiCurve srsName="urn:ogc:def:crs:EPSG::4326">
            <gml:description>Aenean convallis pede non quam</gml:description>
            <gml:curveMember>
              <gml:LineString>
                <gml:posList>35.840973 0.14967346 44.11891 3.6755037 48.36785 9.001808 39.459682 9.716776</gml:posList>
              </gml:LineString>
            </gml:curveMember>
            <gml:curveMember>
              <gml:LineString>
                <gml:posList>51.174034 12.365124 55.288635 7.583888 56.534782 4.1457024</gml:posList>
              </gml:LineString>
            </gml:curveMember>
          </gml:MultiCurve>
        </sf:multiCurveProperty>
        <sf:doubleProperty>2.4510E4</sf:doubleProperty>
        <sf:intRangeProperty>99</sf:intRangeProperty>
        <sf:strProperty>Fusce turpis est, ultricies sed, luctus quis, blandit ac, massa</sf:strProperty>
        <sf:featureCode>AT030</sf:featureCode>
      </sf:AggregateGeoFeature>
    </wfs:Insert>
</wfs:Transaction>
                                        </body>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>
            <xsl:choose>
              <xsl:when test="not($response/*)">
                  <ctl:message>FAILURE: Missing response entity.</ctl:message>
                  <ctl:fail/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:variable name="totalInserted" select="$response//wfs:totalInserted"/>
                <xsl:if test="$totalInserted != 1">
                  <ctl:message>FAILURE: Expected totalInserted = 1 (reported total is <xsl:value-of select="$totalInserted"/>)</ctl:message>
                  <ctl:fail/>
                </xsl:if>
                <!-- Submit update request -->
                <xsl:variable name="fid">
                  <xsl:value-of select="$response//wfs:InsertResults/wfs:Feature[1]/ogc:FeatureId/@fid"/>
                </xsl:variable>
                <xsl:variable name="response2">
                                  <request>
                                        <url>
                                                <xsl:value-of select="$wfs.Transaction.post.url"/>
                                        </url>
                    <method>POST</method>
                                        <body>
                      <!-- test case id: wfs-1.1.0-Transaction-tc9.1 (2) --><wfs:Transaction service="WFS" version="1.1.0">
    
    <wfs:Update handle="upd-1" typeName="sf:AggregateGeoFeature">
      <wfs:Property>
        <wfs:Name>sf:doubleProperty</wfs:Name>
      </wfs:Property>
      <ogc:Filter>
        <ogc:GmlObjectId gml:id="{$fid}"/>
      </ogc:Filter>
    </wfs:Update>
</wfs:Transaction>
                                        </body>
                                  </request>
                            </xsl:variable>

                            <xsl:choose>
                                        <xsl:when test="$supports.atomic.trx">
                                                <ctl:call-test name="ctl:SchematronValidatingParser">
                                                        <ctl:with-param name="doc" select="$response2"/>
                                                        <ctl:with-param name="schema">sch/ows/1.0.0/ExceptionReport.sch</ctl:with-param>
                                                        <ctl:with-param name="phase">DefaultPhase</ctl:with-param>
                                                </ctl:call-test>
                                        </xsl:when>
                                        <xsl:otherwise>
                                                <xsl:variable name="totalUpdated"><xsl:value-of select="$response2//wfs:totalUpdated"/></xsl:variable>
                                                <xsl:if test="$totalUpdated != 0">
                                                  <ctl:message>FAILURE: Expected totalUpdated = 0 (reported total is <xsl:value-of select="$totalUpdated"/>)</ctl:message>
                                                  <ctl:fail/>
                                                </xsl:if>
                                                <xsl:if test="$response2//wfs:TransactionResults/wfs:Action/@locator != 'upd-1'">
                                                  <ctl:message>FAILURE: Expected wfs:Action/@locator = 'upd-1'</ctl:message>
                                                  <ctl:fail/>
                                                </xsl:if>
                                        </xsl:otherwise>
                            </xsl:choose>

                <!-- Confirm that update failed -->
                <xsl:variable name="response3">
                                  <ctl:request>
                                        <ctl:url>
                                                <xsl:value-of select="$wfs.GetFeature.get.url"/>
                                        </ctl:url>
                                        <ctl:method>GET</ctl:method>
                                        <ctl:param name="service">WFS</ctl:param>
                    <ctl:param name="version">1.1.0</ctl:param>
                                        <ctl:param name="request">GetFeature</ctl:param>
                    <ctl:param name="featureid"><xsl:value-of select="encode-for-uri($fid)"/></ctl:param>
                    <p:XMLValidatingParser.GMLSF1/>
                                  </ctl:request>
                    </xsl:variable>
                <xsl:if test="xsd:double($response3//sf:AggregateGeoFeature/sf:doubleProperty) != xsd:double('2.4510E4')">
                  <ctl:message>FAILURE: Expected sf:doubleProperty = 2.4510E4 (<xsl:value-of select="$fid"/>.</ctl:message>
                  <ctl:fail/>
                </xsl:if>
              </xsl:otherwise>
            </xsl:choose>
                </code>
        </test>

    <test name="wfs:wfs-1.1.0-Transaction-tc10.1">
      <param name="wfs.Transaction.post.url"/>
      <ctl:param name="supports.atomic.trx"/>
      <assertion>
      An update request that attempts to update a property with an incongruent
      value must fail; the failing update statements must be referenced in the
      transaction response.
      </assertion>
      <comment>
      Pass if all failed update statements have corresponding wfs:Action elements
      in the response.
      </comment>
      <link>wfs-1.1.0-Transaction-atc7</link>
                <code>
                        <xsl:variable name="response">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.Transaction.post.url"/>
                                        </url>
                    <method>POST</method>
                                        <body>
                      <!-- test case id: wfs-1.1.0-Transaction-tc10.1 (1) --><wfs:Transaction service="WFS" version="1.1.0">
	<wfs:Insert handle="ins-1">
      <sf:PrimitiveGeoFeature gml:id="cite.gmlsf0-f13">
        <gml:description>
        Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere
        cubilia Curae; maecenas elu dictum.
        </gml:description>
        <sf:surfaceProperty>
          <gml:Polygon srsName="urn:ogc:def:crs:EPSG::4326">
            <gml:description>Aenean convallis pede non quam</gml:description>
            <gml:exterior>
              <gml:LinearRing>
                <gml:posList>65.86066 -6.802099 60.43201 -3.398107 49.62552 -4.018872 52.680374 -6.822956 65.86066 -6.802099</gml:posList>
              </gml:LinearRing>
            </gml:exterior>
          </gml:Polygon>
        </sf:surfaceProperty>
        <sf:intProperty>111222</sf:intProperty>
        <sf:uriProperty>ldap://ldap.ufoo.edu/o=University%20of%20Foo,c=NN</sf:uriProperty>
        <sf:measurand>3731</sf:measurand>
        <sf:dateProperty>2006-05-07</sf:dateProperty>
        <sf:decimalProperty>0.98</sf:decimalProperty>
      </sf:PrimitiveGeoFeature>
    </wfs:Insert>
</wfs:Transaction>
                    </body>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>
            <xsl:choose>
              <xsl:when test="not($response/*)">
                  <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                  <ctl:fail/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:variable name="totalInserted" select="$response//wfs:totalInserted"/>
                <xsl:if test="$totalInserted != 1">
                  <ctl:message>FAILURE: Expected totalInserted = 1 (reported total is <xsl:value-of select="$totalInserted"/>)</ctl:message>
                  <ctl:fail/>
                </xsl:if>
                <!-- Submit update request -->
                <xsl:variable name="fid">
                  <xsl:value-of select="$response//wfs:InsertResults/wfs:Feature[1]/ogc:FeatureId/@fid"/>
                </xsl:variable>
                <xsl:variable name="response2">
                                  <request>
                                        <url>
                                                <xsl:value-of select="$wfs.Transaction.post.url"/>
                                        </url>
                    <method>POST</method>
                                        <body>
                      <!-- test case id: wfs-1.1.0-Transaction-tc10.1 (2) --><wfs:Transaction service="WFS" version="1.1.0">

    <wfs:Update handle="upd-1" typeName="sf:PrimitiveGeoFeature">
      <wfs:Property>
        <wfs:Name>sf:surfaceProperty</wfs:Name>
        <wfs:Value>
          <gml:MultiCurve srsName="urn:ogc:def:crs:EPSG::4326">
            <gml:curveMember>
              <gml:LineString>
                <gml:posList>35.840973 0.14967346 44.11891 3.6755037 48.36785 9.001808 39.459682 9.716776</gml:posList>
              </gml:LineString>
            </gml:curveMember>
            <gml:curveMember>
              <gml:LineString>
                <gml:posList>51.174034 12.365124 55.288635 7.583888 56.534782 4.1457024</gml:posList>
              </gml:LineString>
            </gml:curveMember>
          </gml:MultiCurve>
        </wfs:Value>
      </wfs:Property>
      <ogc:Filter>
        <ogc:GmlObjectId gml:id="{$fid}"/>
      </ogc:Filter>
    </wfs:Update>
    <wfs:Update handle="upd-2" typeName="sf:PrimitiveGeoFeature">
      <wfs:Property>
        <wfs:Name>sf:dateProperty</wfs:Name>
        <wfs:Value>2006-05-07T12:51:00Z</wfs:Value>
      </wfs:Property>
      <ogc:Filter>
        <ogc:GmlObjectId gml:id="{$fid}"/>
      </ogc:Filter>
    </wfs:Update>
</wfs:Transaction>
                                        </body>
                    <p:XMLValidatingParser.GMLSF1/>
                                  </request>
                            </xsl:variable>
                <!-- accommodate fine-grained or coarse-grained transactions -->
                <xsl:choose>
                    <xsl:when test="not($supports.atomic.trx)">
                        <xsl:variable name="totalUpdated" select="$response2//wfs:totalUpdated"/>
                        <xsl:if test="$totalUpdated != 0">
                          <ctl:message>FAILURE: Expected totalUpdated = 0 (reported total is <xsl:value-of select="$totalUpdated"/>)</ctl:message>
                          <ctl:fail/>
                        </xsl:if>
                        <xsl:if test="count($response2//wfs:TransactionResults/wfs:Action) != 2">
                          <ctl:message>FAILURE: Expected 2 wfs:Action elements in response.</ctl:message>
                          <ctl:fail/>
                        </xsl:if>
                    </xsl:when>
                    <xsl:otherwise>
                      <ctl:call-test name="ctl:SchematronValidatingParser">
                        <ctl:with-param name="doc" select="$response2"/>
                        <ctl:with-param name="schema">sch/ows/1.0.0/ExceptionReport.sch</ctl:with-param>
                        <ctl:with-param name="phase">DefaultPhase</ctl:with-param>
                      </ctl:call-test>
                    </xsl:otherwise>
                </xsl:choose>
              </xsl:otherwise>
            </xsl:choose>
                </code>
        </test>

    <test name="wfs:wfs-1.1.0-Transaction-tc11.1">
      <param name="wfs.Transaction.post.url"/>
      <param name="wfs.GetFeature.get.url"/>
      <assertion>
      In response to an update request that does not include a value for an optional
      property, the property shall be removed.
      </assertion>
      <comment>
      Pass if the update succeeds and the properties are removed.
      </comment>
      <link>wfs-1.1.0-Transaction-atc7</link>
                <code>
                        <xsl:variable name="response">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.Transaction.post.url"/>
                                        </url>
                    <method>POST</method>
                                        <body>
                      <!-- test case id: wfs-1.1.0-Transaction-tc11.1 (1) --><wfs:Transaction service="WFS" version="1.1.0">
	<wfs:Insert handle="ins-1">
      <sf:PrimitiveGeoFeature gml:id="cite.gmlsf0-f14">
        <gml:name codeSpace="http://cite.opengeospatial.org/gmlsf">cite.gmlsf0-f14</gml:name>
        <sf:pointProperty>
          <gml:Point srsName="urn:ogc:def:crs:EPSG::4326">
            <gml:pos>69.21915 19.314623</gml:pos>
          </gml:Point>
        </sf:pointProperty>
        <sf:intProperty>71921</sf:intProperty>
        <sf:measurand>94.6</sf:measurand>
        <sf:decimalProperty>9.02</sf:decimalProperty>
      </sf:PrimitiveGeoFeature>
    </wfs:Insert>
</wfs:Transaction>
                      </body>
                                          <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>
            <xsl:choose>
              <xsl:when test="not($response/*)">
                  <ctl:message>FAILURE: Missing response entity.</ctl:message>
                  <ctl:fail/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:variable name="totalInserted" select="$response//wfs:totalInserted"/>
                <xsl:if test="$totalInserted != 1">
                  <ctl:message>FAILURE: Expected totalInserted = 1 (reported total is <xsl:value-of select="$totalInserted"/>)</ctl:message>
                  <ctl:fail/>
                </xsl:if>
                <!-- Submit update request -->
                <xsl:variable name="fid">
                  <xsl:value-of select="$response//wfs:InsertResults/wfs:Feature[1]/ogc:FeatureId/@fid"/>
                </xsl:variable>
                <xsl:variable name="response2">
                                  <request>
                                        <url>
                                                <xsl:value-of select="$wfs.Transaction.post.url"/>
                                        </url>
                    <method>POST</method>
                                        <body>
                      <!-- test case id: wfs-1.1.0-Transaction-tc11.1 (2) --><wfs:Transaction service="WFS" version="1.1.0">
    
    <wfs:Update handle="upd-1" typeName="sf:PrimitiveGeoFeature">
      <wfs:Property>
        <wfs:Name>gml:name</wfs:Name>
      </wfs:Property>
      <ogc:Filter>
        <ogc:GmlObjectId gml:id="{$fid}"/>
      </ogc:Filter>
    </wfs:Update>
</wfs:Transaction>
                                        </body>
                    <p:XMLValidatingParser.GMLSF1/>
                                  </request>
                            </xsl:variable>
                <xsl:variable name="totalUpdated" select="$response2//wfs:totalUpdated"/>
                <xsl:if test="$totalUpdated != 1">
                  <ctl:message>FAILURE: Expected totalUpdated = 1 (reported total is <xsl:value-of select="$totalUpdated"/>)</ctl:message>
                  <ctl:fail/>
                </xsl:if>
                <xsl:variable name="response3">
                                  <ctl:request>
                                        <ctl:url>
                                                <xsl:value-of select="$wfs.GetFeature.get.url"/>
                                        </ctl:url>
                                        <ctl:method>GET</ctl:method>
                                        <ctl:param name="service">WFS</ctl:param>
                    <ctl:param name="version">1.1.0</ctl:param>
                                        <ctl:param name="request">GetFeature</ctl:param>
                    <ctl:param name="featureid"><xsl:value-of select="encode-for-uri($fid)"/></ctl:param>
                    <p:XMLValidatingParser.GMLSF1/>
                                  </ctl:request>
                    </xsl:variable>
                <xsl:if test="count($response3//sf:PrimitiveGeoFeature/gml:name) != 0">
                  <ctl:message>FAILURE: Expected no gml:name properties (<xsl:value-of select="$fid"/>)</ctl:message>
                  <ctl:fail/>
                </xsl:if>
              </xsl:otherwise>
            </xsl:choose>
                </code>
        </test>

    <test name="wfs:wfs-1.1.0-Transaction-tc12.1">
      <param name="wfs.Transaction.post.url"/>
      <assertion>
      The response to a Transaction request that includes a delete statement
      without a filter (i.e. an invalid request) must include an exception report.
      </assertion>
      <comment>Pass if all of the following conditions are true: (1) the response
      is a valid ows:ExceptionReport; (2) the reported exceptionCode is "MissingParameterValuePhase".
      </comment>
      <link>wfs-1.1.0-Transaction-atcX</link>
                <code>
                        <xsl:variable name="response">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.Transaction.post.url"/>
                                        </url>
                    <method>POST</method>
                                        <body>
                      <!-- test case id: wfs-1.1.0-Transaction-tc12.1 --><wfs:Transaction service="WFS" version="1.1.0">
    <wfs:Delete handle="del-1" typeName="sf:PrimitiveGeoFeature"/>
</wfs:Transaction>
                    </body>
                                        <p:XMLValidatingParser.OWS/>
                                </request>
                        </xsl:variable>

            <xsl:choose>
              <xsl:when test="not($response/*)">
                  <ctl:message>FAILURE: Missing response entity.</ctl:message>
                  <ctl:fail/>
              </xsl:when>
              <xsl:otherwise>
                <ctl:call-test name="ctl:SchematronValidatingParser">
                            <ctl:with-param name="doc" select="$response"/>
                            <ctl:with-param name="schema">sch/ows/1.0.0/ExceptionReport.sch</ctl:with-param>
                            <ctl:with-param name="phase">MissingParameterValuePhase</ctl:with-param>
                    </ctl:call-test>
              </xsl:otherwise>
            </xsl:choose>
                </code>
        </test>

    <test name="wfs:wfs-1.1.0-Transaction-tc13.1">
      <param name="wfs.Transaction.post.url"/>
      <param name="wfs.GetFeature.get.url"/>
      <assertion>
      In response to a valid delete request, all matching features shall be deleted.
      </assertion>
      <comment>
      Pass if the delete actions succeed.
      </comment>
                <code>
                        <xsl:variable name="response">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.Transaction.post.url"/>
                                        </url>
                    <method>POST</method>
                                        <body>
                      <!-- test case id: wfs-1.1.0-Transaction-tc13.1 (1) --><wfs:Transaction service="WFS" version="1.1.0">
	<wfs:Insert handle="ins-1">
      <sf:PrimitiveGeoFeature gml:id="cite.gmlsf0-f16">
        <gml:name codeSpace="http://cite.opengeospatial.org/gmlsf">cite.gmlsf0-f16</gml:name>
        <sf:curveProperty>
          <gml:LineString srsName="urn:ogc:def:crs:EPSG::4326">
            <gml:posList>48.76926 27.590446 46.54372 24.856320 42.89878 20.067233 42.414574 15.148127</gml:posList>
          </gml:LineString>
        </sf:curveProperty>
        <sf:intProperty>76512</sf:intProperty>
        <sf:measurand>8000</sf:measurand>
        <sf:dateTimeProperty>2006-07-30T08:34:12+01:00</sf:dateTimeProperty>
        <sf:decimalProperty>75.12</sf:decimalProperty>
      </sf:PrimitiveGeoFeature>
      <sf:PrimitiveGeoFeature gml:id="cite.gmlsf0-f17">
        <gml:name codeSpace="http://cite.opengeospatial.org/gmlsf">cite.gmlsf0-f17</gml:name>
        <sf:curveProperty>
          <gml:LineString srsName="urn:ogc:def:crs:EPSG::4326">
            <gml:posList>46.76926 25.590446 45.54372 22.856320 41.89878 18.067233 41.414574 13.148127 39.414574 9.148127</gml:posList>
          </gml:LineString>
        </sf:curveProperty>
        <sf:intProperty>111222</sf:intProperty>
        <sf:measurand>450</sf:measurand>
        <sf:dateTimeProperty>2005-11-22T11:51:43+02:00</sf:dateTimeProperty>
        <sf:decimalProperty>15.12</sf:decimalProperty>
      </sf:PrimitiveGeoFeature>
      <sf:EntitéGénérique gml:id="cite.gmlsf0-f18">
        <gml:description>Lorem ipsum dolor sit amet, consectetuer adipiscing elit.</gml:description>
        <gml:name codeSpace="http://cite.opengeospatial.org/gmlsf">cite.gmlsf0-f18</gml:name>
        <sf:attribut.Géométrie>
          <gml:LineString srsName="urn:ogc:def:crs:EPSG::4326">
            <gml:posList>52.68416 0.826830 50.19039 3.537679 53.00112 5.850914 54.53406 13.099472 54.400627 18.411608</gml:posList>
          </gml:LineString>
        </sf:attribut.Géométrie>
        <sf:boolProperty>true</sf:boolProperty>
        <sf:str4Property>wxÿz</sf:str4Property>
        <sf:featureRef>cite.gmlsf0-f16</sf:featureRef>
      </sf:EntitéGénérique>
    </wfs:Insert>
</wfs:Transaction>
                      </body>
                                          <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>
            <xsl:choose>
              <xsl:when test="not($response/*)">
                  <ctl:message>FAILURE: Missing response entity.</ctl:message>
                  <ctl:fail/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:variable name="totalInserted" select="$response//wfs:totalInserted"/>
                <xsl:if test="$totalInserted != 3">
                  <ctl:message>FAILURE: Expected totalInserted = 3 (reported total is <xsl:value-of select="$totalInserted"/>)</ctl:message>
                  <ctl:fail/>
                </xsl:if>
                <!-- Submit delete request -->
                <xsl:variable name="fid1">
                  <xsl:value-of select="$response//wfs:InsertResults/wfs:Feature[1]/ogc:FeatureId/@fid"/>
                </xsl:variable>
                <xsl:variable name="fid2">
                  <xsl:value-of select="$response//wfs:InsertResults/wfs:Feature[2]/ogc:FeatureId/@fid"/>
                </xsl:variable>
                <xsl:variable name="fid3">
                  <xsl:value-of select="$response//wfs:InsertResults/wfs:Feature[3]/ogc:FeatureId/@fid"/>
                </xsl:variable>
                <xsl:variable name="response2">
                                  <request>
                                        <url>
                                                <xsl:value-of select="$wfs.Transaction.post.url"/>
                                        </url>
                    <method>POST</method>
                                        <body>
                      <!-- test case id: wfs-1.1.0-Transaction-tc13.1 (2) --><wfs:Transaction service="WFS" version="1.1.0">
    <wfs:Delete handle="del-1" typeName="sf:PrimitiveGeoFeature">
      <ogc:Filter>
        <ogc:GmlObjectId gml:id="{$fid1}"/>
        <ogc:GmlObjectId gml:id="{$fid2}"/>
      </ogc:Filter>
    </wfs:Delete>
    <wfs:Delete handle="del-2" typeName="sf:EntitéGénérique">
      <ogc:Filter>
        <ogc:GmlObjectId gml:id="{$fid3}"/>
      </ogc:Filter>
    </wfs:Delete>
</wfs:Transaction>
                                        </body>
                    <p:XMLValidatingParser.GMLSF1/>
                                  </request>
                            </xsl:variable>
                <xsl:variable name="totalDeleted" select="$response2//wfs:totalDeleted"/>
                <xsl:if test="$totalDeleted != 3">
                  <ctl:message>FAILURE: Expected totalDeleted = 3 (reported total is <xsl:value-of select="$totalDeleted"/>)</ctl:message>
                  <ctl:fail/>
                </xsl:if>
                <!-- check all three features were deleted -->
                <ctl:call-test name="wfs:GetFeatureById-KVP">
                  <ctl:with-param name="wfs.GetFeature.get.url" select="$wfs.GetFeature.get.url"/>
                  <ctl:with-param name="id" select="$fid1"/>
                  <ctl:with-param name="empty.response" select="'true'"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:GetFeatureById-KVP">
                  <ctl:with-param name="wfs.GetFeature.get.url" select="$wfs.GetFeature.get.url"/>
                  <ctl:with-param name="id" select="$fid2"/>
                  <ctl:with-param name="empty.response" select="'true'"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:GetFeatureById-KVP">
                  <ctl:with-param name="wfs.GetFeature.get.url" select="$wfs.GetFeature.get.url"/>
                  <ctl:with-param name="id" select="$fid3"/>
                  <ctl:with-param name="empty.response" select="'true'"/>
                </ctl:call-test>
              </xsl:otherwise>
            </xsl:choose>
                </code>
        </test>

                <ctl:test name="wfs:Transaction-invalid-lock">
                <ctl:param name="CAPABILITIES"/>
                <ctl:assertion>A transaction request with an invalid lock identifier returns an exception.</ctl:assertion>
                <ctl:comment/>
        <ctl:link>OGC 04-094, 12.2.3, p.65</ctl:link>
                <ctl:code>
                        <xsl:choose>
                    <xsl:when test="not($CAPABILITIES/wfs:FeatureTypeList/wfs:FeatureType[wfs:Name='sf:PrimitiveGeoFeature'])">
                                        <ctl:message>sf:PrimitiveGeoFeature does not exist</ctl:message>
                    </xsl:when>
                    <xsl:otherwise>
                                        <xsl:variable name="RESPONSE">
                                                <ctl:request>
                                                        <ctl:url>
                                                                <xsl:value-of select="$CAPABILITIES/ows:OperationsMetadata/ows:Operation[@name='Transaction']/ows:DCP/ows:HTTP/ows:Post/@xlink:href"/>
                                                        </ctl:url>
                                    <method>POST</method>
                                                        <body>
                                                        <wfs:Transaction service="WFS" version="1.1.0">
                                                                <wfs:LockID>InvalidLockId</wfs:LockID>
                                                            <wfs:Update handle="upd-1" typeName="sf:PrimitiveGeoFeature">
                                                              <wfs:Property>
                                                                <wfs:Name>gml:description</wfs:Name>
                                                                <wfs:Value>description-f001-updated</wfs:Value>
                                                              </wfs:Property>
                                                              <ogc:Filter>
                                                                <ogc:GmlObjectId gml:id="PrimitiveGeoFeature.01"/>
                                                              </ogc:Filter>
                                                            </wfs:Update>
                                                        </wfs:Transaction>
                                                        </body>
                                            <parsers:HTTPParser>
                                               <parsers:parse>
                                                  <parsers:HTTPParser/>
                                               </parsers:parse>
                                            </parsers:HTTPParser>
                                                </ctl:request>
                                        </xsl:variable>
                                        <xsl:if test="not($RESPONSE//ows:Exception/*)">
                                                <ctl:fail/>
                                        </xsl:if>

                                </xsl:otherwise>
                        </xsl:choose>
                </ctl:code>
        </ctl:test>


        <ctl:test name="wfs:Transaction-idgen-generate-new">
                <ctl:param name="CAPABILITIES"/>
                <ctl:assertion>In response to an Insert Transaction request with idgen=GenerateNew, the service generates unique identifiers for the newly inserted feature instances.</ctl:assertion>
                <ctl:comment/>
        <ctl:link>OGC 04-094, 12.2.4, p.67</ctl:link>
                <ctl:code>
                        <xsl:choose>
                    <xsl:when test="not($CAPABILITIES/wfs:FeatureTypeList/wfs:FeatureType[wfs:Name='sf:PrimitiveGeoFeature'])">
                                        <ctl:message>sf:PrimitiveGeoFeature does not exist</ctl:message>
                    </xsl:when>
                    <xsl:otherwise>
                                        <xsl:variable name="INS-RESPONSE">
                                                <ctl:request>
                                                        <ctl:url>
                                                                <xsl:value-of select="$CAPABILITIES/ows:OperationsMetadata/ows:Operation[@name='Transaction']/ows:DCP/ows:HTTP/ows:Post/@xlink:href"/>
                                                        </ctl:url>
                                    <method>POST</method>
                                                        <body>
                                                        <wfs:Transaction service="WFS" version="1.1.0">
                                                        <wfs:Insert handle="insert-idgen" idgen="GenerateNew">
                                                                        <sf:PrimitiveGeoFeature>
                                                                                <gml:name>cite.gmlsf0-f501</gml:name>
                                                                                <gml:boundedBy>
                                                                                        <gml:Envelope srsName="urn:ogc:def:crs:EPSG::4326">
                                                                                                <gml:lowerCorner>48.608284 15.7836</gml:lowerCorner>
                                                                                                <gml:upperCorner>50.849854 20.034142</gml:upperCorner>
                                                                                        </gml:Envelope>
                                                                                </gml:boundedBy>
                                                                                <sf:curveProperty>
                                                                                        <gml:LineString srsName="urn:ogc:def:crs:EPSG::4326">
                                                                                                <gml:posList>48.608284 20.034142 50.286873 15.7836
                                                                                                        50.849854 16.764992</gml:posList>
                                                                                        </gml:LineString>
                                                                                </sf:curveProperty>
                                                                                <sf:intProperty>1025</sf:intProperty>
                                                                                <sf:measurand>63.94</sf:measurand>
                                                                                <sf:dateTimeProperty>2006-08-23T08:45:12-05:00</sf:dateTimeProperty>
                                                                                <sf:decimalProperty>92.51</sf:decimalProperty>
                                                                        </sf:PrimitiveGeoFeature>
                                                            </wfs:Insert>
                                                        </wfs:Transaction>
                                                        </body>
                                            <parsers:HTTPParser>
                                               <parsers:parse>
                                                  <parsers:HTTPParser/>
                                               </parsers:parse>
                                            </parsers:HTTPParser>
                                                </ctl:request>
                                        </xsl:variable>
                                        <xsl:variable name="FEATUREID">
                                                <xsl:value-of select="$INS-RESPONSE//wfs:InsertResults/wfs:Feature/ogc:FeatureId/@fid"/>
                                        </xsl:variable>

                                        <xsl:if test="$FEATUREID=''">
                                                <ctl:fail/>
                                        </xsl:if>
                                        <!-- clean up -->
                                        <xsl:variable name="RESPONSE">
                                                <ctl:request>
                                                        <ctl:url>
                                                                <xsl:value-of select="$CAPABILITIES/ows:OperationsMetadata/ows:Operation[@name='Transaction']/ows:DCP/ows:HTTP/ows:Post/@xlink:href"/>
                                                        </ctl:url>
                                    <method>POST</method>
                                                        <body>
                                                                <wfs:Transaction service="WFS" version="1.1.0">
                                                                        <wfs:Delete typeName="sf:PrimitiveGeoFeature">
                                                                        <ogc:Filter>
                                                                                <ogc:GmlObjectId gml:id="{$FEATUREID}"/>
                                                                        </ogc:Filter>
                                                                        </wfs:Delete>
                                                                </wfs:Transaction>
                                                        </body>
                                            <parsers:HTTPParser>
                                               <parsers:parse>
                                                  <parsers:HTTPParser/>
                                               </parsers:parse>
                                            </parsers:HTTPParser>
                                                </ctl:request>
                                        </xsl:variable>
                                </xsl:otherwise>
                        </xsl:choose>
                </ctl:code>
        </ctl:test>

        <ctl:test name="wfs:Transaction-idgen-use-existing">
                <ctl:param name="CAPABILITIES"/>
                <ctl:assertion>In response to an Insert Transaction request with idgen=UseExisting where the identifiers are new values that do not belong to any existing features in the WFS, the service uses the existing gml:id identifiers for the newly inserted feature instances.</ctl:assertion>
                <ctl:comment/>
        <ctl:link>OGC 04-094, 12.2.4, p.67</ctl:link>
                <ctl:code>
                        <xsl:choose>
                    <xsl:when test="not($CAPABILITIES/wfs:FeatureTypeList/wfs:FeatureType[wfs:Name='sf:PrimitiveGeoFeature'])">
                                        <ctl:message>sf:PrimitiveGeoFeature does not exist</ctl:message>
                    </xsl:when>
                    <xsl:otherwise>
                                        <xsl:variable name="INS-RESPONSE">
                                                <ctl:request>
                                                        <ctl:url>
                                                                <xsl:value-of select="$CAPABILITIES/ows:OperationsMetadata/ows:Operation[@name='Transaction']/ows:DCP/ows:HTTP/ows:Post/@xlink:href"/>
                                                        </ctl:url>
                                    <method>POST</method>
                                                        <body>
                                                        <wfs:Transaction service="WFS" version="1.1.0">
                                                        <wfs:Insert handle="insert-idgen" idgen="UseExisting">
                                                                        <sf:PrimitiveGeoFeature gml:id="PrimitiveGeoFeature.111">
                                                                                <gml:name>cite.gmlsf0-f501</gml:name>
                                                                                <gml:boundedBy>
                                                                                        <gml:Envelope srsName="urn:ogc:def:crs:EPSG::4326">
                                                                                                <gml:lowerCorner>48.608284 15.7836</gml:lowerCorner>
                                                                                                <gml:upperCorner>50.849854 20.034142</gml:upperCorner>
                                                                                        </gml:Envelope>
                                                                                </gml:boundedBy>
                                                                                <sf:curveProperty>
                                                                                        <gml:LineString srsName="urn:ogc:def:crs:EPSG::4326">
                                                                                                <gml:posList>48.608284 20.034142 50.286873 15.7836
                                                                                                        50.849854 16.764992</gml:posList>
                                                                                        </gml:LineString>
                                                                                </sf:curveProperty>
                                                                                <sf:intProperty>1025</sf:intProperty>
                                                                                <sf:measurand>63.94</sf:measurand>
                                                                                <sf:dateTimeProperty>2006-08-23T08:45:12-05:00</sf:dateTimeProperty>
                                                                                <sf:decimalProperty>92.51</sf:decimalProperty>
                                                                        </sf:PrimitiveGeoFeature>
                                                                </wfs:Insert>
                                                        </wfs:Transaction>
                                                        </body>
                                            <parsers:HTTPParser>
                                               <parsers:parse>
                                                  <parsers:HTTPParser/>
                                               </parsers:parse>
                                            </parsers:HTTPParser>
                                                </ctl:request>
                                        </xsl:variable>
                                        <xsl:variable name="FEATUREID">
                                                <xsl:value-of select="$INS-RESPONSE//wfs:InsertResults/wfs:Feature/ogc:FeatureId/@fid"/>
                                        </xsl:variable>
                                        <xsl:if test="not($FEATUREID='PrimitiveGeoFeature.111')">
                                                <ctl:fail/>
                                        </xsl:if>
                                        <!-- clean up -->
                                        <xsl:variable name="RESPONSE">
                                                <ctl:request>
                                                        <ctl:url>
                                                                <xsl:value-of select="$CAPABILITIES/ows:OperationsMetadata/ows:Operation[@name='Transaction']/ows:DCP/ows:HTTP/ows:Post/@xlink:href"/>
                                                        </ctl:url>
                                    <method>POST</method>
                                                        <body>
                                                                <wfs:Transaction service="WFS" version="1.1.0">
                                                                        <wfs:Delete typeName="sf:PrimitiveGeoFeature">
                                                                        <ogc:Filter>
                                                                                <ogc:GmlObjectId gml:id="{$FEATUREID}"/>
                                                                        </ogc:Filter>
                                                                        </wfs:Delete>
                                                                </wfs:Transaction>
                                                        </body>
                                            <parsers:HTTPParser>
                                               <parsers:parse>
                                                  <parsers:HTTPParser/>
                                               </parsers:parse>
                                            </parsers:HTTPParser>
                                                </ctl:request>
                                        </xsl:variable>
                                </xsl:otherwise>
                        </xsl:choose>
                </ctl:code>
        </ctl:test>

        <ctl:test name="wfs:Transaction-idgen-use-existing-update">
                <ctl:param name="CAPABILITIES"/>
                <ctl:assertion>In response to an Insert Transaction request with idgen=UseExisting where one of the identifiers used belongs to any existing features in the WFS, the service returns an exception.</ctl:assertion>
                <ctl:comment/>
        <ctl:link>OGC 04-094, 12.2.4, p.67</ctl:link>
                <ctl:code>
                        <xsl:variable name="RESPONSE">
                                <ctl:request>
                                        <ctl:url>
                                                <xsl:value-of select="$CAPABILITIES/ows:OperationsMetadata/ows:Operation[@name='GetFeature']/ows:DCP/ows:HTTP/ows:Post/@xlink:href"/>
                                        </ctl:url>
                    <ctl:method>POST</ctl:method>
                                        <ctl:body>
                                        <wfs:GetFeature service="WFS" version="1.1.0">
                                          <wfs:Query typeName="sf:PrimitiveGeoFeature">
                                                  <ogc:Filter>
                                                        <ogc:GmlObjectId gml:id="PrimitiveGeoFeature.1"/>
                                                  </ogc:Filter>
                                          </wfs:Query>
                                        </wfs:GetFeature>
                                        </ctl:body>
                            <parsers:HTTPParser>
                               <parsers:parse>
                                  <parsers:HTTPParser/>
                               </parsers:parse>
                            </parsers:HTTPParser>
                                </ctl:request>
                        </xsl:variable>
                        <xsl:choose>
                    <xsl:when test="not($RESPONSE//gml:featureMembers/sf:PrimitiveGeoFeature[@gml:id='PrimitiveGeoFeature.1'])">
                                        <ctl:message>sf:PrimitiveGeoFeature.1 does not exist</ctl:message>
                    </xsl:when>
                    <xsl:otherwise>
                                        <xsl:variable name="INS-RESPONSE">
                                                <ctl:request>
                                                        <ctl:url>
                                                                <xsl:value-of select="$CAPABILITIES/ows:OperationsMetadata/ows:Operation[@name='Transaction']/ows:DCP/ows:HTTP/ows:Post/@xlink:href"/>
                                                        </ctl:url>
                                    <method>POST</method>
                                                        <body>
                                                        <wfs:Transaction service="WFS" version="1.1.0">
                                                        <wfs:Insert handle="insert-idgen" idgen="UseExisting">
                                                                        <sf:PrimitiveGeoFeature gml:id="PrimitiveGeoFeature.1">
                                                                                <gml:name>cite.gmlsf0-f501</gml:name>
                                                                                <gml:boundedBy>
                                                                                        <gml:Envelope srsName="urn:ogc:def:crs:EPSG::4326">
                                                                                                <gml:lowerCorner>48.608284 15.7836</gml:lowerCorner>
                                                                                                <gml:upperCorner>50.849854 20.034142</gml:upperCorner>
                                                                                        </gml:Envelope>
                                                                                </gml:boundedBy>
                                                                                <sf:curveProperty>
                                                                                        <gml:LineString srsName="urn:ogc:def:crs:EPSG::4326">
                                                                                                <gml:posList>48.608284 20.034142 50.286873 15.7836
                                                                                                        50.849854 16.764992</gml:posList>
                                                                                        </gml:LineString>
                                                                                </sf:curveProperty>
                                                                                <sf:intProperty>1025</sf:intProperty>
                                                                                <sf:measurand>63.94</sf:measurand>
                                                                                <sf:dateTimeProperty>2006-08-23T08:45:12-05:00</sf:dateTimeProperty>
                                                                                <sf:decimalProperty>92.51</sf:decimalProperty>
                                                                        </sf:PrimitiveGeoFeature>
                                                                </wfs:Insert>
                                                        </wfs:Transaction>
                                                        </body>
                                            <parsers:HTTPParser>
                                               <parsers:parse>
                                                  <parsers:HTTPParser/>
                                               </parsers:parse>
                                            </parsers:HTTPParser>
                                                </ctl:request>
                                        </xsl:variable>
                                        <xsl:if test="not($INS-RESPONSE//ows:Exception/*)">
                                                <ctl:fail/>
                                        </xsl:if>
                                </xsl:otherwise>
                        </xsl:choose>
                </ctl:code>
        </ctl:test>

</ctl:package>
  <ctl:package xmlns="http://www.occamlab.com/ctl" xmlns:ogc="http://www.opengis.net/ogc">

   <ctl:test name="wfs:run-LockFeature-POST">
    <ctl:param name="wfs.GetCapabilities.document"/>
    <ctl:param name="supports.atomic.trx"/>
    <ctl:assertion>Run test group for LockFeature requests using the POST method</ctl:assertion>
    <ctl:code>

                <ctl:call-test name="wfs:LockFeature-expiry">
                        <ctl:with-param name="CAPABILITIES" select="$wfs.GetCapabilities.document"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:LockFeature-some-features">
                        <ctl:with-param name="CAPABILITIES" select="$wfs.GetCapabilities.document"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:LockFeature-all-features">
                        <ctl:with-param name="CAPABILITIES" select="$wfs.GetCapabilities.document"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:LockFeature-identifiers-none">
                        <ctl:with-param name="CAPABILITIES" select="$wfs.GetCapabilities.document"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:LockFeature-invalid-request">
                        <ctl:with-param name="CAPABILITIES" select="$wfs.GetCapabilities.document"/>
                </ctl:call-test>

      <xsl:variable name="wfs.LockFeature.post.url">
        <xsl:value-of select="$wfs.GetCapabilities.document//ows:OperationsMetadata/ows:Operation[@name='LockFeature']/ows:DCP/ows:HTTP/ows:Post/@xlink:href"/>
          </xsl:variable>
      <xsl:variable name="wfs.Transaction.post.url">
        <xsl:value-of select="$wfs.GetCapabilities.document//ows:OperationsMetadata/ows:Operation[@name='Transaction']/ows:DCP/ows:HTTP/ows:Post/@xlink:href"/>
          </xsl:variable>
      <xsl:variable name="wfs.GetFeature.get.url">
        <xsl:value-of select="$wfs.GetCapabilities.document//ows:OperationsMetadata/ows:Operation[@name='GetFeature']/ows:DCP/ows:HTTP/ows:Get/@xlink:href"/>
          </xsl:variable>
      <xsl:variable name="wfs.GetFeature.post.url">
        <xsl:value-of select="$wfs.GetCapabilities.document//ows:OperationsMetadata/ows:Operation[@name='GetFeature']/ows:DCP/ows:HTTP/ows:Post/@xlink:href"/>
          </xsl:variable>
      <ctl:message>Target endpoint is <xsl:value-of select="$wfs.LockFeature.post.url"/></ctl:message>

  <ctl:call-test name="wfs:wfs-1.1.0-LockFeature-tc1.1">
    <ctl:with-param name="wfs.LockFeature.post.url" select="$wfs.LockFeature.post.url"/>
    <ctl:with-param name="wfs.Transaction.post.url" select="$wfs.Transaction.post.url"/>
    <ctl:with-param name="wfs.GetFeature.get.url" select="$wfs.GetFeature.get.url"/>
    <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
    <ctl:with-param name="supports.atomic.trx" select="$supports.atomic.trx"/>
  </ctl:call-test>
  <ctl:call-test name="wfs:wfs-1.1.0-LockFeature-tc2.1">
    <ctl:with-param name="wfs.Transaction.post.url" select="$wfs.Transaction.post.url"/>
  </ctl:call-test>
  <ctl:call-test name="wfs:wfs-1.1.0-LockFeature-tc3.1">
    <ctl:with-param name="wfs.LockFeature.post.url" select="$wfs.LockFeature.post.url"/>
    <ctl:with-param name="wfs.Transaction.post.url" select="$wfs.Transaction.post.url"/>
    <ctl:with-param name="wfs.GetFeature.get.url" select="$wfs.GetFeature.get.url"/>
    <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
    <ctl:with-param name="supports.atomic.trx" select="$supports.atomic.trx"/>
  </ctl:call-test>

      </ctl:code>
    </ctl:test>

    <test name="wfs:wfs-1.1.0-LockFeature-tc1.1">
      <param name="wfs.LockFeature.post.url"/>
      <param name="wfs.Transaction.post.url"/>
      <param name="wfs.GetFeature.get.url"/>
      <param name="wfs.GetFeature.post.url"/>
      <ctl:param name="supports.atomic.trx"/>
      <assertion>
      The response to a LockFeature request that specifies lockAction="ALL" must
      include a response that identifies all locked features. If any candidate
      features cannot be locked, then no feature shall be locked and an exception
      report is returned.
      </assertion>
      <comment>Pass if all validation steps pass. The following requests are submitted to the IUT:
      0. Insert sf:PrimitiveGeoFeature instance
      1. LockFeature (all sf:PrimitiveGeoFeature instances)
      2. Delete without LockId - should fail
      3. Delete with LockId and release all locks - should succeed
      </comment>
      <link>wfs-1.1.0-LockFeature-atc1</link>
                <code>
            <xsl:variable name="response0">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.Transaction.post.url"/>
                                        </url>
                    <method>POST</method>
                                        <body>
                      <!-- test case id: wfs-1.1.0-LockFeature-tc1.1 (0) --><wfs:Transaction service="WFS" version="1.1.0">
	<wfs:Insert handle="insert-1">
      <sf:PrimitiveGeoFeature gml:id="cite.gmlsf0-f501">
        <gml:name codeSpace="http://cite.opengeospatial.org/gmlsf">cite.gmlsf0-f501</gml:name>
        <sf:curveProperty>
          <gml:LineString srsName="urn:ogc:def:crs:EPSG::4326">
            <gml:posList>48.608284 20.034142 50.286873 15.7836 50.849854 16.764992</gml:posList>
          </gml:LineString>
        </sf:curveProperty>
        <sf:intProperty>1025</sf:intProperty>
        <sf:measurand>63.94</sf:measurand>
        <sf:dateTimeProperty>2006-08-23T13:45:12Z</sf:dateTimeProperty>
        <sf:decimalProperty>92.51</sf:decimalProperty>
      </sf:PrimitiveGeoFeature>
    </wfs:Insert>
</wfs:Transaction>
                                        </body>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>
                        <xsl:variable name="response">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.LockFeature.post.url"/>
                                        </url>
                    <method>POST</method>
                                        <body>
                      <!-- test case id: wfs-1.1.0-LockFeature-tc1.1 (1) --><wfs:LockFeature service="WFS" version="1.1.0" handle="LockFeature-tc1" expiry="5" lockAction="ALL">
  
  <wfs:Lock handle="lock-1" typeName="sf:PrimitiveGeoFeature"/>
</wfs:LockFeature>
                                        </body>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

            <xsl:choose>
              <xsl:when test="not($response0/* or $response/*)">
                  <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                  <ctl:fail/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:variable name="LockId" select="$response//wfs:LockId"/>
                <xsl:variable name="totalLocked" select="count($response//wfs:FeaturesLocked/*)"/>
                <xsl:if test="$totalLocked lt 4">
                  <ctl:message>FAILURE: Expected 4 or more sf:PrimitiveGeoFeature instances to be locked (reported <xsl:value-of select="$totalLocked"/>)</ctl:message>
                  <ctl:fail/>
                </xsl:if>
                <xsl:variable name="fid">
                  <xsl:value-of select="$response//wfs:FeaturesLocked/ogc:FeatureId[1]/@fid"/>
                </xsl:variable>
                <!-- Submit delete request WITHOUT LockId -->
                <xsl:variable name="response2">
                                  <request>
                                        <url>
                                                <xsl:value-of select="$wfs.Transaction.post.url"/>
                                        </url>
                    <method>POST</method>
                                        <body>
                      <!-- test case id: wfs-1.1.0-LockFeature-tc1.1 (2) --><wfs:Transaction service="WFS" version="1.1.0">
    <wfs:Delete handle="del-1" typeName="sf:PrimitiveGeoFeature">
      <ogc:Filter>
        <ogc:GmlObjectId gml:id="{$fid}"/>
      </ogc:Filter>
    </wfs:Delete>
</wfs:Transaction>
                                        </body>
                    <p:XMLValidatingParser.GMLSF1/>
                                  </request>
                            </xsl:variable>
                            <xsl:choose>
                                        <xsl:when test="$supports.atomic.trx">
                                                <ctl:call-test name="ctl:SchematronValidatingParser">
                                                        <ctl:with-param name="doc" select="$response2"/>
                                                        <ctl:with-param name="schema">sch/ows/1.0.0/ExceptionReport.sch</ctl:with-param>
                                                        <ctl:with-param name="phase">MissingParameterValuePhase</ctl:with-param>
                                                </ctl:call-test>
                                        </xsl:when>
                                        <xsl:otherwise>
                                                <xsl:variable name="totalDeleted"><xsl:value-of select="$response2//wfs:totalDeleted"/></xsl:variable>
                                                <xsl:if test="$totalDeleted != 0">
                                                  <ctl:message>FAILURE: Expected totalDeleted = 0 (reported total is <xsl:value-of select="$totalDeleted"/>)</ctl:message>
                                                  <ctl:fail/>
                                                </xsl:if>
                                                <xsl:if test="$response2//wfs:TransactionResults/wfs:Action/@locator != 'del-1'">
                                                  <ctl:message>FAILURE: Expected wfs:Action/@locator = 'del-1'</ctl:message>
                                                  <ctl:fail/>
                                                </xsl:if>
                                        </xsl:otherwise>
                            </xsl:choose>
                <ctl:call-test name="wfs:GetFeatureById-KVP">
                  <ctl:with-param name="wfs.GetFeature.get.url" select="$wfs.GetFeature.get.url"/>
                  <ctl:with-param name="id" select="$fid"/>
                  <ctl:with-param name="empty.response" select="'false'"/>
                </ctl:call-test>
                <!-- Submit delete request WITH LockId and release ALL locks -->
                <xsl:variable name="response3">
                                  <request>
                                        <url>
                                                <xsl:value-of select="$wfs.Transaction.post.url"/>
                                        </url>
                    <method>POST</method>
                                        <body>
                       <!-- test case id: wfs-1.1.0-LockFeature-tc1.1 (3) --><wfs:Transaction service="WFS" version="1.1.0" releaseAction="ALL">
    <wfs:LockId><xsl:value-of select="$LockId"/></wfs:LockId>
    <wfs:Delete handle="upd-1" typeName="sf:PrimitiveGeoFeature">
        <ogc:Filter>
			<ogc:PropertyIsEqualTo>
				<ogc:PropertyName>gml:name</ogc:PropertyName>
				<ogc:Literal>cite.gmlsf0-f501</ogc:Literal>
			</ogc:PropertyIsEqualTo>
		</ogc:Filter>
    </wfs:Delete>
</wfs:Transaction>
                                        </body>
                    <p:XMLValidatingParser.GMLSF1/>
                                  </request>
                            </xsl:variable>
                <xsl:variable name="totalDeleted"><xsl:value-of select="$response3//wfs:totalDeleted"/></xsl:variable>
                <xsl:if test="$totalDeleted != 1">
                  <ctl:message>FAILURE: Expected totalDeleted = 1 (reported total is <xsl:value-of select="$totalDeleted"/>)</ctl:message>
                  <ctl:fail/>
                </xsl:if>
                <ctl:call-test name="wfs:GetFeatureByName">
                  <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                  <ctl:with-param name="type" select="'sf:PrimitiveGeoFeature'"/>
                  <ctl:with-param name="name.value" select="'cite.gmlsf0-f501'"/>
                  <ctl:with-param name="empty.response" select="'true'"/>
                </ctl:call-test>
              </xsl:otherwise>
            </xsl:choose>
                </code>
        </test>

    <test name="wfs:wfs-1.1.0-LockFeature-tc2.1">
      <param name="wfs.Transaction.post.url"/>
      <assertion>
      The response to a Transaction request that specifies an invalid LockId
      value must include an exception report.
      </assertion>
      <comment>Pass if all of the following conditions are true: (1) the response
      is a valid ows:ExceptionReport; (2) the reported exceptionCode is "InvalidParameterValuePhase".
      </comment>
      <link>wfs-1.1.0-LockFeature-atc2</link>
                <code>
                        <xsl:variable name="response">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.Transaction.post.url"/>
                                        </url>
                    <method>POST</method>
                                        <body>
                       <!-- test case id: wfs-1.1.0-LockFeature-tc2.1 (1) --><wfs:Transaction service="WFS" version="1.1.0" releaseAction="ALL">
    <wfs:LockId>a986ef12-75b8-477a-841f-3c496525ddf5</wfs:LockId>
    <wfs:Delete handle="del-1" typeName="sf:PrimitiveGeoFeature">
      <ogc:Filter>
        <ogc:BBOX>
          <ogc:PropertyName>sf:pointProperty</ogc:PropertyName>
          <gml:Envelope srsName="urn:ogc:def:crs:EPSG::4326">
            <gml:lowerCorner>39.2 -1.0</gml:lowerCorner>
            <gml:upperCorner>40.0 4.0</gml:upperCorner>
          </gml:Envelope>
        </ogc:BBOX>
      </ogc:Filter>
    </wfs:Delete>
</wfs:Transaction>
                                        </body>
                                        <p:XMLValidatingParser.OWS/>
                                </request>
                        </xsl:variable>

            <xsl:choose>
              <xsl:when test="not($response/*)">
                  <ctl:message>FAILURE: Missing response entity.</ctl:message>
                  <ctl:fail/>
              </xsl:when>
              <xsl:otherwise>
                <ctl:call-test name="ctl:SchematronValidatingParser">
                            <ctl:with-param name="doc" select="$response"/>
                            <ctl:with-param name="schema">sch/ows/1.0.0/ExceptionReport.sch</ctl:with-param>
                            <ctl:with-param name="phase">InvalidParameterValuePhase</ctl:with-param>
                    </ctl:call-test>
              </xsl:otherwise>
            </xsl:choose>
                </code>
        </test>

    <test name="wfs:wfs-1.1.0-LockFeature-tc3.1">
      <param name="wfs.LockFeature.post.url"/>
      <param name="wfs.Transaction.post.url"/>
      <param name="wfs.GetFeature.get.url"/>
      <param name="wfs.GetFeature.post.url"/>
      <ctl:param name="supports.atomic.trx"/>
      <assertion>
      In response to a Transaction request that specifies releaseAction="SOME",
      only modified features in the lock set shall be unlocked.
      </assertion>
      <comment>Pass if all validation steps pass. The following requests are submitted to the IUT:
      0. Insert sf:EntitéGénérique feature instance
      1. LockFeature (sf:EntitéGénérique instances by BBOX)
      2. Update with LockId and releaseAction="SOME" - should succeed and unlock modified feature
      3. Delete unlocked feature without LockId - should succeed
      4. Delete locked feature without LockId - should fail</comment>
      <link>wfs-1.1.0-LockFeature-atc3</link>
                <code>
            <xsl:variable name="response0">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.Transaction.post.url"/>
                                        </url>
                    <method>POST</method>
                                        <body>
                      <!-- test case id: wfs-1.1.0-LockFeature-tc3.1 (0) --><wfs:Transaction service="WFS" version="1.1.0">
	<wfs:Insert handle="insert-1">
      <sf:EntitéGénérique gml:id="cite.gmlsf0-f502">
        <gml:name codeSpace="http://cite.opengeospatial.org/gmlsf">cite.gmlsf0-f502</gml:name>
        <sf:attribut.Géométrie>
          <gml:Point srsName="urn:ogc:def:crs:EPSG::4326">
            <gml:pos>68.723555 -5.635101</gml:pos>
          </gml:Point>
        </sf:attribut.Géométrie>
        <sf:boolProperty>false</sf:boolProperty>
        <sf:str4Property>#!/_</sf:str4Property>
      </sf:EntitéGénérique>
    </wfs:Insert>
</wfs:Transaction>
                                        </body>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>
                        <xsl:variable name="response">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.LockFeature.post.url"/>
                                        </url>
                    <method>POST</method>
                                        <body>
                       <!-- test case id: wfs-1.1.0-LockFeature-tc3.1 (1) --><wfs:LockFeature service="WFS" version="1.1.0" handle="LockFeature-tc3" expiry="5" lockAction="ALL">

  <wfs:Lock handle="lock-1" typeName="sf:EntitéGénérique">
    <ogc:Filter>
      <ogc:BBOX>
        <ogc:PropertyName>sf:attribut.Géométrie</ogc:PropertyName>
        <gml:Envelope srsName="urn:ogc:def:crs:EPSG::4326">
          <gml:lowerCorner>34.5 -10.0</gml:lowerCorner>
          <gml:upperCorner>72.0 32.0</gml:upperCorner>
        </gml:Envelope>
      </ogc:BBOX>
    </ogc:Filter>
  </wfs:Lock>
</wfs:LockFeature>
                                        </body>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

            <xsl:choose>
              <xsl:when test="not($response0/* or $response/*)">
                  <ctl:message>FAILURE: Missing response entity.</ctl:message>
                  <ctl:fail/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:variable name="LockId" select="$response//wfs:LockId"/>
                <xsl:variable name="totalLocked" select="count($response//wfs:FeaturesLocked/*)"/>
                <xsl:if test="$totalLocked lt 2">
                  <ctl:message>FAILURE: Expected 2 or more sf:EntitéGénérique instances to be locked (reported <xsl:value-of select="$totalLocked"/>)</ctl:message>
                  <ctl:fail/>
                </xsl:if>
                <!-- Submit update request with releaseAction = SOME -->
                <xsl:variable name="response2">
                                  <request>
                                        <url>
                                                <xsl:value-of select="$wfs.Transaction.post.url"/>
                                        </url>
                    <method>POST</method>
                                        <body>
                       <!-- test case id: wfs-1.1.0-LockFeature-tc3.1 (2) --><wfs:Transaction service="WFS" version="1.1.0" releaseAction="SOME">
    <wfs:LockId><xsl:value-of select="$LockId"/></wfs:LockId>
    <wfs:Update handle="upd-1" typeName="sf:EntitéGénérique">
      <wfs:Property>
        <wfs:Name>sf:boolProperty</wfs:Name>
        <wfs:Value>true</wfs:Value>
      </wfs:Property>
      <ogc:Filter>
			<ogc:PropertyIsEqualTo>
				<ogc:PropertyName>gml:name</ogc:PropertyName>
				<ogc:Literal>cite.gmlsf0-f502</ogc:Literal>
			</ogc:PropertyIsEqualTo>
		</ogc:Filter>
    </wfs:Update>
</wfs:Transaction>
                                        </body>
                    <p:XMLValidatingParser.GMLSF1/>
                                  </request>
                            </xsl:variable>
                <xsl:variable name="totalUpdated"><xsl:value-of select="$response2//wfs:totalUpdated"/></xsl:variable>
                <xsl:if test="$totalUpdated != 1">
                  <ctl:message>FAILURE: Expected totalUpdated = 1 (reported total is <xsl:value-of select="$totalUpdated"/>)</ctl:message>
                  <ctl:fail/>
                </xsl:if>
                <!-- Previously updated feature should now be UNLOCKED -->
                <xsl:variable name="response3">
                                  <request>
                                        <url>
                                                <xsl:value-of select="$wfs.Transaction.post.url"/>
                                        </url>
                    <method>POST</method>
                                        <body>
                       <!-- test case id: wfs-1.1.0-LockFeature-tc3.1 (3) --><wfs:Transaction service="WFS" version="1.1.0">
    <wfs:Delete handle="del-1" typeName="sf:EntitéGénérique">
      <ogc:Filter>
			<ogc:PropertyIsEqualTo>
				<ogc:PropertyName>gml:name</ogc:PropertyName>
				<ogc:Literal>cite.gmlsf0-f502</ogc:Literal>
			</ogc:PropertyIsEqualTo>
	  </ogc:Filter>
    </wfs:Delete>
</wfs:Transaction>
                                        </body>
                    <p:XMLValidatingParser.GMLSF1/>
                                  </request>
                            </xsl:variable>
                <xsl:variable name="totalDeleted"><xsl:value-of select="$response3//wfs:totalDeleted"/></xsl:variable>
                <xsl:if test="$totalDeleted != 1">
                  <ctl:message>FAILURE: Expected totalDeleted = 1 (feature with gml:name="cite.gmlsf0-f502" should be UNLOCKED)</ctl:message>
                  <ctl:fail/>
                </xsl:if>
                <ctl:call-test name="wfs:GetFeatureByName">
                  <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                  <ctl:with-param name="type" select="'sf:EntitéGénérique'"/>
                  <ctl:with-param name="name.value" select="'cite.gmlsf0-f502'"/>
                  <ctl:with-param name="empty.response" select="'true'"/>
                </ctl:call-test>
                <!-- Unmodified features should remain LOCKED -->
                <xsl:variable name="response4">
                                  <request>
                                        <url>
                                                <xsl:value-of select="$wfs.Transaction.post.url"/>
                                        </url>
                    <method>POST</method>
                                        <body>
                       <!-- test case id: wfs-1.1.0-LockFeature-tc3.1 (4) --><wfs:Transaction service="WFS" version="1.1.0">
    <wfs:Delete handle="del-1" typeName="sf:EntitéGénérique">
      <ogc:Filter>
        <ogc:BBOX>
          <ogc:PropertyName>sf:attribut.Géométrie</ogc:PropertyName>
          <gml:Envelope srsName="urn:ogc:def:crs:EPSG::4326">
            <gml:lowerCorner>34.5 -10.0</gml:lowerCorner>
            <gml:upperCorner>72.0 32.0</gml:upperCorner>
          </gml:Envelope>
        </ogc:BBOX>
      </ogc:Filter>
    </wfs:Delete>
</wfs:Transaction>
                                        </body>
                    <p:XMLValidatingParser.GMLSF1/>
                                  </request>
                            </xsl:variable>
                            <xsl:choose>
                                        <xsl:when test="$supports.atomic.trx">
                                                <ctl:call-test name="ctl:SchematronValidatingParser">
                                                        <ctl:with-param name="doc" select="$response4"/>
                                                        <ctl:with-param name="schema">sch/ows/1.0.0/ExceptionReport.sch</ctl:with-param>
                                                        <ctl:with-param name="phase">DefaultPhase</ctl:with-param>
                                                </ctl:call-test>
                                        </xsl:when>
                                        <xsl:otherwise>
                                                <xsl:variable name="totalDeleted"><xsl:value-of select="$response4//wfs:totalDeleted"/></xsl:variable>
                                                <xsl:if test="$totalDeleted != 0">
                                                  <ctl:message>FAILURE: Expected totalDeleted = 0 (reported total is <xsl:value-of select="$totalDeleted"/>)</ctl:message>
                                                  <ctl:fail/>
                                                </xsl:if>
                                                <xsl:if test="$response4//wfs:TransactionResults/wfs:Action/@locator != 'del-1'">
                                                  <ctl:message>FAILURE: Expected wfs:Action/@locator = 'del-1'</ctl:message>
                                                  <ctl:fail/>
                                                </xsl:if>
                                        </xsl:otherwise>
                            </xsl:choose>
              </xsl:otherwise>
            </xsl:choose>
                </code>
        </test>

                <ctl:test name="wfs:LockFeature-expiry">
                <ctl:param name="CAPABILITIES"/>
                <ctl:assertion>After a LockFeature request with an expiry attribute is submitted and the time expires, the lock is released.</ctl:assertion>
                <ctl:comment/>
        <ctl:link>OGC 04-094, 11.2.1, p.56</ctl:link>
        <ctl:link>OGC 04-094, 11.2.1, p.56</ctl:link>
                <ctl:code>
                        <xsl:choose>
                    <xsl:when test="not($CAPABILITIES/wfs:FeatureTypeList/wfs:FeatureType[wfs:Name='sf:PrimitiveGeoFeature'])">
                                        <ctl:message>sf:PrimitiveGeoFeature does not exist</ctl:message>
                    </xsl:when>
                    <xsl:otherwise>
                                        <xsl:variable name="LCK1-RESPONSE">
                                                <ctl:request>
                                                        <ctl:url>
                                                                <xsl:value-of select="$CAPABILITIES/ows:OperationsMetadata/ows:Operation[@name='LockFeature']/ows:DCP/ows:HTTP/ows:Post/@xlink:href"/>
                                                        </ctl:url>
                                    <method>POST</method>
                                                        <body>
                                                        <wfs:LockFeature service="WFS" version="1.1.0" expiry="1" lockAction="ALL">
                                                          <wfs:Lock typeName="sf:PrimitiveGeoFeature">
                                                                  <ogc:Filter>
                                                                        <ogc:GmlObjectId gml:id="PrimitiveGeoFeature.8"/>
                                                                  </ogc:Filter>
                                                          </wfs:Lock>
                                                        </wfs:LockFeature>
                                                        </body>
                                            <parsers:HTTPParser>
                                               <parsers:parse>
                                                  <parsers:HTTPParser/>
                                               </parsers:parse>
                                            </parsers:HTTPParser>
                                                </ctl:request>
                                        </xsl:variable>
                                        <xsl:choose>
                                                <xsl:when test="$LCK1-RESPONSE//wfs:FeaturesLocked/ogc:FeatureId[1]/@fid='PrimitiveGeoFeature.8'">
                                                        <ctl:call-function name="wfs:sleep">
                                                          <ctl:with-param name="milliseconds">100000</ctl:with-param>
                                                        </ctl:call-function>
                                                        <xsl:variable name="LCK2-RESPONSE">
                                                                <ctl:request>
                                                                        <ctl:url>
                                                                                <xsl:value-of select="$CAPABILITIES/ows:OperationsMetadata/ows:Operation[@name='LockFeature']/ows:DCP/ows:HTTP/ows:Post/@xlink:href"/>
                                                                        </ctl:url>
                                                    <method>POST</method>
                                                                        <body>
                                                                        <wfs:LockFeature service="WFS" version="1.1.0" expiry="1" lockAction="SOME">
                                                                          <wfs:Lock typeName="sf:PrimitiveGeoFeature">
                                                                                  <ogc:Filter>
                                                                                        <ogc:GmlObjectId gml:id="PrimitiveGeoFeature.8"/>
                                                                                  </ogc:Filter>
                                                                          </wfs:Lock>
                                                                        </wfs:LockFeature>
                                                                        </body>
                                                            <parsers:HTTPParser>
                                                               <parsers:parse>
                                                                  <parsers:HTTPParser/>
                                                               </parsers:parse>
                                                            </parsers:HTTPParser>
                                                                </ctl:request>
                                                        </xsl:variable>
                                                        <xsl:if test="not($LCK2-RESPONSE//wfs:FeaturesLocked/ogc:FeatureId[1]/@fid='PrimitiveGeoFeature.8')">
                                                                <ctl:fail/>
                                                        </xsl:if>
                                                        <!-- Release Lock -->
                                                        <xsl:variable name="LOCKID">
                                                                <xsl:value-of select="$LCK2-RESPONSE//wfs:LockFeatureResponse/wfs:LockId"/>
                                                        </xsl:variable>
                                                        <xsl:variable name="TXN-RESPONSE">
                                                                <ctl:request>
                                                                        <ctl:url>
                                                                                <xsl:value-of select="$CAPABILITIES/ows:OperationsMetadata/ows:Operation[@name='Transaction']/ows:DCP/ows:HTTP/ows:Post/@xlink:href"/>
                                                                        </ctl:url>
                                                    <method>POST</method>
                                                                        <body>
                                                                        <wfs:Transaction service="WFS" version="1.1.0" releaseAction="ALL">
                                                                                <wfs:LockID><xsl:value-of select="$LOCKID"/></wfs:LockID>
                                                                        </wfs:Transaction>
                                                                        </body>
                                                            <parsers:HTTPParser>
                                                               <parsers:parse>
                                                                  <parsers:HTTPParser/>
                                                               </parsers:parse>
                                                            </parsers:HTTPParser>
                                                                </ctl:request>
                                                        </xsl:variable>
                                                </xsl:when>
                                                <xsl:otherwise>
                                                        <ctl:message>Unable to acquire lock on PrimitiveGeoFeature.8</ctl:message>
                                                </xsl:otherwise>
                                </xsl:choose>
                                </xsl:otherwise>
                        </xsl:choose>

                </ctl:code>
        </ctl:test>

        <ctl:test name="wfs:LockFeature-some-features">
                <ctl:param name="CAPABILITIES"/>
                <ctl:assertion>In response to a LockFeature request that includes some locked and some unlocked feature identifiers and lockAction=SOME, the response is a 'WFS_LockFeatureResponse' element that lists the previously unlocked feature ids in the 'FeaturesLocked' element and the previously locked feature ids in the 'FeaturesNotLocked' element.  The previously unlocked features are locked.</ctl:assertion>
                <ctl:comment>"If the lock action is set to SOME, then a web feature service shall attempt to lock as many of the requested feature instances as it can."
                                        "If the lock action is specified as SOME, then the 'WFS_LockFeatureResponse' element must contain the 'FeaturesLocked' and 'FeaturesNotLocked' elements."
                                        "The 'FeaturesLocked' element shall list the feature identifiers of all the feature instances that were locked by the LockFeature request."
                                        "The 'FeaturesNotLocked' element shall contain a list of feature identifiers for the feature instances that could not be locked by the web feature service (possibly because they were already locked by someone else)."</ctl:comment>
        <ctl:link>OGC 04-094, 11.2.1, p.57</ctl:link>
        <ctl:link>OGC 04-094, 11.3, p.59</ctl:link>
        <ctl:link>OGC 04-094, 11.3, p.59</ctl:link>
        <ctl:link>OGC 04-094, 11.3, p.59</ctl:link>
                <ctl:code>
                        <xsl:choose>
                    <xsl:when test="not($CAPABILITIES/wfs:FeatureTypeList/wfs:FeatureType[wfs:Name='sf:PrimitiveGeoFeature'])">
                                        <ctl:message>sf:PrimitiveGeoFeature does not exist</ctl:message>
                    </xsl:when>
                    <xsl:otherwise>
                                        <xsl:variable name="LCK1-RESPONSE">
                                                <ctl:request>
                                                        <ctl:url>
                                                                <xsl:value-of select="$CAPABILITIES/ows:OperationsMetadata/ows:Operation[@name='LockFeature']/ows:DCP/ows:HTTP/ows:Post/@xlink:href"/>
                                                        </ctl:url>
                                    <method>POST</method>
                                                        <body>
                                                        <wfs:LockFeature service="WFS" version="1.1.0" expiry="1" lockAction="ALL">
                                                          <wfs:Lock typeName="sf:PrimitiveGeoFeature">
                                                                  <ogc:Filter>
                                                                        <ogc:GmlObjectId gml:id="PrimitiveGeoFeature.3"/>
                                                                  </ogc:Filter>
                                                          </wfs:Lock>
                                                        </wfs:LockFeature>
                                                        </body>
                                            <parsers:HTTPParser>
                                               <parsers:parse>
                                                  <parsers:HTTPParser/>
                                               </parsers:parse>
                                            </parsers:HTTPParser>
                                                </ctl:request>
                                        </xsl:variable>

                                        <xsl:choose>
                                                <xsl:when test="$LCK1-RESPONSE//wfs:FeaturesLocked/ogc:FeatureId[1]/@fid='PrimitiveGeoFeature.3'">
                                                        <xsl:variable name="LCK2-RESPONSE">
                                                                <ctl:request>
                                                                        <ctl:url>
                                                                                <xsl:value-of select="$CAPABILITIES/ows:OperationsMetadata/ows:Operation[@name='LockFeature']/ows:DCP/ows:HTTP/ows:Post/@xlink:href"/>
                                                                        </ctl:url>
                                                    <method>POST</method>
                                                                        <body>
                                                                        <wfs:LockFeature service="WFS" version="1.1.0" expiry="1" lockAction="SOME">
                                                                          <wfs:Lock typeName="sf:PrimitiveGeoFeature">
                                                                                  <ogc:Filter>
                                                                                        <ogc:GmlObjectId gml:id="PrimitiveGeoFeature.1"/>
                                                                                        <ogc:GmlObjectId gml:id="PrimitiveGeoFeature.2"/>
                                                                                        <ogc:GmlObjectId gml:id="PrimitiveGeoFeature.3"/>
                                                                                  </ogc:Filter>
                                                                          </wfs:Lock>
                                                                        </wfs:LockFeature>
                                                                        </body>
                                                            <parsers:HTTPParser>
                                                               <parsers:parse>
                                                                  <parsers:HTTPParser/>
                                                               </parsers:parse>
                                                            </parsers:HTTPParser>
                                                                </ctl:request>
                                                        </xsl:variable>

                                                        <xsl:if test="not($LCK2-RESPONSE//wfs:FeaturesLocked/ogc:FeatureId/@fid='PrimitiveGeoFeature.1' and $LCK2-RESPONSE//wfs:FeaturesLocked/ogc:FeatureId/@fid='PrimitiveGeoFeature.2' and $LCK2-RESPONSE//wfs:FeaturesNotLocked/ogc:FeatureId/@fid='PrimitiveGeoFeature.3')">
                                                                <ctl:fail/>
                                                        </xsl:if>
                                                        <!-- Release lock -->
                                                        <xsl:variable name="LOCKID">
                                                                <xsl:value-of select="$LCK2-RESPONSE//wfs:LockFeatureResponse/wfs:LockId"/>
                                                        </xsl:variable>
                                                        <xsl:variable name="TXN-RESPONSE">
                                                                <ctl:request>
                                                                        <ctl:url>
                                                                                <xsl:value-of select="$CAPABILITIES/ows:OperationsMetadata/ows:Operation[@name='Transaction']/ows:DCP/ows:HTTP/ows:Post/@xlink:href"/>
                                                                        </ctl:url>
                                                    <method>POST</method>
                                                                        <body>
                                                                        <wfs:Transaction service="WFS" version="1.1.0" releaseAction="ALL">
                                                                                <wfs:LockID><xsl:value-of select="$LOCKID"/></wfs:LockID>
                                                                        </wfs:Transaction>
                                                                        </body>
                                                            <parsers:HTTPParser>
                                                               <parsers:parse>
                                                                  <parsers:HTTPParser/>
                                                               </parsers:parse>
                                                            </parsers:HTTPParser>
                                                                </ctl:request>
                                                        </xsl:variable>
                                                </xsl:when>
                                                <xsl:otherwise>
                                                        <ctl:message>Unable to acquire lock on PrimitiveGeoFeature.3</ctl:message>
                                                </xsl:otherwise>
                                </xsl:choose>
                                </xsl:otherwise>
                        </xsl:choose>
                </ctl:code>
        </ctl:test>


        <ctl:test name="wfs:LockFeature-all-features">
                <ctl:param name="CAPABILITIES"/>
                <ctl:assertion>The response to a LockFeature request includes the identifiers of features that were locked.</ctl:assertion>
                <ctl:comment/>
        <ctl:link>OGC 04-094, 11.3, p.59</ctl:link>
                <ctl:code>
                        <xsl:choose>
                    <xsl:when test="not($CAPABILITIES/wfs:FeatureTypeList/wfs:FeatureType[wfs:Name='sf:AggregateGeoFeature'])">
                                        <ctl:message>sf:AggregateGeoFeature does not exist</ctl:message>
                    </xsl:when>
                    <xsl:otherwise>
                                        <xsl:variable name="LCK-RESPONSE">
                                                <ctl:request>
                                                        <ctl:url>
                                                                <xsl:value-of select="$CAPABILITIES/ows:OperationsMetadata/ows:Operation[@name='LockFeature']/ows:DCP/ows:HTTP/ows:Post/@xlink:href"/>
                                                        </ctl:url>
                                    <method>POST</method>
                                                        <body>
                                                        <wfs:LockFeature service="WFS" version="1.1.0" expiry="1" lockAction="ALL">
                                                          <wfs:Lock typeName="sf:AggregateGeoFeature">
                                                          </wfs:Lock>
                                                        </wfs:LockFeature>
                                                        </body>
                                            <parsers:HTTPParser>
                                               <parsers:parse>
                                                  <parsers:HTTPParser/>
                                               </parsers:parse>
                                            </parsers:HTTPParser>
                                                </ctl:request>
                                        </xsl:variable>

                                        <xsl:if test="not($LCK-RESPONSE//wfs:FeaturesLocked/*)">
                                                <ctl:fail/>
                                        </xsl:if>
                                        <!-- Release lock -->
                                        <xsl:variable name="LOCKID">
                                                <xsl:value-of select="$LCK-RESPONSE//wfs:LockFeatureResponse/wfs:LockId"/>
                                        </xsl:variable>
                                        <xsl:variable name="TXN-RESPONSE">
                                                <ctl:request>
                                                        <ctl:url>
                                                                <xsl:value-of select="$CAPABILITIES/ows:OperationsMetadata/ows:Operation[@name='Transaction']/ows:DCP/ows:HTTP/ows:Post/@xlink:href"/>
                                                        </ctl:url>
                                    <method>POST</method>
                                                        <body>
                                                        <wfs:Transaction service="WFS" version="1.1.0" releaseAction="ALL">
                                                                <wfs:LockID><xsl:value-of select="$LOCKID"/></wfs:LockID>
                                                        </wfs:Transaction>
                                                        </body>
                                            <parsers:HTTPParser>
                                               <parsers:parse>
                                                  <parsers:HTTPParser/>
                                               </parsers:parse>
                                            </parsers:HTTPParser>
                                                </ctl:request>
                                        </xsl:variable>
                                </xsl:otherwise>
                </xsl:choose>
                </ctl:code>
        </ctl:test>


        <ctl:test name="wfs:LockFeature-identifiers-none">
                <ctl:param name="CAPABILITIES"/>
                <ctl:assertion>In response to a LockFeature request that contains a filter that doesn't match any features, the response is a 'WFS_LockFeatureResponse' document that contains a value for the lockId attribute but contains neither a 'FeaturesLocked' element nor a 'FeatureNotLocked' element.</ctl:assertion>
                <ctl:comment/>
        <ctl:link>OGC 04-094, 11.3, p.59</ctl:link>
                <ctl:code>
                        <xsl:variable name="RESPONSE">
                                <ctl:request>
                                        <ctl:url>
                                                <xsl:value-of select="$CAPABILITIES/ows:OperationsMetadata/ows:Operation[@name='LockFeature']/ows:DCP/ows:HTTP/ows:Post/@xlink:href"/>
                                        </ctl:url>
                    <method>POST</method>
                                        <body>
                                        <wfs:LockFeature service="WFS" version="1.1.0" expiry="1" lockAction="ALL">
                                          <wfs:Lock typeName="sf:PrimitiveGeoFeature">
                                                  <ogc:Filter>
                                                        <ogc:GmlObjectId gml:id="PrimitiveGeoFeature.00"/>
                                                  </ogc:Filter>
                                          </wfs:Lock>
                                        </wfs:LockFeature>
                                        </body>
                            <parsers:HTTPParser>
                               <parsers:parse>
                                  <parsers:HTTPParser/>
                               </parsers:parse>
                            </parsers:HTTPParser>
                                </ctl:request>
                        </xsl:variable>
                        <xsl:if test="$RESPONSE//wfs:LockFeatureResponse/wfs:FeaturesLocked">
                                <ctl:fail/>
                        </xsl:if>
                </ctl:code>
        </ctl:test>

        <ctl:test name="wfs:LockFeature-invalid-request">
                <ctl:param name="CAPABILITIES"/>
                <ctl:assertion>An invalid LockFeature request results in an exception.</ctl:assertion>
                <ctl:comment/>
        <ctl:link>OGC 04-094, 11.4, p.60</ctl:link>
                <ctl:code>
                        <xsl:variable name="RESPONSE">
                                <ctl:request>
                                        <ctl:url>
                                                <xsl:value-of select="$CAPABILITIES/ows:OperationsMetadata/ows:Operation[@name='LockFeature']/ows:DCP/ows:HTTP/ows:Post/@xlink:href"/>
                                        </ctl:url>
                                        <ctl:method>get</ctl:method>
                                        <ctl:param name="request">LockFeature</ctl:param>
                                        <ctl:param name="service">WFS</ctl:param>
                                        <ctl:param name="version">1.1.0</ctl:param>
                                        <ctl:param name="Lock">Invalid</ctl:param>
                                        <param name="typename">
                                                <xsl:value-of select="wfs:encode($CAPABILITIES/wfs:FeatureTypeList/wfs:FeatureType[1]/wfs:Name, 'UTF-8')"/>
                                        </param>
                            <parsers:HTTPParser>
                               <parsers:parse>
                                  <parsers:HTTPParser/>
                               </parsers:parse>
                            </parsers:HTTPParser>
                                </ctl:request>
                        </xsl:variable>
                        <xsl:if test="not($RESPONSE//ows:Exception/*)">
                                <ctl:fail/>
                        </xsl:if>
                </ctl:code>
        </ctl:test>

</ctl:package>
  <ctl:package xmlns="http://www.occamlab.com/ctl" xmlns:ogc="http://www.opengis.net/ogc">

   <ctl:test name="wfs:run-GetFeatureWithLock-POST">
    <ctl:param name="wfs.GetCapabilities.document"/>
    <ctl:param name="supports.atomic.trx"/>
    <ctl:assertion>Run test group for GetFeatureWithLock requests using the POST method</ctl:assertion>
    <ctl:code>
    
		<ctl:call-test name="wfs:GetFeatureWithLock-Xlink">
			<ctl:with-param name="CAPABILITIES" select="$wfs.GetCapabilities.document"/>
		</ctl:call-test>
    
      <xsl:variable name="wfs.GetFeatureWithLock.post.url">
        <xsl:value-of select="$wfs.GetCapabilities.document//ows:OperationsMetadata/ows:Operation[@name='GetFeatureWithLock']/ows:DCP/ows:HTTP/ows:Post/@xlink:href"/>
	  </xsl:variable>
      <xsl:variable name="wfs.Transaction.post.url">
        <xsl:value-of select="$wfs.GetCapabilities.document//ows:OperationsMetadata/ows:Operation[@name='Transaction']/ows:DCP/ows:HTTP/ows:Post/@xlink:href"/>
	  </xsl:variable>
      <xsl:variable name="wfs.GetFeature.get.url">
        <xsl:value-of select="$wfs.GetCapabilities.document//ows:OperationsMetadata/ows:Operation[@name='GetFeature']/ows:DCP/ows:HTTP/ows:Get/@xlink:href"/>
	  </xsl:variable>
      <xsl:variable name="wfs.GetFeature.post.url">
        <xsl:value-of select="$wfs.GetCapabilities.document//ows:OperationsMetadata/ows:Operation[@name='GetFeature']/ows:DCP/ows:HTTP/ows:Post/@xlink:href"/>
	  </xsl:variable>
      <ctl:message>Target endpoint is <xsl:value-of select="$wfs.GetFeatureWithLock.post.url"/></ctl:message>

  <ctl:call-test name="wfs:wfs-1.1.0-GetFeatureWithLock-tc1.1">
    <ctl:with-param name="wfs.GetFeatureWithLock.post.url" select="$wfs.GetFeatureWithLock.post.url"/>
    <ctl:with-param name="wfs.Transaction.post.url" select="$wfs.Transaction.post.url"/>
    <ctl:with-param name="wfs.GetFeature.get.url" select="$wfs.GetFeature.get.url"/>
    <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
    <ctl:with-param name="supports.atomic.trx" select="$supports.atomic.trx"/>
  </ctl:call-test>
  <ctl:call-test name="wfs:wfs-1.1.0-GetFeatureWithLock-tc2.1">
    <ctl:with-param name="wfs.GetFeatureWithLock.post.url" select="$wfs.GetFeatureWithLock.post.url"/>
  </ctl:call-test>

      </ctl:code>
    </ctl:test>

    <test name="wfs:wfs-1.1.0-GetFeatureWithLock-tc1.1">
      <param name="wfs.GetFeatureWithLock.post.url"/>
      <param name="wfs.Transaction.post.url"/>
      <param name="wfs.GetFeature.get.url"/>
      <param name="wfs.GetFeature.post.url"/>
      <ctl:param name="supports.atomic.trx"/>
      <assertion>
      The response to a LockFeature request that specifies lockAction="ALL" must
      include a response that identifies all locked features. If any candidate
      features cannot be locked, then no feature shall be locked and an exception
      report is returned.
      </assertion>
      <comment>Pass if all validation steps pass. The following requests are submitted to the IUT:
      0. Insert sf:PrimitiveGeoFeature instance
      1. GetFeatureWithLock (all sf:PrimitiveGeoFeature instances)
      2. Delete without LockId - should fail
      3. Delete with LockId and release all locks - should succeed
      </comment>
      <link>wfs-1.1.0-GetFeatureWithLock-atc1</link>
		<code>
             <xsl:variable name="response0">
				<request>
					<url>
						<xsl:value-of select="$wfs.Transaction.post.url"/>
					</url>
                    <method>POST</method>
					<body>
                      <!-- test case id: wfs-1.1.0-GetFeatureWithLock-tc1.1 (0) --><wfs:Transaction service="WFS" version="1.1.0">
	<wfs:Insert handle="insert-1">
      <sf:PrimitiveGeoFeature gml:id="cite.gmlsf0-f503">
        <gml:name codeSpace="http://cite.opengeospatial.org/gmlsf">cite.gmlsf0-f503</gml:name>
        <sf:curveProperty>
          <gml:LineString srsName="urn:ogc:def:crs:EPSG::4326">
            <gml:posList>45.608284 17.034142 47.286873 12.7836 47.849854 13.764992</gml:posList>
          </gml:LineString>
        </sf:curveProperty>
        <sf:intProperty>-72</sf:intProperty>
        <sf:measurand>76.80</sf:measurand>
        <sf:dateTimeProperty>2006-10-23T11:55:12Z</sf:dateTimeProperty>
        <sf:decimalProperty>12.10</sf:decimalProperty>
      </sf:PrimitiveGeoFeature>
    </wfs:Insert>
</wfs:Transaction>
					</body>
					<p:XMLValidatingParser.GMLSF1/>
				</request>
			</xsl:variable>
			<xsl:variable name="response">
				<request>
					<url>
						<xsl:value-of select="$wfs.GetFeatureWithLock.post.url"/>
					</url>
                    <method>POST</method>
					<body>
                      <!-- test case id: wfs-1.1.0-GetFeatureWithLock-tc1.1 (1) --><wfs:GetFeatureWithLock service="WFS" version="1.1.0" handle="GetFeatureWithLock-tc1" expiry="5" resultType="results">
  <wfs:Query handle="qry-1" typeName="sf:PrimitiveGeoFeature"/>
</wfs:GetFeatureWithLock>
					</body>
					<p:XMLValidatingParser.GMLSF1/>
				</request>
			</xsl:variable>

            <xsl:choose>
              <xsl:when test="not($response0/* or $response/*)">
                  <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                  <ctl:fail/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:variable name="LockId">
                  <xsl:value-of select="$response//wfs:FeatureCollection/@lockId"/>
                </xsl:variable>
                <xsl:variable name="totalLocked" select="count($response//gml:featureMember) + count($response//gml:featureMembers/*)"/>
                <xsl:if test="$totalLocked lt 5">
                  <ctl:message>FAILURE: Expected 5 or more sf:PrimitiveGeoFeature instances to be locked (reported <xsl:value-of select="$totalLocked"/>)</ctl:message>
                  <ctl:fail/>
                </xsl:if>
                <!-- Submit delete request WITHOUT LockId -->
                <xsl:variable name="response2">
				  <request>
					<url>
						<xsl:value-of select="$wfs.Transaction.post.url"/>
					</url>
                    <method>POST</method>
					<body>
                       <!-- test case id: wfs-1.1.0-GetFeatureWithLock-tc1.1 (2) --><wfs:Transaction service="WFS" version="1.1.0">
    <wfs:Delete handle="del-1" typeName="sf:PrimitiveGeoFeature">
      <ogc:Filter>
			<ogc:PropertyIsEqualTo>
				<ogc:PropertyName>gml:name</ogc:PropertyName>
				<ogc:Literal>cite.gmlsf0-f503</ogc:Literal>
			</ogc:PropertyIsEqualTo>
	  </ogc:Filter>
    </wfs:Delete>
</wfs:Transaction>
					</body>
                    <p:XMLValidatingParser.GMLSF1/>
				  </request>
			    </xsl:variable>
			    <xsl:choose>
					<xsl:when test="$supports.atomic.trx">
						<ctl:call-test name="ctl:SchematronValidatingParser">
							<ctl:with-param name="doc" select="$response2"/>
							<ctl:with-param name="schema">sch/ows/1.0.0/ExceptionReport.sch</ctl:with-param>
							<ctl:with-param name="phase">MissingParameterValuePhase</ctl:with-param>
						</ctl:call-test>
					</xsl:when>
					<xsl:otherwise>
						<xsl:variable name="totalDeleted"><xsl:value-of select="$response2//wfs:totalDeleted"/></xsl:variable>
						<xsl:if test="$totalDeleted != 0">
						  <ctl:message>FAILURE: Expected totalDeleted = 0 (reported total is <xsl:value-of select="$totalDeleted"/>)</ctl:message>
						  <ctl:fail/>
						</xsl:if>
						<xsl:if test="$response2//wfs:TransactionResults/wfs:Action/@locator != 'del-1'">
						  <ctl:message>FAILURE: Expected wfs:Action/@locator = 'del-1'</ctl:message>
						  <ctl:fail/>
						</xsl:if>											
					</xsl:otherwise>
			    </xsl:choose>                
                <ctl:call-test name="wfs:GetFeatureByName">
                  <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                  <ctl:with-param name="type" select="'sf:PrimitiveGeoFeature'"/>
                  <ctl:with-param name="name.value" select="'cite.gmlsf0-f503'"/>
                  <ctl:with-param name="empty.response" select="'false'"/>
                </ctl:call-test>
                <!-- Submit delete request WITH LockId and release ALL locks -->
                <xsl:variable name="response3">
				  <request>
					<url>
						<xsl:value-of select="$wfs.Transaction.post.url"/>
					</url>
                    <method>POST</method>
					<body>
                       <!-- test case id: wfs-1.1.0-GetFeatureWithLock-tc1.1 (3) --><wfs:Transaction service="WFS" version="1.1.0" releaseAction="ALL">
    <wfs:LockId><xsl:value-of select="$LockId"/></wfs:LockId>
    <wfs:Delete handle="del-1" typeName="sf:PrimitiveGeoFeature">
      <ogc:Filter>
			<ogc:PropertyIsEqualTo>
				<ogc:PropertyName>gml:name</ogc:PropertyName>
				<ogc:Literal>cite.gmlsf0-f503</ogc:Literal>
			</ogc:PropertyIsEqualTo>
	  </ogc:Filter>
    </wfs:Delete>
</wfs:Transaction>
					</body>
                    <p:XMLValidatingParser.GMLSF1/>
				  </request>
			    </xsl:variable>
                <xsl:variable name="totalDeleted"><xsl:value-of select="$response3//wfs:totalDeleted"/></xsl:variable>
                <xsl:if test="$totalDeleted != 1">
                  <ctl:message>FAILURE: Expected totalDeleted = 1 (reported total is <xsl:value-of select="$totalDeleted"/>)</ctl:message>
                  <ctl:fail/>
                </xsl:if>
                <ctl:call-test name="wfs:GetFeatureByName">
                  <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                  <ctl:with-param name="type" select="'sf:PrimitiveGeoFeature'"/>
                  <ctl:with-param name="name.value" select="'cite.gmlsf0-f503'"/>
                  <ctl:with-param name="empty.response" select="'true'"/>
                </ctl:call-test>
              </xsl:otherwise>
            </xsl:choose>
		</code>
	</test>

    <test name="wfs:wfs-1.1.0-GetFeatureWithLock-tc2.1">
      <param name="wfs.GetFeatureWithLock.post.url"/>
      <assertion>
      If locks on all matching features cannot be acquired, the response to a
      GetFeatureWithLock request must include an exception report.
      </assertion>
      <comment>Pass if all validation steps pass. The following requests are submitted to the IUT:
      1. LockFeature (all sf:AggregateGeoFeature instances) - should succeed
      2. LockFeature (sf:AggregateGeoFeature by BBOX) - should fail with exception report
      </comment>
      <link>OGC 04-094: 9.3 (p.39)</link>
		<code>
			<xsl:variable name="response">
				<request>
					<url>
						<xsl:value-of select="$wfs.GetFeatureWithLock.post.url"/>
					</url>
                    <method>POST</method>
					<body>
                      <!-- test case id: wfs-1.1.0-GetFeatureWithLock-tc2.1 (1) --><wfs:GetFeatureWithLock service="WFS" version="1.1.0" handle="GetFeatureWithLock-tc2.1.1" expiry="5" resultType="results">
  <wfs:Query handle="qry-1" typeName="sf:AggregateGeoFeature"/>
</wfs:GetFeatureWithLock>
					</body>
					<p:XMLValidatingParser.GMLSF1/>
				</request>
			</xsl:variable>
            <xsl:choose>
              <xsl:when test="not($response/*)">
                  <ctl:message>FAILURE: Missing response entity.</ctl:message>
                  <ctl:fail/>
              </xsl:when>
              <xsl:otherwise>
                <!-- Submit intersecting GetFeatureWithLock request  -->
                <xsl:variable name="response2">
				  <request>
					<url>
						<xsl:value-of select="$wfs.GetFeatureWithLock.post.url"/>
					</url>
                    <method>POST</method>
					<body>
                      <!-- test case id: wfs-1.1.0-GetFeatureWithLock-tc2.1 (2) --><wfs:GetFeatureWithLock service="WFS" version="1.1.0" handle="GetFeatureWithLock-tc2.1.2" expiry="5" resultType="results">

  <wfs:Query handle="qry-1" typeName="sf:AggregateGeoFeature">
    <ogc:Filter>
      <ogc:BBOX>
        <ogc:PropertyName>sf:multiPointProperty</ogc:PropertyName>
        <gml:Envelope srsName="urn:ogc:def:crs:EPSG::4326">
          <gml:lowerCorner>34.9 -10.6</gml:lowerCorner>
          <gml:upperCorner>72.0 32.2</gml:upperCorner>
        </gml:Envelope>
      </ogc:BBOX>
    </ogc:Filter>
  </wfs:Query>
</wfs:GetFeatureWithLock>
					</body>
                    <p:XMLValidatingParser.OWS/>
				  </request>
			    </xsl:variable>
                <ctl:call-test name="ctl:SchematronValidatingParser">
		            <ctl:with-param name="doc" select="$response2"/>
		            <ctl:with-param name="schema">sch/ows/1.0.0/ExceptionReport.sch</ctl:with-param>
		            <ctl:with-param name="phase">DefaultPhase</ctl:with-param>
	            </ctl:call-test>
              </xsl:otherwise>
            </xsl:choose>
		</code>
	</test>
	
	<ctl:test name="wfs:GetFeatureWithLock-Xlink">
		<ctl:param name="CAPABILITIES"/>
		<ctl:assertion>Execute WFS transaction with XlinkPropertyName and test for exception.</ctl:assertion>
		<ctl:comment/>				
      	<ctl:link>OGC 04-094, 9.2, p.38</ctl:link>
		<ctl:code>
			<xsl:choose>
	            <xsl:when test="not($CAPABILITIES/wfs:FeatureTypeList/wfs:FeatureType[wfs:Name='sf:LinkedFeature'])">
					<ctl:message>sf:LinkedFeature does not exist</ctl:message>		        	
	            </xsl:when>
	            <xsl:otherwise>
					<xsl:variable name="RESPONSE">
						<ctl:request>
							<ctl:url>
								<xsl:value-of select="$CAPABILITIES/ows:OperationsMetadata/ows:Operation[@name='GetFeatureWithLock']/ows:DCP/ows:HTTP/ows:Post/@xlink:href"/>			
							</ctl:url>
		                    <method>POST</method>
							<body>					
							<wfs:GetFeatureWithLock service="WFS" version="1.1.0" expiry="1">					  
							<wfs:Query typeName="sf:LinkedFeature">
								<wfs:XlinkPropertyName traverseXlinkDepth="1">sf:extent</wfs:XlinkPropertyName>
								<ogc:Filter>
									<ogc:GmlObjectId gml:id="g202"/>
								</ogc:Filter>
							</wfs:Query>
							</wfs:GetFeatureWithLock>
							</body>
				            <parsers:HTTPParser>
				               <parsers:parse>
				                  <parsers:HTTPParser/>
				               </parsers:parse>
				            </parsers:HTTPParser>
						</ctl:request>
					</xsl:variable>	

					<xsl:if test="not($RESPONSE//ows:Exception/*)">
						<ctl:fail/>
					</xsl:if>
				</xsl:otherwise>
			</xsl:choose>
		</ctl:code>
	</ctl:test>
	
</ctl:package>

	<ctl:test name="wfs:transaction-main">
      <ctl:param name="wfs.GetCapabilities.document"/>
      <ctl:param name="gmlsf.profile.level"/>
      <ctl:assertion>Run test group for the WFS-Transaction conformance class.</ctl:assertion>
	  <ctl:code>
	  
         <!-- determine if service supports atomic transactions -->
         <xsl:variable name="supports.atomic.trx" as="xsd:boolean">
           <xsl:variable name="rsp0">
			 <ctl:request>
				<ctl:url>
				  <xsl:value-of select="$wfs.GetCapabilities.document//ows:Operation[@name='Transaction']/ows:DCP/ows:HTTP/ows:Post/@xlink:href"/>
				</ctl:url>
                <ctl:method>POST</ctl:method>
				<ctl:body>
<wfs:Transaction service="WFS" version="1.1.0">
	<wfs:Insert handle="insert-1">
      <sf:UnknownFeature gml:id="id20080125">
        <gml:name codeSpace="http://cite.opengeospatial.org/gmlsf">id20080125</gml:name>
      </sf:UnknownFeature>
    </wfs:Insert>
</wfs:Transaction>
				</ctl:body>
				<p:XMLValidatingParser.GMLSF1/>
			 </ctl:request>
		   </xsl:variable>
           <xsl:choose>
             <xsl:when test="$rsp0//wfs:TransactionResults"><xsl:value-of select="false()"/></xsl:when>
             <xsl:otherwise>
               <!-- received exception report -->
               <xsl:value-of select="true()"/>
             </xsl:otherwise>
           </xsl:choose>
         </xsl:variable>

         <xsl:choose>
			 <xsl:when test="$supports.atomic.trx">
                 <ctl:message>The service under test supports atomic transactions.</ctl:message>
			 </xsl:when>
			 <xsl:otherwise>
                 <ctl:message>The service under test does NOT support atomic transactions.</ctl:message>
			 </xsl:otherwise>
         </xsl:choose>  
         
		 <!-- Run mandatory test groups -->
		 <ctl:call-test name="wfs:run-Transaction-POST">
		   <ctl:with-param name="wfs.GetCapabilities.document" select="$wfs.GetCapabilities.document"/>
		   <ctl:with-param name="gmlsf.level" select="$gmlsf.profile.level"/>
		   <ctl:with-param name="supports.atomic.trx" select="$supports.atomic.trx"/>
		 </ctl:call-test>
		 <!-- run test groups for optional HTTP bindings that have been implemented -->
		 <xsl:if test="$wfs.GetCapabilities.document//ows:OperationsMetadata/ows:Operation[@name='LockFeature']/ows:DCP/ows:HTTP/ows:Post/@xlink:href">
		   <ctl:message>LockFeature using the POST method is implemented.</ctl:message>
		   <ctl:call-test name="wfs:run-LockFeature-POST">
			 <ctl:with-param name="wfs.GetCapabilities.document" select="$wfs.GetCapabilities.document"/>
			 <ctl:with-param name="supports.atomic.trx" select="$supports.atomic.trx"/>
		   </ctl:call-test>
		 </xsl:if>
		 <xsl:if test="$wfs.GetCapabilities.document//ows:OperationsMetadata/ows:Operation[@name='GetFeatureWithLock']/ows:DCP/ows:HTTP/ows:Post/@xlink:href">
		   <ctl:message>GetFeatureWithLock using the POST method is implemented.</ctl:message>
		   <ctl:call-test name="wfs:run-GetFeatureWithLock-POST">
			 <ctl:with-param name="wfs.GetCapabilities.document" select="$wfs.GetCapabilities.document"/>
			 <ctl:with-param name="supports.atomic.trx" select="$supports.atomic.trx"/>
		   </ctl:call-test>
		 </xsl:if>

      </ctl:code>
    </ctl:test>
    
    <!-- subsidiary validation tests available to test groups -->
    <ctl:test name="wfs:GetFeatureById-KVP">
      <ctl:param name="wfs.GetFeature.get.url"/>
      <ctl:param name="id"/>
      <ctl:param name="empty.response"/>
      <ctl:assertion>Attempts to fetch a feature by identifier using the GetFeature/GET binding.</ctl:assertion>
      <ctl:comment>
      If empty.response = 'false', then test passes if the response contains the
      matching feature as a child of either gml:featureMember or gml:featureMembers.
      Otherwise the test passes only if the response is empty.
      </ctl:comment>
      <ctl:code>
         <xsl:variable name="response">
				<ctl:request>
					<ctl:url>
						<xsl:value-of select="$wfs.GetFeature.get.url"/>
					</ctl:url>
					<ctl:method>GET</ctl:method>
					<ctl:param name="service">WFS</ctl:param>
                    <ctl:param name="version">1.1.0</ctl:param>
					<ctl:param name="request">GetFeature</ctl:param>
                    <ctl:param name="featureid"><xsl:value-of select="encode-for-uri($id)"/></ctl:param>
                    <p:XMLValidatingParser.GMLSF1/>
				</ctl:request>
	    </xsl:variable>
        <xsl:choose>
          <xsl:when test="not($response//wfs:FeatureCollection)">
	        <ctl:message>FAILURE: Expected valid wfs:FeatureCollection in response.</ctl:message>
		    <ctl:fail/>
	      </xsl:when>
          <xsl:when test="$empty.response = 'false'">
            <xsl:variable name="fid">
              <xsl:value-of select="$response//gml:featureMember/*[1]/@gml:id"/>
            </xsl:variable>
            <xsl:variable name="fid.alt">
             <xsl:value-of select="$response//gml:featureMembers/*[1]/@gml:id"/>
            </xsl:variable>
            <xsl:if test="($fid != $id) and ($fid.alt != $id)">
              <ctl:message>FAILURE: Did not get feature with matching gml:id (<xsl:value-of select="$id"/>).</ctl:message>
              <ctl:fail/>
            </xsl:if>
          </xsl:when>
          <xsl:otherwise>
            <xsl:if test="(count($response//gml:featureMember) + count($response//gml:featureMembers/*)) &gt; 0">
              <ctl:message>FAILURE: Expected empty GetFeature response.</ctl:message>
              <ctl:fail/>
            </xsl:if>
          </xsl:otherwise>
        </xsl:choose>
      </ctl:code>
	</ctl:test>

    <ctl:test name="wfs:GetFeatureByName">
      <ctl:param name="wfs.GetFeature.post.url"/>
      <ctl:param name="type"/>
      <ctl:param name="name.value"/>
      <ctl:param name="empty.response"/>
      <ctl:assertion>Attempt to fetch a feature by name using the GetFeature/POST binding.</ctl:assertion>
      <ctl:comment>
      If empty.response = 'false', then the test passes if the response contains
      at least one matching feature as a child of either gml:featureMember or
      gml:featureMembers. Otherwise the test passes only if the response is empty.
      </ctl:comment>
      <ctl:code>
         <xsl:variable name="response">
				<ctl:request>
					<ctl:url>
						<xsl:value-of select="$wfs.GetFeature.post.url"/>
					</ctl:url>
					<ctl:method>POST</ctl:method>
					<ctl:body>
                    <foo:GetFeature xmlns:foo="http://www.opengis.net/wfs" service="WFS" version="1.1.0">
						<foo:Query typeName="{$type}">
							<ogc:Filter xmlns:ogc="http://www.opengis.net/ogc">
								<ogc:PropertyIsEqualTo>
									<ogc:PropertyName>gml:name</ogc:PropertyName>
									<ogc:Literal><xsl:value-of select="$name.value"/></ogc:Literal>
								</ogc:PropertyIsEqualTo>
							</ogc:Filter>
						</foo:Query>
					</foo:GetFeature>
                    </ctl:body>
                    <p:XMLValidatingParser.GMLSF1/>
				</ctl:request>
	    </xsl:variable>
        <xsl:variable name="featureCount" select="count($response//gml:featureMember) + count($response//gml:featureMembers/*)"/>
        <xsl:choose>
          <xsl:when test="not($response//wfs:FeatureCollection)">
	        <ctl:message>FAILURE: Expected valid wfs:FeatureCollection in response.</ctl:message>
		    <ctl:fail/>
	      </xsl:when>
          <xsl:when test="$empty.response = 'false'">
            <xsl:if test="$featureCount = 0">
              <ctl:message>FAILURE: GetFeature response is empty. Expected feature(s) with gml:name="<xsl:value-of select="$name.value"/>"</ctl:message>
              <ctl:fail/>
            </xsl:if>
          </xsl:when>
          <xsl:otherwise>
            <xsl:if test="$featureCount &gt; 0">
              <ctl:message>FAILURE: Expected empty GetFeature response (where gml:name="<xsl:value-of select="$name.value"/>")</ctl:message>
              <ctl:fail/>
            </xsl:if>
          </xsl:otherwise>
        </xsl:choose>
      </ctl:code>
   </ctl:test>
</ctl:package>
	<ctl:package>

   <!-- include subsidiary test packages -->
   <ctl:package xmlns="http://www.occamlab.com/ctl" xmlns:ocp="http://www.occamlab.com/te/parsers" xmlns:tep="http://teamengine.sourceforge.net/parsers" xmlns:gml="http://www.opengis.net/gml">

    <ctl:test name="wfs:GetGmlObject-POST-XML">
      <ctl:param name="wfs.capabilities.doc"/>
      <ctl:assertion>
      An implementation that supports GetGmlObject requests containing XML
      entities must satisfy all applicable assertions.
      </ctl:assertion>
      <ctl:code>

                <ctl:call-test name="wfs:GetGmlObject-traverseXlinkDepth">
                        <ctl:with-param name="CAPABILITIES" select="$wfs.capabilities.doc"/>
                </ctl:call-test>

        <xsl:variable name="wfs.GetGmlObject.post.url">
                    <xsl:value-of select="$wfs.capabilities.doc//ows:OperationsMetadata/ows:Operation[@name='GetGmlObject']/ows:DCP/ows:HTTP/ows:Post/@xlink:href"/>
                </xsl:variable>
        <xsl:variable name="wfs.GetFeature.post.url">
                        <xsl:value-of select="$wfs.capabilities.doc//ows:OperationsMetadata/ows:Operation[@name='GetFeature']/ows:DCP/ows:HTTP/ows:Post/@xlink:href"/>
                </xsl:variable>
        <ctl:message>Target endpoint is <xsl:value-of select="$wfs.GetGmlObject.post.url"/></ctl:message>

        <xsl:variable name="wfs.Transaction.supported">
          <xsl:value-of select="boolean($wfs.capabilities.doc//ows:OperationsMetadata/ows:Operation[@name='Transaction'])"/>
        </xsl:variable>

        <xsl:variable name="wfs.Transaction.post.url">
          <xsl:value-of select="$wfs.capabilities.doc//ows:OperationsMetadata/ows:Operation[@name='Transaction']/ows:DCP/ows:HTTP/ows:Post/@xlink:href"/>
        </xsl:variable>

        <ctl:call-test name="wfs:GetGmlObject-POST-XML-1">
                        <ctl:with-param name="wfs.GetGmlObject.post.url" select="$wfs.GetGmlObject.post.url"/>
            <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
        <ctl:call-test name="wfs:GetGmlObject-POST-XML-2">
                        <ctl:with-param name="wfs.GetGmlObject.post.url" select="$wfs.GetGmlObject.post.url"/>
            <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
        <ctl:call-test name="wfs:GetGmlObject-POST-XML-3">
                        <ctl:with-param name="wfs.GetGmlObject.post.url" select="$wfs.GetGmlObject.post.url"/>
            <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
        <ctl:call-test name="wfs:GetGmlObject-POST-XML-4">
                        <ctl:with-param name="wfs.GetGmlObject.post.url" select="$wfs.GetGmlObject.post.url"/>
            <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
        <ctl:call-test name="wfs:GetGmlObject-POST-XML-5">
                        <ctl:with-param name="wfs.GetGmlObject.post.url" select="$wfs.GetGmlObject.post.url"/>
                        <ctl:with-param name="wfs.Transaction.post.url" select="$wfs.Transaction.post.url"/>
                        <ctl:with-param name="wfs.Transaction.supported" select="$wfs.Transaction.supported"/>
            <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:GetGmlObject-POST-XML-6">
                        <ctl:with-param name="wfs.GetGmlObject.post.url" select="$wfs.GetGmlObject.post.url"/>
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>

      </ctl:code>
    </ctl:test>

    <ctl:test name="wfs:GetGmlObject-POST-XML-1">
      <ctl:param name="wfs.GetGmlObject.post.url"/>
      <ctl:param name="wfs.GetFeature.post.url"/>
      <ctl:assertion>The GetGmlObject request must be implemented (using POST or GET methods)
      if the IUT claims to provide XLink resolution capabilities.</ctl:assertion>
      <ctl:comment>Return a GML object by identifier and resolve any XLinks up to the requested depth.</ctl:comment>
      <ctl:link title="ATC: GetGmlObject request">docs/ats.html#GetGmlObject</ctl:link>
          <ctl:code>
        <xsl:variable name="GetFeature-rsp">
                                <ctl:request>
                                        <ctl:url>
                                          <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </ctl:url>
                                        <ctl:method>POST</ctl:method>
                                    <ctl:body>
<wfs:GetFeature version="1.1.0" service="WFS" maxFeatures="20">
  <wfs:Query typeName="sf:PrimitiveGeoFeature"/>
</wfs:GetFeature>
                                        </ctl:body>
                                        <tep:XMLValidatingParser.GMLSF1/>
                                </ctl:request>
                </xsl:variable>
        <xsl:variable name="points">
          <xsl:copy-of select="$GetFeature-rsp//gml:Point[@gml:id]"/>
        </xsl:variable>
        <xsl:variable name="point1.id">
          <xsl:value-of select="$points/gml:Point[1]/@gml:id"/>
        </xsl:variable>
            <xsl:variable name="response">
                                <ctl:request>
                                        <ctl:url>
                                                <xsl:value-of select="$wfs.GetGmlObject.post.url"/>
                                        </ctl:url>
                                        <ctl:method>POST</ctl:method>
                                    <ctl:body>
<wfs:GetGmlObject xmlns:ogc="http://www.opengis.net/ogc" version="1.1.0" service="WFS" handle="GetGmlObject-POST-XML-1" traverseXlinkDepth="1">
        <ogc:GmlObjectId gml:id="{$point1.id}"/>
</wfs:GetGmlObject>
                                        </ctl:body>
                                        <tep:XMLValidatingParser.GMLSF1/>
                                </ctl:request>
                </xsl:variable>

                <xsl:choose>
                        <xsl:when test="not($response/*)">
                        <ctl:message>[FAILURE] Missing or invalid response entity.</ctl:message>
                                <ctl:fail/>
                        </xsl:when>
                        <xsl:otherwise>
              <xsl:if test="not($response/gml:Point/@gml:id = $point1.id)">
                <ctl:message>[FAILURE] Expected gml:Point having @gml:id = '<xsl:value-of select="$point1.id"/>'.</ctl:message>
                <ctl:fail/>
              </xsl:if>
                        </xsl:otherwise>
                </xsl:choose>
          </ctl:code>
        </ctl:test>

    <ctl:test name="wfs:GetGmlObject-POST-XML-2">
      <ctl:param name="wfs.GetGmlObject.post.url"/>
      <ctl:param name="wfs.GetFeature.post.url"/>
      <ctl:assertion>The GetGmlObject request must be implemented (using POST or GET methods)
      if the IUT claims to provide XLink resolution capabilities.</ctl:assertion>
      <ctl:comment>Return a GML object by identifier and resolve any XLinks up to the requested depth.</ctl:comment>
      <ctl:link title="ATC: GetGmlObject request">docs/ats.html#GetGmlObject</ctl:link>
          <ctl:code>
        <xsl:variable name="GetFeature-rsp">
                                <ctl:request>
                                        <ctl:url>
                                          <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </ctl:url>
                                        <ctl:method>POST</ctl:method>
                                    <ctl:body>
<wfs:GetFeature version="1.1.0" service="WFS" traverseXlinkDepth="1">
  <wfs:Query typeName="sf:LinkedFeature">
    <ogc:Filter xmlns:ogc="http://www.opengis.net/ogc">
          <ogc:PropertyIsEqualTo>
                <ogc:PropertyName>gml:name</ogc:PropertyName>
                <ogc:Literal>name-f202</ogc:Literal>
          </ogc:PropertyIsEqualTo>
        </ogc:Filter>
  </wfs:Query>
</wfs:GetFeature>
                                        </ctl:body>
                                        <tep:XMLValidatingParser.GMLSF2/>
                                </ctl:request>
                </xsl:variable>
        <xsl:variable name="sources">
          <xsl:copy-of select="$GetFeature-rsp//sf:LinkedFeature[sf:reference]"/>
        </xsl:variable>
        <xsl:variable name="feature.id">
          <xsl:value-of select="$sources/sf:LinkedFeature[1]/@gml:id"/>
        </xsl:variable>
        <xsl:variable name="target.id">
          <xsl:value-of select="$sources/sf:LinkedFeature[1]/sf:reference/*[1]/@gml:id"/>
        </xsl:variable>
            <xsl:variable name="response">
                                <ctl:request>
                                        <ctl:url>
                                                <xsl:value-of select="$wfs.GetGmlObject.post.url"/>
                                        </ctl:url>
                                        <ctl:method>POST</ctl:method>
                                    <ctl:body>
<wfs:GetGmlObject xmlns:ogc="http://www.opengis.net/ogc" version="1.1.0" service="WFS" handle="GetGmlObject-POST-XML-2" traverseXlinkDepth="1">
    <ogc:GmlObjectId gml:id="{$feature.id}"/>
</wfs:GetGmlObject>
                                        </ctl:body>
                                        <tep:XMLValidatingParser.GMLSF2/>
                                </ctl:request>
                </xsl:variable>

                <xsl:choose>
                        <xsl:when test="not($response/*)">
                        <ctl:message>[FAILURE] Missing or invalid response entity.</ctl:message>
                                <ctl:fail/>
                        </xsl:when>
                        <xsl:otherwise>
              <xsl:variable name="feature" select="$response//sf:LinkedFeature"/>
              <xsl:if test="not($feature/sf:reference/*)">
                <ctl:message>[FAILURE] XLink element was not properly resolved (where @gml:id = <xsl:value-of select="$feature/@gml:id"/>).</ctl:message>
                <ctl:fail/>
              </xsl:if>
              <xsl:if test="$feature/sf:reference/@xlink:href">
                <ctl:message>[FAILURE] XLink locator attribute was not removed from link element (where @gml:id = <xsl:value-of select="$feature/@gml:id"/>)</ctl:message>
                <ctl:fail/>
              </xsl:if>
              <xsl:if test="$feature/sf:reference/*[1]/@gml:id != $target.id">
                <ctl:message>[FAILURE] Expected target feature id = <xsl:value-of select="$target.id"/> (found <xsl:value-of select="sf:reference/*[1]/@gml:id"/>)</ctl:message>
                <ctl:fail/>
              </xsl:if>
              <xsl:if test="not($feature/sf:reference/comment())">
                <ctl:message>[FAILURE] Missing comment in link element (should indicate target href)</ctl:message>
                <ctl:fail/>
              </xsl:if>
              <xsl:variable name="feature.L2" select="$feature/sf:reference/sf:PrimitiveGeoFeature"/>
              <xsl:if test="not(count($feature.L2/sf:relatedFeature/*) = 0)">
                <ctl:message>[FAILURE] traverseXlinkDepth="1", but second-level link was resolved (source: @gml:id = <xsl:value-of select="$feature.L2/@gml:id"/>)</ctl:message>
                <ctl:fail/>
              </xsl:if>
                        </xsl:otherwise>
                </xsl:choose>
          </ctl:code>
        </ctl:test>

    <ctl:test name="wfs:GetGmlObject-POST-XML-3">
      <ctl:param name="wfs.GetGmlObject.post.url"/>
      <ctl:param name="wfs.GetFeature.post.url"/>
      <ctl:assertion>The GetGmlObject request must be implemented (using POST or GET methods)
      if the IUT claims to provide XLink resolution capabilities.</ctl:assertion>
      <ctl:comment>XLinks must NOT be resolved for GMLSF level 0 or 1 as the only
      element to conatin XLink values does not allow any content (gml:ReferenceType).</ctl:comment>
      <ctl:link title="ATC: GetGmlObject request">docs/ats.html#GetGmlObject</ctl:link>
          <ctl:code>
        <xsl:variable name="GetFeature-rsp">
                                <ctl:request>
                                        <ctl:url>
                                          <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </ctl:url>
                                        <ctl:method>POST</ctl:method>
                                    <ctl:body>
<wfs:GetFeature version="1.1.0" service="WFS" maxFeatures="20">
  <wfs:Query typeName="sf:PrimitiveGeoFeature">
    <ogc:Filter xmlns:ogc="http://www.opengis.net/ogc">
          <ogc:PropertyIsEqualTo>
                <ogc:PropertyName>gml:name</ogc:PropertyName>
                <ogc:Literal>name-f093</ogc:Literal>
          </ogc:PropertyIsEqualTo>
        </ogc:Filter>
  </wfs:Query>
</wfs:GetFeature>
                                        </ctl:body>
                                        <tep:XMLValidatingParser.GMLSF1/>
                                </ctl:request>
                </xsl:variable>
        <xsl:variable name="feature.id">
          <xsl:value-of select="$GetFeature-rsp//sf:PrimitiveGeoFeature[1]/@gml:id"/>
        </xsl:variable>
            <xsl:variable name="response">
                                <ctl:request>
                                        <ctl:url>
                                                <xsl:value-of select="$wfs.GetGmlObject.post.url"/>
                                        </ctl:url>
                                        <ctl:method>POST</ctl:method>
                                    <ctl:body>
<wfs:GetGmlObject xmlns:ogc="http://www.opengis.net/ogc" version="1.1.0" service="WFS" handle="GetGmlObject-POST-XML-3" traverseXlinkDepth="1">
    <ogc:GmlObjectId gml:id="{$feature.id}"/>
</wfs:GetGmlObject>
                                        </ctl:body>
                                        <tep:XMLValidatingParser.GMLSF1/>
                                </ctl:request>
                </xsl:variable>

                <xsl:choose>
                        <xsl:when test="not($response/*)">
                        <ctl:message>[FAILURE] Missing or invalid response entity.</ctl:message>
                                <ctl:fail/>
                        </xsl:when>
                        <xsl:otherwise>
                                <xsl:if test="not($response//sf:PrimitiveGeoFeature/gml:name = 'name-f093')">
                                  <ctl:message>[FAILURE] Included feature does not match expected query result; gml:name != "name-f093" (where feature id = <xsl:value-of select="sf:PrimitiveGeoFeature/@gml:id"/>)</ctl:message>
                                  <ctl:fail/>
                                </xsl:if>
                        </xsl:otherwise>
                </xsl:choose>
          </ctl:code>
        </ctl:test>

    <ctl:test name="wfs:GetGmlObject-POST-XML-4">
      <ctl:param name="wfs.GetGmlObject.post.url"/>
      <ctl:param name="wfs.GetFeature.post.url"/>
      <ctl:assertion>An exception must be returned in response to any of the following
        situations: (a) the request is invalid, (b) the locator attribute value (@xlink:href) does
        not include a fragment identifier, (c) the domain of the URI reference (local or remote)
        is unsupported, (d) the target resource is not found, (e) a forwarded GetGmlObject
        request has timed out.</ctl:assertion>
      <ctl:comment>Confirm that an exception is generated with the appropriate code (invalid parameter: -1).</ctl:comment>
      <ctl:link title="ATC: GetGmlObject - Exceptions">docs/ats.html#GetGmlObject-Exceptions</ctl:link>
          <ctl:code>
        <xsl:variable name="GetFeature-rsp">
                                <ctl:request>
                                        <ctl:url>
                                          <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </ctl:url>
                                        <ctl:method>POST</ctl:method>
                                    <ctl:body>
<wfs:GetFeature version="1.1.0" service="WFS">
  <wfs:Query typeName="sf:LinkedFeature"/>
</wfs:GetFeature>
                                        </ctl:body>
                                        <tep:XMLValidatingParser.GMLSF2/>
                                </ctl:request>
                </xsl:variable>
        <xsl:variable name="feature.id">
          <xsl:value-of select="$GetFeature-rsp/sf:LinkedFeature[1]/@gml:id"/>
        </xsl:variable>
            <xsl:variable name="response">
                                <ctl:request>
                                        <ctl:url>
                                                <xsl:value-of select="$wfs.GetGmlObject.post.url"/>
                                        </ctl:url>
                                        <ctl:method>POST</ctl:method>
                                    <ctl:body>
<wfs:GetGmlObject xmlns:ogc="http://www.opengis.net/ogc" version="1.1.0" service="WFS" handle="GetGmlObject-POST-XML-4" traverseXlinkDepth="-1">
    <ogc:GmlObjectId gml:id="{$feature.id}"/>
</wfs:GetGmlObject>
                                        </ctl:body>
                                        <tep:XMLValidatingParser.OWS/>
                                </ctl:request>
                </xsl:variable>

            <xsl:choose>
              <xsl:when test="not($response/*)">
                  <ctl:message>[FAILURE] Missing response entity.</ctl:message>
                  <ctl:fail/>
              </xsl:when>
              <xsl:otherwise>
                <ctl:call-test name="ctl:SchematronValidatingParser">
                            <ctl:with-param name="doc" select="$response"/>
                            <ctl:with-param name="schema">sch/ows/1.0.0/ExceptionReport.sch</ctl:with-param>
                            <ctl:with-param name="phase">InvalidParameterValuePhase</ctl:with-param>
                    </ctl:call-test>
              </xsl:otherwise>
            </xsl:choose>
          </ctl:code>
        </ctl:test>

    <ctl:test name="wfs:GetGmlObject-POST-XML-5">
      <ctl:param name="wfs.GetGmlObject.post.url"/>
      <ctl:param name="wfs.Transaction.post.url"/>
      <ctl:param name="wfs.Transaction.supported"/>
      <ctl:param name="wfs.GetFeature.post.url"/>
      <ctl:assertion>An exception must be returned in response to any of the following
        situations: (a) the request is invalid, (b) the locator attribute value (@xlink:href) does
        not include a fragment identifier, (c) the domain of the URI reference (local or remote)
        is unsupported, (d) the target resource is not found, (e) a forwarded GetGmlObject
        request has timed out.</ctl:assertion>
      <ctl:comment>Confirm that an exception is generated with the appropriate code (non-existent/bogus xlink:href).</ctl:comment>
      <ctl:link title="ATC: GetGmlObject - Exceptions">docs/ats.html#GetGmlObject-Exceptions</ctl:link>
          <ctl:code>
        <xsl:variable name="GetFeature-rsp">
                                <ctl:request>
                                        <ctl:url>
                                          <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </ctl:url>
                                        <ctl:method>POST</ctl:method>
                                    <ctl:body>
<wfs:GetFeature version="1.1.0" service="WFS" traverseXlinkDepth="0">
  <wfs:Query typeName="sf:LinkedFeature">
    <ogc:Filter xmlns:ogc="http://www.opengis.net/ogc">
          <ogc:PropertyIsEqualTo>
                <ogc:PropertyName>gml:name</ogc:PropertyName>
                <ogc:Literal>name-f209</ogc:Literal>
          </ogc:PropertyIsEqualTo>
        </ogc:Filter>
  </wfs:Query>
</wfs:GetFeature>
                                        </ctl:body>
                                        <tep:XMLValidatingParser.GMLSF2/>
                                </ctl:request>
                </xsl:variable>

                <xsl:choose>
                  <xsl:when test="boolean($GetFeature-rsp//sf:LinkedFeature[1]/@gml:id)">
                    <ctl:message>The f209 feature is present in the WFS, proceeding to check for exception when trying to resolve invalid xlink.</ctl:message>
        <xsl:variable name="feature.id">
          <xsl:value-of select="$GetFeature-rsp//sf:LinkedFeature[1]/@gml:id"/>
        </xsl:variable>
            <xsl:variable name="response">
                                <ctl:request>
                                        <ctl:url>
                                                <xsl:value-of select="$wfs.GetGmlObject.post.url"/>
                                        </ctl:url>
                                        <ctl:method>POST</ctl:method>
                                    <ctl:body>
<wfs:GetGmlObject xmlns:ogc="http://www.opengis.net/ogc" version="1.1.0" service="WFS" handle="GetGmlObject-POST-XML-5" traverseXlinkDepth="1">
    <ogc:GmlObjectId gml:id="{$feature.id}"/>
</wfs:GetGmlObject>
                                        </ctl:body>
                                        <tep:XMLValidatingParser.OWS/>
                                </ctl:request>
                </xsl:variable>

                <xsl:choose>
                        <xsl:when test="not($response/*)">
                        <ctl:message>[FAILURE] Missing or invalid response entity.</ctl:message>
                                <ctl:fail/>
                        </xsl:when>
                        <xsl:otherwise>
                          <ctl:call-test name="ctl:SchematronValidatingParser">
                                <ctl:with-param name="doc" select="$response"/>
                                <ctl:with-param name="schema">sch/ows/1.0.0/ExceptionReport.sch</ctl:with-param>
                                <ctl:with-param name="phase">NoApplicableCodePhase</ctl:with-param>
                          </ctl:call-test>
                    </xsl:otherwise>
                </xsl:choose>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:choose>
                      <xsl:when test="$wfs.Transaction.supported">
                        <ctl:message>The f209 feature is not present in the WFS, proceeding to check for exception when trying to insert invalid xlink.</ctl:message>
                        <xsl:variable name="response">
                          <ctl:request>
                            <ctl:url>
                              <xsl:value-of select="$wfs.GetFeature.post.url"/>
                            </ctl:url>
                            <ctl:method>POST</ctl:method>
                            <ctl:body>
                              <wfs:Transaction service="WFS" version="1.1.0">
                                <wfs:Insert handle="SF-2 f209 single insert" srsName="urn:ogc:def:crs:EPSG::4326">
                                  <sf:LinkedFeature gml:id="f209">
                                    <gml:description>description-f209</gml:description>
                                    <gml:name codeSpace="http://cite.opengeospatial.org/gmlsf">name-f209</gml:name>
                                    <sf:reference xlink:type="simple" xlink:href="#_6c566516-a435-11dc-8314-0800200c9a66"/>
                                  </sf:LinkedFeature>
                                </wfs:Insert>
                              </wfs:Transaction>
                            </ctl:body>
                            <tep:XMLValidatingParser.OWS/>
                          </ctl:request>
                        </xsl:variable>

                        <xsl:choose>
                          <xsl:when test="not($response/*)">
                            <ctl:message>[FAILURE] Missing or invalid response entity.</ctl:message>
                            <ctl:fail/>
                          </xsl:when>
                          <xsl:otherwise>
                            <ctl:call-test name="ctl:SchematronValidatingParser">
                              <ctl:with-param name="doc" select="$response"/>
                              <ctl:with-param name="schema">sch/ows/1.0.0/ExceptionReport.sch</ctl:with-param>
                              <ctl:with-param name="phase">InvalidParameterValuePhase</ctl:with-param>
                            </ctl:call-test>
                          </xsl:otherwise>
                        </xsl:choose>
                      </xsl:when>
                      <xsl:otherwise>
                        <ctl:message>Transactions are not supported, yet the f209 feature is not present. Skipping test.</ctl:message>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:otherwise>
                </xsl:choose>
          </ctl:code>
        </ctl:test>

    <ctl:test name="wfs:GetGmlObject-POST-XML-6">
      <ctl:param name="wfs.GetGmlObject.post.url"/>
      <ctl:param name="wfs.GetFeature.post.url"/>
      <ctl:assertion>An exception must be returned in response to any of the following
        situations: (a) the request is invalid, (b) the locator attribute value (@xlink:href) does
        not include a fragment identifier, (c) the domain of the URI reference (local or remote)
        is unsupported, (d) the target resource is not found, (e) a forwarded GetGmlObject
        request has timed out.</ctl:assertion>
      <ctl:comment>Confirm that an exception is generated with the appropriate code (unsupported XLink domain - FTP).</ctl:comment>
      <ctl:link title="ATC: GetGmlObject - Exceptions">docs/ats.html#GetGmlObject-Exceptions</ctl:link>
          <ctl:code>
        <xsl:variable name="GetFeature-rsp">
                                <ctl:request>
                                        <ctl:url>
                                          <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </ctl:url>
                                        <ctl:method>POST</ctl:method>
                                    <ctl:body>
<wfs:GetFeature version="1.1.0" service="WFS" traverseXlinkDepth="0">
  <wfs:Query typeName="sf:LinkedFeature">
    <ogc:Filter xmlns:ogc="http://www.opengis.net/ogc">
          <ogc:PropertyIsEqualTo>
                <ogc:PropertyName>gml:name</ogc:PropertyName>
                <ogc:Literal>name-f208</ogc:Literal>
          </ogc:PropertyIsEqualTo>
        </ogc:Filter>
  </wfs:Query>
</wfs:GetFeature>
                                        </ctl:body>
                                        <tep:XMLValidatingParser.GMLSF2/>
                                </ctl:request>
                </xsl:variable>
        <xsl:variable name="feature.id">
          <xsl:value-of select="$GetFeature-rsp//sf:LinkedFeature[1]/@gml:id"/>
        </xsl:variable>
            <xsl:variable name="response">
                                <ctl:request>
                                        <ctl:url>
                                                <xsl:value-of select="$wfs.GetGmlObject.post.url"/>
                                        </ctl:url>
                                        <ctl:method>POST</ctl:method>
                                    <ctl:body>
<wfs:GetGmlObject xmlns:ogc="http://www.opengis.net/ogc" version="1.1.0" service="WFS" handle="GetGmlObject-POST-XML-6" traverseXlinkDepth="1">
    <ogc:GmlObjectId gml:id="{$feature.id}"/>
</wfs:GetGmlObject>
                                        </ctl:body>
                                        <tep:XMLValidatingParser.OWS/>
                                </ctl:request>
                </xsl:variable>

                <xsl:choose>
                        <xsl:when test="not($response/*)">
                        <ctl:message>[FAILURE] Missing or invalid response entity.</ctl:message>
                                <ctl:fail/>
                        </xsl:when>
                        <xsl:otherwise>
                          <ctl:call-test name="ctl:SchematronValidatingParser">
                                <ctl:with-param name="doc" select="$response"/>
                                <ctl:with-param name="schema">sch/ows/1.0.0/ExceptionReport.sch</ctl:with-param>
                                <ctl:with-param name="phase">NoApplicableCodePhase</ctl:with-param>
                          </ctl:call-test>
                    </xsl:otherwise>
                </xsl:choose>
          </ctl:code>
        </ctl:test>

        <ctl:test name="wfs:GetGmlObject-traverseXlinkDepth">
                <ctl:param name="CAPABILITIES"/>
                <ctl:assertion>A GetGmlObject request with traverseXlinkDepth = * is resolved correctly.</ctl:assertion>
                <ctl:comment>Following the previous step, If the traverseXlinkDepth attribute value is "*" or greater than the nesting depth, then: ] the XLink linking element start tag shall be written to the new response elemnt without the xlink:href locator attribute or closing tag suffix, followed by a comment containing the locator attribute.</ctl:comment>
        <ctl:link>OGC 04-094, 10.2.3, p.52</ctl:link>
                <ctl:code>
                <xsl:choose>
                    <xsl:when test="not($CAPABILITIES/wfs:FeatureTypeList/wfs:FeatureType[wfs:Name='sf:LinkedFeature'])">
                                        <ctl:message>sf:LinkedFeature does not exist</ctl:message>
                    </xsl:when>
                    <xsl:otherwise>
                                        <xsl:variable name="GetFeature-rsp">
                                                <ctl:request>
                                                        <ctl:url>
                                                                <xsl:value-of select="$CAPABILITIES/ows:OperationsMetadata/ows:Operation[@name='GetFeature']/ows:DCP/ows:HTTP/ows:Get/@xlink:href"/>
                                                        </ctl:url>
                                                        <ctl:method>get</ctl:method>
                                                        <ctl:param name="request">GetFeature</ctl:param>
                                                        <ctl:param name="service">WFS</ctl:param>
                                                        <ctl:param name="version">1.1.0</ctl:param>
                                                        <param name="typename">
                                                                <xsl:value-of select="wfs:encode($CAPABILITIES/wfs:FeatureTypeList/wfs:FeatureType[wfs:Name='sf:LinkedFeature']/wfs:Name,'UTF-8')"/>
                                                        </param>
                                            <parsers:HTTPParser>
                                               <parsers:parse>
                                                  <parsers:HTTPParser/>
                                               </parsers:parse>
                                            </parsers:HTTPParser>
                                                </ctl:request>
                                        </xsl:variable>

                                        <xsl:variable name="FEATUREID">
                                        <xsl:value-of select="$GetFeature-rsp//gml:featureMembers//@gml:id"/>
                                </xsl:variable>
                                        <xsl:variable name="RESPONSE">
                                                <ctl:request>
                                                        <ctl:url>
                                                                <xsl:value-of select="$CAPABILITIES/ows:OperationsMetadata/ows:Operation[@name='GetGmlObject']/ows:DCP/ows:HTTP/ows:Get/@xlink:href"/>
                                                        </ctl:url>
                                                        <ctl:method>POST</ctl:method>
                                                    <ctl:body>
                                                        <wfs:GetGmlObject xmlns:ogc="http://www.opengis.net/ogc" version="1.1.0" service="WFS" traverseXlinkDepth="*">
                                                            <ogc:GmlObjectId gml:id="{$FEATUREID}"/>
                                                        </wfs:GetGmlObject>
                                                        </ctl:body>
                                            <parsers:HTTPParser>
                                               <parsers:parse>
                                                  <parsers:HTTPParser/>
                                               </parsers:parse>
                                            </parsers:HTTPParser>
                                                </ctl:request>
                                        </xsl:variable>
                                        <xsl:if test="$RESPONSE//@xlink:href">
                                                <ctl:fail/>
                                        </xsl:if>
                    </xsl:otherwise>
                 </xsl:choose>
                </ctl:code>
        </ctl:test>


</ctl:package>
   <ctl:package xmlns="http://www.occamlab.com/ctl" xmlns:ocp="http://www.occamlab.com/te/parsers" xmlns:tep="http://teamengine.sourceforge.net/parsers" xmlns:gml="http://www.opengis.net/gml">

    <ctl:test name="wfs:GetFeature.XLink-POST-XML">
      <ctl:param name="wfs.capabilities.doc"/>
      <ctl:assertion>
      An implementation that supports XLink handling in GetFeature requests
      containing XML entities must satisfy all applicable assertions.
      </ctl:assertion>
      <ctl:code>

                <ctl:call-test name="wfs:GetFeature-traverseXlinkExpiry">
                        <ctl:with-param name="CAPABILITIES" select="$wfs.capabilities.doc"/>
                </ctl:call-test>

        <xsl:variable name="wfs.GetFeature.post.url">
                    <xsl:value-of select="$wfs.capabilities.doc//ows:OperationsMetadata/ows:Operation[@name='GetFeature']/ows:DCP/ows:HTTP/ows:Post/@xlink:href"/>
                </xsl:variable>
        <ctl:message>Target endpoint is <xsl:value-of select="$wfs.GetFeature.post.url"/></ctl:message>


        <xsl:variable name="wfs.Transaction.supported">
          <xsl:value-of select="boolean($wfs.capabilities.doc//ows:OperationsMetadata/ows:Operation[@name='Transaction'])"/>
        </xsl:variable>

        <xsl:variable name="wfs.Transaction.post.url">
          <xsl:value-of select="$wfs.capabilities.doc//ows:OperationsMetadata/ows:Operation[@name='Transaction']/ows:DCP/ows:HTTP/ows:Post/@xlink:href"/>
        </xsl:variable>

        <xsl:variable name="LocalTraverseXlinkScope" as="xsd:integer">
                        <xsl:choose>
                <xsl:when test="$wfs.capabilities.doc//ows:OperationsMetadata/ows:Constraint[@name='LocalTraverseXLinkScope']">
                  <!-- global constraint -->
                  <xsl:variable name="xlink.depth" select="$wfs.capabilities.doc//ows:OperationsMetadata/ows:Constraint[@name='LocalTraverseXLinkScope']"/>
                  <xsl:choose>
                    <xsl:when test="$xlink.depth/ows:Value = '*'">
                                          <xsl:value-of select="xsd:integer(1024)"/>
                                    </xsl:when>
                    <xsl:otherwise>
                                          <xsl:value-of select="xsd:integer(max($xlink.depth/ows:Value))"/>
                                    </xsl:otherwise>
                  </xsl:choose>
                                </xsl:when>
                <xsl:when test="$wfs.capabilities.doc//ows:OperationsMetadata/ows:Operation[@name='GetFeature']/ows:Constraint[@name='LocalTraverseXLinkScope']">
                  <!-- operation-specific constraint -->
                  <xsl:variable name="xlink.depth" select="$wfs.capabilities.doc//ows:OperationsMetadata/ows:Operation[@name='GetFeature']/ows:Constraint[@name='LocalTraverseXLinkScope']"/>
                  <xsl:choose>
                    <xsl:when test="$xlink.depth/ows:Value = '*'">
                                          <xsl:value-of select="xsd:integer(1024)"/>
                                    </xsl:when>
                    <xsl:otherwise>
                                          <xsl:value-of select="xsd:integer(max($xlink.depth/ows:Value))"/>
                                    </xsl:otherwise>
                  </xsl:choose>
                                </xsl:when>
                <xsl:otherwise>
                                        <xsl:value-of select="xsd:integer(1024)"/>
                                </xsl:otherwise>
                        </xsl:choose>
        </xsl:variable>

        <ctl:call-test name="wfs:GetFeature.XLink-POST-XML-1">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                        <ctl:with-param name="LocalTraverseXlinkScope" select="$LocalTraverseXlinkScope"/>
                </ctl:call-test>
        <ctl:call-test name="wfs:GetFeature.XLink-POST-XML-2">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                        <ctl:with-param name="LocalTraverseXlinkScope" select="$LocalTraverseXlinkScope"/>
                </ctl:call-test>
        <ctl:call-test name="wfs:GetFeature.XLink-POST-XML-3">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                        <ctl:with-param name="LocalTraverseXlinkScope" select="$LocalTraverseXlinkScope"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:GetFeature.XLink-POST-XML-4">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                        <ctl:with-param name="wfs.Transaction.post.url" select="$wfs.Transaction.post.url"/>
                        <ctl:with-param name="wfs.Transaction.supported" select="$wfs.Transaction.supported"/>
                        <ctl:with-param name="LocalTraverseXlinkScope" select="$LocalTraverseXlinkScope"/>
                </ctl:call-test>
        <ctl:call-test name="wfs:GetFeature.XLink-POST-XML-5">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                        <ctl:with-param name="LocalTraverseXlinkScope" select="$LocalTraverseXlinkScope"/>
                </ctl:call-test>
        <ctl:call-test name="wfs:GetFeature.XLink-POST-XML-6">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                        <ctl:with-param name="LocalTraverseXlinkScope" select="$LocalTraverseXlinkScope"/>
                </ctl:call-test>
        <ctl:call-test name="wfs:GetFeature.XLink-POST-XML-7">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                        <ctl:with-param name="LocalTraverseXlinkScope" select="$LocalTraverseXlinkScope"/>
                </ctl:call-test>
                <xsl:if test="not(boolean($wfs.capabilities.doc//ows:OperationsMetadata/ows:Operation[@name='GetFeature']/ows:Constraint[@name='RemoteTraverseXLinkScope']/ows:Value))">
                        <ctl:call-test name="wfs:GetFeature.XLink-POST-XML-8">
                                <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                                <ctl:with-param name="LocalTraverseXlinkScope" select="$LocalTraverseXlinkScope"/>
                        </ctl:call-test>
                </xsl:if>
        <ctl:call-test name="wfs:GetFeature.XLink-POST-XML-9">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                        <ctl:with-param name="LocalTraverseXlinkScope" select="$LocalTraverseXlinkScope"/>
                </ctl:call-test>
        <ctl:call-test name="wfs:GetFeature.XLink-POST-XML-10">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                        <ctl:with-param name="LocalTraverseXlinkScope" select="$LocalTraverseXlinkScope"/>
                </ctl:call-test>
        <ctl:call-test name="wfs:GetFeature.XLink-POST-XML-11">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                        <ctl:with-param name="LocalTraverseXlinkScope" select="$LocalTraverseXlinkScope"/>
                </ctl:call-test>

      </ctl:code>
    </ctl:test>

    <ctl:test name="wfs:GetFeature.XLink-POST-XML-1">
      <ctl:param name="wfs.GetFeature.post.url"/>
      <ctl:param name="LocalTraverseXlinkScope"/>
      <ctl:assertion>All of the following conditions must be true after successfully
        resolving an XLink reference: (a) the correct target resource (referent) has been
        inserted as a child of the link element; (b) the locator attribute (@xlink:href) has
        been removed from the link element; (c) the locator attribute is included in the
        text of a comment contained in the link element.</ctl:assertion>
      <ctl:comment>XLinks must be resolved to the depth specified by the value of the @traverseXlinkDepth attribute.</ctl:comment>
      <ctl:link title="ATC: XLink resolution">docs/ats.html#XLinkResolution</ctl:link>
          <ctl:code>
            <xsl:variable name="response">
                                <ctl:request>
                                        <ctl:url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </ctl:url>
                                        <ctl:method>POST</ctl:method>
                                    <ctl:body>
<wfs:GetFeature version="1.1.0" service="WFS" traverseXlinkDepth="1">
        <wfs:Query typeName="sf:LinkedFeature">
                <ogc:Filter xmlns:ogc="http://www.opengis.net/ogc">
                        <ogc:PropertyIsEqualTo>
                                <ogc:PropertyName>gml:name</ogc:PropertyName>
                                <ogc:Literal>name-f202</ogc:Literal>
                        </ogc:PropertyIsEqualTo>
                </ogc:Filter>
        </wfs:Query>
</wfs:GetFeature>
                                        </ctl:body>
                                        <tep:XMLValidatingParser.GMLSF2/>
                                </ctl:request>
                </xsl:variable>

                <xsl:choose>
                        <xsl:when test="not($response/*)">
                        <ctl:message>[FAILURE] Missing or invalid response entity.</ctl:message>
                                <ctl:fail/>
                        </xsl:when>
                        <xsl:otherwise>
                          <xsl:variable name="nFeatureMembers" select="count($response//sf:LinkedFeature)"/>
                          <xsl:if test="$nFeatureMembers = 0">
                                <ctl:message>[FAILURE] Expected at least one sf:LinkedFeature feature member in the response (<xsl:value-of select="$nFeatureMembers"/> included)</ctl:message>
                                <ctl:fail/>
                          </xsl:if>
                          <!-- construct sequence containing all feature nodes -->
                          <xsl:for-each select="$response//gml:featureMember/* | $response//gml:featureMembers/*">
                                <xsl:if test="not(gml:name = 'name-f202')">
                                  <ctl:message>[FAILURE] Included feature does not match expected query result; gml:name != "name-f202" (where feature id = <xsl:value-of select="./@gml:id"/>)</ctl:message>
                                  <ctl:fail/>
                                </xsl:if>
                                <xsl:if test="not(sf:reference/sf:PrimitiveGeoFeature/gml:name = 'name-f092')">
                                  <ctl:message>[FAILURE] XLink element link was not properly resolved; gml:name != "name-f092" (where feature id = <xsl:value-of select="./@gml:id"/>)</ctl:message>
                                  <ctl:fail/>
                                </xsl:if>
                                <xsl:if test="sf:reference/@xlink:href">
                                  <ctl:message>[FAILURE] XLink locator attribute was not removed from link element (where feature id = <xsl:value-of select="./@gml:id"/>)</ctl:message>
                                  <ctl:fail/>
                                </xsl:if>
                                <xsl:if test="not(sf:reference/comment())">
                                  <ctl:message>[FAILURE] Missing comment in link element (should indicate target href)</ctl:message>
                                  <ctl:fail/>
                                </xsl:if>
                          </xsl:for-each>
                        </xsl:otherwise>
                </xsl:choose>
          </ctl:code>
        </ctl:test>

    <ctl:test name="wfs:GetFeature.XLink-POST-XML-2">
      <ctl:param name="wfs.GetFeature.post.url"/>
      <ctl:param name="LocalTraverseXlinkScope"/>
      <ctl:assertion>All of the following conditions must be true after successfully
        resolving an XLink reference: (a) the correct target resource (referent) has been
        inserted as a child of the link element; (b) the locator attribute (@xlink:href) has
        been removed from the link element; (c) the locator attribute is included in the
        text of a comment contained in the link element.</ctl:assertion>
      <ctl:comment>No traverseXlinkDepth parameter should return a feature set with no XLinks resolved.</ctl:comment>
      <ctl:link title="ATC: XLink resolution">docs/ats.html#XLinkResolution</ctl:link>
          <ctl:code>
            <xsl:variable name="response">
                                <ctl:request>
                                        <ctl:url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </ctl:url>
                                        <ctl:method>POST</ctl:method>
                                    <ctl:body>
<wfs:GetFeature version="1.1.0" service="WFS" traverseXlinkDepth="0">
        <wfs:Query typeName="sf:LinkedFeature">
                <ogc:Filter xmlns:ogc="http://www.opengis.net/ogc">
                        <ogc:PropertyIsEqualTo>
                                <ogc:PropertyName>gml:name</ogc:PropertyName>
                                <ogc:Literal>name-f202</ogc:Literal>
                        </ogc:PropertyIsEqualTo>
                </ogc:Filter>
        </wfs:Query>
</wfs:GetFeature>
                                        </ctl:body>
                                        <tep:XMLValidatingParser.GMLSF2/>
                                </ctl:request>
                </xsl:variable>

                <xsl:choose>
                        <xsl:when test="not($response/*)">
                        <ctl:message>[FAILURE] Missing or invalid response entity.</ctl:message>
                                <ctl:fail/>
                        </xsl:when>
                        <xsl:otherwise>
                          <xsl:variable name="nFeatureMembers" select="count($response//sf:LinkedFeature)"/>
                          <xsl:if test="$nFeatureMembers = 0">
                                <ctl:message>[FAILURE] Expected at least one sf:LinkedFeature feature member in the response (<xsl:value-of select="$nFeatureMembers"/> included)</ctl:message>
                                <ctl:fail/>
                          </xsl:if>
                          <!-- construct sequence containing all feature nodes -->
                          <xsl:for-each select="$response//gml:featureMember/* | $response//gml:featureMembers/*">
                                <xsl:if test="not(gml:name = 'name-f202')">
                                  <ctl:message>[FAILURE] Included feature does not match expected query result; gml:name != "name-f202" (where feature id = <xsl:value-of select="./@gml:id"/>)</ctl:message>
                                  <ctl:fail/>
                                </xsl:if>
                                <xsl:if test="not(count(sf:reference/*) = 0)">
                                  <ctl:message>[FAILURE] XLink element was erroneously resolved (where feature id = <xsl:value-of select="./@gml:id"/>)</ctl:message>
                                  <ctl:fail/>
                                </xsl:if>
                                <xsl:if test="not(sf:reference/@xlink:href)">
                                  <ctl:message>[FAILURE] XLink locator attribute was erroneously removed from link element (where feature id = <xsl:value-of select="./@gml:id"/>)</ctl:message>
                                  <ctl:fail/>
                                </xsl:if>
                          </xsl:for-each>
                        </xsl:otherwise>
                </xsl:choose>
          </ctl:code>
        </ctl:test>

<ctl:test name="wfs:GetFeature.XLink-POST-XML-3">
      <ctl:param name="wfs.GetFeature.post.url"/>
      <ctl:param name="LocalTraverseXlinkScope"/>
      <ctl:assertion>All of the following conditions must be true after successfully
        resolving an XLink reference: (a) the correct target resource (referent) has been
        inserted as a child of the link element; (b) the locator attribute (@xlink:href) has
        been removed from the link element; (c) the locator attribute is included in the
        text of a comment contained in the link element.</ctl:assertion>
      <ctl:comment>XLinks must NOT be resolved for GMLSF level 0 or 1 as the only
      element to contain XLink values does not allow any content (gml:ReferenceType).</ctl:comment>
     <ctl:link title="ATC: XLink resolution">docs/ats.html#XLinkResolution</ctl:link>
          <ctl:code>
            <xsl:variable name="response">
                                <ctl:request>
                                        <ctl:url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </ctl:url>
                                        <ctl:method>POST</ctl:method>
                                    <ctl:body>
<wfs:GetFeature version="1.1.0" service="WFS" traverseXlinkDepth="1">
        <wfs:Query typeName="sf:PrimitiveGeoFeature">
                <ogc:Filter xmlns:ogc="http://www.opengis.net/ogc">
                        <ogc:PropertyIsEqualTo>
                                <ogc:PropertyName>gml:name</ogc:PropertyName>
                                <ogc:Literal>name-f092</ogc:Literal>
                        </ogc:PropertyIsEqualTo>
                </ogc:Filter>
        </wfs:Query>
</wfs:GetFeature>
                                        </ctl:body>
                                        <tep:XMLValidatingParser.GMLSF1/>
                                </ctl:request>
                </xsl:variable>

                <xsl:choose>
                        <xsl:when test="not($response/*)">
                        <ctl:message>[FAILURE] Missing or invalid response entity.</ctl:message>
                                <ctl:fail/>
                        </xsl:when>
                        <xsl:otherwise>
              <xsl:variable name="nFeatureMembers" select="count($response//sf:PrimitiveGeoFeature)"/>
                          <xsl:if test="$nFeatureMembers = 0">
                                <ctl:message>[FAILURE] Expected at least one sf:PrimitiveGeoFeature feature member in the response (<xsl:value-of select="$nFeatureMembers"/> included)</ctl:message>
                                <ctl:fail/>
                          </xsl:if>
                          <!-- construct sequence containing all feature nodes -->
                          <xsl:for-each select="$response//gml:featureMember/* | $response//gml:featureMembers/*">
                                <xsl:if test="not(gml:name = 'name-f092')">
                                  <ctl:message>[FAILURE] Included feature does not match expected query result; gml:name != "name-f092" (where feature id = <xsl:value-of select="./@gml:id"/>)</ctl:message>
                                  <ctl:fail/>
                                </xsl:if>
                                <xsl:if test="boolean(sf:relatedFeature/@xlink:href)">
                                  <ctl:message>[FAILURE] XLink locator attribute was not removed from link element (where feature id = <xsl:value-of select="./@gml:id"/>)</ctl:message>
                                  <ctl:fail/>
                                </xsl:if>
                          </xsl:for-each>
                        </xsl:otherwise>
                </xsl:choose>
          </ctl:code>
        </ctl:test>

    <ctl:test name="wfs:GetFeature.XLink-POST-XML-4">
      <ctl:param name="wfs.GetFeature.post.url"/>
      <ctl:param name="wfs.Transaction.post.url"/>
      <ctl:param name="wfs.Transaction.supported"/>
      <ctl:param name="LocalTraverseXlinkScope"/>
      <ctl:assertion>A local XLink reference is processed when found; otherwise
        an exception must be reported. If the feature is not present in the WFS,
        try to insert it with an invalid xlink, then an exception must be reported.</ctl:assertion>
      <ctl:comment>Confirm that an exception is generated with the appropriate code (invalid XLink fid - will not be found).</ctl:comment>
      <ctl:link title="ATC: XLink resolution">docs/ats.html#XLinkResolution</ctl:link>
          <ctl:code>

            <xsl:variable name="existancecheck">
              <ctl:request>
                <ctl:url>
                  <xsl:value-of select="$wfs.GetFeature.post.url"/>
                </ctl:url>
                <ctl:method>POST</ctl:method>
                <ctl:body>
                  <wfs:GetFeature version="1.1.0" service="WFS" traverseXlinkDepth="0">
                    <wfs:Query typeName="sf:LinkedFeature">
                      <ogc:Filter xmlns:ogc="http://www.opengis.net/ogc">
                        <ogc:PropertyIsEqualTo>
                          <ogc:PropertyName>gml:name</ogc:PropertyName>
                          <ogc:Literal>name-f209</ogc:Literal>
                        </ogc:PropertyIsEqualTo>
                      </ogc:Filter>
                    </wfs:Query>
                  </wfs:GetFeature>
                </ctl:body>
              </ctl:request>
            </xsl:variable>

            <xsl:choose>
              <xsl:when test="$existancecheck//gml:name[text() = 'name-f209']">
                <ctl:message>The f209 feature is present in the WFS, proceeding to check for exception when trying to resolve invalid xlink.</ctl:message>
                <xsl:variable name="response">
                  <ctl:request>
                    <ctl:url>
                      <xsl:value-of select="$wfs.GetFeature.post.url"/>
                    </ctl:url>
                    <ctl:method>POST</ctl:method>
                    <ctl:body>
                      <wfs:GetFeature version="1.1.0" service="WFS" traverseXlinkDepth="*">
                        <wfs:Query typeName="sf:LinkedFeature">
                          <ogc:Filter xmlns:ogc="http://www.opengis.net/ogc">
                            <ogc:PropertyIsEqualTo>
                              <ogc:PropertyName>gml:name</ogc:PropertyName>
                              <ogc:Literal>name-f209</ogc:Literal>
                            </ogc:PropertyIsEqualTo>
                          </ogc:Filter>
                        </wfs:Query>
                      </wfs:GetFeature>
                    </ctl:body>
                    <tep:XMLValidatingParser.OWS/>
                  </ctl:request>
                </xsl:variable>

                <xsl:choose>
                  <xsl:when test="not($response/*)">
                    <ctl:message>[FAILURE] Missing or invalid response entity.</ctl:message>
                    <ctl:fail/>
                  </xsl:when>
                  <xsl:otherwise>
                    <ctl:call-test name="ctl:SchematronValidatingParser">
                      <ctl:with-param name="doc" select="$response"/>
                      <ctl:with-param name="schema">sch/ows/1.0.0/ExceptionReport.sch</ctl:with-param>
                      <ctl:with-param name="phase">NoApplicableCodePhase</ctl:with-param>
                    </ctl:call-test>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:when>
              <xsl:otherwise>
                <xsl:choose>
                  <xsl:when test="$wfs.Transaction.supported">
                    <ctl:message>The f209 feature is not present in the WFS, proceeding to check for exception when trying to insert invalid xlink.</ctl:message>
                    <xsl:variable name="response">
                      <ctl:request>
                        <ctl:url>
                          <xsl:value-of select="$wfs.GetFeature.post.url"/>
                        </ctl:url>
                        <ctl:method>POST</ctl:method>
                        <ctl:body>
                          <wfs:Transaction service="WFS" version="1.1.0">
                            <wfs:Insert handle="SF-2 f209 single insert" srsName="urn:ogc:def:crs:EPSG::4326">
                              <sf:LinkedFeature gml:id="f209">
                                <gml:description>description-f209</gml:description>
                                <gml:name codeSpace="http://cite.opengeospatial.org/gmlsf">name-f209</gml:name>
                                <sf:reference xlink:type="simple" xlink:href="#_6c566516-a435-11dc-8314-0800200c9a66"/>
                              </sf:LinkedFeature>
                            </wfs:Insert>
                          </wfs:Transaction>
                        </ctl:body>
                        <tep:XMLValidatingParser.OWS/>
                      </ctl:request>
                    </xsl:variable>

                    <xsl:choose>
                      <xsl:when test="not($response/*)">
                        <ctl:message>[FAILURE] Missing or invalid response entity.</ctl:message>
                        <ctl:fail/>
                      </xsl:when>
                      <xsl:otherwise>
                        <ctl:call-test name="ctl:SchematronValidatingParser">
                          <ctl:with-param name="doc" select="$response"/>
                          <ctl:with-param name="schema">sch/ows/1.0.0/ExceptionReport.sch</ctl:with-param>
                          <ctl:with-param name="phase">InvalidParameterValuePhase</ctl:with-param>
                        </ctl:call-test>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:when>
                  <xsl:otherwise>
                    <ctl:message>Transactions are not supported, yet the f209 feature is not present. Skipping test.</ctl:message>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:otherwise>
            </xsl:choose>
          </ctl:code>
        </ctl:test>

    <ctl:test name="wfs:GetFeature.XLink-POST-XML-5">
      <ctl:param name="wfs.GetFeature.post.url"/>
      <ctl:param name="LocalTraverseXlinkScope"/>
      <ctl:assertion>XLink references must be resolved to a depth corresponding to
        one of the following cases: (a) the requested depth; (b) the maximum supported
        depth, if this is less than the requested depth</ctl:assertion>
      <ctl:comment>XLinks must be resolved to the depth specified by the value of the @traverseXlinkDepth attribute.</ctl:comment>
      <ctl:link title="ATC: XLink resolution - Depth">docs/ats.html#XLinkResolution-LinkDepth</ctl:link>
          <ctl:code>
            <xsl:variable name="response">
                                <ctl:request>
                                        <ctl:url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </ctl:url>
                                        <ctl:method>POST</ctl:method>
                                    <ctl:body>
<wfs:GetFeature version="1.1.0" service="WFS" traverseXlinkDepth="1">
  <wfs:Query typeName="sf:LinkedFeature">
    <ogc:Filter xmlns:ogc="http://www.opengis.net/ogc">
          <ogc:PropertyIsEqualTo>
                <ogc:PropertyName>gml:name</ogc:PropertyName>
                <ogc:Literal>name-f206</ogc:Literal>
          </ogc:PropertyIsEqualTo>
        </ogc:Filter>
  </wfs:Query>
</wfs:GetFeature>
                                        </ctl:body>
                                        <tep:XMLValidatingParser.GMLSF2/>
                                </ctl:request>
                </xsl:variable>

                <xsl:choose>
                        <xsl:when test="not($response/*)">
                        <ctl:message>[FAILURE] Missing or invalid response entity.</ctl:message>
                                <ctl:fail/>
                        </xsl:when>
                        <xsl:otherwise>
              <xsl:variable name="nFeatureMembers" select="count($response//sf:LinkedFeature)"/>
                          <xsl:if test="$nFeatureMembers = 0">
                                <ctl:message>[FAILURE] Expected at least one sf:LinkedFeature feature member in the response (<xsl:value-of select="$nFeatureMembers"/> included)</ctl:message>
                                <ctl:fail/>
                          </xsl:if>
                          <!-- construct sequence containing all feature nodes -->
                          <xsl:for-each select="$response//gml:featureMember/* | $response//gml:featureMembers/*">
                                <xsl:if test="not(gml:name = 'name-f206')">
                                  <ctl:message>[FAILURE] Included feature does not match expected query result; gml:name != "name-f206" (where feature id = <xsl:value-of select="./@gml:id"/>)</ctl:message>
                                  <ctl:fail/>
                                </xsl:if>
                                <xsl:if test="not(sf:reference/sf:LinkedFeature/gml:name = 'name-f207')">
                                  <ctl:message>[FAILURE] Expected resolved XLink element, with gml:name = "name-f207", was not found (where feature id = <xsl:value-of select="./@gml:id"/>)</ctl:message>
                                  <ctl:fail/>
                                </xsl:if>
                                <xsl:if test="not(count(sf:reference/sf:LinkedFeature/sf:reference/*) = 0)">
                                  <ctl:message>[FAILURE] XLink element was erroneously resolved at depth = 2 (where feature id = <xsl:value-of select="./@gml:id"/>)</ctl:message>
                                  <ctl:fail/>
                                </xsl:if>
                                <xsl:if test="sf:reference/@xlink:href">
                                  <ctl:message>[FAILURE] XLink locator attribute was not removed from link element (where feature id = <xsl:value-of select="./@gml:id"/>)</ctl:message>
                                  <ctl:fail/>
                                </xsl:if>
                                <xsl:if test="not(sf:reference/comment())">
                                  <ctl:message>[FAILURE] Missing comment in link element (should indicate target href)</ctl:message>
                                  <ctl:fail/>
                                </xsl:if>
                          </xsl:for-each>
                        </xsl:otherwise>
                </xsl:choose>
          </ctl:code>
        </ctl:test>

    <ctl:test name="wfs:GetFeature.XLink-POST-XML-6">
      <ctl:param name="wfs.GetFeature.post.url"/>
      <ctl:param name="LocalTraverseXlinkScope"/>
      <ctl:assertion>XLink references must be resolved to a depth corresponding to
        one of the following cases: (a) the requested depth; (b) the maximum supported
        depth, if this is less than the requested depth</ctl:assertion>
      <ctl:comment>XLinks must be resolved to the depth specified by the value of the @traverseXlinkDepth attribute.</ctl:comment>
      <ctl:link title="ATC: XLink resolution - Depth">docs/ats.html#XLinkResolution-LinkDepth</ctl:link>
          <ctl:code>
            <xsl:variable name="response">
                                <ctl:request>
                                        <ctl:url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </ctl:url>
                                        <ctl:method>POST</ctl:method>
                                    <ctl:body>
<wfs:GetFeature version="1.1.0" service="WFS" traverseXlinkDepth="2">
  <wfs:Query typeName="sf:LinkedFeature">
    <ogc:Filter xmlns:ogc="http://www.opengis.net/ogc">
          <ogc:PropertyIsEqualTo>
                <ogc:PropertyName>gml:name</ogc:PropertyName>
                <ogc:Literal>name-f206</ogc:Literal>
          </ogc:PropertyIsEqualTo>
        </ogc:Filter>
  </wfs:Query>
</wfs:GetFeature>
                                        </ctl:body>
                                        <tep:XMLValidatingParser.GMLSF2/>
                                </ctl:request>
                </xsl:variable>

                <xsl:choose>
                        <xsl:when test="not($response/*)">
                        <ctl:message>[FAILURE] Missing or invalid response entity.</ctl:message>
                                <ctl:fail/>
                        </xsl:when>
                        <xsl:otherwise>
              <xsl:variable name="nFeatureMembers" select="count($response//sf:LinkedFeature)"/>
                          <xsl:if test="$nFeatureMembers = 0">
                                <ctl:message>[FAILURE] Expected at least one sf:LinkedFeature feature member in the response (<xsl:value-of select="$nFeatureMembers"/> included)</ctl:message>
                                <ctl:fail/>
                          </xsl:if>
                          <!-- construct sequence containing all feature nodes -->
                          <xsl:for-each select="$response//gml:featureMember/* | $response//gml:featureMembers/*">
                                <xsl:if test="not(gml:name = 'name-f206')">
                                  <ctl:message>[FAILURE] Included feature does not match expected query result; gml:name != "name-f206" (where feature id = <xsl:value-of select="./@gml:id"/>)</ctl:message>
                                  <ctl:fail/>
                                </xsl:if>
                                <xsl:if test="not(sf:reference/sf:LinkedFeature/gml:name = 'name-f207')">
                                  <ctl:message>[FAILURE] Expected resolved XLink element, with gml:name = "name-f207", was not found (where feature id = <xsl:value-of select="./@gml:id"/>)</ctl:message>
                                  <ctl:fail/>
                                </xsl:if>
                                <xsl:if test="sf:reference/@xlink:href">
                                  <ctl:message>[FAILURE] XLink locator attribute was not removed from link element (where feature id = <xsl:value-of select="./@gml:id"/>)</ctl:message>
                                  <ctl:fail/>
                                </xsl:if>
                                <xsl:if test="not(sf:reference/comment())">
                                  <ctl:message>[FAILURE] Missing comment in link element (should indicate target href)</ctl:message>
                                  <ctl:fail/>
                                </xsl:if>
                                <xsl:if test="xsd:integer($LocalTraverseXlinkScope) gt 1">
                                        <xsl:if test="not(sf:reference/sf:LinkedFeature/sf:reference/sf:LinkedFeature/gml:name = 'name-f210')">
                                          <ctl:message>[FAILURE] Expected resolved XLink element, with gml:name = "name-f210", was not found (where feature id = <xsl:value-of select="./sf:reference/sf:LinkedFeature/@gml:id"/>)</ctl:message>
                                          <ctl:fail/>
                                        </xsl:if>
                                        <xsl:if test="not(count(sf:reference/sf:LinkedFeature/sf:reference/sf:LinkedFeature/sf:reference/*) = 0)">
                                          <ctl:message>[FAILURE] XLink element was erroneously resolved at depth = 3 (where feature id = <xsl:value-of select="./@gml:id"/>)</ctl:message>
                                          <ctl:fail/>
                                        </xsl:if>
                                        <xsl:if test="sf:reference/sf:LinkedFeature/sf:reference/@xlink:href">
                                          <ctl:message>[FAILURE] XLink locator attribute was not removed from link element (where feature id = <xsl:value-of select="./sf:reference/sf:LinkedFeature/@gml:id"/>)</ctl:message>
                                          <ctl:fail/>
                                        </xsl:if>
                                        <xsl:if test="not(sf:reference/sf:LinkedFeature/sf:reference/comment())">
                                          <ctl:message>[FAILURE] Missing comment in link element (should indicate target href)</ctl:message>
                                          <ctl:fail/>
                                        </xsl:if>
                                </xsl:if>
                          </xsl:for-each>
                        </xsl:otherwise>
                </xsl:choose>
          </ctl:code>
        </ctl:test>

    <ctl:test name="wfs:GetFeature.XLink-POST-XML-7">
      <ctl:param name="wfs.GetFeature.post.url"/>
      <ctl:param name="LocalTraverseXlinkScope"/>
      <ctl:assertion>XLink references must be resolved to a depth corresponding to
        one of the following cases: (a) the requested depth; (b) the maximum supported
        depth, if this is less than the requested depth</ctl:assertion>
      <ctl:comment>XLinks must be resolved to the depth specified by the value of the @traverseXlinkDepth attribute.</ctl:comment>
      <ctl:link title="ATC: XLink resolution - Depth">docs/ats.html#XLinkResolution-LinkDepth</ctl:link>
          <ctl:code>
            <xsl:variable name="response">
                                <ctl:request>
                                        <ctl:url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </ctl:url>
                                        <ctl:method>POST</ctl:method>
                                    <ctl:body>
<wfs:GetFeature version="1.1.0" service="WFS" traverseXlinkDepth="*">
  <wfs:Query typeName="sf:LinkedFeature">
    <ogc:Filter xmlns:ogc="http://www.opengis.net/ogc">
          <ogc:PropertyIsEqualTo>
                <ogc:PropertyName>gml:name</ogc:PropertyName>
                <ogc:Literal>name-f206</ogc:Literal>
          </ogc:PropertyIsEqualTo>
        </ogc:Filter>
  </wfs:Query>
</wfs:GetFeature>
                                        </ctl:body>
                                        <tep:XMLValidatingParser.GMLSF2/>
                                </ctl:request>
                </xsl:variable>

                <xsl:choose>
                        <xsl:when test="not($response/*)">
                        <ctl:message>[FAILURE] Missing or invalid response entity.</ctl:message>
                                <ctl:fail/>
                        </xsl:when>
                        <xsl:otherwise>
              <xsl:variable name="nFeatureMembers" select="count($response//sf:LinkedFeature)"/>
                          <xsl:if test="$nFeatureMembers = 0">
                                <ctl:message>[FAILURE] Expected at least one sf:LinkedFeature feature member in the response (<xsl:value-of select="$nFeatureMembers"/> included)</ctl:message>
                                <ctl:fail/>
                          </xsl:if>
                          <!-- construct sequence containing all feature nodes -->
                          <xsl:for-each select="$response//gml:featureMember/* | $response//gml:featureMembers/*">
                                <xsl:if test="not(gml:name = 'name-f206')">
                                  <ctl:message>[FAILURE] Included feature does not match expected query result; gml:name != "name-f206" (where feature id = <xsl:value-of select="./@gml:id"/>)</ctl:message>
                                  <ctl:fail/>
                                </xsl:if>
                                <xsl:if test="not(sf:reference/sf:LinkedFeature/gml:name = 'name-f207')">
                                  <ctl:message>[FAILURE] Expected resolved XLink element, with gml:name = "name-f207", was not found (where feature id = <xsl:value-of select="./@gml:id"/>)</ctl:message>
                                  <ctl:fail/>
                                </xsl:if>
                                <xsl:if test="sf:reference/@xlink:href">
                                  <ctl:message>[FAILURE] XLink locator attribute was not removed from link element (where feature id = <xsl:value-of select="./@gml:id"/>)</ctl:message>
                                  <ctl:fail/>
                                </xsl:if>
                                <xsl:if test="not(sf:reference/comment())">
                                  <ctl:message>[FAILURE] Missing comment in link element (should indicate target href)</ctl:message>
                                  <ctl:fail/>
                                </xsl:if>
                                <xsl:if test="xsd:integer($LocalTraverseXlinkScope) gt 2">
                                        <xsl:if test="not(sf:reference/sf:LinkedFeature/sf:reference/sf:LinkedFeature/gml:name = 'name-f210')">
                                          <ctl:message>[FAILURE] Expected resolved XLink element, with gml:name = "name-f210", was not found (where feature id = <xsl:value-of select="./sf:reference/sf:LinkedFeature/@gml:id"/>)</ctl:message>
                                          <ctl:fail/>
                                        </xsl:if>
                                        <xsl:if test="not(count(sf:reference/sf:LinkedFeature/sf:reference/sf:LinkedFeature/sf:reference/*) = 0)">
                                          <ctl:message>[FAILURE] XLink element was erroneously resolved at depth = 3 (where feature id = <xsl:value-of select="./@gml:id"/>)</ctl:message>
                                          <ctl:fail/>
                                        </xsl:if>
                                        <xsl:if test="sf:reference/sf:LinkedFeature/sf:reference/@xlink:href">
                                          <ctl:message>[FAILURE] XLink locator attribute was not removed from link element (where feature id = <xsl:value-of select="./sf:reference/sf:LinkedFeature/@gml:id"/>)</ctl:message>
                                          <ctl:fail/>
                                        </xsl:if>
                                        <xsl:if test="not(sf:reference/sf:LinkedFeature/sf:reference/comment())">
                                          <ctl:message>[FAILURE] Missing comment in link element (should indicate target href)</ctl:message>
                                          <ctl:fail/>
                                        </xsl:if>
                                </xsl:if>
                          </xsl:for-each>
                        </xsl:otherwise>
                </xsl:choose>
          </ctl:code>
        </ctl:test>

    <ctl:test name="wfs:GetFeature.XLink-POST-XML-8">
      <ctl:param name="wfs.GetFeature.post.url"/>
      <ctl:param name="LocalTraverseXlinkScope"/>
      <ctl:assertion>An XLink reference is processed only if its domain (as indicated
        by the authority component of the @xlink:href value) is supported; otherwise
        an exception must be reported. The capabilities document must indicate
        whether local and/or remote domains are supported using the
        LocalTraverseXlinkScope and RemoteTraverseXlinkScope constraints.</ctl:assertion>
      <ctl:comment>Confirm that an exception is generated with the appropriate code (unsupported remote XLink).</ctl:comment>
      <ctl:link title="ATC: XLink resolution - Domain">docs/ats.html#XLinkResolution-Domain</ctl:link>
          <ctl:code>
            <xsl:variable name="response">
                                <ctl:request>
                                        <ctl:url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </ctl:url>
                                        <ctl:method>POST</ctl:method>
                                    <ctl:body>
<wfs:GetFeature version="1.1.0" service="WFS" traverseXlinkDepth="*">
  <wfs:Query typeName="sf:LinkedFeature">
    <ogc:Filter xmlns:ogc="http://www.opengis.net/ogc">
          <ogc:PropertyIsEqualTo>
                <ogc:PropertyName>gml:name</ogc:PropertyName>
                <ogc:Literal>name-f208</ogc:Literal>
          </ogc:PropertyIsEqualTo>
        </ogc:Filter>
  </wfs:Query>
</wfs:GetFeature>
                                        </ctl:body>
                                        <tep:XMLValidatingParser.OWS/>
                                </ctl:request>
                </xsl:variable>

                <xsl:choose>
                        <xsl:when test="not($response/*)">
                        <ctl:message>[FAILURE] Missing or invalid response entity.</ctl:message>
                                <ctl:fail/>
                        </xsl:when>
                        <xsl:otherwise>
                          <ctl:call-test name="ctl:SchematronValidatingParser">
                                <ctl:with-param name="doc" select="$response"/>
                                <ctl:with-param name="schema">sch/ows/1.0.0/ExceptionReport.sch</ctl:with-param>
                                <ctl:with-param name="phase">NoApplicableCodePhase</ctl:with-param>
                          </ctl:call-test>
                    </xsl:otherwise>
                </xsl:choose>
          </ctl:code>
        </ctl:test>

    <ctl:test name="wfs:GetFeature.XLink-POST-XML-9">
      <ctl:param name="wfs.GetFeature.post.url"/>
      <ctl:param name="LocalTraverseXlinkScope"/>
      <ctl:assertion>All XLink elements in a GetFeature response must be resolved
      according to the value of the traverseXlinkDepth request parameter.</ctl:assertion>
      <ctl:comment>XLinks must be resolved to the depth specified by the value of the @traverseXlinkDepth attribute (for all Xlink properties).</ctl:comment>
      <ctl:link title="ATC: GetFeature - Non-selective XLink resolution">docs/ats.html#GetFeature-NonSelectiveXLinkResolution</ctl:link>
          <ctl:code>
            <xsl:variable name="response">
                                <ctl:request>
                                        <ctl:url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </ctl:url>
                                        <ctl:method>POST</ctl:method>
                                    <ctl:body>
<wfs:GetFeature version="1.1.0" service="WFS" traverseXlinkDepth="1">
        <wfs:Query typeName="sf:LinkedFeature">
                <ogc:Filter xmlns:ogc="http://www.opengis.net/ogc">
                        <ogc:PropertyIsEqualTo>
                                <ogc:PropertyName>gml:name</ogc:PropertyName>
                                <ogc:Literal>name-f204</ogc:Literal>
                        </ogc:PropertyIsEqualTo>
                </ogc:Filter>
        </wfs:Query>
</wfs:GetFeature>
                                        </ctl:body>
                                        <tep:XMLValidatingParser.GMLSF2/>
                                </ctl:request>
                </xsl:variable>

                <xsl:choose>
                        <xsl:when test="not($response/*)">
                        <ctl:message>[FAILURE] Missing or invalid response entity.</ctl:message>
                                <ctl:fail/>
                        </xsl:when>
                        <xsl:otherwise>
                          <xsl:variable name="nFeatureMembers" select="count($response//sf:LinkedFeature)"/>
                          <xsl:if test="$nFeatureMembers = 0">
                                <ctl:message>[FAILURE] Expected at least one sf:LinkedFeature feature member in the response (<xsl:value-of select="$nFeatureMembers"/> included)</ctl:message>
                                <ctl:fail/>
                          </xsl:if>
                          <!-- construct sequence containing all feature nodes -->
                          <xsl:for-each select="$response//gml:featureMember/* | $response//gml:featureMembers/*">
                                <xsl:if test="not(gml:name = 'name-f204')">
                                  <ctl:message>[FAILURE] Included feature does not match expected query result; gml:name != "name-f204" (where feature id = <xsl:value-of select="./@gml:id"/>)</ctl:message>
                                  <ctl:fail/>
                                </xsl:if>
                                <xsl:if test="not(sf:reference/sf:LinkedFeature/gml:name = 'name-f201')">
                                  <ctl:message>[FAILURE] Expected resolved XLink element, with gml:name = "name-f201", was not found (where feature id = <xsl:value-of select="./@gml:id"/>)</ctl:message>
                                  <ctl:fail/>
                                </xsl:if>
                                <xsl:if test="not(sf:extent/gml:MultiPoint/gml:pointMember/gml:Point/gml:description = 'description-g003')">
                                  <ctl:message>[FAILURE] Expected resolved XLink element, with gml:description = "description-g003", was not found (where feature id = <xsl:value-of select="./@gml:id"/>)</ctl:message>
                                  <ctl:fail/>
                                </xsl:if>
                                <xsl:if test="not(count(sf:extent/gml:MultiPoint/gml:pointMember/gml:Point) = 2)">
                                  <ctl:message>[FAILURE] Expected resolved XLink element was not found, expected 2 gml:Point elements (where feature id = <xsl:value-of select="./@gml:id"/>)</ctl:message>
                                  <ctl:fail/>
                                </xsl:if>
                          </xsl:for-each>
                        </xsl:otherwise>
                </xsl:choose>
          </ctl:code>
        </ctl:test>

    <ctl:test name="wfs:GetFeature.XLink-POST-XML-10">
      <ctl:param name="wfs.GetFeature.post.url"/>
      <ctl:param name="LocalTraverseXlinkScope"/>
      <ctl:assertion>An XLink element (feature property) specified by the value of the
        &lt;wfs:XlinkPropertyName&gt; element must be processed according to the
        values of the traverseXlinkDepth and traverseXlinkExpiry parameters specified
        either (1) for this feature property, or (2) globally for the request as a whole.</ctl:assertion>
      <ctl:comment>XLinks must be resolved to the depth specified by the value of the @traverseXlinkDepth attribute (specify a given Xlink property, local depth).</ctl:comment>
      <ctl:link title="ATC: GetFeature - Selective XLink resolution">docs/ats.html#GetFeature-SelectiveXLinkResolution</ctl:link>
          <ctl:code>
            <xsl:variable name="response">
                                <ctl:request>
                                        <ctl:url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </ctl:url>
                                        <ctl:method>POST</ctl:method>
                                    <ctl:body>
<wfs:GetFeature version="1.1.0" service="WFS" traverseXlinkDepth="0">
        <wfs:Query typeName="sf:LinkedFeature">
          <wfs:PropertyName>gml:name</wfs:PropertyName>
                <wfs:XlinkPropertyName traverseXlinkDepth="1">sf:extent</wfs:XlinkPropertyName>
                <ogc:Filter xmlns:ogc="http://www.opengis.net/ogc">
                        <ogc:PropertyIsEqualTo>
                                <ogc:PropertyName>gml:name</ogc:PropertyName>
                                <ogc:Literal>name-f205</ogc:Literal>
                        </ogc:PropertyIsEqualTo>
                </ogc:Filter>
        </wfs:Query>
</wfs:GetFeature>
                                        </ctl:body>
                                        <tep:XMLValidatingParser.GMLSF2/>
                                </ctl:request>
                </xsl:variable>

                <xsl:choose>
                        <xsl:when test="not($response/*)">
                        <ctl:message>[FAILURE] Missing or invalid response entity.</ctl:message>
                                <ctl:fail/>
                        </xsl:when>
                        <xsl:otherwise>
              <xsl:variable name="nFeatureMembers" select="count($response//sf:LinkedFeature)"/>
                          <xsl:if test="$nFeatureMembers = 0">
                                <ctl:message>[FAILURE] Expected at least one sf:LinkedFeature feature member in the response (<xsl:value-of select="$nFeatureMembers"/> included)</ctl:message>
                                <ctl:fail/>
                          </xsl:if>
                          <!-- construct sequence containing all feature nodes -->
                          <xsl:for-each select="$response//gml:featureMember/* | $response//gml:featureMembers/*">
                                <xsl:if test="not(gml:name = 'name-f205')">
                                  <ctl:message>[FAILURE] Included feature does not match expected query result; gml:name != "name-f205" (where feature id = <xsl:value-of select="./@gml:id"/>)</ctl:message>
                                  <ctl:fail/>
                                </xsl:if>
                                <xsl:if test="not(count(sf:reference/*) = 0)">
                                  <ctl:message>[FAILURE] XLink element was erroneously resolved (where feature id = <xsl:value-of select="./@gml:id"/>)</ctl:message>
                                  <ctl:fail/>
                                </xsl:if>
                                <xsl:if test="not(sf:reference/@xlink:href)">
                                  <ctl:message>[FAILURE] XLink locator attribute was erroneously removed from link element (where feature id = <xsl:value-of select="./@gml:id"/>)</ctl:message>
                                  <ctl:fail/>
                                </xsl:if>
                                <xsl:if test="not(sf:extent/gml:Polygon/gml:name = 'MU1')">
                                  <ctl:message>[FAILURE] Expected resolved XLink element, with gml:name = "MU1", was not found (where feature id = <xsl:value-of select="./@gml:id"/>)</ctl:message>
                                  <ctl:fail/>
                                </xsl:if>
                                <xsl:if test="sf:extent/@xlink:href">
                                  <ctl:message>[FAILURE] XLink locator attribute was not removed from link element (where feature id = <xsl:value-of select="./@gml:id"/>)</ctl:message>
                                  <ctl:fail/>
                                </xsl:if>
                                <xsl:if test="not(sf:extent/comment())">
                                  <ctl:message>[FAILURE] Missing comment in link element (should indicate target href)</ctl:message>
                                  <ctl:fail/>
                                </xsl:if>
                          </xsl:for-each>
                        </xsl:otherwise>
                </xsl:choose>
          </ctl:code>
        </ctl:test>

  <ctl:test name="wfs:GetFeature.XLink-POST-XML-11">
      <ctl:param name="wfs.GetFeature.post.url"/>
      <ctl:param name="LocalTraverseXlinkScope"/>
      <ctl:assertion>An XLink element (feature property) specified by the value of the
        &lt;wfs:XlinkPropertyName&gt; element must be processed according to the
        values of the traverseXlinkDepth and traverseXlinkExpiry parameters specified
        either (1) for this feature property, or (2) globally for the request as a whole.</ctl:assertion>
      <ctl:comment>XLinks must be resolved to the depth specified by the value of the @traverseXlinkDepth attribute (specify a given Xlink property, local depth ovverides global depth).</ctl:comment>
      <ctl:link title="ATC: GetFeature - Selective XLink resolution">docs/ats.html#GetFeature-SelectiveXLinkResolution</ctl:link>
          <ctl:code>
            <xsl:variable name="response">
                                <ctl:request>
                                        <ctl:url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </ctl:url>
                                        <ctl:method>POST</ctl:method>
                                    <ctl:body>
<wfs:GetFeature version="1.1.0" service="WFS" traverseXlinkDepth="1">
        <wfs:Query typeName="sf:LinkedFeature">
          <wfs:PropertyName>gml:name</wfs:PropertyName>
                <wfs:XlinkPropertyName traverseXlinkDepth="2">sf:reference</wfs:XlinkPropertyName>
                <ogc:Filter xmlns:ogc="http://www.opengis.net/ogc">
                        <ogc:PropertyIsEqualTo>
                                <ogc:PropertyName>gml:name</ogc:PropertyName>
                                <ogc:Literal>name-f210</ogc:Literal>
                        </ogc:PropertyIsEqualTo>
                </ogc:Filter>
        </wfs:Query>
</wfs:GetFeature>
                                        </ctl:body>
                                        <tep:XMLValidatingParser.GMLSF2/>
                                </ctl:request>
                </xsl:variable>

                <xsl:choose>
                        <xsl:when test="not($response/*)">
                        <ctl:message>[FAILURE] Missing or invalid response entity.</ctl:message>
                                <ctl:fail/>
                        </xsl:when>
                        <xsl:otherwise>
                          <xsl:variable name="nFeatureMembers" select="count($response//sf:LinkedFeature)"/>
                          <xsl:if test="$nFeatureMembers = 0">
                                <ctl:message>[FAILURE] Expected at least one sf:LinkedFeature feature in response (<xsl:value-of select="$nFeatureMembers"/> included)</ctl:message>
                                <ctl:fail/>
                          </xsl:if>
                          <!-- construct sequence containing all feature nodes -->
                          <xsl:for-each select="$response//gml:featureMember/* | $response//gml:featureMembers/*">
                                <xsl:if test="not(gml:name = 'name-f210')">
                                  <ctl:message>[FAILURE] Included feature does not match expected query result; gml:name != "name-f210" (where feature id = <xsl:value-of select="./@gml:id"/>)</ctl:message>
                                  <ctl:fail/>
                                </xsl:if>
                                <xsl:if test="not(sf:reference/sf:LinkedFeature/gml:name = 'name-f206')">
                                  <ctl:message>[FAILURE] Expected resolved XLink element, with gml:name = "name-f206", was not found (where feature id = <xsl:value-of select="./@gml:id"/>)</ctl:message>
                                  <ctl:fail/>
                                </xsl:if>
                                <xsl:if test="sf:reference/@xlink:href">
                                  <ctl:message>[FAILURE] XLink locator attribute was not removed from link element (where feature id = <xsl:value-of select="./@gml:id"/>)</ctl:message>
                                  <ctl:fail/>
                                </xsl:if>
                                <xsl:if test="not(sf:reference/comment())">
                                  <ctl:message>[FAILURE] Missing comment in link element (should indicate target href)</ctl:message>
                                  <ctl:fail/>
                                </xsl:if>
                                <xsl:if test="xsd:integer($LocalTraverseXlinkScope) gt 2">
                                        <xsl:if test="not(sf:reference/sf:LinkedFeature/sf:reference/sf:LinkedFeature/gml:name = 'name-f207')">
                                          <ctl:message>[FAILURE] Expected resolved XLink element, with gml:name = "name-f207", was not found (where feature id = <xsl:value-of select="./sf:reference/sf:LinkedFeature/@gml:id"/>)</ctl:message>
                                          <ctl:fail/>
                                        </xsl:if>
                                        <xsl:if test="not(count(sf:reference/sf:LinkedFeature/sf:reference/sf:LinkedFeature/sf:reference/*) = 0)">
                                          <ctl:message>[FAILURE] XLink element was erroneously resolved at depth = 3 (where feature id = <xsl:value-of select="./@gml:id"/>)</ctl:message>
                                          <ctl:fail/>
                                        </xsl:if>
                                        <xsl:if test="sf:reference/sf:LinkedFeature/sf:reference/@xlink:href">
                                          <ctl:message>[FAILURE] XLink locator attribute was not removed from link element (where feature id = <xsl:value-of select="./sf:reference/sf:LinkedFeature/@gml:id"/>)</ctl:message>
                                          <ctl:fail/>
                                        </xsl:if>
                                        <xsl:if test="not(sf:reference/sf:LinkedFeature/sf:reference/comment())">
                                          <ctl:message>[FAILURE] Missing comment in link element (should indicate target href)</ctl:message>
                                          <ctl:fail/>
                                        </xsl:if>
                                </xsl:if>
                          </xsl:for-each>
                        </xsl:otherwise>
                </xsl:choose>
          </ctl:code>
        </ctl:test>

        <ctl:test name="wfs:GetFeature-traverseXlinkExpiry">
                <ctl:param name="CAPABILITIES"/>
                <ctl:assertion>When a GetFeature request with XLink elements is not resolved in less time than the traverseXlinkExpiry, an exception is returned.</ctl:assertion>
                <ctl:comment>use expiry=0 to ensure failure</ctl:comment>
        <ctl:link>OGC 04-094, 11.2.1, p.56</ctl:link>
                <ctl:code>
                        <xsl:choose>
                    <xsl:when test="not($CAPABILITIES/wfs:FeatureTypeList/wfs:FeatureType[wfs:Name='sf:LinkedFeature'])">
                                        <ctl:message>sf:LinkedFeature does not exist</ctl:message>
                    </xsl:when>
                    <xsl:otherwise>
                                        <xsl:variable name="RESPONSE">
                                                <ctl:request>
                                                        <ctl:url>
                                                                <xsl:value-of select="$CAPABILITIES/ows:OperationsMetadata/ows:Operation[@name='GetFeature']/ows:DCP/ows:HTTP/ows:Get/@xlink:href"/>
                                                        </ctl:url>
                                                        <ctl:method>get</ctl:method>
                                                        <ctl:param name="request">GetFeature</ctl:param>
                                                        <ctl:param name="service">WFS</ctl:param>
                                                        <ctl:param name="version">1.1.0</ctl:param>
                                                        <param name="typename">
                                                                <xsl:value-of select="wfs:encode($CAPABILITIES/wfs:FeatureTypeList/wfs:FeatureType[wfs:Name='sf:LinkedFeature']/wfs:Name,'UTF-8')"/>
                                                        </param>
                                                        <ctl:param name="traverseXlinkExpiry">0</ctl:param>
                                            <parsers:HTTPParser>
                                               <parsers:parse>
                                                  <parsers:HTTPParser/>
                                               </parsers:parse>
                                            </parsers:HTTPParser>
                                                </ctl:request>
                                        </xsl:variable>
                                        <xsl:if test="not($RESPONSE//ows:Exception/*)">
                                                <ctl:fail/>
                                        </xsl:if>

                                </xsl:otherwise>
                        </xsl:choose>
                </ctl:code>
        </ctl:test>

</ctl:package>

   <ctl:test name="wfs:XLinkTests">
      <ctl:param name="wfs.GetCapabilities.document"/>
      <ctl:assertion>The implementation under test satisfies all applicable
      assertions pertaining to the XLink conformance class.</ctl:assertion>
      <ctl:code>
          <ctl:call-test name="wfs:GetGmlObject-POST-XML">
            <ctl:with-param name="wfs.capabilities.doc" select="$wfs.GetCapabilities.document"/>
          </ctl:call-test>
          <ctl:call-test name="wfs:GetFeature.XLink-POST-XML">
            <ctl:with-param name="wfs.capabilities.doc" select="$wfs.GetCapabilities.document"/>
          </ctl:call-test>
      </ctl:code>
   </ctl:test>
</ctl:package>
	
	<ctl:suite name="ctl:wfs-1.1.0-compliance-suite" version="1.1.0.2-M1">
		  <ctl:title>WFS 1.1.0 Compliance Test Suite (1.1.0.2-M1)</ctl:title>
		  <ctl:description>Verifies that a WFS 1.1.0 implementation complies with a given conformance class.</ctl:description>
          <ctl:link>docs/wfs/1.1.0/</ctl:link>
          <ctl:link>data/data-wfs-1.1.0.zip</ctl:link>
		  <ctl:starting-test>wfs:wfs-main</ctl:starting-test>
           <ctl:form>
              <body xmlns="">
                 <h2>Compliance test suite for Web Feature Service (WFS) 1.1.0</h2>
                 <h3>Service metadata</h3>
                 <p>
                 Please provide a URL from which a capabilities document can 
                 be retrieved. Modify the URL template below to specify the 
                 location of an OGC capabilities document for the WFS implementation 
                 under test (this can refer to a static document or to a service endpoint).
                 </p>
                 <blockquote>
                    <table border="1" padding="4" bgcolor="#00ffff">
                       <tr>
                          <td align="left">Capabilities URL:</td>                        
                          <td align="center">
                             <input name="capabilities-url" size="128" type="text" value="http://hostname:port/path?query"/>
                          </td>
                       </tr>
                    </table>
                 </blockquote>
			  
                 <h3>Supported conformance classes</h3>
                 <p>
                 A conformance class denotes a set of functional capabilities provided by the WFS under test.
                 </p>
                 <blockquote>
                    <table border="1" frame="box" padding="4" bgcolor="#00ffff">
                       <tr>
                          <td align="center"/>
                          <td align="left"><strong>WFS-Basic</strong> (Required) : Implements <em>GetCapabilities</em>, <em>DescribeFeatureType</em> and <em>GetFeature</em> requests</td>
                       </tr>
                       <tr>
                          <td align="center">
                             <input name="wfs-transaction" type="checkbox" value="Transaction"/>
                          </td>
                          <td align="left"><strong>WFS-Transaction</strong> : Implements the <em>Transaction</em> request (<em>LockFeature</em> and <em>GetFeatureWithLock</em> are optional)</td>
                       </tr>
                       <tr>
                          <td align="center">
                             <input name="wfs-xlink" type="checkbox" value="XLink"/>
                          </td>
                          <td align="left"><strong>WFS-XLink</strong> : Implements the <em>GetGmlObject</em> request and supports (local) XLink processing in GetFeature requests.</td>
                       </tr>
                    </table>
                 </blockquote>
			  <br/>
			  
                 <h3>GML Simple Features (GMLSF) compliance level</h3>
                 <p>
                 This indicates the scope of GML 3.1 support, as documented in OGC 06-049.  
                 Test data for levels SF-0 and SF-1 are currently available.  This setting is 
                 ignored when assessing XLink conformance because it requires support 
                 at the SF-2 level.
                 </p>
                 <blockquote>
                    <table border="1" padding="4" bgcolor="#00ffff">
                       <tr>
                          <td align="center">
                             <input name="profile" type="radio" value="sf-0" checked="checked"/>
                          </td>
                          <td align="left">SF-0 : Level 0 (only simple non-spatial property types; Curve and Surface geometries are excluded)</td>
                       </tr>
                       <tr>
                          <td align="center">
                             <input name="profile" type="radio" value="sf-1"/>
                          </td>
                          <td align="left">SF-1 : Level 1 (complex non-spatial property types, plus Curve and Surface geometries)</td>
                       </tr>
                    </table>
                 </blockquote>
			  <p>
                 <div bgcolor="#ffffcc"><strong> WARNING </strong> Don't forget to add the test data!</div>
                 </p>
                 <br/>
                 <input type="submit" value="Start"/>
              </body>
           </ctl:form>

	</ctl:suite>

   <ctl:test name="wfs:wfs-main">
      <ctl:param name="capabilities-url"/>
      <ctl:param name="wfs-transaction"/>
      <ctl:param name="wfs-xlink"/>
      <ctl:param name="profile"/>
      <ctl:assertion>WFS 1.1.0 Tests</ctl:assertion>
      <ctl:code>

		<!-- Get user input: -->
		<xsl:variable name="wfs.GetCapabilities.get.url" select="$capabilities-url"/>
		<xsl:variable name="gmlsf.profile.level" select="$profile"/>

		<!--TODO: Get GMLSF profile level from DescribeFeatureType and XPath expression (gmlsf conformance level 0 or 1) rather than user input-->

		<!-- Attempt to retrieve capabilities document -->
 
		<xsl:variable name="wfs.GetCapabilities.document">
			<ctl:request>
				<ctl:url>
					<xsl:value-of select="$wfs.GetCapabilities.get.url"/>
				</ctl:url>
				<ctl:method>GET</ctl:method>
			</ctl:request>
		</xsl:variable>	

		 <!-- Call the readiness tests, which then call the conformance class tests -->
		 <xsl:choose>
				<xsl:when test="not($wfs.GetCapabilities.document//wfs:WFS_Capabilities)">
					<ctl:message>FAILURE: Did not receive a wfs:WFS_Capabilities document! Skipping remaining tests.</ctl:message>	
					<ctl:fail/>
				</xsl:when>
				<xsl:otherwise>
					<!-- Ingest initial test data -->
					<!-- <xsl:variable name="ingest.data" select="$wfs-transaction"/>
					<xsl:if test="string-length($ingest.data) gt 0">				
						<ctl:call-test name="wfs:ingest-test-data">
							<ctl:with-param name="wfs.GetCapabilities.document" select="$wfs.GetCapabilities.document"/>
							<ctl:with-param name="gmlsf.profile.level" select="$gmlsf.profile.level"/>
						</ctl:call-test>
					</xsl:if> -->
					<ctl:call-test name="wfs:readiness-tests">
						<ctl:with-param name="wfs.GetCapabilities.document" select="$wfs.GetCapabilities.document"/>														
						<ctl:with-param name="wfs-transaction" select="$wfs-transaction"/>
                        <ctl:with-param name="wfs-xlink" select="$wfs-xlink"/>
						<ctl:with-param name="gmlsf.profile.level" select="$gmlsf.profile.level"/>	
					</ctl:call-test>
 					
				</xsl:otherwise>
		 </xsl:choose>
      </ctl:code>
   </ctl:test>	

	<!--<ctl:test name="wfs:ingest-test-data">
		<ctl:param name="wfs.GetCapabilities.document"/>
		<ctl:param name="gmlsf.profile.level"/>	
		<ctl:assertion>Ingests the mandatory test data for use by the test suite.</ctl:assertion>
		<ctl:comment>Uses Transaction Inserts to load all WFS 1.1.0 test data into a service. The data must be relative to this file in "./data/wfs/1.1.0/sf-X/dataset-sfX-insert.xml", where "X" is the GMLSF level.</ctl:comment>
		<ctl:code>
			
		  <xsl:variable name="wfs.Transaction.post.url">
			<xsl:value-of select="$wfs.GetCapabilities.document//ows:OperationsMetadata/ows:Operation[@name='Transaction']/ows:DCP/ows:HTTP/ows:Post/@xlink:href"/>
		  </xsl:variable>

			<xsl:variable name="transaction.response.1">
				<ctl:request>
					<ctl:url>
						<xsl:value-of select="$wfs.Transaction.post.url"/>
					</ctl:url>
					<ctl:method>POST</ctl:method>
					<ctl:body>
						<xi:include href="../data/sf-0/dataset-sf0-insert.xml"/>
					</ctl:body>
				</ctl:request>
			</xsl:variable>
			
			<xsl:variable name="transaction.response.2">
				<ctl:request>
					<ctl:url>
						<xsl:value-of select="$wfs.Transaction.post.url"/>
					</ctl:url>
					<ctl:method>POST</ctl:method>
					<ctl:body>
						<xi:include href="../data/sf-1/dataset-sf1-insert.xml"/>
					</ctl:body>
				</ctl:request>
			</xsl:variable>
			
			<xsl:variable name="transaction.response.3">
				<ctl:request>
					<ctl:url>
						<xsl:value-of select="$wfs.Transaction.post.url"/>
					</ctl:url>
					<ctl:method>POST</ctl:method>
					<ctl:body>
						<xi:include href="../data/sf-2/dataset-sf2-insert.xml"/>
					</ctl:body>
				</ctl:request>
			</xsl:variable>

		</ctl:code>
	</ctl:test>-->
	
</ctl:package>