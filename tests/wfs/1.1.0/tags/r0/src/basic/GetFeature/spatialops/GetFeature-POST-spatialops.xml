<?xml version="1.0" encoding="UTF-8"?>
<ctl:package
 xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
 xmlns:ctl="http://www.occamlab.com/ctl"
 xmlns:parsers="http://www.occamlab.com/te/parsers"
 xmlns:p="http://teamengine.sourceforge.net/parsers"
 xmlns:saxon="http://saxon.sf.net/"
 xmlns:wfs="http://www.opengis.net/wfs"
 xmlns:gml="http://www.opengis.net/gml"
 xmlns:ows="http://www.opengis.net/ows"
 xmlns:xlink="http://www.w3.org/1999/xlink" 
 xmlns:xi="http://www.w3.org/2001/XInclude">

    <ctl:test name="wfs:run-GetFeature-POST-spatialops">
      <ctl:param name="wfs.GetCapabilities.document"/>
      <ctl:assertion>Run test group for GetFeature requests (POST) with spatial operators.</ctl:assertion>
      <ctl:code>
		<xsl:variable name="wfs.GetFeature.post.url">
			<xsl:value-of select="$wfs.GetCapabilities.document//ows:OperationsMetadata/ows:Operation[@name='GetFeature']/ows:DCP/ows:HTTP/ows:Post/@xlink:href"/>
		</xsl:variable>
        
        <xsl:if test="$wfs.GetCapabilities.document//ogc:Spatial_Capabilities/ogc:SpatialOperators/ogc:SpatialOperator[@name='Disjoint']">
          <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc200.1">
			<ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
		  </ctl:call-test>
          <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc200.2">
			<ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
		  </ctl:call-test>
          <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc200.3">
			<ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
		  </ctl:call-test>
          <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc200.4">
			<ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
		  </ctl:call-test>
        </xsl:if>
        <xsl:if test="$wfs.GetCapabilities.document//ogc:Spatial_Capabilities/ogc:SpatialOperators/ogc:SpatialOperator[@name='Intersects']">
          <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc201.1">
			<ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
		  </ctl:call-test>
          <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc201.2">
			<ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
		  </ctl:call-test>
          <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc201.3">
			<ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
		  </ctl:call-test>
          <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc202.1">
			<ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
		  </ctl:call-test>
        </xsl:if>
        <xsl:if test="$wfs.GetCapabilities.document//ogc:Spatial_Capabilities/ogc:SpatialOperators/ogc:SpatialOperator[@name='Within']">
          <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc203.1">
			<ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
		  </ctl:call-test>
          <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc203.2">
			<ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
		  </ctl:call-test>
          <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc203.3">
			<ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
		  </ctl:call-test>
        </xsl:if>
        <xsl:if test="$wfs.GetCapabilities.document//ogc:Spatial_Capabilities/ogc:SpatialOperators/ogc:SpatialOperator[@name='Overlaps']">
          <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc204.1">
			<ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
		  </ctl:call-test>
          <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc204.2">
			<ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
		  </ctl:call-test>
          <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc204.3">
			<ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
		  </ctl:call-test>
          <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc204.4">
			<ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
		  </ctl:call-test>
        </xsl:if>
        <xsl:if test="$wfs.GetCapabilities.document//ogc:Spatial_Capabilities/ogc:SpatialOperators/ogc:SpatialOperator[@name='Equals']">
          <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc205.1">
			<ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
		  </ctl:call-test>
          <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc205.2">
			<ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
		  </ctl:call-test>
          <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc205.3">
			<ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
		  </ctl:call-test>		  
        </xsl:if>
        <xsl:if test="$wfs.GetCapabilities.document//ogc:Spatial_Capabilities/ogc:SpatialOperators/ogc:SpatialOperator[@name='Contains']">
          <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc206.1">
			<ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
		  </ctl:call-test>
          <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc206.2">
			<ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
		  </ctl:call-test>
          <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc206.3">
			<ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
		  </ctl:call-test>
        </xsl:if>                
        <xsl:if test="$wfs.GetCapabilities.document//ogc:Spatial_Capabilities/ogc:SpatialOperators/ogc:SpatialOperator[@name='Touches']">
          <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc207.1">
			<ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
		  </ctl:call-test>
          <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc207.2">
			<ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
		  </ctl:call-test>
          <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc207.3">
			<ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
		  </ctl:call-test>
        </xsl:if>
        <xsl:if test="$wfs.GetCapabilities.document//ogc:Spatial_Capabilities/ogc:SpatialOperators/ogc:SpatialOperator[@name='Crosses']">
          <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc208.1">
			<ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
		  </ctl:call-test>
          <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc208.2">
			<ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
		  </ctl:call-test>
          <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc208.3">
			<ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
		  </ctl:call-test>
        </xsl:if>
      </ctl:code>
    </ctl:test>
    
    <ctl:test name="wfs:wfs-1.1.0-Basic-GetFeature-tc200.1">
      <ctl:param name="wfs.GetFeature.post.url"/>
      <ctl:assertion>
      The response to a GetFeature request that includes an ogc:Filter having a
      Disjoint spatial predicate must include only features that are disjoint 
      with respect to the provided geometry value.
      </ctl:assertion>
      <ctl:link>wfs-1.1.0-Basic-GetFeature-atc200</ctl:link>
      <ctl:code>
		<xsl:variable name="response">
			<ctl:request>
				<ctl:url>
					<xsl:value-of select="$wfs.GetFeature.post.url"/>
				</ctl:url>
				<ctl:method>POST</ctl:method>
			    <ctl:body>
					<xi:include href="wfs-1.1.0-Basic-GetFeature-tc200.1.body.xml"/>
				</ctl:body>
				<p:XMLValidatingParser.WFS/>
			</ctl:request>
		</xsl:variable>
		<xsl:choose>
			<xsl:when test="not($response/*)">
		        <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
				<ctl:fail/>
		    </xsl:when>
  		    <xsl:otherwise>
              <xsl:variable name="featureCount" select="count($response//sf:PrimitiveGeoFeature)" />
              <xsl:if test="$featureCount gt 0">
                <ctl:message>FAILURE: Expected empty feature collection (<xsl:value-of select="$featureCount"/> features included)</ctl:message>
                <ctl:fail/>
              </xsl:if>
			</xsl:otherwise>
		</xsl:choose>
	  </ctl:code>
    </ctl:test>
    
    <ctl:test name="wfs:wfs-1.1.0-Basic-GetFeature-tc200.2">
      <ctl:param name="wfs.GetFeature.post.url"/>
      <ctl:assertion>
      The response to a GetFeature request that includes an ogc:Filter having a
      Disjoint spatial predicate must include only features that are disjoint 
      with respect to the provided geometry value.
      </ctl:assertion>
      <ctl:link>wfs-1.1.0-Basic-GetFeature-atc200</ctl:link>
      <ctl:code>
		<xsl:variable name="response">
			<ctl:request>
				<ctl:url>
					<xsl:value-of select="$wfs.GetFeature.post.url"/>
				</ctl:url>
				<ctl:method>POST</ctl:method>
			    <ctl:body>
					<xi:include href="wfs-1.1.0-Basic-GetFeature-tc200.2.body.xml"/>
				</ctl:body>
				<p:XMLValidatingParser.WFS/>
			</ctl:request>
		</xsl:variable>
		<xsl:choose>
			<xsl:when test="not($response/*)">
		        <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
				<ctl:fail/>
		    </xsl:when>
  		    <xsl:otherwise>
              <xsl:variable name="featureCount" select="count($response//sf:EntitéGénérique)" />
              <xsl:if test="$featureCount lt 1">
                <ctl:message>FAILURE: Empty response</ctl:message>
                <ctl:fail/>
              </xsl:if>
              <xsl:if test="$response//sf:EntitéGénérique/gml:name != 'name-f007'">
                <ctl:message>FAILURE: Expected feature having gml:name="name-f007".</ctl:message>
                <ctl:fail/>
              </xsl:if>
			</xsl:otherwise>
		</xsl:choose>
	  </ctl:code>
    </ctl:test>
    
    <ctl:test name="wfs:wfs-1.1.0-Basic-GetFeature-tc200.3">
      <ctl:param name="wfs.GetFeature.post.url"/>
      <ctl:assertion>
      The response to a GetFeature request that includes an ogc:Filter having a
      Disjoint spatial predicate must include only features that are disjoint 
      with respect to the provided geometry value.
      </ctl:assertion>
      <ctl:link>wfs-1.1.0-Basic-GetFeature-atc200</ctl:link>
      <ctl:code>
		<xsl:variable name="response">
			<ctl:request>
				<ctl:url>
					<xsl:value-of select="$wfs.GetFeature.post.url"/>
				</ctl:url>
				<ctl:method>POST</ctl:method>
			    <ctl:body>
					<xi:include href="wfs-1.1.0-Basic-GetFeature-tc200.3.body.xml"/>
				</ctl:body>
				<p:XMLValidatingParser.WFS/>
			</ctl:request>
		</xsl:variable>
		<xsl:choose>
			<xsl:when test="not($response/*)">
		        <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
				<ctl:fail/>
		    </xsl:when>
  		    <xsl:otherwise>
              <xsl:variable name="featureCount" select="count($response//sf:AggregateGeoFeature)" />
              <xsl:if test="$featureCount lt 1">
                <ctl:message>FAILURE: Expected one or more sf:AggregateGeoFeature instances in response (<xsl:value-of select="$featureCount"/> features included)</ctl:message>
                <ctl:fail/>
              </xsl:if>
              <xsl:if test="$response//sf:AggregateGeoFeature/gml:name = 'name-f010'">
                <ctl:message>FAILURE: Unexpected feature in response (gml:name="name-f010").</ctl:message>
                <ctl:fail/>
              </xsl:if>
			</xsl:otherwise>
		</xsl:choose>
	  </ctl:code>
    </ctl:test>
    
    <ctl:test name="wfs:wfs-1.1.0-Basic-GetFeature-tc200.4">
      <ctl:param name="wfs.GetFeature.post.url"/>
      <ctl:assertion>
      The response to a GetFeature request having a spatial predicate that 
      includes an unsupported geometry operand must include an exception report.
      </ctl:assertion>
      <ctl:link>wfs-1.1.0-Basic-GetFeature-atc202</ctl:link>
      <ctl:code>
		<xsl:variable name="response">
			<ctl:request>
				<ctl:url>
					<xsl:value-of select="$wfs.GetFeature.post.url"/>
				</ctl:url>
				<ctl:method>POST</ctl:method>
			    <ctl:body>
					<xi:include href="wfs-1.1.0-Basic-GetFeature-tc200.4.body.xml"/>
				</ctl:body>
				<p:XMLValidatingParser.OWS />
			</ctl:request>
		</xsl:variable>
		<xsl:choose>
			<xsl:when test="not($response/*)">
		        <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
				<ctl:fail/>
		    </xsl:when>
  		    <xsl:otherwise>
                <ctl:call-test name="ctl:SchematronValidatingParser">
		            <ctl:with-param name="doc" select="$response" />
		            <ctl:with-param name="schema">sch/ows/1.0.0/ExceptionReport.sch</ctl:with-param>
		            <ctl:with-param name="phase">InvalidParameterValuePhase</ctl:with-param>
	            </ctl:call-test>
            </xsl:otherwise>
		</xsl:choose>
	  </ctl:code>
    </ctl:test>
    
    <ctl:test name="wfs:wfs-1.1.0-Basic-GetFeature-tc201.1">
      <ctl:param name="wfs.GetFeature.post.url"/>
      <ctl:assertion>
      The response to a GetFeature request that includes an ogc:Filter having 
      an Intersects spatial predicate must include only features that intersect 
      the given geometry value.
      </ctl:assertion>
      <ctl:link>wfs-1.1.0-Basic-GetFeature-atc201</ctl:link>
      <ctl:code>
		<xsl:variable name="response">
			<ctl:request>
				<ctl:url>
					<xsl:value-of select="$wfs.GetFeature.post.url"/>
				</ctl:url>
				<ctl:method>POST</ctl:method>
			    <ctl:body>
					<xi:include href="wfs-1.1.0-Basic-GetFeature-tc201.1.body.xml"/>
				</ctl:body>
				<p:XMLValidatingParser.WFS/>
			</ctl:request>
		</xsl:variable>
		<xsl:choose>
			<xsl:when test="not($response/*)">
		        <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
				<ctl:fail/>
		    </xsl:when>
  		    <xsl:otherwise>
              <xsl:variable name="featureCount" select="count($response//sf:PrimitiveGeoFeature)" />
              <xsl:if test="$featureCount lt 1">
                <ctl:message>FAILURE: Expected one or more sf:PrimitiveGeoFeature instances in response (<xsl:value-of select="$featureCount"/> features included)</ctl:message>
                <ctl:fail/>
              </xsl:if>
              <xsl:if test="$response//sf:PrimitiveGeoFeature/gml:name = 'name-f002'">
                <ctl:message>FAILURE: Unexpected feature in response (gml:name="name-f002").</ctl:message>
                <ctl:fail/>
              </xsl:if>
			</xsl:otherwise>
		</xsl:choose>
	  </ctl:code>
    </ctl:test>
    
    <ctl:test name="wfs:wfs-1.1.0-Basic-GetFeature-tc201.2">
      <ctl:param name="wfs.GetFeature.post.url"/>
      <ctl:assertion>
      The response to a GetFeature request that includes an ogc:Filter having 
      an Intersects spatial predicate must include only features that intersect 
      the given geometry value.
      </ctl:assertion>
      <ctl:link>wfs-1.1.0-Basic-GetFeature-atc201</ctl:link>
      <ctl:code>
		<xsl:variable name="response">
			<ctl:request>
				<ctl:url>
					<xsl:value-of select="$wfs.GetFeature.post.url"/>
				</ctl:url>
				<ctl:method>POST</ctl:method>
			    <ctl:body>
					<xi:include href="wfs-1.1.0-Basic-GetFeature-tc201.2.body.xml"/>
				</ctl:body>
				<p:XMLValidatingParser.WFS/>
			</ctl:request>
		</xsl:variable>
		<xsl:choose>
			<xsl:when test="not($response/*)">
		        <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
				<ctl:fail/>
		    </xsl:when>
  		    <xsl:otherwise>
              <xsl:variable name="featureCount" select="count($response//sf:EntitéGénérique)" />
              <xsl:if test="$featureCount lt 1">
                <ctl:message>FAILURE: Expected one or more sf:EntitéGénérique instances in response (<xsl:value-of select="$featureCount"/> features included)</ctl:message>
                <ctl:fail/>
              </xsl:if>
              <xsl:if test="$response//sf:EntitéGénérique/gml:name = 'name-f004'">
                <ctl:message>FAILURE: Unexpected feature in response (gml:name="name-f004").</ctl:message>
                <ctl:fail/>
              </xsl:if>
			</xsl:otherwise>
		</xsl:choose>
	  </ctl:code>
    </ctl:test>
    
    <ctl:test name="wfs:wfs-1.1.0-Basic-GetFeature-tc201.3">
      <ctl:param name="wfs.GetFeature.post.url"/>
      <ctl:assertion>
      The response to a GetFeature request that includes an ogc:Filter having 
      an Intersects spatial predicate must include only features that intersect 
      the given geometry value.
      </ctl:assertion>
      <ctl:link>wfs-1.1.0-Basic-GetFeature-atc201</ctl:link>
      <ctl:code>
		<xsl:variable name="response">
			<ctl:request>
				<ctl:url>
					<xsl:value-of select="$wfs.GetFeature.post.url"/>
				</ctl:url>
				<ctl:method>POST</ctl:method>
			    <ctl:body>
					<xi:include href="wfs-1.1.0-Basic-GetFeature-tc201.3.body.xml"/>
				</ctl:body>
				<p:XMLValidatingParser.WFS/>
			</ctl:request>
		</xsl:variable>
		<xsl:choose>
			<xsl:when test="not($response/*)">
		        <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
				<ctl:fail/>
		    </xsl:when>
  		    <xsl:otherwise>
              <xsl:variable name="featureCount" select="count($response//sf:AggregateGeoFeature)" />
              <xsl:if test="$featureCount != 1">
                <ctl:message>FAILURE: Expected one sf:AggregateGeoFeature instance in response (<xsl:value-of select="$featureCount"/> features included)</ctl:message>
                <ctl:fail/>
              </xsl:if>
              <xsl:if test="not($response//sf:AggregateGeoFeature/gml:name = 'name-f016')">
                <ctl:message>FAILURE: Missing feature (gml:name="name-f016").</ctl:message>
                <ctl:fail/>
              </xsl:if>
			</xsl:otherwise>
		</xsl:choose>
	  </ctl:code>
    </ctl:test>
    
    <ctl:test name="wfs:wfs-1.1.0-Basic-GetFeature-tc202.1">
      <ctl:param name="wfs.GetFeature.post.url"/>
      <ctl:assertion>
      The response to a GetFeature request having a spatial predicate that 
      refers to an invalid spatial property must include an exception report.
      </ctl:assertion>
      <ctl:link>wfs-1.1.0-Basic-GetFeature-atc202</ctl:link>
      <ctl:code>
		<xsl:variable name="response">
			<ctl:request>
				<ctl:url>
					<xsl:value-of select="$wfs.GetFeature.post.url"/>
				</ctl:url>
				<ctl:method>POST</ctl:method>
			    <ctl:body>
					<xi:include href="wfs-1.1.0-Basic-GetFeature-tc202.1.body.xml"/>
				</ctl:body>
				<p:XMLValidatingParser.OWS />
			</ctl:request>
		</xsl:variable>
		<xsl:choose>
			<xsl:when test="not($response/*)">
		        <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
				<ctl:fail/>
		    </xsl:when>
  		    <xsl:otherwise>
					<ctl:call-test name="ctl:SchematronValidatingParser">
						<ctl:with-param name="doc" select="$response"/>
						<ctl:with-param name="schema">sch/ows/1.0.0/ExceptionReport.sch</ctl:with-param>
						<ctl:with-param name="phase">InvalidParameterValuePhase</ctl:with-param>
					</ctl:call-test>	
            </xsl:otherwise>
		</xsl:choose>
	  </ctl:code>
    </ctl:test>
    
    <ctl:test name="wfs:wfs-1.1.0-Basic-GetFeature-tc203.1">
      <ctl:param name="wfs.GetFeature.post.url"/>
      <ctl:assertion>
      The response to a GetFeature request that includes an ogc:Filter containing 
      the Within spatial predicate must include only features that lie within 
      the given geometry value.
      </ctl:assertion>
      <ctl:link>wfs-1.1.0-Basic-GetFeature-atc203</ctl:link>
      <ctl:code>
		<xsl:variable name="response">
			<ctl:request>
				<ctl:url>
					<xsl:value-of select="$wfs.GetFeature.post.url"/>
				</ctl:url>
				<ctl:method>POST</ctl:method>
			    <ctl:body>
					<xi:include href="wfs-1.1.0-Basic-GetFeature-tc203.1.body.xml"/>
				</ctl:body>
				<p:XMLValidatingParser.WFS/>
			</ctl:request>
		</xsl:variable>
		<xsl:choose>
			<xsl:when test="not($response/*)">
		        <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
				<ctl:fail/>
		    </xsl:when>
  		    <xsl:otherwise>
              <xsl:variable name="featureCount" select="count($response//sf:PrimitiveGeoFeature)" />
              <xsl:if test="$featureCount != 1">
                <ctl:message>FAILURE: Expected one sf:PrimitiveGeoFeature instance in response (<xsl:value-of select="$featureCount"/> features included)</ctl:message>
                <ctl:fail/>
              </xsl:if>
              <xsl:if test="not($response//sf:PrimitiveGeoFeature/gml:name = 'name-f003')">
                <ctl:message>FAILURE: Missing feature (gml:name="name-f003").</ctl:message>
                <ctl:fail/>
              </xsl:if>
			</xsl:otherwise>
		</xsl:choose>
	  </ctl:code>
    </ctl:test>
    
    <ctl:test name="wfs:wfs-1.1.0-Basic-GetFeature-tc203.2">
      <ctl:param name="wfs.GetFeature.post.url"/>
      <ctl:assertion>
      The response to a GetFeature request that includes an ogc:Filter containing 
      the Within spatial predicate must include only features that lie within 
      the given geometry value.
      </ctl:assertion>
      <ctl:link>wfs-1.1.0-Basic-GetFeature-atc203</ctl:link>
      <ctl:code>
		<xsl:variable name="response">
			<ctl:request>
				<ctl:url>
					<xsl:value-of select="$wfs.GetFeature.post.url"/>
				</ctl:url>
				<ctl:method>POST</ctl:method>
			    <ctl:body>
					<xi:include href="wfs-1.1.0-Basic-GetFeature-tc203.2.body.xml"/>
				</ctl:body>
				<p:XMLValidatingParser.WFS/>
			</ctl:request>
		</xsl:variable>
		<xsl:choose>
			<xsl:when test="not($response/*)">
		        <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
				<ctl:fail/>
		    </xsl:when>
  		    <xsl:otherwise>
              <xsl:variable name="featureCount" select="count($response//sf:PrimitiveGeoFeature)" />
              <xsl:if test="$featureCount != 1">
                <ctl:message>FAILURE: Expected one sf:PrimitiveGeoFeature instance in response (<xsl:value-of select="$featureCount"/> features included)</ctl:message>
                <ctl:fail/>
              </xsl:if>
              <xsl:if test="not($response//sf:PrimitiveGeoFeature/gml:name = 'name-f001')">
                <ctl:message>FAILURE: Missing feature (gml:name="name-f001").</ctl:message>
                <ctl:fail/>
              </xsl:if>
			</xsl:otherwise>
		</xsl:choose>
	  </ctl:code>
    </ctl:test>
    
    <ctl:test name="wfs:wfs-1.1.0-Basic-GetFeature-tc203.3">
      <ctl:param name="wfs.GetFeature.post.url"/>
      <ctl:assertion>
      The response to a GetFeature request that includes a filter containing 
      a spatial predicate that does not refer to a valid geometry property must 
      include an exception report indicating "InvalidParameterValue".
      </ctl:assertion>
      <ctl:link>wfs-1.1.0-Basic-GetFeature-atc203</ctl:link>
      <ctl:code>
		<xsl:variable name="response">
			<ctl:request>
				<ctl:url>
					<xsl:value-of select="$wfs.GetFeature.post.url"/>
				</ctl:url>
				<ctl:method>POST</ctl:method>
			    <ctl:body>
					<xi:include href="wfs-1.1.0-Basic-GetFeature-tc203.3.body.xml"/>
				</ctl:body>
				<p:XMLValidatingParser.OWS/>
			</ctl:request>
		</xsl:variable>
		<xsl:choose>
			<xsl:when test="not($response/*)">
		        <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
				<ctl:fail/>
		    </xsl:when>
  		    <xsl:otherwise>
              <ctl:call-test name="ctl:SchematronValidatingParser">
		            <ctl:with-param name="doc" select="$response" />
		            <ctl:with-param name="schema">sch/ows/1.0.0/ExceptionReport.sch</ctl:with-param>
		            <ctl:with-param name="phase">InvalidParameterValuePhase</ctl:with-param>
	          </ctl:call-test>
			</xsl:otherwise>
		</xsl:choose>
	  </ctl:code>
    </ctl:test>
    
    <ctl:test name="wfs:wfs-1.1.0-Basic-GetFeature-tc204.1">
      <ctl:param name="wfs.GetFeature.post.url"/>
      <ctl:assertion>
      The response to a GetFeature request that includes an ogc:Filter containing 
      the Overlaps spatial predicate must include only features that overlap the 
      given geometry value.
      </ctl:assertion>
      <ctl:link>wfs-1.1.0-Basic-GetFeature-atc204</ctl:link>
      <ctl:code>
		<xsl:variable name="response">
			<ctl:request>
				<ctl:url>
					<xsl:value-of select="$wfs.GetFeature.post.url"/>
				</ctl:url>
				<ctl:method>POST</ctl:method>
			    <ctl:body>
					<xi:include href="wfs-1.1.0-Basic-GetFeature-tc204.1.body.xml"/>
				</ctl:body>
				<p:XMLValidatingParser.WFS/>
			</ctl:request>
		</xsl:variable>
		<xsl:choose>
			<xsl:when test="not($response/*)">
		        <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
				<ctl:fail/>
		    </xsl:when>
  		    <xsl:otherwise>
              <xsl:variable name="featureCount" select="count($response//sf:EntitéGénérique)" />
              <xsl:if test="$featureCount != 1">
                <ctl:message>FAILURE: Expected one sf:EntitéGénérique instance in response (<xsl:value-of select="$featureCount"/> features included)</ctl:message>
                <ctl:fail/>
              </xsl:if>
              <xsl:if test="not($response//sf:EntitéGénérique/gml:name = 'name-f004')">
                <ctl:message>FAILURE: Missing feature (gml:name="name-f004").</ctl:message>
                <ctl:fail/>
              </xsl:if>
			</xsl:otherwise>
		</xsl:choose>
	  </ctl:code>
    </ctl:test>

    <ctl:test name="wfs:wfs-1.1.0-Basic-GetFeature-tc204.2">
      <ctl:param name="wfs.GetFeature.post.url"/>
      <ctl:assertion>
      The response to a GetFeature request that includes an ogc:Filter containing 
      the Overlaps spatial predicate must include only features that overlap the 
      given geometry value.
      </ctl:assertion>
      <ctl:link>wfs-1.1.0-Basic-GetFeature-atc204</ctl:link>
      <ctl:code>
		<xsl:variable name="response">
			<ctl:request>
				<ctl:url>
					<xsl:value-of select="$wfs.GetFeature.post.url"/>
				</ctl:url>
				<ctl:method>POST</ctl:method>
			    <ctl:body>
					<xi:include href="wfs-1.1.0-Basic-GetFeature-tc204.2.body.xml"/>
				</ctl:body>
				<p:XMLValidatingParser.WFS/>
			</ctl:request>
		</xsl:variable>
		<xsl:choose>
			<xsl:when test="not($response/*)">
		        <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
				<ctl:fail/>
		    </xsl:when>
  		    <xsl:otherwise>
              <xsl:variable name="featureCount" select="count($response//sf:AggregateGeoFeature)" />
              <xsl:if test="$featureCount lt 2">
                <ctl:message>FAILURE: Expected two or more sf:AggregateGeoFeature instances in response (<xsl:value-of select="$featureCount"/> features included)</ctl:message>
                <ctl:fail/>
              </xsl:if>
              <xsl:if test="not($response//sf:AggregateGeoFeature/gml:name = 'name-f016')">
                <ctl:message>FAILURE: Missing feature (gml:name="name-f016").</ctl:message>
                <ctl:fail/>
              </xsl:if>
              <xsl:if test="not($response//sf:AggregateGeoFeature/gml:name = 'name-f010')">
                <ctl:message>FAILURE: Missing feature (gml:name="name-f010").</ctl:message>
                <ctl:fail/>
              </xsl:if>
			</xsl:otherwise>
		</xsl:choose>
	  </ctl:code>
    </ctl:test>
    
    <ctl:test name="wfs:wfs-1.1.0-Basic-GetFeature-tc204.3">
      <ctl:param name="wfs.GetFeature.post.url"/>
      <ctl:assertion>
      The response to a GetFeature request that includes an ogc:Filter containing 
      the Overlaps spatial predicate must include only features that overlap the 
      given geometry value.
      </ctl:assertion>
      <ctl:link>wfs-1.1.0-Basic-GetFeature-atc204</ctl:link>
      <ctl:code>
		<xsl:variable name="response">
			<ctl:request>
				<ctl:url>
					<xsl:value-of select="$wfs.GetFeature.post.url"/>
				</ctl:url>
				<ctl:method>POST</ctl:method>
			    <ctl:body>
					<xi:include href="wfs-1.1.0-Basic-GetFeature-tc204.3.body.xml"/>
				</ctl:body>
				<p:XMLValidatingParser.WFS/>
			</ctl:request>
		</xsl:variable>
		<xsl:choose>
			<xsl:when test="not($response/*)">
		        <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
				<ctl:fail/>
		    </xsl:when>
  		    <xsl:otherwise>
              <xsl:variable name="featureCount" select="count($response//sf:PrimitiveGeoFeature)" />
              <xsl:if test="$featureCount != 1">
                <ctl:message>FAILURE: Expected one sf:PrimitiveGeoFeature instance in response (<xsl:value-of select="$featureCount"/> features included)</ctl:message>
                <ctl:fail/>
              </xsl:if>
              <xsl:if test="not($response//sf:PrimitiveGeoFeature/gml:name = 'name-f003')">
                <ctl:message>FAILURE: Missing feature (gml:name="name-f003").</ctl:message>
                <ctl:fail/>
              </xsl:if>
			</xsl:otherwise>
		</xsl:choose>
	  </ctl:code>
    </ctl:test>
    
    <ctl:test name="wfs:wfs-1.1.0-Basic-GetFeature-tc204.4">
      <ctl:param name="wfs.GetFeature.post.url"/>
      <ctl:assertion>
      The response to a GetFeature request that includes an ogc:Filter containing 
      the Overlaps spatial predicate must include only features that overlap the 
      given geometry value.
      </ctl:assertion>
      <ctl:link>wfs-1.1.0-Basic-GetFeature-atc204</ctl:link>
      <ctl:code>
		<xsl:variable name="response">
			<ctl:request>
				<ctl:url>
					<xsl:value-of select="$wfs.GetFeature.post.url"/>
				</ctl:url>
				<ctl:method>POST</ctl:method>
			    <ctl:body>
					<xi:include href="wfs-1.1.0-Basic-GetFeature-tc204.4.body.xml"/>
				</ctl:body>
				<p:XMLValidatingParser.WFS/>
			</ctl:request>
		</xsl:variable>
		<xsl:choose>
			<xsl:when test="not($response/*)">
		        <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
				<ctl:fail/>
		    </xsl:when>
  		    <xsl:otherwise>
              <xsl:variable name="featureCount" select="count($response//gml:featureMember) + count($response//gml:featureMembers/*)" />
              <xsl:if test="$featureCount gt 0">
                <ctl:message>FAILURE: Expected empty response (<xsl:value-of select="$featureCount"/> features were included)</ctl:message>
                <ctl:fail/>
              </xsl:if>
			</xsl:otherwise>
		</xsl:choose>
	  </ctl:code>
    </ctl:test>

    <ctl:test name="wfs:wfs-1.1.0-Basic-GetFeature-tc205.1">
      <ctl:param name="wfs.GetFeature.post.url"/>
      <ctl:assertion>
      The response to a GetFeature request that includes an ogc:Filter containing 
      the Equals spatial predicate must include only features that have a geometry 
      value exactly equal to the given geometry value.
      </ctl:assertion>
      <ctl:link>wfs-1.1.0-Basic-GetFeature-atc205</ctl:link>
      <ctl:code>
		<xsl:variable name="response">
			<ctl:request>
				<ctl:url>
					<xsl:value-of select="$wfs.GetFeature.post.url"/>
				</ctl:url>
				<ctl:method>POST</ctl:method>
			    <ctl:body>
					<xi:include href="wfs-1.1.0-Basic-GetFeature-tc205.1.body.xml"/>
				</ctl:body>
				<p:XMLValidatingParser.WFS/>
			</ctl:request>
		</xsl:variable>
		<xsl:choose>
			<xsl:when test="not($response/*)">
		        <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
				<ctl:fail/>
		    </xsl:when>
  		    <xsl:otherwise>
              <xsl:variable name="featureCount" select="count($response//sf:AggregateGeoFeature)" />
              <xsl:if test="$featureCount lt 1">
                <ctl:message>FAILURE: Expected one or more sf:AggregateGeoFeature instance in response (<xsl:value-of select="$featureCount"/> features included)</ctl:message>
                <ctl:fail/>
              </xsl:if>
              <xsl:if test="not($response//sf:AggregateGeoFeature/gml:name = 'name-f005')">
                <ctl:message>FAILURE: Missing feature (gml:name="name-f005").</ctl:message>
                <ctl:fail/>
              </xsl:if>
			</xsl:otherwise>
		</xsl:choose>
	  </ctl:code>
    </ctl:test>    

    <ctl:test name="wfs:wfs-1.1.0-Basic-GetFeature-tc205.2">
      <ctl:param name="wfs.GetFeature.post.url"/>
      <ctl:assertion>
      The response to a GetFeature request that includes an ogc:Filter containing 
      the Equals spatial predicate must include only features that have a geometry 
      value exactly equal to the given geometry value.
      </ctl:assertion>
      <ctl:link>wfs-1.1.0-Basic-GetFeature-atc205</ctl:link>
      <ctl:code>
		<xsl:variable name="response">
			<ctl:request>
				<ctl:url>
					<xsl:value-of select="$wfs.GetFeature.post.url"/>
				</ctl:url>
				<ctl:method>POST</ctl:method>
			    <ctl:body>
					<xi:include href="wfs-1.1.0-Basic-GetFeature-tc205.2.body.xml"/>
				</ctl:body>
				<p:XMLValidatingParser.WFS/>
			</ctl:request>
		</xsl:variable>
		<xsl:choose>
			<xsl:when test="not($response/*)">
		        <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
				<ctl:fail/>
		    </xsl:when>
  		    <xsl:otherwise>
              <xsl:variable name="featureCount" select="count($response//gml:featureMember) + count($response//gml:featureMembers/*)" />
              <xsl:if test="$featureCount gt 0">
                <ctl:message>FAILURE: Expected empty response (<xsl:value-of select="$featureCount"/> features were included)</ctl:message>
                <ctl:fail/>
              </xsl:if>
			</xsl:otherwise>
		</xsl:choose>
	  </ctl:code>
    </ctl:test>  
    
    <ctl:test name="wfs:wfs-1.1.0-Basic-GetFeature-tc205.3">
      <ctl:param name="wfs.GetFeature.post.url"/>
      <ctl:assertion>
      The response to a GetFeature request that includes an ogc:Filter containing 
      the Equals spatial predicate must include only features that have a geometry 
      value exactly equal to the given geometry value.
      </ctl:assertion>
      <ctl:link>wfs-1.1.0-Basic-GetFeature-atc205</ctl:link>
      <ctl:code>
		<xsl:variable name="response">
			<ctl:request>
				<ctl:url>
					<xsl:value-of select="$wfs.GetFeature.post.url"/>
				</ctl:url>
				<ctl:method>POST</ctl:method>
			    <ctl:body>
					<xi:include href="wfs-1.1.0-Basic-GetFeature-tc205.3.body.xml"/>
				</ctl:body>
				<p:XMLValidatingParser.WFS/>
			</ctl:request>
		</xsl:variable>
		<xsl:choose>
			<xsl:when test="not($response/*)">
		        <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
				<ctl:fail/>
		    </xsl:when>
  		    <xsl:otherwise>
              <xsl:variable name="featureCount" select="count($response//sf:EntitéGénérique)" />
              <xsl:if test="$featureCount lt 1">
                <ctl:message>FAILURE: Expected one or more sf:EntitéGénérique instance in response (<xsl:value-of select="$featureCount"/> features included)</ctl:message>
                <ctl:fail/>
              </xsl:if>
              <xsl:if test="not($response//sf:EntitéGénérique/gml:name = 'name-f004')">
                <ctl:message>FAILURE: Missing feature (gml:name="name-f004").</ctl:message>
                <ctl:fail/>
              </xsl:if>
			</xsl:otherwise>
		</xsl:choose>
	  </ctl:code>
    </ctl:test>        
    
<ctl:test name="wfs:wfs-1.1.0-Basic-GetFeature-tc206.1">
      <ctl:param name="wfs.GetFeature.post.url"/>
      <ctl:assertion>
      The response to a GetFeature request that includes an ogc:Filter containing 
      the Contains spatial predicate must include only features that contain 
      the given geometry value.
      </ctl:assertion>
      <ctl:link>wfs-1.1.0-Basic-GetFeature-atc206</ctl:link>
      <ctl:code>
		<xsl:variable name="response">
			<ctl:request>
				<ctl:url>
					<xsl:value-of select="$wfs.GetFeature.post.url"/>
				</ctl:url>
				<ctl:method>POST</ctl:method>
			    <ctl:body>
					<xi:include href="wfs-1.1.0-Basic-GetFeature-tc206.1.body.xml"/>
				</ctl:body>
				<p:XMLValidatingParser.WFS/>
			</ctl:request>
		</xsl:variable>
		<xsl:choose>
			<xsl:when test="not($response/*)">
		        <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
				<ctl:fail/>
		    </xsl:when>
  		    <xsl:otherwise>
              <xsl:variable name="featureCount" select="count($response//sf:PrimitiveGeoFeature)" />
              <xsl:if test="$featureCount != 1">
                <ctl:message>FAILURE: Expected one sf:PrimitiveGeoFeature instance in response (<xsl:value-of select="$featureCount"/> features included)</ctl:message>
                <ctl:fail/>
              </xsl:if>
              <xsl:if test="not($response//sf:PrimitiveGeoFeature/gml:name = 'name-f003')">
                <ctl:message>FAILURE: Missing feature (gml:name="name-f003").</ctl:message>
                <ctl:fail/>
              </xsl:if>
			</xsl:otherwise>
		</xsl:choose>
	  </ctl:code>
    </ctl:test>
    
    <ctl:test name="wfs:wfs-1.1.0-Basic-GetFeature-tc206.2">
      <ctl:param name="wfs.GetFeature.post.url"/>
      <ctl:assertion>
      The response to a GetFeature request that includes an ogc:Filter containing 
      the Contains spatial predicate must include only features that contain 
      the given geometry value.
      </ctl:assertion>
      <ctl:link>wfs-1.1.0-Basic-GetFeature-atc206</ctl:link>
      <ctl:code>
		<xsl:variable name="response">
			<ctl:request>
				<ctl:url>
					<xsl:value-of select="$wfs.GetFeature.post.url"/>
				</ctl:url>
				<ctl:method>POST</ctl:method>
			    <ctl:body>
					<xi:include href="wfs-1.1.0-Basic-GetFeature-tc206.2.body.xml"/>
				</ctl:body>
				<p:XMLValidatingParser.WFS/>
			</ctl:request>
		</xsl:variable>
		<xsl:choose>
			<xsl:when test="not($response/*)">
		        <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
				<ctl:fail/>
		    </xsl:when>
  		    <xsl:otherwise>
              <xsl:variable name="featureCount" select="count($response//sf:EntitéGénérique)" />
              <xsl:if test="$featureCount lt 1">
                <ctl:message>FAILURE: Expected one or more sf:EntitéGénérique instance in response (<xsl:value-of select="$featureCount"/> features included)</ctl:message>
                <ctl:fail/>
              </xsl:if>
              <xsl:if test="not($response//sf:EntitéGénérique/gml:name = 'name-f004')">
                <ctl:message>FAILURE: Missing feature (gml:name="name-f004").</ctl:message>
                <ctl:fail/>
              </xsl:if>
			</xsl:otherwise>
		</xsl:choose>
	  </ctl:code>
    </ctl:test>
    
    <ctl:test name="wfs:wfs-1.1.0-Basic-GetFeature-tc206.3">
      <ctl:param name="wfs.GetFeature.post.url"/>
      <ctl:assertion>
      The response to a GetFeature request that includes an ogc:Filter containing 
      the Contains spatial predicate must include only features that contain 
      the given geometry value.
      </ctl:assertion>
      <ctl:link>wfs-1.1.0-Basic-GetFeature-atc206</ctl:link>
      <ctl:code>
		<xsl:variable name="response">
			<ctl:request>
				<ctl:url>
					<xsl:value-of select="$wfs.GetFeature.post.url"/>
				</ctl:url>
				<ctl:method>POST</ctl:method>
			    <ctl:body>
					<xi:include href="wfs-1.1.0-Basic-GetFeature-tc206.3.body.xml"/>
				</ctl:body>
				<p:XMLValidatingParser.WFS/>
			</ctl:request>
		</xsl:variable>
		<xsl:choose>
			<xsl:when test="not($response/*)">
		        <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
				<ctl:fail/>
		    </xsl:when>
  		    <xsl:otherwise>
              <xsl:variable name="featureCount" select="count($response//gml:featureMember) + count($response//gml:featureMembers/*)" />
              <xsl:if test="$featureCount gt 0">
                <ctl:message>FAILURE: Expected empty response (<xsl:value-of select="$featureCount"/> features were included)</ctl:message>
                <ctl:fail/>
              </xsl:if>
			</xsl:otherwise>
		</xsl:choose>
	  </ctl:code>
    </ctl:test>    
    
 <ctl:test name="wfs:wfs-1.1.0-Basic-GetFeature-tc207.1">
      <ctl:param name="wfs.GetFeature.post.url"/>
      <ctl:assertion>
      The response to a GetFeature request that includes an ogc:Filter having a
      Touches spatial predicate must include only features that are touching 
      with respect to the provided geometry value.
      </ctl:assertion>
      <ctl:link>wfs-1.1.0-Basic-GetFeature-atc207</ctl:link>
      <ctl:code>
		<xsl:variable name="response">
			<ctl:request>
				<ctl:url>
					<xsl:value-of select="$wfs.GetFeature.post.url"/>
				</ctl:url>
				<ctl:method>POST</ctl:method>
			    <ctl:body>
					<xi:include href="wfs-1.1.0-Basic-GetFeature-tc207.1.body.xml"/>
				</ctl:body>
				<p:XMLValidatingParser.WFS/>
			</ctl:request>
		</xsl:variable>
		<xsl:choose>
			<xsl:when test="not($response/*)">
		        <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
				<ctl:fail/>
		    </xsl:when>
  		    <xsl:otherwise>
              <xsl:variable name="featureCount" select="count($response//sf:PrimitiveGeoFeature)" />
              <xsl:if test="$featureCount gt 0">
                <ctl:message>FAILURE: Expected empty feature collection (<xsl:value-of select="$featureCount"/> features included)</ctl:message>
                <ctl:fail/>
              </xsl:if>
			</xsl:otherwise>
		</xsl:choose>
	  </ctl:code>
    </ctl:test>
    
    <ctl:test name="wfs:wfs-1.1.0-Basic-GetFeature-tc207.2">
      <ctl:param name="wfs.GetFeature.post.url"/>
      <ctl:assertion>
      The response to a GetFeature request that includes an ogc:Filter having a
      Touches spatial predicate must include only features that are touching 
      with respect to the provided geometry value.
      </ctl:assertion>
      <ctl:link>wfs-1.1.0-Basic-GetFeature-atc207</ctl:link>
      <ctl:code>
		<xsl:variable name="response">
			<ctl:request>
				<ctl:url>
					<xsl:value-of select="$wfs.GetFeature.post.url"/>
				</ctl:url>
				<ctl:method>POST</ctl:method>
			    <ctl:body>
					<xi:include href="wfs-1.1.0-Basic-GetFeature-tc207.2.body.xml"/>
				</ctl:body>
				<p:XMLValidatingParser.WFS/>
			</ctl:request>
		</xsl:variable>
		<xsl:choose>
			<xsl:when test="not($response/*)">
		        <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
				<ctl:fail/>
		    </xsl:when>
  		    <xsl:otherwise>
              <xsl:variable name="featureCount" select="count($response//sf:AggregateGeoFeature)" />
              <xsl:if test="$featureCount lt 1">
                <ctl:message>FAILURE: Expected one or more sf:AggregateGeoFeature instances in response (<xsl:value-of select="$featureCount"/> features included)</ctl:message>
                <ctl:fail/>
              </xsl:if>
              <xsl:if test="not($response//sf:AggregateGeoFeature/gml:name = 'name-f009')">
                <ctl:message>FAILURE: Unexpected feature in response (gml:name="name-f009").</ctl:message>
                <ctl:fail/>
              </xsl:if>
			</xsl:otherwise>
		</xsl:choose>
	  </ctl:code>
    </ctl:test>
    
    <ctl:test name="wfs:wfs-1.1.0-Basic-GetFeature-tc207.3">
      <ctl:param name="wfs.GetFeature.post.url"/>
      <ctl:assertion>
      The response to a GetFeature request that includes an ogc:Filter having a
      Touches spatial predicate must include only features that are touching 
      with respect to the provided geometry value.
      </ctl:assertion>
      <ctl:link>wfs-1.1.0-Basic-GetFeature-atc207</ctl:link>
      <ctl:code>
		<xsl:variable name="response">
			<ctl:request>
				<ctl:url>
					<xsl:value-of select="$wfs.GetFeature.post.url"/>
				</ctl:url>
				<ctl:method>POST</ctl:method>
			    <ctl:body>
					<xi:include href="wfs-1.1.0-Basic-GetFeature-tc207.3.body.xml"/>
				</ctl:body>
				<p:XMLValidatingParser.WFS/>
			</ctl:request>
		</xsl:variable>
		<xsl:choose>
			<xsl:when test="not($response/*)">
		        <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
				<ctl:fail/>
		    </xsl:when>
  		    <xsl:otherwise>
              <xsl:variable name="featureCount" select="count($response//sf:AggregateGeoFeature)" />
              <xsl:if test="$featureCount lt 1">
                <ctl:message>FAILURE: Expected one or more sf:AggregateGeoFeature instances in response (<xsl:value-of select="$featureCount"/> features included)</ctl:message>
                <ctl:fail/>
              </xsl:if>
              <xsl:if test="not($response//sf:AggregateGeoFeature/gml:name = 'name-f010')">
                <ctl:message>FAILURE: Expected feature not in response (gml:name="name-f010").</ctl:message>
                <ctl:fail/>
              </xsl:if>
			</xsl:otherwise>
		</xsl:choose>
	  </ctl:code>
    </ctl:test>

 <ctl:test name="wfs:wfs-1.1.0-Basic-GetFeature-tc208.1">
      <ctl:param name="wfs.GetFeature.post.url"/>
      <ctl:assertion>
      The response to a GetFeature request that includes an ogc:Filter having a
      Crosses spatial predicate must include only features that are crossing
      with respect to the provided geometry value.
      </ctl:assertion>
      <ctl:link>wfs-1.1.0-Basic-GetFeature-atc208</ctl:link>
      <ctl:code>
		<xsl:variable name="response">
			<ctl:request>
				<ctl:url>
					<xsl:value-of select="$wfs.GetFeature.post.url"/>
				</ctl:url>
				<ctl:method>POST</ctl:method>
			    <ctl:body>
					<xi:include href="wfs-1.1.0-Basic-GetFeature-tc208.1.body.xml"/>
				</ctl:body>
				<p:XMLValidatingParser.WFS/>
			</ctl:request>
		</xsl:variable>
		<xsl:choose>
			<xsl:when test="not($response/*)">
		        <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
				<ctl:fail/>
		    </xsl:when>
  		    <xsl:otherwise>
              <xsl:variable name="featureCount" select="count($response//sf:PrimitiveGeoFeature)" />
              <xsl:if test="$featureCount gt 0">
                <ctl:message>FAILURE: Expected empty feature collection (<xsl:value-of select="$featureCount"/> features included)</ctl:message>
                <ctl:fail/>
              </xsl:if>
			</xsl:otherwise>
		</xsl:choose>
	  </ctl:code>
    </ctl:test>
    
    <ctl:test name="wfs:wfs-1.1.0-Basic-GetFeature-tc208.2">
      <ctl:param name="wfs.GetFeature.post.url"/>
      <ctl:assertion>
      The response to a GetFeature request that includes an ogc:Filter having a
      Crosses spatial predicate must include only features that are crossing 
      with respect to the provided geometry value.
      </ctl:assertion>
      <ctl:link>wfs-1.1.0-Basic-GetFeature-atc208</ctl:link>
      <ctl:code>
		<xsl:variable name="response">
			<ctl:request>
				<ctl:url>
					<xsl:value-of select="$wfs.GetFeature.post.url"/>
				</ctl:url>
				<ctl:method>POST</ctl:method>
			    <ctl:body>
					<xi:include href="wfs-1.1.0-Basic-GetFeature-tc208.2.body.xml"/>
				</ctl:body>
				<p:XMLValidatingParser.WFS/>
			</ctl:request>
		</xsl:variable>
		<xsl:choose>
			<xsl:when test="not($response/*)">
		        <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
				<ctl:fail/>
		    </xsl:when>
  		    <xsl:otherwise>
              <xsl:variable name="featureCount" select="count($response//sf:PrimitiveGeoFeature)" />
              <xsl:if test="$featureCount lt 1">
                <ctl:message>FAILURE: Expected one or more sf:PrimitiveGeoFeature instances in response (<xsl:value-of select="$featureCount"/> features included)</ctl:message>
                <ctl:fail/>
              </xsl:if>
              <xsl:if test="not($response//sf:PrimitiveGeoFeature/gml:name = 'name-f003')">
                <ctl:message>FAILURE: Unexpected feature in response (gml:name="name-f003").</ctl:message>
                <ctl:fail/>
              </xsl:if>
			</xsl:otherwise>
		</xsl:choose>
	  </ctl:code>
    </ctl:test>
    
    <ctl:test name="wfs:wfs-1.1.0-Basic-GetFeature-tc208.3">
      <ctl:param name="wfs.GetFeature.post.url"/>
      <ctl:assertion>
      The response to a GetFeature request that includes an ogc:Filter having a
      Crosses spatial predicate must include only features that are crossing 
      with respect to the provided geometry value.
      </ctl:assertion>
      <ctl:link>wfs-1.1.0-Basic-GetFeature-atc208</ctl:link>
      <ctl:code>
		<xsl:variable name="response">
			<ctl:request>
				<ctl:url>
					<xsl:value-of select="$wfs.GetFeature.post.url"/>
				</ctl:url>
				<ctl:method>POST</ctl:method>
			    <ctl:body>
					<xi:include href="wfs-1.1.0-Basic-GetFeature-tc208.3.body.xml"/>
				</ctl:body>
				<p:XMLValidatingParser.WFS/>
			</ctl:request>
		</xsl:variable>
		<xsl:choose>
			<xsl:when test="not($response/*)">
		        <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
				<ctl:fail/>
		    </xsl:when>
  		    <xsl:otherwise>
              <xsl:variable name="featureCount" select="count($response//sf:AggregateGeoFeature)" />
              <xsl:if test="$featureCount lt 1">
                <ctl:message>FAILURE: Expected one or more sf:AggregateGeoFeature instances in response (<xsl:value-of select="$featureCount"/> features included)</ctl:message>
                <ctl:fail/>
              </xsl:if>
              <xsl:if test="not($response//sf:AggregateGeoFeature/gml:name = 'name-f010')">
                <ctl:message>FAILURE: Expected feature not in response (gml:name="name-f010").</ctl:message>
                <ctl:fail/>
              </xsl:if>
			</xsl:otherwise>
		</xsl:choose>
	  </ctl:code>
    </ctl:test>
    
</ctl:package>