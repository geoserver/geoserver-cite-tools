<?xml version="1.0" encoding="UTF-8"?>
<ctl:package 
	xmlns:ctl="http://www.occamlab.com/ctl" 
	xmlns:gml="http://www.opengis.net/gml" 
	xmlns:html="http://www.w3.org/1999/xhtml" 	
	xmlns:ogc="http://www.opengis.net/ogc"
	xmlns:ows="http://www.opengis.net/ows/1.1" 
	xmlns:parsers="http://www.occamlab.com/te/parsers"
	xmlns:saxon="http://saxon.sf.net/" 
    xmlns:te="http://www.occamlab.com/te"
	xmlns:tep="http://teamengine.sourceforge.net/parsers" 
	xmlns:xi="http://www.w3.org/2001/XInclude" 
	xmlns:xlink="http://www.w3.org/1999/xlink"
	xmlns:xml="http://www.w3.org/XML/1998/namespace"
	xmlns:xsd="http://www.w3.org/2001/XMLSchema"
	xmlns:xsl="http://www.w3.org/1999/XSL/Transform" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:wmts="http://www.opengis.net/wmts/1.0"
	xmlns:ctlFunctions="https://cite.opengeospatial.org/wmts-1.0.0/src/ctl/ctlFunctions.xml"	
	xmlns:owsFunctions="https://cite.opengeospatial.org/wmts-1.0.0/src/ctl/owsFunctions.xml"	
	xmlns:wwwFunctions="https://cite.opengeospatial.org/wmts-1.0.0/src/ctl/wwwFunctions.xml"	
	xmlns:wmtsFunctions="https://cite.opengeospatial.org/wmts-1.0.0/src/ctl/wmtsFunctions.xml"	
	xmlns:wmtsBootstrap="https://cite.opengeospatial.org/wmts-1.0.0/src/ctl/bootstrap.xml"
>

<ctl:test name="wmts:Client.KVP.GET.GetTile.Mandatory" type="Mandatory">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid KVP GET GetTile request with the mandatory request parameter with a value of GetTile;
	2.  the request entity is a valid KVP GET GetTile request with the mandatory service parameter with a value of WMTS;
	3.  the request entity is a valid KVP GET GetTile request with the mandatory Version parameter with a value of 1.0.0;
	4.  the request entity is a valid KVP GET GetTile request with the mandatory Layer parameter with a layer identifier value equal to a &lt;Layer&gt;&lt;ows:Identifier&gt; value from the Service Metadata document;
	5.  the request entity is a valid KVP GET GetTile request with the mandatory Style parameter with a style identifier value equal to a &lt;Layer&gt;&lt;Style&gt;&lt;owsIdentifier&gt; value for the specified Layer from the Service Metadata document;
	6.  the request entity is a valid KVP GET GetTile request with the mandatory Format parameter with a MIME type format value equal to a &lt;Layer&gt;&lt;Format&gt; value for the specified Layer from the Service Metadata document;
	7.  the request entity is a valid KVP GET GetTile request with the mandatory TileMatrixSet parameter with a TileMatrixSet identifier value equal to a &lt;Layer&gt;&lt;TileMatrixSetLink&gt;&lt;TileMatrixSet&gt; value for the specified Layer from the Service Metadata document;
	8.  the request entity is a valid KVP GET GetTile request with the mandatory TileMatrix parameter with a TileMatrix identifier value equal to a &lt;TileMatrixSet&gt;&lt;TileMatrix&gt;&lt;owsIdentifier&gt; value for the specified TileMatrixSet from the Service Metadata document;
	9.  the request entity is a valid KVP GET GetTile request with the mandatory TileRow parameter with a TileRow index value from zero to the value of &lt;MatrixHeight&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	10.  the request entity is a valid KVP GET GetTile request with the mandatory TileCol parameter with a TileCol index value from zero to the value of &lt;MatrixWidth&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	11.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileRow index value within the TileMatrixLimits MinTileRow and MaxTileRow values.
	12.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileCol index value within the TileMatrixLimits MinTileCol and MaxTileCol values.
	13.  the client can generate a valid KVP GET GetTile request for a sample of tiles from each Layer, in each style for the layer, in each image format for the layer, from each TileMatrix from each TileMatrixSet for the layer offered by the server.</ctl:assertion>
	<ctl:comment>Test that a WMTS client can parse a Service Metadata document returned from a GetCapabilities request to determine the layers and tiles available, and can issue valid KVP GET GetTile requests with mandatory parameters. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Client.KVP.GET.GetTile.Mandatory</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:message>Client.KVP.GET.GetTile.Mandatory not implemented yet</ctl:message>
						<ctl:warning/>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Client.KVP.GET.GetTile.Mandatory not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Client.KVP.GET.GetTile.Mandatory test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Client.KVP.GET.GetTile.Optional" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid KVP GET GetTile request with the mandatory request parameter with a value of GetTile;
	2.  the request entity is a valid KVP GET GetTile request with the mandatory service parameter with a value of WMTS;
	3.  the request entity is a valid KVP GET GetTile request with the mandatory Version parameter with a value of 1.0.0;
	4.  the request entity is a valid KVP GET GetTile request with the mandatory Layer parameter with a layer identifier value equal to a &lt;Layer&gt;&lt;ows:Identifier&gt; value from the Service Metadata document;
	5.  the request entity is a valid KVP GET GetTile request with the mandatory Style parameter with a style identifier value equal to a &lt;Layer&gt;&lt;Style&gt;&lt;owsIdentifier&gt; value for the specified Layer from the Service Metadata document;
	6.  the request entity is a valid KVP GET GetTile request with the mandatory Format parameter with a MIME type format value equal to a &lt;Layer&gt;&lt;Format&gt; value for the specified Layer from the Service Metadata document;
	7.  the request entity is a valid KVP GET GetTile request with the mandatory TileMatrixSet parameter with a TileMatrixSet identifier value equal to a &lt;Layer&gt;&lt;TileMatrixSetLink&gt;&lt;TileMatrixSet&gt; value for the specified Layer from the Service Metadata document;
	8.  the request entity is a valid KVP GET GetTile request with the mandatory TileMatrix parameter with a TileMatrix identifier value equal to a &lt;TileMatrixSet&gt;&lt;TileMatrix&gt;&lt;owsIdentifier&gt; value for the specified TileMatrixSet from the Service Metadata document;
	9.  the request entity is a valid KVP GET GetTile request with the mandatory TileRow parameter with a TileRow index value from zero to the value of &lt;MatrixHeight&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	10.  the request entity is a valid KVP GET GetTile request with the mandatory TileCol parameter with a TileCol index value from zero to the value of &lt;MatrixWidth&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	11.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileRow index value within the TileMatrixLimits MinTileRow and MaxTileRow values.
	12.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileCol index value within the TileMatrixLimits MinTileCol and MaxTileCol values.
	13.  the request entity is a valid KVP GET GetTile request with an optional sample dimensions parameter with a name from a &lt;Dimension&gt;&lt;ows:Identifier&gt; value for the specified Layer from the Service Metadata document;
	14.  the request entity is a valid KVP GET GetTile request with an optional sample dimensions parameter with a value from one of the &lt;Dimension&gt;&lt;Value&gt; elements for the specified Dimension from the Service Metadata document.
	15.  the client can generate a valid KVP GET GetTile request for sample tiles from each Layer with sample dimensions, in each style for the layer, in each image format for the layer, for each sample dimension value for each sample dimension for the layer, from each TileMatrix from each TileMatrixSet for the layer offered by the server.</ctl:assertion>
	<ctl:comment>Test that a WMTS client can parse a Service Metadata document returned from a GetCapabilities request to determine the sample dimensions for a Layer with sample dimensions advertised by a server (e.g. Time, Elevation, Band), and issue KVP GET GetTile requests with mandatory parameters and a supported sample dimensions parameter with a valid value from the range specified in the Service Metadata document.</ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Client.KVP.GET.GetTile.Optional</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:message>Client.KVP.GET.GetTile.Optional not implemented yet</ctl:message>
						<ctl:warning/>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Client.KVP.GET.GetTile.Optional not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Client.KVP.GET.GetTile.Optional test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Client.KVP.GET.GetTile.Contiguous" type="Mandatory">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the client can parse a Service Metadata document to identify contiguous tiles served by a server;
	2.  the client issues valid requests for contiguous tiles;
	3.  the server returns the requested tiles;
	4.  the client displays the contiguous tiles without any discontinuity.	</ctl:assertion>
	<ctl:comment>Verify that a client is capable of generating contiguous GetTile operation requests.</ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Client.KVP.GET.GetTile.Contiguous</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:message>Client.KVP.GET.GetTile.Contiguous not implemented yet</ctl:message>
						<ctl:warning/>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Client.KVP.GET.GetTile.Contiguous not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Client.KVP.GET.GetTile.Contiguous test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Client.KVP.GET.GetTile.Overlay" type="Mandatory">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the client can parse a Service Metadata document to identify overlay tiles served by a server;
	2.  the client issues valid requests for overlay tiles;
	3.  the server returns the requested tiles;
	4.  the the client is able to display the overlay tiles correctly overlaid and with a transparency when NODATA is present on the upper images.	</ctl:assertion>
	<ctl:comment>Verify that a client is capable to generating overlaying GetTile operation requests, each one for a different layer.</ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Client.KVP.GET.GetTile.Overlay</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:message>Client.KVP.GET.GetTile.Overlay not implemented yet</ctl:message>
						<ctl:warning/>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Client.KVP.GET.GetTile.Overlay not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Client.KVP.GET.GetTile.Overlay test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Client.KVP.GET.GetTile.TileMatrixSets" type="Mandatory">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the client can parse a Service Metadata document to identify overlay tiles from different TileMatrixSets;
	2.  the client issues valid requests for tiles from different TileMatrixSets;
	3.  the server returns the requested tiles;
	4.  the the client is able to display the overlay tiles correctly overlaid.	</ctl:assertion>
	<ctl:comment>Verify that a client can correctly overlay layers with layers having different TileMatrixSets.</ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Client.KVP.GET.GetTile.TileMatrixSets</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:message>Client.KVP.GET.GetTile.TileMatrixSets not implemented yet</ctl:message>
						<ctl:warning/>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Client.KVP.GET.GetTile.TileMatrixSets not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Client.KVP.GET.GetTile.TileMatrixSets test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Client.KVP.POST.GetTile.Mandatory" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid KVP POST GetTile request with the mandatory request parameter with a value of GetTile;
	2.  the request entity is a valid KVP POST GetTile request with the mandatory service parameter with a value of WMTS;
	3.  the request entity is a valid KVP POST GetTile request with the mandatory Version parameter with a value of 1.0.0;
	4.  the request entity is a valid KVP POST GetTile request with the mandatory Layer parameter with a layer identifier value equal to a &lt;Layer&gt;&lt;ows:Identifier&gt; value from the Service Metadata document;
	5.  the request entity is a valid KVP POST GetTile request with the mandatory Style parameter with a style identifier value equal to a &lt;Layer&gt;&lt;Style&gt;&lt;owsIdentifier&gt; value for the specified Layer from the Service Metadata document;
	6.  the request entity is a valid KVP POST GetTile request with the mandatory Format parameter with a MIME type format value equal to a &lt;Layer&gt;&lt;Format&gt; value for the specified Layer from the Service Metadata document;
	7.  the request entity is a valid KVP POST GetTile request with the mandatory TileMatrixSet parameter with a TileMatrixSet identifier value equal to a &lt;Layer&gt;&lt;TileMatrixSetLink&gt;&lt;TileMatrixSet&gt; value for the specified Layer from the Service Metadata document;
	8.  the request entity is a valid KVP POST GetTile request with the mandatory TileMatrix parameter with a TileMatrix identifier value equal to a &lt;TileMatrixSet&gt;&lt;TileMatrix&gt;&lt;owsIdentifier&gt; value for the specified TileMatrixSet from the Service Metadata document;
	9.  the request entity is a valid KVP POST GetTile request with the mandatory TileRow parameter with a TileRow index value from zero to the value of &lt;MatrixHeight&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	10.  the request entity is a valid KVP POST GetTile request with the mandatory TileCol parameter with a TileCol index value from zero to the value of &lt;MatrixWidth&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	11.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileRow index value within the TileMatrixLimits MinTileRow and MaxTileRow values.
	12.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileCol index value within the TileMatrixLimits MinTileCol and MaxTileCol values.
	13.  the client can generate a valid KVP POST GetTile request for sample tiles from each Layer, in each style for the layer, in each image format for the layer, from each TileMatrix from each TileMatrixSet for the layer offered by the server.	</ctl:assertion>
	<ctl:comment>Test that a WMTS client can parse a Service Metadata document returned from a GetCapabilities request to determine the layers and tiles available, and can issue valid KVP POST GetTile requests with mandatory parameters.</ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Client.KVP.POST.GetTile.Mandatory</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:message>Client.KVP.POST.GetTile.Mandatory not implemented yet</ctl:message>
						<ctl:warning/>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Client.KVP.POST.GetTile.Mandatory not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Client.KVP.POST.GetTile.Mandatory test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Client.KVP.POST.GetTile.Optional" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid KVP POST GetTile request with the mandatory request parameter with a value of GetTile;
	2.  the request entity is a valid KVP POST GetTile request with the mandatory service parameter with a value of WMTS;
	3.  the request entity is a valid KVP POST GetTile request with the mandatory Version parameter with a value of 1.0.0;
	4.  the request entity is a valid KVP POST GetTile request with the mandatory Layer parameter with a layer identifier value equal to a &lt;Layer&gt;&lt;ows:Identifier&gt; value from the Service Metadata document;
	5.  the request entity is a valid KVP POST GetTile request with the mandatory Style parameter with a style identifier value equal to a &lt;Layer&gt;&lt;Style&gt;&lt;owsIdentifier&gt; value for the specified Layer from the Service Metadata document;
	6.  the request entity is a valid KVP POST GetTile request with the mandatory Format parameter with a MIME type format value equal to a &lt;Layer&gt;&lt;Format&gt; value for the specified Layer from the Service Metadata document;
	7.  the request entity is a valid KVP POST GetTile request with the mandatory TileMatrixSet parameter with a TileMatrixSet identifier value equal to a &lt;Layer&gt;&lt;TileMatrixSetLink&gt;&lt;TileMatrixSet&gt; value for the specified Layer from the Service Metadata document;
	8.  the request entity is a valid KVP POST GetTile request with the mandatory TileMatrix parameter with a TileMatrix identifier value equal to a &lt;TileMatrixSet&gt;&lt;TileMatrix&gt;&lt;owsIdentifier&gt; value for the specified TileMatrixSet from the Service Metadata document;
	9.  the request entity is a valid KVP POST GetTile request with the mandatory TileRow parameter with a TileRow index value from zero to the value of &lt;MatrixHeight&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	10.  the request entity is a valid KVP POST GetTile request with the mandatory TileCol parameter with a TileCol index value from zero to the value of &lt;MatrixWidth&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	11.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileRow index value within the TileMatrixLimits MinTileRow and MaxTileRow values.
	12.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileCol index value within the TileMatrixLimits MinTileCol and MaxTileCol values.
	13.  the request entity is a valid KVP POST GetTile request with an optional sample dimensions parameter with a name from a &lt;Dimension&gt;&lt;ows:Identifier&gt; value for the specified Layer from the Service Metadata document;
	14.  the request entity is a valid KVP POST GetTile request with an optional sample dimensions parameter with a value from one of the &lt;Dimension&gt;&lt;Value&gt; elements for the specified Dimension from the Service Metadata document.
	15.  the client can generate a valid KVP POST GetTile request for sample tiles from each Layer with sample dimensions, in each style for the layer, in each image format for the layer, for each sample dimension value for each sample dimension for the layer, from each TileMatrix from each TileMatrixSet for the layer offered by the server.</ctl:assertion>
	<ctl:comment>Test that a WMTS client can parse a Service Metadata document returned from a GetCapabilities request to determine the sample dimensions for a Layer with sample dimensions advertised by a server (e.g. Time, Elevation, Band), and issue KVP POST GetTile requests with mandatory parameters and a supported sample dimensions parameter with a valid value from the range specified in the Service Metadata document.</ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Client.KVP.POST.GetTile.Optional</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:message>Client.KVP.POST.GetTile.Optional not implemented yet</ctl:message>
						<ctl:warning/>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Client.KVP.POST.GetTile.Optional not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Client.KVP.POST.GetTile.Optional test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Client.KVP.POST.GetTile.Contiguous" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the client can parse a Service Metadata document to identify contiguous tiles served by a server;
	2.  the client issues valid KVP POST GetTile requests for contiguous tiles;
	3.  the server returns the requested tiles;
	4.  the client displays the contiguous tiles without any discontinuity.	</ctl:assertion>
	<ctl:comment>Verify that a client is capable of generating contiguous GetTile operation requests.</ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Client.KVP.POST.GetTile.Contiguous</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:message>Client.KVP.POST.GetTile.Contiguous not implemented yet</ctl:message>
						<ctl:warning/>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Client.KVP.POST.GetTile.Contiguous not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Client.KVP.POST.GetTile.Contiguous test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Client.KVP.POST.GetTile.Overlay" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the client can parse a Service Metadata document to identify overlay tiles served by a server;
	2.  the client issues valid KVP POST GetTile requests for overlay tiles;
	3.  the server returns the requested tiles;
	4.  the the client is able to display the overlay tiles correctly overlaid and with a transparency when NODATA is present on the upper images.</ctl:assertion>
	<ctl:comment>Verify that a client is capable to generating overlaying GetTile operation requests, each one for a different layer.</ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Client.KVP.POST.GetTile.Overlay</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:message>Client.KVP.POST.GetTile.Overlay not implemented yet</ctl:message>
						<ctl:warning/>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Client.KVP.POST.GetTile.Overlay not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Client.KVP.POST.GetTile.Overlay test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Client.KVP.POST.GetTile.TileMatrixSets" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the client can parse a Service Metadata document to identify overlay tiles from different TileMatrixSets;
	2.  the client issues valid KVP POST GetTile requests for tiles from different TileMatrixSets;
	3.  the server returns the requested tiles;
	4.  the the client is able to display the overlay tiles correctly overlaid.	</ctl:assertion>
	<ctl:comment>Verify that a client can correctly overlay layers with layers having different TileMatrixSets.</ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Client.KVP.POST.GetTile.TileMatrixSets</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:message>Client.KVP.POST.GetTile.TileMatrixSets not implemented yet</ctl:message>
						<ctl:warning/>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Client.KVP.POST.GetTile.TileMatrixSets not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Client.KVP.POST.GetTile.TileMatrixSets test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Client.XML.POST.GetTile.Mandatory" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid XML POST GetTile request with the mandatory request parameter with a value of GetTile;
	2.  the request entity is a valid XML POST GetTile request with the mandatory service parameter with a value of WMTS;
	3.  the request entity is a valid XML POST GetTile request with the mandatory Version parameter with a value of 1.0.0;
	4.  the request entity is a valid XML POST GetTile request with the mandatory Layer parameter with a layer identifier value equal to a &lt;Layer&gt;&lt;ows:Identifier&gt; value from the Service Metadata document;
	5.  the request entity is a valid XML POST GetTile request with the mandatory Style parameter with a style identifier value equal to a &lt;Layer&gt;&lt;Style&gt;&lt;owsIdentifier&gt; value for the specified Layer from the Service Metadata document;
	6.  the request entity is a valid XML POST GetTile request with the mandatory Format parameter with a MIME type format value equal to a &lt;Layer&gt;&lt;Format&gt; value for the specified Layer from the Service Metadata document;
	7.  the request entity is a valid XML POST GetTile request with the mandatory TileMatrixSet parameter with a TileMatrixSet identifier value equal to a &lt;Layer&gt;&lt;TileMatrixSetLink&gt;&lt;TileMatrixSet&gt; value for the specified Layer from the Service Metadata document;
	8.  the request entity is a valid XML POST GetTile request with the mandatory TileMatrix parameter with a TileMatrix identifier value equal to a &lt;TileMatrixSet&gt;&lt;TileMatrix&gt;&lt;owsIdentifier&gt; value for the specified TileMatrixSet from the Service Metadata document;
	9.  the request entity is a valid XML POST GetTile request with the mandatory TileRow parameter with a TileRow index value from zero to the value of &lt;MatrixHeight&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	10.  the request entity is a valid XML POST GetTile request with the mandatory TileCol parameter with a TileCol index value from zero to the value of &lt;MatrixWidth&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	11.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileRow index value within the TileMatrixLimits MinTileRow and MaxTileRow values.
	12.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileCol index value within the TileMatrixLimits MinTileCol and MaxTileCol values.
	13.  the client can generate a valid XML POST GetTile request for sample tiles from each Layer, in each style for the layer, in each image format for the layer, from each TileMatrix from each TileMatrixSet for the layer offered by the server.</ctl:assertion>
	<ctl:comment>Test that a WMTS client can parse a Service Metadata document returned from a GetCapabilities request to determine the layers and tiles available, and can issue valid XML POST GetTile requests with mandatory parameters. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Client.XML.POST.GetTile.Mandatory</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:message>Client.XML.POST.GetTile.Mandatory not implemented yet</ctl:message>
						<ctl:warning/>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Client.XML.POST.GetTile.Mandatory not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Client.XML.POST.GetTile.Mandatory test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Client.XML.POST.GetTile.Optional" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid XML POST GetTile request with the mandatory request parameter with a value of GetTile;
	2.  the request entity is a valid XML POST GetTile request with the mandatory service parameter with a value of WMTS;
	3.  the request entity is a valid XML POST GetTile request with the mandatory Version parameter with a value of 1.0.0;
	4.  the request entity is a valid XML POST GetTile request with the mandatory Layer parameter with a layer identifier value equal to a &lt;Layer&gt;&lt;ows:Identifier&gt; value from the Service Metadata document;
	5.  the request entity is a valid XML POST GetTile request with the mandatory Style parameter with a style identifier value equal to a &lt;Layer&gt;&lt;Style&gt;&lt;owsIdentifier&gt; value for the specified Layer from the Service Metadata document;
	6.  the request entity is a valid XML POST GetTile request with the mandatory Format parameter with a MIME type format value equal to a &lt;Layer&gt;&lt;Format&gt; value for the specified Layer from the Service Metadata document;
	7.  the request entity is a valid XML POST GetTile request with the mandatory TileMatrixSet parameter with a TileMatrixSet identifier value equal to a &lt;Layer&gt;&lt;TileMatrixSetLink&gt;&lt;TileMatrixSet&gt; value for the specified Layer from the Service Metadata document;
	8.  the request entity is a valid XML POST GetTile request with the mandatory TileMatrix parameter with a TileMatrix identifier value equal to a &lt;TileMatrixSet&gt;&lt;TileMatrix&gt;&lt;owsIdentifier&gt; value for the specified TileMatrixSet from the Service Metadata document;
	9.  the request entity is a valid XML POST GetTile request with the mandatory TileRow parameter with a TileRow index value from zero to the value of &lt;MatrixHeight&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	10.  the request entity is a valid XML POST GetTile request with the mandatory TileCol parameter with a TileCol index value from zero to the value of &lt;MatrixWidth&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	11.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileRow index value within the TileMatrixLimits MinTileRow and MaxTileRow values.
	12.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileCol index value within the TileMatrixLimits MinTileCol and MaxTileCol values.
	13.  the request entity is a valid XML POST GetTile request with an optional sample dimensions parameter with a name from a &lt;Dimension&gt;&lt;ows:Identifier&gt; value for the specified Layer from the Service Metadata document;
	14.  the request entity is a valid XML POST GetTile request with an optional sample dimensions parameter with a value from one of the &lt;Dimension&gt;&lt;Value&gt; elements for the specified Dimension from the Service Metadata document.
	15.  the client can generate a valid XML POST GetTile request for sample tiles from each Layer with sample dimensions, in each style for the layer, in each image format for the layer, for each sample dimension value for each sample dimension for the layer, from each TileMatrix from each TileMatrixSet for the layer offered by the server.</ctl:assertion>
	<ctl:comment>Test that a WMTS client can parse a Service Metadata document returned from a GetCapabilities request to determine the sample dimensions for a Layer with sample dimensions advertised by a server (e.g. Time, Elevation, Band), and issue XML POST GetTile requests with mandatory parameters and a supported sample dimensions parameter with a valid value from the range specified in the Service Metadata document. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Client.XML.POST.GetTile.Optional</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:message>Client.XML.POST.GetTile.Optional not implemented yet</ctl:message>
						<ctl:warning/>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Client.XML.POST.GetTile.Optional not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Client.XML.POST.GetTile.Optional test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Client.XML.POST.GetTile.Contiguous" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the client can parse a Service Metadata document to identify contiguous tiles served by a server;
	2.  the client issues valid XML POST GetTile requests for contiguous tiles;
	3.  the server returns the requested tiles;
	4.  the client displays the contiguous tiles without any discontinuity.	</ctl:assertion>
	<ctl:comment>Verify that a client is capable of generating contiguous GetTile operation requests.</ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Client.XML.POST.GetTile.Contiguous</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:message>Client.XML.POST.GetTile.Contiguous not implemented yet</ctl:message>
						<ctl:warning/>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Client.XML.POST.GetTile.Contiguous not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Client.XML.POST.GetTile.Contiguous test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Client.XML.POST.GetTile.Overlay" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the client can parse a Service Metadata document to identify overlay tiles served by a server;
	2.  the client issues valid XML POST GetTile requests for overlay tiles;
	3.  the server returns the requested tiles;
	4.  the the client is able to display the overlay tiles correctly overlaid and with a transparency when NODATA is present on the upper images.</ctl:assertion>
	<ctl:comment>Verify that a client is capable to generating overlaying GetTile operation requests, each one for a different layer.</ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Client.XML.POST.GetTile.Overlay</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:message>Client.XML.POST.GetTile.Overlay not implemented yet</ctl:message>
						<ctl:warning/>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Client.XML.POST.GetTile.Overlay not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Client.XML.POST.GetTile.Overlay test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Client.XML.POST.GetTile.TileMatrixSets" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the client can parse a Service Metadata document to identify overlay tiles from different TileMatrixSets;
	2.  the client issues valid XML POST GetTile requests for tiles from different TileMatrixSets;
	3.  the server returns the requested tiles;
	4.  the the client is able to display the overlay tiles correctly overlaid.</ctl:assertion>
	<ctl:comment>Verify that a client can correctly overlay layers with layers having different TileMatrixSets.</ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Client.XML.POST.GetTile.TileMatrixSets</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:message>Client.XML.POST.GetTile.TileMatrixSets not implemented yet</ctl:message>
						<ctl:warning/>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Client.XML.POST.GetTile.TileMatrixSets not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Client.XML.POST.GetTile.TileMatrixSets test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Client.SOAP.POST.GetTile.Mandatory" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid SOAP POST GetTile request using SOAP version 1.2 encoding with the mandatory request parameter with a value of GetTile;
	2.  the request entity is a valid SOAP POST GetTile request with the mandatory service parameter with a value of WMTS;
	3.  the request entity is a valid SOAP POST GetTile request with the mandatory Version parameter with a value of 1.0.0;
	4.  the request entity is a valid SOAP POST GetTile request with the mandatory Layer parameter with a layer identifier value equal to a &lt;Layer&gt;&lt;ows:Identifier&gt; value from the Service Metadata document;
	5.  the request entity is a valid SOAP POST GetTile request with the mandatory Style parameter with a style identifier value equal to a &lt;Layer&gt;&lt;Style&gt;&lt;owsIdentifier&gt; value for the specified Layer from the Service Metadata document;
	6.  the request entity is a valid SOAP POST GetTile request with the mandatory Format parameter with a MIME type format value equal to a &lt;Layer&gt;&lt;Format&gt; value for the specified Layer from the Service Metadata document;
	7.  the request entity is a valid SOAP POST GetTile request with the mandatory TileMatrixSet parameter with a TileMatrixSet identifier value equal to a &lt;Layer&gt;&lt;TileMatrixSetLink&gt;&lt;TileMatrixSet&gt; value for the specified Layer from the Service Metadata document;
	8.  the request entity is a valid SOAP POST GetTile request with the mandatory TileMatrix parameter with a TileMatrix identifier value equal to a &lt;TileMatrixSet&gt;&lt;TileMatrix&gt;&lt;owsIdentifier&gt; value for the specified TileMatrixSet from the Service Metadata document;
	9.  the request entity is a valid SOAP POST GetTile request with the mandatory TileRow parameter with a TileRow index value from zero to the value of &lt;MatrixHeight&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	10.  the request entity is a valid SOAP POST GetTile request with the mandatory TileCol parameter with a TileCol index value from zero to the value of &lt;MatrixWidth&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	11.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileRow index value within the TileMatrixLimits MinTileRow and MaxTileRow values.
	12.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileCol index value within the TileMatrixLimits MinTileCol and MaxTileCol values.
	13.  the client can generate a valid SOAP POST GetTile request for sample tiles from each Layer, in each style for the layer, in each image format for the layer, from each TileMatrix from each TileMatrixSet for the layer offered by the server.</ctl:assertion>
	<ctl:comment>Test that a WMTS client can parse a Service Metadata document returned from a GetCapabilities request to determine the layers and tiles available, and can issue valid SOAP POST GetTile requests with mandatory parameters. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Client.SOAP.POST.GetTile.Mandatory</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:message>Client.SOAP.POST.GetTile.Mandatory not implemented yet</ctl:message>
						<ctl:warning/>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Client.SOAP.POST.GetTile.Mandatory not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Client.SOAP.POST.GetTile.Mandatory test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Client.SOAP.POST.GetTile.Optional" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid SOAP POST GetTile request using SOAP version 1.2 encoding with the mandatory request parameter with a value of GetTile;
	2.  the request entity is a valid SOAP POST GetTile request with the mandatory service parameter with a value of WMTS;
	3.  the request entity is a valid SOAP POST GetTile request with the mandatory Version parameter with a value of 1.0.0;
	4.  the request entity is a valid SOAP POST GetTile request with the mandatory Layer parameter with a layer identifier value equal to a &lt;Layer&gt;&lt;ows:Identifier&gt; value from the Service Metadata document;
	5.  the request entity is a valid SOAP POST GetTile request with the mandatory Style parameter with a style identifier value equal to a &lt;Layer&gt;&lt;Style&gt;&lt;owsIdentifier&gt; value for the specified Layer from the Service Metadata document;
	6.  the request entity is a valid SOAP POST GetTile request with the mandatory Format parameter with a MIME type format value equal to a &lt;Layer&gt;&lt;Format&gt; value for the specified Layer from the Service Metadata document;
	7.  the request entity is a valid SOAP POST GetTile request with the mandatory TileMatrixSet parameter with a TileMatrixSet identifier value equal to a &lt;Layer&gt;&lt;TileMatrixSetLink&gt;&lt;TileMatrixSet&gt; value for the specified Layer from the Service Metadata document;
	8.  the request entity is a valid SOAP POST GetTile request with the mandatory TileMatrix parameter with a TileMatrix identifier value equal to a &lt;TileMatrixSet&gt;&lt;TileMatrix&gt;&lt;owsIdentifier&gt; value for the specified TileMatrixSet from the Service Metadata document;
	9.  the request entity is a valid SOAP POST GetTile request with the mandatory TileRow parameter with a TileRow index value from zero to the value of &lt;MatrixHeight&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	10.  the request entity is a valid SOAP POST GetTile request with the mandatory TileCol parameter with a TileCol index value from zero to the value of &lt;MatrixWidth&gt; minus 1 for the specified TileMatrix from the Service Metadata document;
	11.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileRow index value within the TileMatrixLimits MinTileRow and MaxTileRow values.
	12.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileCol index value within the TileMatrixLimits MinTileCol and MaxTileCol values.
	13.  the request entity is a valid SOAP POST GetTile request with an optional sample dimensions parameter with a name from a &lt;Dimension&gt;&lt;ows:Identifier&gt; value for the specified Layer from the Service Metadata document;
	14.  the request entity is a valid SOAP POST GetTile request with an optional sample dimensions parameter with a value from one of the &lt;Dimension&gt;&lt;Value&gt; elements for the specified Dimension from the Service Metadata document.
	15.  the client can generate a valid SOAP POST GetTile request for sample tiles from each Layer with sample dimensions, in each style for the layer, in each image format for the layer, for each sample dimension value for each sample dimension for the layer, from each TileMatrix from each TileMatrixSet for the layer offered by the server.</ctl:assertion>
	<ctl:comment>Test that a WMTS client can parse a Service Metadata document returned from a GetCapabilities request to determine the sample dimensions for a Layer with sample dimensions advertised by a server (e.g. Time, Elevation, Band), and issue SOAP POST GetTile requests with mandatory parameters and a supported sample dimensions parameter with a valid value from the range specified in the Service Metadata document. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Client.SOAP.POST.GetTile.Optional</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:message>Client.SOAP.POST.GetTile.Optional not implemented yet</ctl:message>
						<ctl:warning/>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Client.SOAP.POST.GetTile.Optional not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Client.SOAP.POST.GetTile.Optional test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Client.SOAP.POST.GetTile.Contiguous" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the client can parse a Service Metadata document to identify contiguous tiles served by a server;
	2.  the client issues valid SOAP POST GetTile requests for contiguous tiles, using SOAP version 1.2 encoding;
	3.  the server returns the requested tiles;
	4.  the client displays the contiguous tiles without any discontinuity.</ctl:assertion>
	<ctl:comment>Verify that a client is capable of generating contiguous SOAP POST GetTile operation requests.</ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Client.SOAP.POST.GetTile.Contiguous</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:message>Client.SOAP.POST.GetTile.Contiguous not implemented yet</ctl:message>
						<ctl:warning/>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Client.SOAP.POST.GetTile.Contiguous not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Client.SOAP.POST.GetTile.Contiguous test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Client.SOAP.POST.GetTile.Overlay" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the client can parse a Service Metadata document to identify overlay tiles served by a server;
	2.  the client issues valid SOAP POST GetTile requests for overlay tiles, using SOAP version 1.2 encoding;
	3.  the server returns the requested tiles;
	4.  the the client is able to display the overlay tiles correctly overlaid and with a transparency when NODATA is present on the upper images.</ctl:assertion>
	<ctl:comment>Verify that a client is capable to generating overlaying SOAP POST GetTile operation requests, each one for a different layer.</ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Client.SOAP.POST.GetTile.Overlay</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:message>Client.SOAP.POST.GetTile.Overlay not implemented yet</ctl:message>
						<ctl:warning/>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Client.SOAP.POST.GetTile.Overlay not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Client.SOAP.POST.GetTile.Overlay test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Client.SOAP.POST.GetTile.TileMatrixSets" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the client can parse a Service Metadata document to identify overlay tiles from different TileMatrixSets;
	2.  the client issues valid SOAP POST GetTile requests for tiles from different TileMatrixSets, using SOAP version 1.2 encoding;
	3.  the server returns the requested tiles;
	4.  the the client is able to display the overlay tiles correctly overlaid.</ctl:assertion>
	<ctl:comment>Verify that a client can correctly overlay layers with layers having different TileMatrixSets.</ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Client.SOAP.POST.GetTile.TileMatrixSets</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:message>Client.SOAP.POST.GetTile.TileMatrixSets not implemented yet</ctl:message>
						<ctl:warning/>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Client.SOAP.POST.GetTile.TileMatrixSets not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Client.SOAP.POST.GetTile.TileMatrixSets test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Client.RESTful.GetTile.Mandatory" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid RESTful GetTile request URL with the mandatory Layer identifier value provided in the ResourceURL template;
	2.  the request entity is a valid RESTful GetTile request URL with the mandatory Style identifier value equal to a &lt;Layer&gt;&lt;Style&gt;&lt;owsIdentifier&gt; value for the specified Layer from the Service Metadata document substituted in place of the "style" URL template variable;
	3.  the request entity is a valid RESTful GetTile request URL with the mandatory Format MIME type format value provided in the ResourceURL template;
	4.  the request entity is a valid RESTful GetTile request URL with the mandatory TileMatrixSet identifier value equal to a &lt;Layer&gt;&lt;TileMatrixSetLink&gt;&lt;TileMatrixSet&gt; value for the specified Layer from the Service Metadata document substituted in place of the "TileMatrixSet" URL template variable;
	5.  the request entity is a valid RESTful GetTile request URL with the mandatory TileMatrix identifier value equal to a &lt;TileMatrixSet&gt;&lt;TileMatrix&gt;&lt;owsIdentifier&gt; value for the specified TileMatrixSet from the Service Metadata document substituted in place of the "TileMatrix" URL template variable;
	6.  the request entity is a valid RESTful GetTile request URL with the mandatory TileRow index value from zero to the value of &lt;MatrixHeight&gt; minus 1 for the specified TileMatrix from the Service Metadata document substituted in place of the "TileRow" URL template variable;
	7.  the request entity is a valid RESTful GetTile request URL with the mandatory TileCol index value from zero to the value of &lt;MatrixWidth&gt; minus 1 for the specified TileMatrix from the Service Metadata document substituted in place of the "TileCol" URL template variable;
	8.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileRow index value within the TileMatrixLimits MinTileRow and MaxTileRow values.
	9.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileCol index value within the TileMatrixLimits MinTileCol and MaxTileCol values.
	10.  the client can generate a valid RESTful GetTile request for sample tiles from each Layer, in each style for the layer, in each image format for the layer, from each TileMatrix from each TileMatrixSet for the layer offered by the server.</ctl:assertion>
	<ctl:comment>Test that a WMTS client can parse a Service Metadata document returned from a GetCapabilities request to determine the layers and tiles available, and can execute a template processor to generate valid RESTful GetTile URLs with mandatory information from a ResourceURL provided by the server in a Layer element of the Contents section of the Service Metadata document. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Client.RESTful.GetTile.Mandatory</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:message>Client.RESTful.GetTile.Mandatory not implemented yet</ctl:message>
						<ctl:warning/>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Client.RESTful.GetTile.Mandatory not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Client.RESTful.GetTile.Mandatory test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Client.RESTful.GetTile.Optional" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the request entity is a valid RESTful GetTile request URL with the mandatory Layer identifier value provided in the ResourceURL template;
	2.  the request entity is a valid RESTful GetTile request URL with the mandatory Style identifier value equal to a &lt;Layer&gt;&lt;Style&gt;&lt;owsIdentifier&gt; value for the specified Layer from the Service Metadata document substituted in place of the "style" URL template variable;
	3.  the request entity is a valid RESTful GetTile request URL with the mandatory Format MIME type format value provided in the ResourceURL template;
	4.  the request entity is a valid RESTful GetTile request URL with the mandatory TileMatrixSet identifier value equal to a &lt;Layer&gt;&lt;TileMatrixSetLink&gt;&lt;TileMatrixSet&gt; value for the specified Layer from the Service Metadata document substituted in place of the "TileMatrixSet" URL template variable;
	5.  the request entity is a valid RESTful GetTile request URL with the mandatory TileMatrix identifier value equal to a &lt;TileMatrixSet&gt;&lt;TileMatrix&gt;&lt;owsIdentifier&gt; value for the specified TileMatrixSet from the Service Metadata document substituted in place of the "TileMatrix" URL template variable;
	6.  the request entity is a valid RESTful GetTile request URL with the mandatory TileRow index value from zero to the value of &lt;MatrixHeight&gt; minus 1 for the specified TileMatrix from the Service Metadata document substituted in place of the "TileRow" URL template variable;
	7.  the request entity is a valid RESTful GetTile request URL with the mandatory TileCol index value from zero to the value of &lt;MatrixWidth&gt; minus 1 for the specified TileMatrix from the Service Metadata document substituted in place of the "TileCol" URL template variable;
	8.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileRow index value within the TileMatrixLimits MinTileRow and MaxTileRow values.
	9.  the request entity for a tile from a Layer with TileMatrixSetLimits with TileMatrixLimits that references the identifier of the TileMatrix for the tile specifies a TileCol index value within the TileMatrixLimits MinTileCol and MaxTileCol values.
	10.  the request entity is a valid RESTful GetTile request URL with an optional sample dimensions parameter with a with a name from a &lt;Dimension&gt;&lt;ows:Identifier&gt; value for the specified Layer from the Service Metadata document;
	11.  the request entity is a valid RESTful GetTile request URL with an optional sample dimensions parameter with a value from one of the &lt;Dimension&gt;&lt;Value&gt; elements for the specified Dimension from the Service Metadata document;
	12.  the client can generate a valid SOAP POST GetTile request for sample tiles from each Layer with sample dimensions, in each style for the layer, in each image format for the layer, for each sample dimension value for each sample dimension for the layer, from each TileMatrix from each TileMatrixSet for the layer offered by the server.</ctl:assertion>
	<ctl:comment>Test that a WMTS client can parse a Service Metadata document returned from a GetCapabilities request to determine the sample dimensions for a Layer with sample dimensions advertised by a server (e.g. Time, Elevation, Band), can execute a template processor to generate valid RESTful GetTile URLs with mandatory parameters and a supported sample dimensions parameter with a valid value from the range specified in the Service Metadata document, from a ResourceURL provided by the server in the Service Metadata document. </ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Client.RESTful.GetTile.Optional</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:message>Client.RESTful.GetTile.Optional not implemented yet</ctl:message>
						<ctl:warning/>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Client.RESTful.GetTile.Optional not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Client.RESTful.GetTile.Optional test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Client.RESTful.GetTile.Contiguous" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the client can parse a Service Metadata document to identify contiguous tiles served by a server;
	2.  the client invokes valid RESTful GetTile request URLs for contiguous tiles;
	3.  the server returns the requested tiles;
	4.  the client displays the contiguous tiles without any discontinuity.</ctl:assertion>
	<ctl:comment>Verify that a client is capable of generating contiguous GetTile operation requests.</ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Client.RESTful.GetTile.Contiguous</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:message>Client.RESTful.GetTile.Contiguous not implemented yet</ctl:message>
						<ctl:warning/>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Client.RESTful.GetTile.Contiguous not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Client.RESTful.GetTile.Contiguous test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Client.RESTful.GetTile.Overlay" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the client can parse a Service Metadata document to identify overlay tiles served by a server;
	2.  the client invokes valid RESTful GetTile request URLs for overlay tiles;
	3.  the server returns the requested tiles;
	4.  the the client is able to display the overlay tiles correctly overlaid and with a transparency when NODATA is present on the upper images.</ctl:assertion>
	<ctl:comment>Verify that a client is capable to generating overlaying GetTile operation requests, each one for a different layer.</ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Client.RESTful.GetTile.Overlay</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:message>Client.RESTful.GetTile.Overlay not implemented yet</ctl:message>
						<ctl:warning/>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Client.RESTful.GetTile.Overlay not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Client.RESTful.GetTile.Overlay test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>

<ctl:test name="wmts:Client.RESTful.GetTile.TileMatrixSets" type="MandatoryIfImplemented">
	<ctl:param name="metPrerequisites">Bootstrap prerequisites test result for this test - true or false</ctl:param>
	<ctl:param name="selected">This test was selected for execution - true or false </ctl:param>
	<ctl:context>wmts:main</ctl:context>
	<ctl:assertion>
	1.  the client can parse a Service Metadata document to identify overlay tiles from different TileMatrixSets;
	2.  the client invokes valid RESTful GetTile request URLs for tiles from different TileMatrixSets;
	3.  the server returns the requested tiles;
	4.  the the client is able to display the overlay tiles correctly overlaid.</ctl:assertion>
	<ctl:comment>Verify that a client can correctly overlay layers with layers having different TileMatrixSets.</ctl:comment>
	<ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html#Client.RESTful.GetTile.TileMatrixSets</ctl:link>
	<ctl:code>
		<xsl:choose>
			<xsl:when test="$metPrerequisites = 'true' ">
				<xsl:choose>
					<xsl:when test="$selected = 'true' ">
						<ctl:message>Client.RESTful.GetTile.TileMatrixSets not implemented yet</ctl:message>
						<ctl:warning/>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>Client.RESTful.GetTile.TileMatrixSets not tested.</ctl:message>
						<ctl:notTested/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<ctl:message>Client.RESTful.GetTile.TileMatrixSets test skipped because its prerequisites were not met.</ctl:message>
				<ctl:skipped/>
			</xsl:otherwise>
		</xsl:choose>
	</ctl:code>
</ctl:test>


</ctl:package>