<?xml version="1.0" encoding="UTF-8"?>
<ctl:package 
	xmlns:ctl="http://www.occamlab.com/ctl" 
	xmlns:gml="http://www.opengis.net/gml" 
	xmlns:html="http://www.w3.org/1999/xhtml" 	
	xmlns:ogc="http://www.opengis.net/ogc"
	xmlns:ows="http://www.opengis.net/ows/1.1" 
	xmlns:parsers="http://www.occamlab.com/te/parsers"
	xmlns:saxon="http://saxon.sf.net/" 
    xmlns:te="http://www.occamlab.com/te"
	xmlns:tep="http://teamengine.sourceforge.net/parsers" 
	xmlns:xi="http://www.w3.org/2001/XInclude" 
	xmlns:xlink="http://www.w3.org/1999/xlink"
	xmlns:xml="http://www.w3.org/XML/1998/namespace"
	xmlns:xsd="http://www.w3.org/2001/XMLSchema"
	xmlns:xsl="http://www.w3.org/1999/XSL/Transform" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:wmts="http://www.opengis.net/wmts/1.0"
	xmlns:ctlFunctions="https://cite.opengeospatial.org/wmts-1.0.0/src/ctl/ctlFunctions.xml"	
	xmlns:owsFunctions="https://cite.opengeospatial.org/wmts-1.0.0/src/ctl/owsFunctions.xml"	
	xmlns:wwwFunctions="https://cite.opengeospatial.org/wmts-1.0.0/src/ctl/wwwFunctions.xml"	
	xmlns:wmtsFunctions="https://cite.opengeospatial.org/wmts-1.0.0/src/ctl/wmtsFunctions.xml"	
	xmlns:wmtsBootstrap="https://cite.opengeospatial.org/wmts-1.0.0/src/ctl/bootstrap.xml"
>
	<ctl:suite name="wmts:suite">		
		<ctl:title>WMTS 1.0 Compliance Test Suite</ctl:title>
		<ctl:description>Verifies that a WMTS 1.0 client or server implementation complies with a given conformance classes.</ctl:description>
        <ctl:link>docs/wmts/1.0/WMTS 1.0 ATS.html</ctl:link>		
		<ctl:defaultResult>Pass</ctl:defaultResult>
		<ctl:starting-test>wmts:main</ctl:starting-test>
	</ctl:suite>
	
	<ctl:test name="wmts:main"  type="Mandatory">
      	<ctl:context>wmts:suite</ctl:context>
		<ctl:assertion>The IUT satisfies all applicable assertions.</ctl:assertion>
		<ctl:code>
			<ctl:call-function name="ctl:startStopwatch">
				<ctl:with-param name="watchName">wmts.main</ctl:with-param>
			</ctl:call-function>
			<xsl:variable name="mode">
				<ctl:getMode/>
			</xsl:variable>
			<xsl:choose>
				<xsl:when test="$mode = 'Redo From Cache Mode' ">
					<ctl:message>Mode is <xsl:value-of select="$mode"/> - reuse Bootstrap Capabilities Document and Prerequisites from cache.</ctl:message>
					
					<xsl:variable name="wmts.capabilities.doc">
						<ctl:call-function name="ctl:getLogCache">
							<ctl:with-param name="id">capabilities</ctl:with-param>
						</ctl:call-function>
					</xsl:variable>

					<xsl:choose>
						<xsl:when test="$wmts.capabilities.doc">
							<ctl:message>Retrieved bootstrap wmts.capabilities.doc from cache</ctl:message>
							
							<ctl:call-function name="ctl:putLogCache">
								<ctl:with-param name="id">capabilities</ctl:with-param>
								<ctl:with-param name="xmlToCache"><xsl:copy-of select="$wmts.capabilities.doc"/></ctl:with-param> 
							</ctl:call-function>
							
							<xsl:variable name="bootstrap">
								<ctl:call-function name="ctl:getLogCache">
									<ctl:with-param name="id">bootstrap</ctl:with-param>
								</ctl:call-function>
							</xsl:variable>
									
							<xsl:choose>
								<xsl:when test="$bootstrap">
									<ctl:message>Retrieved Bootstrap Prerequisites from cache.</ctl:message>
									
									<ctl:call-function name="ctl:putLogCache">
										<ctl:with-param name="id">bootstrap</ctl:with-param>
										<ctl:with-param name="xmlToCache"><xsl:copy-of select="$bootstrap"/></ctl:with-param> 
									</ctl:call-function>
									
									<xsl:variable name="form-values">
										<ctl:form>						
											<body>
												<h2 align="center">Compliance test suite for Web Map Tile Service (WMTS) 1.0</h2>
												<p/>
												<blockquote>
													<table width="400" border="0" padding="4" bgcolor="#00ffff" align="center">
														<tr>
															<th colspan="3" align="center">Test Selection - From Cache or New</th>
														</tr>
														<tr/>
														<tr>
															<td colspan="3" align="left">Please click one of the following radio buttons, then click OK</td>
														</tr>
														<tr>
															<td width="80"><input type="radio" name="newOrFromCache" checked="true" value="cached">Cached Selections</input></td>
															<td width="80"><input type="radio" name="newOrFromCache" value="new">New Selections</input></td>
															<td align="right"><input type="submit" value="OK" /></td>
																</tr>			
													</table>
												</blockquote>
											</body>
										</ctl:form>
									</xsl:variable>
									<xsl:variable name="reselect" select="$form-values/values/value[@key='newOrFromCache']"/>
									<xsl:variable name="selected">
										<xsl:choose>
											<xsl:when test="$reselect = 'new' ">
												<ctl:call-function name="wmts:testMenus">
													<ctl:with-param name="bootstrap" select="$bootstrap/*"/>
												</ctl:call-function>
											</xsl:when>
											<xsl:otherwise>
												<ctl:call-function name="ctl:getLogCache">
													<ctl:with-param name="id">selected</ctl:with-param>
												</ctl:call-function>
											</xsl:otherwise>
										</xsl:choose>
									</xsl:variable>
									<xsl:choose>
										<xsl:when test="count($selected/sel/*) gt 0">		
											<xsl:variable name="selectedWithSummary">
												<ctl:call-function name="wmtsFunctions:interfaceSummary">
													<ctl:with-param name="selected" select="$selected"/>
												</ctl:call-function>
											</xsl:variable>
		
											<ctl:call-function name="ctl:putLogCache">
												<ctl:with-param name="id">selected</ctl:with-param>
												<ctl:with-param name="xmlToCache" select="$selectedWithSummary"/>
											</ctl:call-function>
											<ctl:message>Completed test selecton - selected tests will now be run.</ctl:message>
		
											<!-- <xsl:message>selected <xsl:copy-of select="$selected"/></xsl:message> -->
											<ctl:call-function name="wmtsFunctions:printSelected">
												<ctl:with-param name="selected" select="$selectedWithSummary"/>
											</ctl:call-function>
		
											<ctl:message>calling wmtsFunctions:invokeSelectedTest in RedoFromCache mode</ctl:message>
											<xsl:variable name="testResults">
												<ctl:call-function name="wmtsFunctions:invokeSelectedTests">
													<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc/*"/>
													<ctl:with-param name="bootstrap" select="$bootstrap/*"/>
													<ctl:with-param name="selected" select="$selected"/>
												</ctl:call-function>
											</xsl:variable>
		
										</xsl:when>
										<xsl:otherwise>
											<ctl:message>No tests selected -- failed test selection</ctl:message>
											<ctl:fail/>
										</xsl:otherwise>
									</xsl:choose>
								</xsl:when>
								<xsl:otherwise>
									<ctl:message>Failed to retrieve bootstrap from cache - you must start a new test session.</ctl:message>
									<ctl:fail/>
								</xsl:otherwise>
							</xsl:choose>
						</xsl:when>
						<xsl:otherwise>
							<ctl:message>Failed to retrieve bootstrap wmts.capabilities.doc from cache - you must start a new test session.</ctl:message>
							<ctl:fail/>
						</xsl:otherwise>
					</xsl:choose>


				</xsl:when>
				<xsl:otherwise>
					<ctl:message>Mode is <xsl:value-of select="$mode"/> - get Capabilities Document, validate it, check Bootstrap Prerequisites, get Test Selections.</ctl:message>	
				   <!-- global wmts schema settings -->
				   <xsl:variable name="schemaRoot">
					   <xsl:choose>
						   <xsl:when test="te:isWeb() = 'true' ">
							   <xsl:text>../webapps/teamengine/WEB-INF/scripts/wmts-1.0.0-dev/resources/xsd/ogc/</xsl:text>
						   </xsl:when>
						   <xsl:otherwise>
							   <xsl:text>webapps/teamengine/WEB-INF/scripts/wmts-1.0.0-dev/resources/xsd/ogc/</xsl:text>
						   </xsl:otherwise>
					   </xsl:choose>
				   </xsl:variable>
				   <!-- change schemaRoot to http://schemas.opengis.net/ once TileMatrixLimits schema errors are fixed
				   <xsl:variable name="schemaRoot">http://schemas.opengis.net/</xsl:variable>  -->
				   <xsl:variable name="schemaEncoding">wmts</xsl:variable>
				   <xsl:variable name="schemaVersion">1.0</xsl:variable>
				   <xsl:variable name="schemaFilename">wmts.xsd</xsl:variable>
				   <xsl:variable name="wmtsSchemaPath" select="ctlFunctions:schemaPath($schemaRoot, $schemaEncoding, $schemaVersion, $schemaFilename)"/>
				   <!-- change wmtsSchemaType to string('url') once TileMatrixLimits schema errors are fixed -->
				   <xsl:variable name="wmtsSchemaType" select="string('file')"/>
				   
					<!-- prompt the tester for a capabilities document URL -->
					<xsl:variable name="form-values"> 
						<ctl:form>						
							<body>
								<h2 align="center">Compliance test suite for Web Map Tile Service (WMTS) 1.0</h2>
								<p/>
								<blockquote>
									<table width="600" border="0" padding="4" bgcolor="#00ffff" align="center">
										<tr>
											<th colspan="3" align="center">Service metadata and Test Options</th>
										</tr>
										<tr/>
										<tr>
											<td colspan="3" align="left">Please provide an OGC WMTS Server URL from which a capabilities document can be retrieved. </td>
										</tr>
										<tr/>
										<tr>
											<td colspan="3" align="left">For a WMTS server that supports KVP GET requests, the URL should be in this form:</td>
										</tr>
										<tr>
											<td/><td colspan="2" align="left">http://hostname/path?SERVICE=WMTS&amp;REQUEST=GetCapabilities&amp;VERSION=1.0.0</td>
										</tr>
										<tr/>
										<tr>
											<td colspan="3" align="left">For a WMTS server that supports RESTful requests, the URL should be in this form:</td>
										</tr>
										<tr>
											<td/><td colspan="2" align="left">http://hostname/path/wmts/1.0.0/WMTSCapabilities.xml</td>
										</tr>
										<tr>
											<td align="left" width="60">WMTS Service URL:</td>                        
											<td align="left" width="500">
												<input name="capabilities-url" size="128" onmouseover="status = 'Provide URL of an OGC WMTS Server'; return true;"
														type="text" 
														value="http://localhost:8080/teamengine/data/WMTScapabilitiesETS.xml"/> 
														<!--http://hostname/path ...-->
														<!-- http://localhost:8080/teamengine/data/WMTScapabilitiesETS.xml -->
														<!-- http://iws.erdas.com/ImageX/ecw_wmts.dll?service=WMTS&amp;request=getcapabilities&amp;version=1.0.0-->
														<!-- http://hexagon.intergraph.pl/sdiprowmtscite/service.svc/get?request=GetCapabilities&amp;service=WMTS -->
											</td>
											<td><input type="submit" value="OK" /></td>
										</tr>			
									</table>
								</blockquote>
							</body>
						</ctl:form>
					</xsl:variable>
					
					<xsl:variable name="wmts.capabilities.url" select="$form-values/values/value[@key='capabilities-url']"/>
					<xsl:variable name="isRESTfulURL" select="wwwFunctions:isRESTfulURL($wmts.capabilities.url)"/>
					<ctl:message select="'********************************************************'"/>
					
					<xsl:choose>
						<xsl:when test="not($isRESTfulURL = 'true')">
							<ctl:message>KVP Request for a Capabilities Document from the WMTS server: <xsl:value-of select="$wmts.capabilities.url"/></ctl:message>
							<xsl:value-of select="substring-before($wmts.capabilities.url,'?')"/>
						</xsl:when>
						<xsl:otherwise>
							<ctl:message>RESTful Request for a Capabilities Document from the WMTS server: <xsl:value-of select="$wmts.capabilities.url"/></ctl:message>
							<xsl:value-of select="$wmts.capabilities.url"/>
						</xsl:otherwise>
					</xsl:choose>
					
					<xsl:variable name="wmts.capabilities.doc.response">
						<ctl:request>
							<ctl:url>
								<xsl:value-of select="$wmts.capabilities.url"/>
							</ctl:url>
							<ctl:method>get</ctl:method>
							<parsers:HTTPParser/>
						</ctl:request>
					</xsl:variable>
					
					<xsl:choose>
						<xsl:when test="not($wmts.capabilities.doc.response/*)">
							<ctl:message>FAILURE: Missing or invalid GetCapabilities response entity contents.</ctl:message>
							<ctl:fail/>
						</xsl:when>
						<xsl:otherwise>
						<!-- 	
							<xsl:message>response <xsl:copy-of select="$wmts.capabilities.doc.response"/></xsl:message>
							<xsl:variable name="headers" select="$wmts.capabilities.doc.response/response/headers"/>  
							<xsl:message>headers <xsl:copy-of select="$headers"/></xsl:message>
						 -->
							<xsl:variable name="responseTime" select="$wmts.capabilities.doc.response/response/comment()"/>
							<ctl:message>Capabilities Document <xsl:value-of select="$responseTime"/></ctl:message>
							<xsl:variable name="lastModified" select="$wmts.capabilities.doc.response/response/headers/header[@name='Last-Modified']"/>
							<ctl:message>lastModified <xsl:value-of select="$lastModified"/></ctl:message>
							<xsl:variable name="wmts.capabilities.doc" select="$wmts.capabilities.doc.response/response/content"/>
							<!-- <xsl:message>capabilities <xsl:copy-of select="$wmts.capabilities.doc"/></xsl:message> -->
							<xsl:choose>
								<xsl:when test="not($wmts.capabilities.doc//wmts:Capabilities)">
									<ctl:message>FAILURE: Did not receive a wmts:Capabilities document! Skipping remaining tests.</ctl:message>	
									<ctl:fail/>
								</xsl:when>
								<xsl:otherwise>
									<!-- <ctl:message>NOT Validating Capabilities Document against its XML Schema... FOR DEVELPMENT, CHANGE ME</ctl:message> -->
									<ctl:message>Validating Capabilities Document against its XML Schema...</ctl:message>

									<ctl:call-function name="ctl:startStopwatch">
										<ctl:with-param name="watchName">capabilities.validation</ctl:with-param>
									</ctl:call-function>
									
									<!-- CHANGE ME to disable schema validation during development -->
									<xsl:variable name="results">
										<ctl:call-function name="ctlFunctions:XMLschemaValidate">
											<ctl:with-param name="doc"><xsl:copy-of select="$wmts.capabilities.doc/*"/></ctl:with-param>
											<ctl:with-param name="schemaPath" select="$wmtsSchemaPath"/>
										</ctl:call-function>
									</xsl:variable>
									
									<xsl:variable name="capabilities.validation.elapsed" select="ctl:elapsedTime('capabilities.validation')"/>
									<xsl:choose>
										<!-- <xsl:when test="not(true())"> uncomment me for development CHANGE ME-->
										<xsl:when test="count($results/*) &gt; 0"> 
											<ctl:message>Capabilities document failed schema validation; capabilities.validation.elapsed [<xsl:value-of select="$capabilities.validation.elapsed"/>] milliseconds</ctl:message>
											<ctl:message>results: <xsl:copy-of select="$results"/></ctl:message>
											<ctl:fail/> 
										</xsl:when>
										<xsl:otherwise>
											<ctl:message>capabilities.validation.elapsed [<xsl:value-of select="$capabilities.validation.elapsed"/>] milliseconds</ctl:message>
											<ctl:message>Capabilities response is valid, continuing...</ctl:message>
											<ctl:message select="'********************************************************'"/>
											
											<ctl:call-function name="ctl:putLogCache">
												<ctl:with-param name="id">capabilities</ctl:with-param>
												<ctl:with-param name="xmlToCache"><xsl:copy-of select="$wmts.capabilities.doc/*"/></ctl:with-param> 
											</ctl:call-function>

											<ctl:call-test name="wmtsBootstrap:main">
												<ctl:with-param name="wmts.capabilities.url" select="$wmts.capabilities.url"/>
												<ctl:with-param name="wmts.capabilities.doc"><xsl:copy-of select="$wmts.capabilities.doc/*"/></ctl:with-param>
												<ctl:with-param name="isRESTfulURL" select="$isRESTfulURL"/>
											</ctl:call-test> 
											<xsl:variable name="result"><ctl:getResult/></xsl:variable> 
											<ctl:message>wmts:main ctl:getResult after wmtsBootstrap:main: <xsl:value-of select="$result"/></ctl:message> 
											<xsl:choose>
												<xsl:when test="starts-with($result, 'Fail')">
													<ctl:message>WMTS ETS bootstrap failed -- no other tests will be run.</ctl:message>
												</xsl:when>
												<xsl:otherwise>
												
												<!-- <xsl:message><xsl:copy-of select="$wmts.capabilities.doc"/></xsl:message> -->
													<ctl:message>Checking prerequisites... </ctl:message>
													<ctl:call-function name="ctl:startStopwatch">
														<ctl:with-param name="watchName">check.prerequisites</ctl:with-param>
													</ctl:call-function>
												
													<xsl:variable name="bootstrap">
														<ctl:call-function name="wmtsBootstrap:bootstrap">
															<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc/*"/>
															<ctl:with-param name="wmtsSchemaPath" select="$wmtsSchemaPath"/>
															<ctl:with-param name="wmtsSchemaType" select="$wmtsSchemaType"/>
														</ctl:call-function>
													</xsl:variable>
													
													<xsl:variable name="check.prerequisites.elapsed" select="ctl:elapsedTime('check.prerequisites')"/>
													<ctl:message>check.prerequisites.elapsed [<xsl:value-of select="$check.prerequisites.elapsed"/>] milliseconds</ctl:message>
													
													<!-- bootstrap xml contains global variables for use in both test and redo from cache modes-->
													<ctl:call-function name="ctl:putLogCache">
														<ctl:with-param name="id">bootstrap</ctl:with-param>
														<ctl:with-param name="xmlToCache"><xsl:copy-of select="$bootstrap"/></ctl:with-param> 
													</ctl:call-function>
		
													 <xsl:choose>
														<xsl:when test="$bootstrap">
															<ctl:message>Completed prerequisite check:</ctl:message>
															<xsl:variable name="selected">
																<ctl:call-function name="wmts:testMenus">
																	<ctl:with-param name="bootstrap" select="$bootstrap/*"/>
																</ctl:call-function>
															</xsl:variable>
															<xsl:choose>
																<xsl:when test="count($selected/sel/*) gt 0">
																	<xsl:variable name="selectedWithSummary">
																		<ctl:call-function name="wmtsFunctions:interfaceSummary">
																			<ctl:with-param name="selected" select="$selected"/>
																		</ctl:call-function>
																	</xsl:variable>
																	
																	<ctl:call-function name="ctl:putLogCache">
																		<ctl:with-param name="id">selected</ctl:with-param>
																		<ctl:with-param name="xmlToCache" select="$selectedWithSummary"/>
																	</ctl:call-function>
		
																	<ctl:message>Completed test selecton - selected tests will now be run.</ctl:message>
																	<!-- <xsl:message>selected <xsl:copy-of select="$selected"/></xsl:message> -->
																	<ctl:call-function name="wmtsFunctions:printSelected">
																		<ctl:with-param name="selected" select="$selectedWithSummary"/>
																	</ctl:call-function>
		
																	<ctl:message>calling wmtsFunctions:invokeSelectedTests in Test mode</ctl:message>
																	<xsl:variable name="results">
																		<ctl:call-function name="wmtsFunctions:invokeSelectedTests">
																			<ctl:with-param name="wmts.capabilities.doc" select="$wmts.capabilities.doc/*"/>
																			<ctl:with-param name="bootstrap" select="$bootstrap/*"/>
																			<ctl:with-param name="selected" select="$selected"/>
																		</ctl:call-function>
																	</xsl:variable>
		
																</xsl:when>
																<xsl:otherwise>
																	<ctl:message>No tests selected -- failed test selection</ctl:message>
																	<ctl:fail/>
																</xsl:otherwise>
															</xsl:choose>
														</xsl:when>
														<xsl:otherwise>
															<ctl:message>Failed bootstrap</ctl:message>
															<ctl:fail/>
														</xsl:otherwise>
													</xsl:choose>
		
												</xsl:otherwise>
											</xsl:choose>
										</xsl:otherwise>
									</xsl:choose>
								</xsl:otherwise>
							</xsl:choose>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:otherwise>
			</xsl:choose>
			
			<xsl:variable name="wmts.main.elapsed" select="ctl:elapsedTime('wmts.main')"/>
			<ctl:message>wmts.main.elapsed [<xsl:value-of select="$wmts.main.elapsed"/>] milliseconds</ctl:message>
		</ctl:code>
	</ctl:test>
	

</ctl:package>